
Ver1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001cb6  00001d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  00800064  00800064  00001d4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d4e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00001d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a06  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000042a  00000000  00000000  00003894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000769  00000000  00000000  00003cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  00004428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e3  00000000  00000000  00004798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ca  00000000  00000000  00004d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00005645  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__ctors_end>
       4:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_1>
       8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
       c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      10:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      14:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      18:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      1c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      20:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      24:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      28:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      2c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      30:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      34:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      38:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      3c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      40:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      44:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      48:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      4c:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__vector_19>
      50:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      54:	82 07       	cpc	r24, r18
      56:	3a 08       	sbc	r3, r10
      58:	9a 08       	sbc	r9, r10
      5a:	d6 0b       	sbc	r29, r22
      5c:	d6 0b       	sbc	r29, r22
      5e:	d6 0b       	sbc	r29, r22
      60:	d6 0b       	sbc	r29, r22
      62:	d6 0b       	sbc	r29, r22
      64:	d6 0b       	sbc	r29, r22
      66:	d6 0b       	sbc	r29, r22
      68:	d6 0b       	sbc	r29, r22
      6a:	f4 08       	sbc	r15, r4
      6c:	0e 09       	sbc	r16, r14
      6e:	6c 09       	sbc	r22, r12
      70:	d6 0b       	sbc	r29, r22
      72:	d6 0b       	sbc	r29, r22
      74:	0f 0a       	sbc	r0, r31
      76:	28 0a       	sbc	r2, r24
      78:	d6 0b       	sbc	r29, r22
      7a:	d6 0b       	sbc	r29, r22
      7c:	d6 0b       	sbc	r29, r22
      7e:	41 0a       	sbc	r4, r17
      80:	58 0a       	sbc	r5, r24
      82:	d6 0b       	sbc	r29, r22
      84:	d6 0b       	sbc	r29, r22
      86:	d6 0b       	sbc	r29, r22
      88:	d6 0b       	sbc	r29, r22
      8a:	d6 0b       	sbc	r29, r22
      8c:	d6 0b       	sbc	r29, r22
      8e:	d6 0b       	sbc	r29, r22
      90:	d6 0b       	sbc	r29, r22
      92:	67 0a       	sbc	r6, r23
      94:	7a 0a       	sbc	r7, r26
      96:	d6 0b       	sbc	r29, r22
      98:	d6 0b       	sbc	r29, r22
      9a:	d6 0b       	sbc	r29, r22
      9c:	d6 0b       	sbc	r29, r22
      9e:	d6 0b       	sbc	r29, r22
      a0:	d6 0b       	sbc	r29, r22
      a2:	d6 0b       	sbc	r29, r22
      a4:	d6 0b       	sbc	r29, r22
      a6:	89 0a       	sbc	r8, r25
      a8:	bf 0a       	sbc	r11, r31
      aa:	d8 0a       	sbc	r13, r24
      ac:	d6 0b       	sbc	r29, r22
      ae:	d6 0b       	sbc	r29, r22
      b0:	d6 0b       	sbc	r29, r22
      b2:	d6 0b       	sbc	r29, r22
      b4:	d6 0b       	sbc	r29, r22
      b6:	d6 0b       	sbc	r29, r22
      b8:	d6 0b       	sbc	r29, r22
      ba:	11 0b       	sbc	r17, r17
      bc:	46 0b       	sbc	r20, r22
      be:	5f 0b       	sbc	r21, r31
      c0:	d6 0b       	sbc	r29, r22
      c2:	d6 0b       	sbc	r29, r22
      c4:	d6 0b       	sbc	r29, r22
      c6:	d6 0b       	sbc	r29, r22
      c8:	d6 0b       	sbc	r29, r22
      ca:	d6 0b       	sbc	r29, r22
      cc:	d6 0b       	sbc	r29, r22
      ce:	d6 0b       	sbc	r29, r22
      d0:	d6 0b       	sbc	r29, r22
      d2:	98 0b       	sbc	r25, r24
      d4:	f2 07       	cpc	r31, r18
      d6:	75 07       	cpc	r23, r21
      d8:	dc 07       	cpc	r29, r28
      da:	75 07       	cpc	r23, r21
      dc:	e7 07       	cpc	r30, r23
      de:	75 07       	cpc	r23, r21
      e0:	c6 07       	cpc	r28, r22
      e2:	75 07       	cpc	r23, r21
      e4:	75 07       	cpc	r23, r21
      e6:	75 07       	cpc	r23, r21
      e8:	d1 07       	cpc	r29, r17
      ea:	75 07       	cpc	r23, r21
      ec:	dc 07       	cpc	r29, r28
      ee:	75 07       	cpc	r23, r21
      f0:	00 08       	sbc	r0, r0
      f2:	75 07       	cpc	r23, r21
      f4:	75 07       	cpc	r23, r21
      f6:	75 07       	cpc	r23, r21
      f8:	75 07       	cpc	r23, r21
      fa:	75 07       	cpc	r23, r21
      fc:	75 07       	cpc	r23, r21
      fe:	75 07       	cpc	r23, r21
     100:	bb 07       	cpc	r27, r27
     102:	75 07       	cpc	r23, r21
     104:	75 07       	cpc	r23, r21
     106:	75 07       	cpc	r23, r21
     108:	c6 07       	cpc	r28, r22
     10a:	75 07       	cpc	r23, r21
     10c:	75 07       	cpc	r23, r21
     10e:	75 07       	cpc	r23, r21
     110:	16 08       	sbc	r1, r6
     112:	75 07       	cpc	r23, r21
     114:	75 07       	cpc	r23, r21
     116:	75 07       	cpc	r23, r21
     118:	75 07       	cpc	r23, r21
     11a:	75 07       	cpc	r23, r21
     11c:	75 07       	cpc	r23, r21
     11e:	75 07       	cpc	r23, r21
     120:	75 07       	cpc	r23, r21
     122:	75 07       	cpc	r23, r21
     124:	75 07       	cpc	r23, r21
     126:	75 07       	cpc	r23, r21
     128:	75 07       	cpc	r23, r21
     12a:	75 07       	cpc	r23, r21
     12c:	75 07       	cpc	r23, r21
     12e:	75 07       	cpc	r23, r21
     130:	0b 08       	sbc	r0, r11
     132:	75 07       	cpc	r23, r21
     134:	75 07       	cpc	r23, r21
     136:	75 07       	cpc	r23, r21
     138:	75 07       	cpc	r23, r21
     13a:	75 07       	cpc	r23, r21
     13c:	75 07       	cpc	r23, r21
     13e:	75 07       	cpc	r23, r21
     140:	00 08       	sbc	r0, r0
     142:	75 07       	cpc	r23, r21
     144:	75 07       	cpc	r23, r21
     146:	75 07       	cpc	r23, r21
     148:	75 07       	cpc	r23, r21
     14a:	75 07       	cpc	r23, r21
     14c:	75 07       	cpc	r23, r21
     14e:	75 07       	cpc	r23, r21
     150:	2c 08       	sbc	r2, r12
     152:	75 07       	cpc	r23, r21
     154:	75 07       	cpc	r23, r21
     156:	75 07       	cpc	r23, r21
     158:	75 07       	cpc	r23, r21
     15a:	75 07       	cpc	r23, r21
     15c:	75 07       	cpc	r23, r21
     15e:	75 07       	cpc	r23, r21
     160:	75 07       	cpc	r23, r21
     162:	75 07       	cpc	r23, r21
     164:	75 07       	cpc	r23, r21
     166:	75 07       	cpc	r23, r21
     168:	75 07       	cpc	r23, r21
     16a:	75 07       	cpc	r23, r21
     16c:	75 07       	cpc	r23, r21
     16e:	75 07       	cpc	r23, r21
     170:	75 07       	cpc	r23, r21
     172:	75 07       	cpc	r23, r21
     174:	75 07       	cpc	r23, r21
     176:	75 07       	cpc	r23, r21
     178:	75 07       	cpc	r23, r21
     17a:	75 07       	cpc	r23, r21
     17c:	75 07       	cpc	r23, r21
     17e:	75 07       	cpc	r23, r21
     180:	75 07       	cpc	r23, r21
     182:	75 07       	cpc	r23, r21
     184:	75 07       	cpc	r23, r21
     186:	75 07       	cpc	r23, r21
     188:	75 07       	cpc	r23, r21
     18a:	75 07       	cpc	r23, r21
     18c:	75 07       	cpc	r23, r21
     18e:	75 07       	cpc	r23, r21
     190:	21 08       	sbc	r2, r1
     192:	75 07       	cpc	r23, r21
     194:	75 07       	cpc	r23, r21
     196:	75 07       	cpc	r23, r21
     198:	75 07       	cpc	r23, r21
     19a:	75 07       	cpc	r23, r21
     19c:	75 07       	cpc	r23, r21
     19e:	75 07       	cpc	r23, r21
     1a0:	75 07       	cpc	r23, r21
     1a2:	75 07       	cpc	r23, r21
     1a4:	75 07       	cpc	r23, r21
     1a6:	75 07       	cpc	r23, r21
     1a8:	75 07       	cpc	r23, r21
     1aa:	75 07       	cpc	r23, r21
     1ac:	75 07       	cpc	r23, r21
     1ae:	75 07       	cpc	r23, r21
     1b0:	16 08       	sbc	r1, r6
     1b2:	4e 09       	sbc	r20, r14
     1b4:	75 07       	cpc	r23, r21
     1b6:	44 09       	sbc	r20, r4
     1b8:	75 07       	cpc	r23, r21
     1ba:	49 09       	sbc	r20, r9
     1bc:	75 07       	cpc	r23, r21
     1be:	3a 09       	sbc	r19, r10
     1c0:	75 07       	cpc	r23, r21
     1c2:	75 07       	cpc	r23, r21
     1c4:	75 07       	cpc	r23, r21
     1c6:	3f 09       	sbc	r19, r15
     1c8:	75 07       	cpc	r23, r21
     1ca:	44 09       	sbc	r20, r4
     1cc:	75 07       	cpc	r23, r21
     1ce:	53 09       	sbc	r21, r3
     1d0:	75 07       	cpc	r23, r21
     1d2:	75 07       	cpc	r23, r21
     1d4:	75 07       	cpc	r23, r21
     1d6:	75 07       	cpc	r23, r21
     1d8:	75 07       	cpc	r23, r21
     1da:	75 07       	cpc	r23, r21
     1dc:	75 07       	cpc	r23, r21
     1de:	35 09       	sbc	r19, r5
     1e0:	75 07       	cpc	r23, r21
     1e2:	75 07       	cpc	r23, r21
     1e4:	75 07       	cpc	r23, r21
     1e6:	3a 09       	sbc	r19, r10
     1e8:	75 07       	cpc	r23, r21
     1ea:	75 07       	cpc	r23, r21
     1ec:	75 07       	cpc	r23, r21
     1ee:	5d 09       	sbc	r21, r13
     1f0:	75 07       	cpc	r23, r21
     1f2:	75 07       	cpc	r23, r21
     1f4:	75 07       	cpc	r23, r21
     1f6:	75 07       	cpc	r23, r21
     1f8:	75 07       	cpc	r23, r21
     1fa:	75 07       	cpc	r23, r21
     1fc:	75 07       	cpc	r23, r21
     1fe:	75 07       	cpc	r23, r21
     200:	75 07       	cpc	r23, r21
     202:	75 07       	cpc	r23, r21
     204:	75 07       	cpc	r23, r21
     206:	75 07       	cpc	r23, r21
     208:	75 07       	cpc	r23, r21
     20a:	75 07       	cpc	r23, r21
     20c:	75 07       	cpc	r23, r21
     20e:	58 09       	sbc	r21, r8
     210:	75 07       	cpc	r23, r21
     212:	75 07       	cpc	r23, r21
     214:	75 07       	cpc	r23, r21
     216:	75 07       	cpc	r23, r21
     218:	75 07       	cpc	r23, r21
     21a:	75 07       	cpc	r23, r21
     21c:	75 07       	cpc	r23, r21
     21e:	53 09       	sbc	r21, r3
     220:	75 07       	cpc	r23, r21
     222:	75 07       	cpc	r23, r21
     224:	75 07       	cpc	r23, r21
     226:	75 07       	cpc	r23, r21
     228:	75 07       	cpc	r23, r21
     22a:	75 07       	cpc	r23, r21
     22c:	75 07       	cpc	r23, r21
     22e:	67 09       	sbc	r22, r7
     230:	75 07       	cpc	r23, r21
     232:	75 07       	cpc	r23, r21
     234:	75 07       	cpc	r23, r21
     236:	75 07       	cpc	r23, r21
     238:	75 07       	cpc	r23, r21
     23a:	75 07       	cpc	r23, r21
     23c:	75 07       	cpc	r23, r21
     23e:	75 07       	cpc	r23, r21
     240:	75 07       	cpc	r23, r21
     242:	75 07       	cpc	r23, r21
     244:	75 07       	cpc	r23, r21
     246:	75 07       	cpc	r23, r21
     248:	75 07       	cpc	r23, r21
     24a:	75 07       	cpc	r23, r21
     24c:	75 07       	cpc	r23, r21
     24e:	75 07       	cpc	r23, r21
     250:	75 07       	cpc	r23, r21
     252:	75 07       	cpc	r23, r21
     254:	75 07       	cpc	r23, r21
     256:	75 07       	cpc	r23, r21
     258:	75 07       	cpc	r23, r21
     25a:	75 07       	cpc	r23, r21
     25c:	75 07       	cpc	r23, r21
     25e:	75 07       	cpc	r23, r21
     260:	75 07       	cpc	r23, r21
     262:	75 07       	cpc	r23, r21
     264:	75 07       	cpc	r23, r21
     266:	75 07       	cpc	r23, r21
     268:	75 07       	cpc	r23, r21
     26a:	75 07       	cpc	r23, r21
     26c:	75 07       	cpc	r23, r21
     26e:	62 09       	sbc	r22, r2
     270:	75 07       	cpc	r23, r21
     272:	75 07       	cpc	r23, r21
     274:	75 07       	cpc	r23, r21
     276:	75 07       	cpc	r23, r21
     278:	75 07       	cpc	r23, r21
     27a:	75 07       	cpc	r23, r21
     27c:	75 07       	cpc	r23, r21
     27e:	75 07       	cpc	r23, r21
     280:	75 07       	cpc	r23, r21
     282:	75 07       	cpc	r23, r21
     284:	75 07       	cpc	r23, r21
     286:	75 07       	cpc	r23, r21
     288:	75 07       	cpc	r23, r21
     28a:	75 07       	cpc	r23, r21
     28c:	75 07       	cpc	r23, r21
     28e:	5d 09       	sbc	r21, r13
     290:	f1 09       	sbc	r31, r1
     292:	75 07       	cpc	r23, r21
     294:	e7 09       	sbc	r30, r7
     296:	75 07       	cpc	r23, r21
     298:	ec 09       	sbc	r30, r12
     29a:	75 07       	cpc	r23, r21
     29c:	dd 09       	sbc	r29, r13
     29e:	75 07       	cpc	r23, r21
     2a0:	75 07       	cpc	r23, r21
     2a2:	75 07       	cpc	r23, r21
     2a4:	e2 09       	sbc	r30, r2
     2a6:	75 07       	cpc	r23, r21
     2a8:	e7 09       	sbc	r30, r7
     2aa:	75 07       	cpc	r23, r21
     2ac:	f6 09       	sbc	r31, r6
     2ae:	75 07       	cpc	r23, r21
     2b0:	75 07       	cpc	r23, r21
     2b2:	75 07       	cpc	r23, r21
     2b4:	75 07       	cpc	r23, r21
     2b6:	75 07       	cpc	r23, r21
     2b8:	75 07       	cpc	r23, r21
     2ba:	75 07       	cpc	r23, r21
     2bc:	d8 09       	sbc	r29, r8
     2be:	75 07       	cpc	r23, r21
     2c0:	75 07       	cpc	r23, r21
     2c2:	75 07       	cpc	r23, r21
     2c4:	dd 09       	sbc	r29, r13
     2c6:	75 07       	cpc	r23, r21
     2c8:	75 07       	cpc	r23, r21
     2ca:	75 07       	cpc	r23, r21
     2cc:	00 0a       	sbc	r0, r16
     2ce:	75 07       	cpc	r23, r21
     2d0:	75 07       	cpc	r23, r21
     2d2:	75 07       	cpc	r23, r21
     2d4:	75 07       	cpc	r23, r21
     2d6:	75 07       	cpc	r23, r21
     2d8:	75 07       	cpc	r23, r21
     2da:	75 07       	cpc	r23, r21
     2dc:	75 07       	cpc	r23, r21
     2de:	75 07       	cpc	r23, r21
     2e0:	75 07       	cpc	r23, r21
     2e2:	75 07       	cpc	r23, r21
     2e4:	75 07       	cpc	r23, r21
     2e6:	75 07       	cpc	r23, r21
     2e8:	75 07       	cpc	r23, r21
     2ea:	75 07       	cpc	r23, r21
     2ec:	fb 09       	sbc	r31, r11
     2ee:	75 07       	cpc	r23, r21
     2f0:	75 07       	cpc	r23, r21
     2f2:	75 07       	cpc	r23, r21
     2f4:	75 07       	cpc	r23, r21
     2f6:	75 07       	cpc	r23, r21
     2f8:	75 07       	cpc	r23, r21
     2fa:	75 07       	cpc	r23, r21
     2fc:	f6 09       	sbc	r31, r6
     2fe:	75 07       	cpc	r23, r21
     300:	75 07       	cpc	r23, r21
     302:	75 07       	cpc	r23, r21
     304:	75 07       	cpc	r23, r21
     306:	75 07       	cpc	r23, r21
     308:	75 07       	cpc	r23, r21
     30a:	75 07       	cpc	r23, r21
     30c:	0a 0a       	sbc	r0, r26
     30e:	75 07       	cpc	r23, r21
     310:	75 07       	cpc	r23, r21
     312:	75 07       	cpc	r23, r21
     314:	75 07       	cpc	r23, r21
     316:	75 07       	cpc	r23, r21
     318:	75 07       	cpc	r23, r21
     31a:	75 07       	cpc	r23, r21
     31c:	75 07       	cpc	r23, r21
     31e:	75 07       	cpc	r23, r21
     320:	75 07       	cpc	r23, r21
     322:	75 07       	cpc	r23, r21
     324:	75 07       	cpc	r23, r21
     326:	75 07       	cpc	r23, r21
     328:	75 07       	cpc	r23, r21
     32a:	75 07       	cpc	r23, r21
     32c:	75 07       	cpc	r23, r21
     32e:	75 07       	cpc	r23, r21
     330:	75 07       	cpc	r23, r21
     332:	75 07       	cpc	r23, r21
     334:	75 07       	cpc	r23, r21
     336:	75 07       	cpc	r23, r21
     338:	75 07       	cpc	r23, r21
     33a:	75 07       	cpc	r23, r21
     33c:	75 07       	cpc	r23, r21
     33e:	75 07       	cpc	r23, r21
     340:	75 07       	cpc	r23, r21
     342:	75 07       	cpc	r23, r21
     344:	75 07       	cpc	r23, r21
     346:	75 07       	cpc	r23, r21
     348:	75 07       	cpc	r23, r21
     34a:	75 07       	cpc	r23, r21
     34c:	05 0a       	sbc	r0, r21
     34e:	75 07       	cpc	r23, r21
     350:	75 07       	cpc	r23, r21
     352:	75 07       	cpc	r23, r21
     354:	75 07       	cpc	r23, r21
     356:	75 07       	cpc	r23, r21
     358:	75 07       	cpc	r23, r21
     35a:	75 07       	cpc	r23, r21
     35c:	75 07       	cpc	r23, r21
     35e:	75 07       	cpc	r23, r21
     360:	75 07       	cpc	r23, r21
     362:	75 07       	cpc	r23, r21
     364:	75 07       	cpc	r23, r21
     366:	75 07       	cpc	r23, r21
     368:	75 07       	cpc	r23, r21
     36a:	75 07       	cpc	r23, r21
     36c:	00 0a       	sbc	r0, r16

0000036e <__ctors_end>:
     36e:	11 24       	eor	r1, r1
     370:	1f be       	out	0x3f, r1	; 63
     372:	cf e5       	ldi	r28, 0x5F	; 95
     374:	d4 e0       	ldi	r29, 0x04	; 4
     376:	de bf       	out	0x3e, r29	; 62
     378:	cd bf       	out	0x3d, r28	; 61

0000037a <__do_copy_data>:
     37a:	10 e0       	ldi	r17, 0x00	; 0
     37c:	a0 e6       	ldi	r26, 0x60	; 96
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	e6 eb       	ldi	r30, 0xB6	; 182
     382:	fc e1       	ldi	r31, 0x1C	; 28
     384:	02 c0       	rjmp	.+4      	; 0x38a <__do_copy_data+0x10>
     386:	05 90       	lpm	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	a4 36       	cpi	r26, 0x64	; 100
     38c:	b1 07       	cpc	r27, r17
     38e:	d9 f7       	brne	.-10     	; 0x386 <__do_copy_data+0xc>

00000390 <__do_clear_bss>:
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	a4 e6       	ldi	r26, 0x64	; 100
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	01 c0       	rjmp	.+2      	; 0x39a <.do_clear_bss_start>

00000398 <.do_clear_bss_loop>:
     398:	1d 92       	st	X+, r1

0000039a <.do_clear_bss_start>:
     39a:	a3 3b       	cpi	r26, 0xB3	; 179
     39c:	b2 07       	cpc	r27, r18
     39e:	e1 f7       	brne	.-8      	; 0x398 <.do_clear_bss_loop>
     3a0:	0e 94 24 07 	call	0xe48	; 0xe48 <main>
     3a4:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <_exit>

000003a8 <__bad_interrupt>:
     3a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ac <_Z10get_buttonh>:
uint8_t cSpeed = 0xff, incCounter = 0;
int16_t cSpeedDiff = 0;

/* -------------------- BUTTON + SWITCH -------------------- */
uint8_t get_button(uint8_t keyid)
{
     3ac:	98 2f       	mov	r25, r24
	if ((PINB & 0x0e) != 0x0e)
     3ae:	86 b3       	in	r24, 0x16	; 22
     3b0:	8e 70       	andi	r24, 0x0E	; 14
     3b2:	8e 30       	cpi	r24, 0x0E	; 14
     3b4:	81 f0       	breq	.+32     	; 0x3d6 <_Z10get_buttonh+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b6:	2f ef       	ldi	r18, 0xFF	; 255
     3b8:	37 ee       	ldi	r19, 0xE7	; 231
     3ba:	83 e0       	ldi	r24, 0x03	; 3
     3bc:	21 50       	subi	r18, 0x01	; 1
     3be:	30 40       	sbci	r19, 0x00	; 0
     3c0:	80 40       	sbci	r24, 0x00	; 0
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <_Z10get_buttonh+0x10>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <_Z10get_buttonh+0x1a>
     3c6:	00 00       	nop
	{
		_delay_ms(80);
		if ((PINB|keyid) == keyid) return 1;
     3c8:	26 b3       	in	r18, 0x16	; 22
     3ca:	29 2b       	or	r18, r25
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	92 17       	cp	r25, r18
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <_Z10get_buttonh+0x2c>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	08 95       	ret
	}
	return 0;
     3d6:	80 e0       	ldi	r24, 0x00	; 0
}
     3d8:	08 95       	ret

000003da <_Z10get_switchv>:

uint8_t get_switch()
{
	uint8_t x=0;
	x = ~PINC;
     3da:	83 b3       	in	r24, 0x13	; 19
     3dc:	80 95       	com	r24
	x = x & 0b00000011;
	return x;
}
     3de:	83 70       	andi	r24, 0x03	; 3
     3e0:	08 95       	ret

000003e2 <_Z11get_switch2v>:

uint8_t get_switch2()
{
	uint8_t x=0;
	x = ~PINC;
     3e2:	83 b3       	in	r24, 0x13	; 19
     3e4:	80 95       	com	r24
	x = x & 0b00000100;
	return x;
}
     3e6:	84 70       	andi	r24, 0x04	; 4
     3e8:	08 95       	ret

000003ea <_Z9cal_ratiov>:
	velocity = veloc;
}

void cal_ratio( void )
{
	cnt_ratio++;
     3ea:	80 91 7a 00 	lds	r24, 0x007A
     3ee:	8f 5f       	subi	r24, 0xFF	; 255
     3f0:	80 93 7a 00 	sts	0x007A, r24
	if (cnt_ratio >= 20) /* 20ms */
     3f4:	84 31       	cpi	r24, 0x14	; 20
     3f6:	08 f4       	brcc	.+2      	; 0x3fa <_Z9cal_ratiov+0x10>
     3f8:	d6 c0       	rjmp	.+428    	; 0x5a6 <__stack+0x147>
	{
		if (velocity < 0)
     3fa:	80 91 7b 00 	lds	r24, 0x007B
     3fe:	90 91 7c 00 	lds	r25, 0x007C
     402:	99 23       	and	r25, r25
     404:	8c f4       	brge	.+34     	; 0x428 <_Z9cal_ratiov+0x3e>
		{
			ratio = ratio_base;
     406:	80 91 74 00 	lds	r24, 0x0074
     40a:	90 91 75 00 	lds	r25, 0x0075
     40e:	a0 91 76 00 	lds	r26, 0x0076
     412:	b0 91 77 00 	lds	r27, 0x0077
     416:	80 93 70 00 	sts	0x0070, r24
     41a:	90 93 71 00 	sts	0x0071, r25
     41e:	a0 93 72 00 	sts	0x0072, r26
     422:	b0 93 73 00 	sts	0x0073, r27
     426:	9f c0       	rjmp	.+318    	; 0x566 <__stack+0x107>
		}
		else
		{
			if      (pulse_ratio < velocity / 2)    ratio = ratio_base + 0.3;
     428:	9c 01       	movw	r18, r24
     42a:	99 23       	and	r25, r25
     42c:	14 f4       	brge	.+4      	; 0x432 <_Z9cal_ratiov+0x48>
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	a9 01       	movw	r20, r18
     434:	55 95       	asr	r21
     436:	47 95       	ror	r20
     438:	20 91 78 00 	lds	r18, 0x0078
     43c:	30 91 79 00 	lds	r19, 0x0079
     440:	24 17       	cp	r18, r20
     442:	35 07       	cpc	r19, r21
     444:	bc f4       	brge	.+46     	; 0x474 <__stack+0x15>
     446:	2a e9       	ldi	r18, 0x9A	; 154
     448:	39 e9       	ldi	r19, 0x99	; 153
     44a:	49 e9       	ldi	r20, 0x99	; 153
     44c:	5e e3       	ldi	r21, 0x3E	; 62
     44e:	60 91 74 00 	lds	r22, 0x0074
     452:	70 91 75 00 	lds	r23, 0x0075
     456:	80 91 76 00 	lds	r24, 0x0076
     45a:	90 91 77 00 	lds	r25, 0x0077
     45e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     462:	60 93 70 00 	sts	0x0070, r22
     466:	70 93 71 00 	sts	0x0071, r23
     46a:	80 93 72 00 	sts	0x0072, r24
     46e:	90 93 73 00 	sts	0x0073, r25
     472:	5e c0       	rjmp	.+188    	; 0x530 <__stack+0xd1>
			else if (pulse_ratio < velocity)        ratio = ratio_base + 0.1;
     474:	28 17       	cp	r18, r24
     476:	39 07       	cpc	r19, r25
     478:	bc f4       	brge	.+46     	; 0x4a8 <__stack+0x49>
     47a:	2d ec       	ldi	r18, 0xCD	; 205
     47c:	3c ec       	ldi	r19, 0xCC	; 204
     47e:	4c ec       	ldi	r20, 0xCC	; 204
     480:	5d e3       	ldi	r21, 0x3D	; 61
     482:	60 91 74 00 	lds	r22, 0x0074
     486:	70 91 75 00 	lds	r23, 0x0075
     48a:	80 91 76 00 	lds	r24, 0x0076
     48e:	90 91 77 00 	lds	r25, 0x0077
     492:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     496:	60 93 70 00 	sts	0x0070, r22
     49a:	70 93 71 00 	sts	0x0071, r23
     49e:	80 93 72 00 	sts	0x0072, r24
     4a2:	90 93 73 00 	sts	0x0073, r25
     4a6:	44 c0       	rjmp	.+136    	; 0x530 <__stack+0xd1>
			else if (pulse_ratio > velocity)        ratio = ratio_base - 0.35;
     4a8:	82 17       	cp	r24, r18
     4aa:	93 07       	cpc	r25, r19
     4ac:	bc f4       	brge	.+46     	; 0x4dc <__stack+0x7d>
     4ae:	23 e3       	ldi	r18, 0x33	; 51
     4b0:	33 e3       	ldi	r19, 0x33	; 51
     4b2:	43 eb       	ldi	r20, 0xB3	; 179
     4b4:	5e e3       	ldi	r21, 0x3E	; 62
     4b6:	60 91 74 00 	lds	r22, 0x0074
     4ba:	70 91 75 00 	lds	r23, 0x0075
     4be:	80 91 76 00 	lds	r24, 0x0076
     4c2:	90 91 77 00 	lds	r25, 0x0077
     4c6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     4ca:	60 93 70 00 	sts	0x0070, r22
     4ce:	70 93 71 00 	sts	0x0071, r23
     4d2:	80 93 72 00 	sts	0x0072, r24
     4d6:	90 93 73 00 	sts	0x0073, r25
     4da:	2a c0       	rjmp	.+84     	; 0x530 <__stack+0xd1>
			else if (pulse_ratio > velocity / 2)    ratio = ratio_base - 0.25;
     4dc:	42 17       	cp	r20, r18
     4de:	53 07       	cpc	r21, r19
     4e0:	bc f4       	brge	.+46     	; 0x510 <__stack+0xb1>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e8       	ldi	r20, 0x80	; 128
     4e8:	5e e3       	ldi	r21, 0x3E	; 62
     4ea:	60 91 74 00 	lds	r22, 0x0074
     4ee:	70 91 75 00 	lds	r23, 0x0075
     4f2:	80 91 76 00 	lds	r24, 0x0076
     4f6:	90 91 77 00 	lds	r25, 0x0077
     4fa:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     4fe:	60 93 70 00 	sts	0x0070, r22
     502:	70 93 71 00 	sts	0x0071, r23
     506:	80 93 72 00 	sts	0x0072, r24
     50a:	90 93 73 00 	sts	0x0073, r25
     50e:	10 c0       	rjmp	.+32     	; 0x530 <__stack+0xd1>
			else ratio = ratio_base;
     510:	80 91 74 00 	lds	r24, 0x0074
     514:	90 91 75 00 	lds	r25, 0x0075
     518:	a0 91 76 00 	lds	r26, 0x0076
     51c:	b0 91 77 00 	lds	r27, 0x0077
     520:	80 93 70 00 	sts	0x0070, r24
     524:	90 93 71 00 	sts	0x0071, r25
     528:	a0 93 72 00 	sts	0x0072, r26
     52c:	b0 93 73 00 	sts	0x0073, r27
			
			if (ratio <= 0) ratio = 0.1;
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	a9 01       	movw	r20, r18
     536:	60 91 70 00 	lds	r22, 0x0070
     53a:	70 91 71 00 	lds	r23, 0x0071
     53e:	80 91 72 00 	lds	r24, 0x0072
     542:	90 91 73 00 	lds	r25, 0x0073
     546:	0e 94 3e 0c 	call	0x187c	; 0x187c <__cmpsf2>
     54a:	18 16       	cp	r1, r24
     54c:	64 f0       	brlt	.+24     	; 0x566 <__stack+0x107>
     54e:	8d ec       	ldi	r24, 0xCD	; 205
     550:	9c ec       	ldi	r25, 0xCC	; 204
     552:	ac ec       	ldi	r26, 0xCC	; 204
     554:	bd e3       	ldi	r27, 0x3D	; 61
     556:	80 93 70 00 	sts	0x0070, r24
     55a:	90 93 71 00 	sts	0x0071, r25
     55e:	a0 93 72 00 	sts	0x0072, r26
     562:	b0 93 73 00 	sts	0x0073, r27
		}
		
		cSpeedDiff = pulse_ratio - cSpeed;
     566:	80 91 78 00 	lds	r24, 0x0078
     56a:	90 91 79 00 	lds	r25, 0x0079
     56e:	20 91 61 00 	lds	r18, 0x0061
     572:	ac 01       	movw	r20, r24
     574:	42 1b       	sub	r20, r18
     576:	51 09       	sbc	r21, r1
     578:	50 93 6a 00 	sts	0x006A, r21
     57c:	40 93 69 00 	sts	0x0069, r20
		if (cSpeedDiff > 0) incCounter++;
     580:	14 16       	cp	r1, r20
     582:	15 06       	cpc	r1, r21
     584:	34 f4       	brge	.+12     	; 0x592 <__stack+0x133>
     586:	20 91 6b 00 	lds	r18, 0x006B
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	20 93 6b 00 	sts	0x006B, r18
     590:	02 c0       	rjmp	.+4      	; 0x596 <__stack+0x137>
		else incCounter = 0;
     592:	10 92 6b 00 	sts	0x006B, r1
		cSpeed = pulse_ratio;
     596:	80 93 61 00 	sts	0x0061, r24
		
		pulse_ratio = 0;
     59a:	10 92 79 00 	sts	0x0079, r1
     59e:	10 92 78 00 	sts	0x0078, r1
		cnt_ratio = 0;
     5a2:	10 92 7a 00 	sts	0x007A, r1
     5a6:	08 95       	ret

000005a8 <_Z6handlei>:
	}
	return false;
}

void handle(int goc)
{
     5a8:	85 36       	cpi	r24, 0x65	; 101
     5aa:	2f ef       	ldi	r18, 0xFF	; 255
     5ac:	92 07       	cpc	r25, r18
     5ae:	14 f4       	brge	.+4      	; 0x5b4 <_Z6handlei+0xc>
     5b0:	85 e6       	ldi	r24, 0x65	; 101
     5b2:	9f ef       	ldi	r25, 0xFF	; 255
     5b4:	8c 39       	cpi	r24, 0x9C	; 156
     5b6:	91 05       	cpc	r25, r1
     5b8:	14 f0       	brlt	.+4      	; 0x5be <_Z6handlei+0x16>
     5ba:	8b e9       	ldi	r24, 0x9B	; 155
     5bc:	90 e0       	ldi	r25, 0x00	; 0
	if      (goc > SERVO_ANGLE_MAX)  goc =  SERVO_ANGLE_MAX;
	else if (goc < -SERVO_ANGLE_MAX) goc = -SERVO_ANGLE_MAX;
	
	OCR1A = SERVO_CENTER + (goc * STEP);
     5be:	9c 01       	movw	r18, r24
     5c0:	22 0f       	add	r18, r18
     5c2:	33 1f       	adc	r19, r19
     5c4:	22 0f       	add	r18, r18
     5c6:	33 1f       	adc	r19, r19
     5c8:	82 0f       	add	r24, r18
     5ca:	93 1f       	adc	r25, r19
     5cc:	20 91 62 00 	lds	r18, 0x0062
     5d0:	30 91 63 00 	lds	r19, 0x0063
     5d4:	82 0f       	add	r24, r18
     5d6:	93 1f       	adc	r25, r19
     5d8:	9b bd       	out	0x2b, r25	; 43
     5da:	8a bd       	out	0x2a, r24	; 42
     5dc:	08 95       	ret

000005de <_Z5speedii>:
}

void speed(int left, int right)
{
     5de:	8f 92       	push	r8
     5e0:	9f 92       	push	r9
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	8b 01       	movw	r16, r22
	left  = left  *  ratio;
     5f8:	80 90 70 00 	lds	r8, 0x0070
     5fc:	90 90 71 00 	lds	r9, 0x0071
     600:	a0 90 72 00 	lds	r10, 0x0072
     604:	b0 90 73 00 	lds	r11, 0x0073
     608:	bc 01       	movw	r22, r24
     60a:	88 27       	eor	r24, r24
     60c:	77 fd       	sbrc	r23, 7
     60e:	80 95       	com	r24
     610:	98 2f       	mov	r25, r24
     612:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__floatsisf>
     616:	a5 01       	movw	r20, r10
     618:	94 01       	movw	r18, r8
     61a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
     61e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__fixsfsi>
     622:	6b 01       	movw	r12, r22
     624:	7c 01       	movw	r14, r24
     626:	eb 01       	movw	r28, r22
	right = right *  ratio;
     628:	b8 01       	movw	r22, r16
     62a:	88 27       	eor	r24, r24
     62c:	77 fd       	sbrc	r23, 7
     62e:	80 95       	com	r24
     630:	98 2f       	mov	r25, r24
     632:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__floatsisf>
     636:	9b 01       	movw	r18, r22
     638:	ac 01       	movw	r20, r24
     63a:	c5 01       	movw	r24, r10
     63c:	b4 01       	movw	r22, r8
     63e:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
     642:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__fixsfsi>
     646:	9b 01       	movw	r18, r22

	if (left >= 0)
     648:	dd 23       	and	r29, r29
     64a:	5c f0       	brlt	.+22     	; 0x662 <_Z5speedii+0x84>
	{
		sbi(PORTD, DIR00);
     64c:	90 9a       	sbi	0x12, 0	; 18
		cbi(PORTD, DIR01);
     64e:	91 98       	cbi	0x12, 1	; 18
		OCR1B = left * 200;
     650:	e8 ec       	ldi	r30, 0xC8	; 200
     652:	ec 9d       	mul	r30, r12
     654:	a0 01       	movw	r20, r0
     656:	ed 9d       	mul	r30, r13
     658:	50 0d       	add	r21, r0
     65a:	11 24       	eor	r1, r1
     65c:	59 bd       	out	0x29, r21	; 41
     65e:	48 bd       	out	0x28, r20	; 40
     660:	0b c0       	rjmp	.+22     	; 0x678 <_Z5speedii+0x9a>
	}
	else
	{
		cbi(PORTD, DIR00);
     662:	90 98       	cbi	0x12, 0	; 18
		sbi(PORTD, DIR01);
     664:	91 9a       	sbi	0x12, 1	; 18
		OCR1B = (-left) * 200;
     666:	e8 e3       	ldi	r30, 0x38	; 56
     668:	ec 9d       	mul	r30, r12
     66a:	a0 01       	movw	r20, r0
     66c:	ed 9d       	mul	r30, r13
     66e:	50 0d       	add	r21, r0
     670:	5c 19       	sub	r21, r12
     672:	11 24       	eor	r1, r1
     674:	59 bd       	out	0x29, r21	; 41
     676:	48 bd       	out	0x28, r20	; 40
	}
	
	if (right >= 0)
     678:	33 23       	and	r19, r19
     67a:	7c f0       	brlt	.+30     	; 0x69a <_Z5speedii+0xbc>
	{
		sbi(PORTD, DIR10);
     67c:	93 9a       	sbi	0x12, 3	; 18
		cbi(PORTD, DIR11);
     67e:	96 98       	cbi	0x12, 6	; 18
		OCR2 = right * 255/100;
     680:	4f ef       	ldi	r20, 0xFF	; 255
     682:	46 9f       	mul	r20, r22
     684:	90 01       	movw	r18, r0
     686:	47 9f       	mul	r20, r23
     688:	30 0d       	add	r19, r0
     68a:	11 24       	eor	r1, r1
     68c:	c9 01       	movw	r24, r18
     68e:	64 e6       	ldi	r22, 0x64	; 100
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__divmodhi4>
     696:	63 bd       	out	0x23, r22	; 35
     698:	0f c0       	rjmp	.+30     	; 0x6b8 <_Z5speedii+0xda>
	}
	else
	{
		cbi(PORTD, DIR10);
     69a:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD, DIR11);
     69c:	96 9a       	sbi	0x12, 6	; 18
		OCR2 = (-right) * 255/100;
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	46 9f       	mul	r20, r22
     6a2:	90 01       	movw	r18, r0
     6a4:	47 9f       	mul	r20, r23
     6a6:	30 0d       	add	r19, r0
     6a8:	36 1b       	sub	r19, r22
     6aa:	11 24       	eor	r1, r1
     6ac:	c9 01       	movw	r24, r18
     6ae:	64 e6       	ldi	r22, 0x64	; 100
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__divmodhi4>
     6b6:	63 bd       	out	0x23, r22	; 35
	}
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	bf 90       	pop	r11
     6ca:	af 90       	pop	r10
     6cc:	9f 90       	pop	r9
     6ce:	8f 90       	pop	r8
     6d0:	08 95       	ret

000006d2 <_Z3SPIh>:

/* -------------------- LED7 -------------------- */
void SPI(uint8_t data)
{
	SPDR = data;
     6d2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     6d4:	77 9b       	sbis	0x0e, 7	; 14
     6d6:	fe cf       	rjmp	.-4      	; 0x6d4 <_Z3SPIh+0x2>
}
     6d8:	08 95       	ret

000006da <_Z4led7j>:

void led7(unsigned int num)
{
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	ac 01       	movw	r20, r24
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
     6e4:	9c 01       	movw	r18, r24
     6e6:	ad ec       	ldi	r26, 0xCD	; 205
     6e8:	bc ec       	ldi	r27, 0xCC	; 204
     6ea:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__umulhisi3>
     6ee:	96 95       	lsr	r25
     6f0:	87 95       	ror	r24
     6f2:	96 95       	lsr	r25
     6f4:	87 95       	ror	r24
     6f6:	96 95       	lsr	r25
     6f8:	87 95       	ror	r24
     6fa:	9c 01       	movw	r18, r24
     6fc:	22 0f       	add	r18, r18
     6fe:	33 1f       	adc	r19, r19
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	82 0f       	add	r24, r18
     70e:	93 1f       	adc	r25, r19
     710:	9a 01       	movw	r18, r20
     712:	28 1b       	sub	r18, r24
     714:	39 0b       	sbc	r19, r25
     716:	c9 01       	movw	r24, r18
     718:	80 68       	ori	r24, 0x80	; 128
     71a:	80 93 7e 00 	sts	0x007E, r24
	led7_data.ten		 = (unsigned int)(num%100 / 10);
     71e:	9a 01       	movw	r18, r20
     720:	36 95       	lsr	r19
     722:	27 95       	ror	r18
     724:	36 95       	lsr	r19
     726:	27 95       	ror	r18
     728:	ab e7       	ldi	r26, 0x7B	; 123
     72a:	b4 e1       	ldi	r27, 0x14	; 20
     72c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__umulhisi3>
     730:	96 95       	lsr	r25
     732:	87 95       	ror	r24
     734:	64 e6       	ldi	r22, 0x64	; 100
     736:	68 9f       	mul	r22, r24
     738:	90 01       	movw	r18, r0
     73a:	69 9f       	mul	r22, r25
     73c:	30 0d       	add	r19, r0
     73e:	11 24       	eor	r1, r1
     740:	ca 01       	movw	r24, r20
     742:	82 1b       	sub	r24, r18
     744:	93 0b       	sbc	r25, r19
     746:	9c 01       	movw	r18, r24
     748:	ad ec       	ldi	r26, 0xCD	; 205
     74a:	bc ec       	ldi	r27, 0xCC	; 204
     74c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__umulhisi3>
     750:	fc 01       	movw	r30, r24
     752:	f6 95       	lsr	r31
     754:	e7 95       	ror	r30
     756:	f6 95       	lsr	r31
     758:	e7 95       	ror	r30
     75a:	f6 95       	lsr	r31
     75c:	e7 95       	ror	r30
     75e:	1e 2f       	mov	r17, r30
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
     760:	ea 01       	movw	r28, r20
     762:	d6 95       	lsr	r29
     764:	c7 95       	ror	r28
     766:	d6 95       	lsr	r29
     768:	c7 95       	ror	r28
     76a:	d6 95       	lsr	r29
     76c:	c7 95       	ror	r28
     76e:	9e 01       	movw	r18, r28
     770:	a5 ec       	ldi	r26, 0xC5	; 197
     772:	b0 e2       	ldi	r27, 0x20	; 32
     774:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__umulhisi3>
     778:	92 95       	swap	r25
     77a:	82 95       	swap	r24
     77c:	8f 70       	andi	r24, 0x0F	; 15
     77e:	89 27       	eor	r24, r25
     780:	9f 70       	andi	r25, 0x0F	; 15
     782:	89 27       	eor	r24, r25
     784:	68 ee       	ldi	r22, 0xE8	; 232
     786:	73 e0       	ldi	r23, 0x03	; 3
     788:	86 9f       	mul	r24, r22
     78a:	90 01       	movw	r18, r0
     78c:	87 9f       	mul	r24, r23
     78e:	30 0d       	add	r19, r0
     790:	96 9f       	mul	r25, r22
     792:	30 0d       	add	r19, r0
     794:	11 24       	eor	r1, r1
     796:	42 1b       	sub	r20, r18
     798:	53 0b       	sbc	r21, r19
     79a:	9a 01       	movw	r18, r20
     79c:	36 95       	lsr	r19
     79e:	27 95       	ror	r18
     7a0:	36 95       	lsr	r19
     7a2:	27 95       	ror	r18
     7a4:	ab e7       	ldi	r26, 0x7B	; 123
     7a6:	b4 e1       	ldi	r27, 0x14	; 20
     7a8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__umulhisi3>
     7ac:	ac 01       	movw	r20, r24
     7ae:	56 95       	lsr	r21
     7b0:	47 95       	ror	r20
     7b2:	04 2f       	mov	r16, r20
	led7_data.thousand	 = (unsigned int)(num/ 1000);
     7b4:	9e 01       	movw	r18, r28
     7b6:	a5 ec       	ldi	r26, 0xC5	; 197
     7b8:	b0 e2       	ldi	r27, 0x20	; 32
     7ba:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__umulhisi3>
     7be:	92 95       	swap	r25
     7c0:	82 95       	swap	r24
     7c2:	8f 70       	andi	r24, 0x0F	; 15
     7c4:	89 27       	eor	r24, r25
     7c6:	9f 70       	andi	r25, 0x0F	; 15
     7c8:	89 27       	eor	r24, r25
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
     7ca:	88 23       	and	r24, r24
     7cc:	11 f0       	breq	.+4      	; 0x7d2 <_Z4led7j+0xf8>
     7ce:	20 e1       	ldi	r18, 0x10	; 16
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <_Z4led7j+0xfa>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	82 2b       	or	r24, r18
     7d6:	80 93 81 00 	sts	0x0081, r24
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     7da:	81 11       	cpse	r24, r1
     7dc:	15 c0       	rjmp	.+42     	; 0x808 <_Z4led7j+0x12e>
     7de:	01 11       	cpse	r16, r1
     7e0:	0c c0       	rjmp	.+24     	; 0x7fa <_Z4led7j+0x120>
     7e2:	0c c0       	rjmp	.+24     	; 0x7fc <_Z4led7j+0x122>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     7e4:	11 23       	and	r17, r17
     7e6:	11 f0       	breq	.+4      	; 0x7ec <_Z4led7j+0x112>
     7e8:	80 e4       	ldi	r24, 0x40	; 64
     7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <_Z4led7j+0x118>
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <_Z4led7j+0x118>
     7f0:	80 e4       	ldi	r24, 0x40	; 64
     7f2:	e8 2b       	or	r30, r24
     7f4:	e0 93 7f 00 	sts	0x007F, r30
     7f8:	0c c0       	rjmp	.+24     	; 0x812 <_Z4led7j+0x138>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     7fa:	80 e2       	ldi	r24, 0x20	; 32
     7fc:	48 2b       	or	r20, r24
     7fe:	40 93 80 00 	sts	0x0080, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     802:	44 23       	and	r20, r20
     804:	79 f3       	breq	.-34     	; 0x7e4 <_Z4led7j+0x10a>
     806:	f4 cf       	rjmp	.-24     	; 0x7f0 <_Z4led7j+0x116>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     808:	40 62       	ori	r20, 0x20	; 32
     80a:	40 93 80 00 	sts	0x0080, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     80e:	80 e4       	ldi	r24, 0x40	; 64
     810:	f0 cf       	rjmp	.-32     	; 0x7f2 <_Z4led7j+0x118>
}
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	08 95       	ret

0000081c <_Z5printv>:

void print( void )
{
     81c:	cf 93       	push	r28
	uint8_t value=0;
	if(led7_data.i++ == 4) led7_data.i=0;
     81e:	ed e7       	ldi	r30, 0x7D	; 125
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	90 81       	ld	r25, Z
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	89 0f       	add	r24, r25
     828:	80 83       	st	Z, r24
     82a:	94 30       	cpi	r25, 0x04	; 4
     82c:	19 f4       	brne	.+6      	; 0x834 <_Z5printv+0x18>
     82e:	10 92 7d 00 	sts	0x007D, r1
     832:	08 c0       	rjmp	.+16     	; 0x844 <_Z5printv+0x28>
	switch(led7_data.i)
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	49 f0       	breq	.+18     	; 0x84a <_Z5printv+0x2e>
     838:	28 f0       	brcs	.+10     	; 0x844 <_Z5printv+0x28>
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	49 f0       	breq	.+18     	; 0x850 <_Z5printv+0x34>
     83e:	83 30       	cpi	r24, 0x03	; 3
     840:	51 f0       	breq	.+20     	; 0x856 <_Z5printv+0x3a>
     842:	0c c0       	rjmp	.+24     	; 0x85c <_Z5printv+0x40>
	{
		case 0: value=led7_data.thousand;	break;
     844:	c0 91 81 00 	lds	r28, 0x0081
     848:	0a c0       	rjmp	.+20     	; 0x85e <_Z5printv+0x42>
		case 1: value=led7_data.hundred;	break;
     84a:	c0 91 80 00 	lds	r28, 0x0080
     84e:	07 c0       	rjmp	.+14     	; 0x85e <_Z5printv+0x42>
		case 2: value=led7_data.ten;		break;
     850:	c0 91 7f 00 	lds	r28, 0x007F
     854:	04 c0       	rjmp	.+8      	; 0x85e <_Z5printv+0x42>
		case 3: value=led7_data.unit;		break;
     856:	c0 91 7e 00 	lds	r28, 0x007E
     85a:	01 c0       	rjmp	.+2      	; 0x85e <_Z5printv+0x42>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
}

void print( void )
{
	uint8_t value=0;
     85c:	c0 e0       	ldi	r28, 0x00	; 0
		case 1: value=led7_data.hundred;	break;
		case 2: value=led7_data.ten;		break;
		case 3: value=led7_data.unit;		break;
		default: break;
	}
	SPI(~led7_data.sensor_out);
     85e:	80 91 82 00 	lds	r24, 0x0082
     862:	80 95       	com	r24
     864:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z3SPIh>
	SPI(value);
     868:	8c 2f       	mov	r24, r28
     86a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z3SPIh>
	sbi(PORTB,LATCH);
     86e:	c4 9a       	sbi	0x18, 4	; 24
	cbi(PORTB,LATCH);
     870:	c4 98       	cbi	0x18, 4	; 24
}
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <_Z15read_adc_eepromv>:

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	0f 2e       	mov	r0, r31
     884:	f3 e9       	ldi	r31, 0x93	; 147
     886:	ef 2e       	mov	r14, r31
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	ff 2e       	mov	r15, r31
     88c:	f0 2d       	mov	r31, r0
     88e:	03 e8       	ldi	r16, 0x83	; 131
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	c0 e0       	ldi	r28, 0x00	; 0
     894:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     896:	e1 99       	sbic	0x1c, 1	; 28
     898:	fe cf       	rjmp	.-4      	; 0x896 <_Z15read_adc_eepromv+0x20>
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__eerd_word_m16>
     8a0:	f7 01       	movw	r30, r14
     8a2:	81 93       	st	Z+, r24
     8a4:	91 93       	st	Z+, r25
     8a6:	7f 01       	movw	r14, r30
		while(!eeprom_is_ready());
     8a8:	e1 99       	sbic	0x1c, 1	; 28
     8aa:	fe cf       	rjmp	.-4      	; 0x8a8 <_Z15read_adc_eepromv+0x32>
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
     8ac:	ce 01       	movw	r24, r28
     8ae:	40 96       	adiw	r24, 0x10	; 16
     8b0:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__eerd_word_m16>
     8b4:	f8 01       	movw	r30, r16
     8b6:	81 93       	st	Z+, r24
     8b8:	91 93       	st	Z+, r25
     8ba:	8f 01       	movw	r16, r30
     8bc:	22 96       	adiw	r28, 0x02	; 2
}

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     8be:	c0 31       	cpi	r28, 0x10	; 16
     8c0:	d1 05       	cpc	r29, r1
     8c2:	49 f7       	brne	.-46     	; 0x896 <_Z15read_adc_eepromv+0x20>
     8c4:	c3 ea       	ldi	r28, 0xA3	; 163
     8c6:	d0 e0       	ldi	r29, 0x00	; 0
     8c8:	43 ea       	ldi	r20, 0xA3	; 163
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	a3 e8       	ldi	r26, 0x83	; 131
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	e3 e9       	ldi	r30, 0x93	; 147
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     8d4:	81 91       	ld	r24, Z+
     8d6:	91 91       	ld	r25, Z+
     8d8:	2d 91       	ld	r18, X+
     8da:	3d 91       	ld	r19, X+
     8dc:	82 0f       	add	r24, r18
     8de:	93 1f       	adc	r25, r19
     8e0:	96 95       	lsr	r25
     8e2:	87 95       	ror	r24
     8e4:	89 93       	st	Y+, r24
     8e6:	99 93       	st	Y+, r25
		while(!eeprom_is_ready());
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
     8e8:	e4 17       	cp	r30, r20
     8ea:	f5 07       	cpc	r31, r21
     8ec:	99 f7       	brne	.-26     	; 0x8d4 <_Z15read_adc_eepromv+0x5e>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	08 95       	ret

000008fc <_Z16write_adc_eepromv>:

void write_adc_eeprom( void )
{
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	0f 2e       	mov	r0, r31
     90a:	f3 e8       	ldi	r31, 0x83	; 131
     90c:	ef 2e       	mov	r14, r31
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ff 2e       	mov	r15, r31
     912:	f0 2d       	mov	r31, r0
     914:	03 e9       	ldi	r16, 0x93	; 147
     916:	10 e0       	ldi	r17, 0x00	; 0
     918:	c0 e0       	ldi	r28, 0x00	; 0
     91a:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     91c:	e1 99       	sbic	0x1c, 1	; 28
     91e:	fe cf       	rjmp	.-4      	; 0x91c <_Z16write_adc_eepromv+0x20>
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
     920:	f8 01       	movw	r30, r16
     922:	61 91       	ld	r22, Z+
     924:	71 91       	ld	r23, Z+
     926:	8f 01       	movw	r16, r30
     928:	ce 01       	movw	r24, r28
     92a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__eewr_word_m16>
		while(!eeprom_is_ready());
     92e:	e1 99       	sbic	0x1c, 1	; 28
     930:	fe cf       	rjmp	.-4      	; 0x92e <_Z16write_adc_eepromv+0x32>
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
     932:	f7 01       	movw	r30, r14
     934:	61 91       	ld	r22, Z+
     936:	71 91       	ld	r23, Z+
     938:	7f 01       	movw	r14, r30
     93a:	ce 01       	movw	r24, r28
     93c:	40 96       	adiw	r24, 0x10	; 16
     93e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__eewr_word_m16>
     942:	22 96       	adiw	r28, 0x02	; 2
	}
}

void write_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     944:	c0 31       	cpi	r28, 0x10	; 16
     946:	d1 05       	cpc	r29, r1
     948:	49 f7       	brne	.-46     	; 0x91c <_Z16write_adc_eepromv+0x20>
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
	}
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	08 95       	ret

00000958 <_Z8adc_readh>:

uint16_t adc_read( uint8_t ch )
{
	ADMUX = (1<< REFS0)|ch;
     958:	80 64       	ori	r24, 0x40	; 64
     95a:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
     95c:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
     95e:	34 9b       	sbis	0x06, 4	; 6
     960:	fe cf       	rjmp	.-4      	; 0x95e <_Z8adc_readh+0x6>
	return ADCW;
     962:	84 b1       	in	r24, 0x04	; 4
     964:	95 b1       	in	r25, 0x05	; 5
}
     966:	08 95       	ret

00000968 <_Z10sensor_cmpv>:

uint8_t sensor_cmp( void )
{
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	03 ea       	ldi	r16, 0xA3	; 163
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	c0 e0       	ldi	r28, 0x00	; 0
     97c:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t ADC_value=0;
     97e:	d1 2c       	mov	r13, r1
	for(uint8_t i=0; i<8; i++)
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
     980:	ee 24       	eor	r14, r14
     982:	e3 94       	inc	r14
     984:	f1 2c       	mov	r15, r1
     986:	8c 2f       	mov	r24, r28
     988:	0e 94 ac 04 	call	0x958	; 0x958 <_Z8adc_readh>
     98c:	f8 01       	movw	r30, r16
     98e:	21 91       	ld	r18, Z+
     990:	31 91       	ld	r19, Z+
     992:	8f 01       	movw	r16, r30
     994:	82 17       	cp	r24, r18
     996:	93 07       	cpc	r25, r19
     998:	40 f4       	brcc	.+16     	; 0x9aa <_Z10sensor_cmpv+0x42>
     99a:	97 01       	movw	r18, r14
     99c:	0c 2e       	mov	r0, r28
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <_Z10sensor_cmpv+0x3c>
     9a0:	22 0f       	add	r18, r18
     9a2:	33 1f       	adc	r19, r19
     9a4:	0a 94       	dec	r0
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <_Z10sensor_cmpv+0x38>
     9a8:	d2 2a       	or	r13, r18
     9aa:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t sensor_cmp( void )
{
	uint8_t ADC_value=0;
	for(uint8_t i=0; i<8; i++)
     9ac:	c8 30       	cpi	r28, 0x08	; 8
     9ae:	d1 05       	cpc	r29, r1
     9b0:	51 f7       	brne	.-44     	; 0x986 <_Z10sensor_cmpv+0x1e>
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
	}
	led7_data.sensor_out=ADC_value;
     9b2:	d0 92 82 00 	sts	0x0082, r13
	return (ADC_value);
}
     9b6:	8d 2d       	mov	r24, r13
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	08 95       	ret

000009c8 <_Z11learn_colorv>:

void learn_color( void )
{
     9c8:	8f 92       	push	r8
     9ca:	9f 92       	push	r9
     9cc:	af 92       	push	r10
     9ce:	bf 92       	push	r11
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	c3 e9       	ldi	r28, 0x93	; 147
     9e2:	d0 e0       	ldi	r29, 0x00	; 0
     9e4:	03 e8       	ldi	r16, 0x83	; 131
     9e6:	10 e0       	ldi	r17, 0x00	; 0
     9e8:	0f 2e       	mov	r0, r31
     9ea:	f3 ea       	ldi	r31, 0xA3	; 163
     9ec:	ef 2e       	mov	r14, r31
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	ff 2e       	mov	r15, r31
     9f2:	f0 2d       	mov	r31, r0
     9f4:	d8 01       	movw	r26, r16
     9f6:	fe 01       	movw	r30, r28
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
	{
		lineTrang[i] = 1024;
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	81 93       	st	Z+, r24
     9fe:	91 93       	st	Z+, r25
		lineDen[i] = 0;
     a00:	1d 92       	st	X+, r1
     a02:	1d 92       	st	X+, r1

void learn_color( void )
{
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
     a04:	ee 15       	cp	r30, r14
     a06:	ff 05       	cpc	r31, r15
     a08:	c9 f7       	brne	.-14     	; 0x9fc <_Z11learn_colorv+0x34>
	{
		lineTrang[i] = 1024;
		lineDen[i] = 0;
	}
	
	led7(6969);
     a0a:	89 e3       	ldi	r24, 0x39	; 57
     a0c:	9b e1       	ldi	r25, 0x1B	; 27
     a0e:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
	while (1)
	{
		if(get_button(BTN2)) break;
     a12:	b0 2e       	mov	r11, r16
     a14:	a1 2e       	mov	r10, r17
     a16:	9c 2e       	mov	r9, r28
     a18:	8d 2e       	mov	r8, r29
     a1a:	c1 2c       	mov	r12, r1
     a1c:	87 ef       	ldi	r24, 0xF7	; 247
     a1e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     a22:	81 11       	cpse	r24, r1
     a24:	1f c0       	rjmp	.+62     	; 0xa64 <_Z11learn_colorv+0x9c>
     a26:	0b 2d       	mov	r16, r11
     a28:	1a 2d       	mov	r17, r10
     a2a:	c9 2d       	mov	r28, r9
     a2c:	d8 2d       	mov	r29, r8
     a2e:	dc 2c       	mov	r13, r12
		
		for (uint8_t i = 0; i < 8; i++)
		{
			ADC_temp = adc_read(i);
     a30:	8d 2d       	mov	r24, r13
     a32:	0e 94 ac 04 	call	0x958	; 0x958 <_Z8adc_readh>
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
     a36:	28 81       	ld	r18, Y
     a38:	39 81       	ldd	r19, Y+1	; 0x01
     a3a:	82 17       	cp	r24, r18
     a3c:	93 07       	cpc	r25, r19
     a3e:	10 f4       	brcc	.+4      	; 0xa44 <_Z11learn_colorv+0x7c>
     a40:	99 83       	std	Y+1, r25	; 0x01
     a42:	88 83       	st	Y, r24
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
     a44:	f8 01       	movw	r30, r16
     a46:	20 81       	ld	r18, Z
     a48:	31 81       	ldd	r19, Z+1	; 0x01
     a4a:	28 17       	cp	r18, r24
     a4c:	39 07       	cpc	r19, r25
     a4e:	10 f4       	brcc	.+4      	; 0xa54 <_Z11learn_colorv+0x8c>
     a50:	91 83       	std	Z+1, r25	; 0x01
     a52:	80 83       	st	Z, r24
	led7(6969);
	while (1)
	{
		if(get_button(BTN2)) break;
		
		for (uint8_t i = 0; i < 8; i++)
     a54:	d3 94       	inc	r13
     a56:	22 96       	adiw	r28, 0x02	; 2
     a58:	0e 5f       	subi	r16, 0xFE	; 254
     a5a:	1f 4f       	sbci	r17, 0xFF	; 255
     a5c:	f8 e0       	ldi	r31, 0x08	; 8
     a5e:	df 12       	cpse	r13, r31
     a60:	e7 cf       	rjmp	.-50     	; 0xa30 <_Z11learn_colorv+0x68>
     a62:	dc cf       	rjmp	.-72     	; 0xa1c <_Z11learn_colorv+0x54>
     a64:	c3 ea       	ldi	r28, 0xA3	; 163
     a66:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	led7(6969);
	while (1)
	{
		if(get_button(BTN2)) break;
     a68:	a3 e8       	ldi	r26, 0x83	; 131
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	e3 e9       	ldi	r30, 0x93	; 147
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
	
	for (uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     a70:	81 91       	ld	r24, Z+
     a72:	91 91       	ld	r25, Z+
     a74:	2d 91       	ld	r18, X+
     a76:	3d 91       	ld	r19, X+
     a78:	82 0f       	add	r24, r18
     a7a:	93 1f       	adc	r25, r19
     a7c:	96 95       	lsr	r25
     a7e:	87 95       	ror	r24
     a80:	89 93       	st	Y+, r24
     a82:	99 93       	st	Y+, r25
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
		}
	}
	
	for (uint8_t i=0; i<8; i++)
     a84:	ee 15       	cp	r30, r14
     a86:	ff 05       	cpc	r31, r15
     a88:	99 f7       	brne	.-26     	; 0xa70 <_Z11learn_colorv+0xa8>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
	
	write_adc_eeprom();
     a8a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_Z16write_adc_eepromv>
	return (ADC_value);
}

void learn_color( void )
{
	uint8_t sel = 0;
     a8e:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1)
	{
		if(get_button(BTN0))
		{
			if (++sel > 7) sel = 0;
     a90:	f1 2c       	mov	r15, r1
		{
			break;
		}
		
		led7(ADC_average[sel]);
		led7_data.sensor_out = (1 << sel);
     a92:	c2 e8       	ldi	r28, 0x82	; 130
     a94:	d0 e0       	ldi	r29, 0x00	; 0
     a96:	01 e0       	ldi	r16, 0x01	; 1
	
	write_adc_eeprom();
	
	while (1)
	{
		if(get_button(BTN0))
     a98:	8d ef       	ldi	r24, 0xFD	; 253
     a9a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     a9e:	88 23       	and	r24, r24
     aa0:	21 f0       	breq	.+8      	; 0xaaa <_Z11learn_colorv+0xe2>
		{
			if (++sel > 7) sel = 0;
     aa2:	1f 5f       	subi	r17, 0xFF	; 255
     aa4:	18 30       	cpi	r17, 0x08	; 8
     aa6:	08 f0       	brcs	.+2      	; 0xaaa <_Z11learn_colorv+0xe2>
     aa8:	1f 2d       	mov	r17, r15
		}
		if (get_button(BTN1))
     aaa:	8b ef       	ldi	r24, 0xFB	; 251
     aac:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     ab0:	81 11       	cpse	r24, r1
		{
			if (--sel < 0)  sel = 7;
     ab2:	11 50       	subi	r17, 0x01	; 1
		}
		if (get_button(BTN2))
     ab4:	87 ef       	ldi	r24, 0xF7	; 247
     ab6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     aba:	81 11       	cpse	r24, r1
     abc:	12 c0       	rjmp	.+36     	; 0xae2 <_Z11learn_colorv+0x11a>
		{
			break;
		}
		
		led7(ADC_average[sel]);
     abe:	e1 2f       	mov	r30, r17
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	ed 55       	subi	r30, 0x5D	; 93
     ac8:	ff 4f       	sbci	r31, 0xFF	; 255
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
		led7_data.sensor_out = (1 << sel);
     ad2:	80 2f       	mov	r24, r16
     ad4:	01 2e       	mov	r0, r17
     ad6:	01 c0       	rjmp	.+2      	; 0xada <_Z11learn_colorv+0x112>
     ad8:	88 0f       	add	r24, r24
     ada:	0a 94       	dec	r0
     adc:	ea f7       	brpl	.-6      	; 0xad8 <_Z11learn_colorv+0x110>
     ade:	88 83       	st	Y, r24
	}
     ae0:	db cf       	rjmp	.-74     	; 0xa98 <_Z11learn_colorv+0xd0>
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	08 95       	ret

00000afc <_Z4INITv>:

/* -------------------- INITIAL -------------------- */
void INIT( void )
{
	/* ADC */
	ADMUX=(1<<REFS0);
     afc:	80 e4       	ldi	r24, 0x40	; 64
     afe:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN) | (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     b00:	87 e8       	ldi	r24, 0x87	; 135
     b02:	86 b9       	out	0x06, r24	; 6
	read_adc_eeprom();
     b04:	0e 94 3b 04 	call	0x876	; 0x876 <_Z15read_adc_eepromv>
	
	/* PORT */
	DDRB  = 0b11110001;
     b08:	81 ef       	ldi	r24, 0xF1	; 241
     b0a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111111;
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	88 bb       	out	0x18, r24	; 24
	
	DDRC  = 0b00000000;
     b10:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b11111111;
     b12:	85 bb       	out	0x15, r24	; 21
	
	DDRD  = 0b11111011;
     b14:	8b ef       	ldi	r24, 0xFB	; 251
     b16:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000;
     b18:	12 ba       	out	0x12, r1	; 18
	
	/* SPI */
	SPCR = (1<<SPE)|(1<<MSTR);
     b1a:	80 e5       	ldi	r24, 0x50	; 80
     b1c:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	8e b9       	out	0x0e, r24	; 14
	
	/* TIMER */
	TCCR0=(1<<WGM01) | (1<<CS02);
     b22:	8c e0       	ldi	r24, 0x0C	; 12
     b24:	83 bf       	out	0x33, r24	; 51
	OCR0=62;
     b26:	8e e3       	ldi	r24, 0x3E	; 62
     b28:	8c bf       	out	0x3c, r24	; 60
	TIMSK=(1<<OCIE0);
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
     b2e:	82 ea       	ldi	r24, 0xA2	; 162
     b30:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS11);
     b32:	8a e1       	ldi	r24, 0x1A	; 26
     b34:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 20000;
     b36:	80 e2       	ldi	r24, 0x20	; 32
     b38:	9e e4       	ldi	r25, 0x4E	; 78
     b3a:	97 bd       	out	0x27, r25	; 39
     b3c:	86 bd       	out	0x26, r24	; 38
	OCR1B = 0;
     b3e:	19 bc       	out	0x29, r1	; 41
     b40:	18 bc       	out	0x28, r1	; 40
	
	TCCR2=(1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS22)|(1<<CS21)|(1<<CS20);
     b42:	8f e6       	ldi	r24, 0x6F	; 111
     b44:	85 bd       	out	0x25, r24	; 37
	OCR2=0;
     b46:	13 bc       	out	0x23, r1	; 35
	sei();
     b48:	78 94       	sei
	
	/* ENCODER */
	MCUCR |= (1<<ISC00)|(1<<ISC01);
     b4a:	85 b7       	in	r24, 0x35	; 53
     b4c:	83 60       	ori	r24, 0x03	; 3
     b4e:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     b50:	8b b7       	in	r24, 0x3b	; 59
     b52:	80 64       	ori	r24, 0x40	; 64
     b54:	8b bf       	out	0x3b, r24	; 59
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     b56:	83 e1       	ldi	r24, 0x13	; 19
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	90 93 7c 00 	sts	0x007C, r25
     b5e:	80 93 7b 00 	sts	0x007B, r24
     b62:	08 95       	ret

00000b64 <_Z13test_hardwarev>:
	set_encoder(19);
}

void test_hardware( void )
{
	uint8_t _index=0;
     b64:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     b66:	f1 2c       	mov	r15, r1
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
		led7_data.sensor_out = 0 | (1<<_index);
     b68:	c2 e8       	ldi	r28, 0x82	; 130
     b6a:	d0 e0       	ldi	r29, 0x00	; 0
     b6c:	01 e0       	ldi	r16, 0x01	; 1
void test_hardware( void )
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
     b6e:	8d ef       	ldi	r24, 0xFD	; 253
     b70:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     b74:	88 23       	and	r24, r24
     b76:	59 f0       	breq	.+22     	; 0xb8e <_Z13test_hardwarev+0x2a>
     b78:	6c e9       	ldi	r22, 0x9C	; 156
     b7a:	7f ef       	ldi	r23, 0xFF	; 255
     b7c:	84 e6       	ldi	r24, 0x64	; 100
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
     b84:	85 e6       	ldi	r24, 0x65	; 101
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
     b8c:	25 c0       	rjmp	.+74     	; 0xbd8 <_Z13test_hardwarev+0x74>
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     b8e:	8b ef       	ldi	r24, 0xFB	; 251
     b90:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     b94:	88 23       	and	r24, r24
     b96:	21 f0       	breq	.+8      	; 0xba0 <_Z13test_hardwarev+0x3c>
     b98:	1f 5f       	subi	r17, 0xFF	; 255
     b9a:	18 30       	cpi	r17, 0x08	; 8
     b9c:	e9 f4       	brne	.+58     	; 0xbd8 <_Z13test_hardwarev+0x74>
     b9e:	1b c0       	rjmp	.+54     	; 0xbd6 <_Z13test_hardwarev+0x72>
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
     ba0:	87 ef       	ldi	r24, 0xF7	; 247
     ba2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     ba6:	88 23       	and	r24, r24
     ba8:	59 f0       	breq	.+22     	; 0xbc0 <_Z13test_hardwarev+0x5c>
     baa:	64 e6       	ldi	r22, 0x64	; 100
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	8c e9       	ldi	r24, 0x9C	; 156
     bb0:	9f ef       	ldi	r25, 0xFF	; 255
     bb2:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
     bb6:	8b e9       	ldi	r24, 0x9B	; 155
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
     bbe:	0c c0       	rjmp	.+24     	; 0xbd8 <_Z13test_hardwarev+0x74>
		else						{ speed(0,0);  handle(0);                 }
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <_Z13test_hardwarev+0x74>
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     bd6:	1f 2d       	mov	r17, r15
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
     bd8:	81 2f       	mov	r24, r17
     bda:	0e 94 ac 04 	call	0x958	; 0x958 <_Z8adc_readh>
     bde:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
		led7_data.sensor_out = 0 | (1<<_index);
     be2:	80 2f       	mov	r24, r16
     be4:	01 2e       	mov	r0, r17
     be6:	01 c0       	rjmp	.+2      	; 0xbea <_Z13test_hardwarev+0x86>
     be8:	88 0f       	add	r24, r24
     bea:	0a 94       	dec	r0
     bec:	ea f7       	brpl	.-6      	; 0xbe8 <_Z13test_hardwarev+0x84>
     bee:	88 83       	st	Y, r24
	}
     bf0:	be cf       	rjmp	.-132    	; 0xb6e <_Z13test_hardwarev+0xa>

00000bf2 <_Z15servo_calibratev>:
		if (get_button(BTN2)) angle++;
	}
}

void servo_calibrate( void )
{
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
	int16_t angle = 0;
     bf6:	c0 e0       	ldi	r28, 0x00	; 0
     bf8:	d0 e0       	ldi	r29, 0x00	; 0
	while (true)
	{
		led7((angle>=0)?angle:(-angle));
     bfa:	ce 01       	movw	r24, r28
     bfc:	dd 23       	and	r29, r29
     bfe:	24 f4       	brge	.+8      	; 0xc08 <_Z15servo_calibratev+0x16>
     c00:	88 27       	eor	r24, r24
     c02:	99 27       	eor	r25, r25
     c04:	8c 1b       	sub	r24, r28
     c06:	9d 0b       	sbc	r25, r29
     c08:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
		sensor_cmp();
     c0c:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
		handle(angle);
     c10:	ce 01       	movw	r24, r28
     c12:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
		if (get_button(BTN0)) angle--;
     c16:	8d ef       	ldi	r24, 0xFD	; 253
     c18:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     c1c:	81 11       	cpse	r24, r1
     c1e:	21 97       	sbiw	r28, 0x01	; 1
		if (get_button(BTN1)) break;
     c20:	8b ef       	ldi	r24, 0xFB	; 251
     c22:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     c26:	81 11       	cpse	r24, r1
     c28:	07 c0       	rjmp	.+14     	; 0xc38 <_Z15servo_calibratev+0x46>
		if (get_button(BTN2)) angle++;
     c2a:	87 ef       	ldi	r24, 0xF7	; 247
     c2c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     c30:	88 23       	and	r24, r24
     c32:	19 f3       	breq	.-58     	; 0xbfa <_Z15servo_calibratev+0x8>
     c34:	21 96       	adiw	r28, 0x01	; 1
     c36:	e1 cf       	rjmp	.-62     	; 0xbfa <_Z15servo_calibratev+0x8>
	}
	
	SERVO_CENTER = SERVO_CENTER + (angle * STEP);
     c38:	ce 01       	movw	r24, r28
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	c8 0f       	add	r28, r24
     c44:	d9 1f       	adc	r29, r25
     c46:	80 91 62 00 	lds	r24, 0x0062
     c4a:	90 91 63 00 	lds	r25, 0x0063
     c4e:	c8 0f       	add	r28, r24
     c50:	d9 1f       	adc	r29, r25
     c52:	d0 93 63 00 	sts	0x0063, r29
     c56:	c0 93 62 00 	sts	0x0062, r28
}
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <_Z8sel_modev>:

/* -------------------- START -------------------- */
void sel_mode()
{
	handle(0);
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
	speed(0,0);
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	9f ef       	ldi	r25, 0xFF	; 255
     c78:	90 93 7c 00 	sts	0x007C, r25
     c7c:	80 93 7b 00 	sts	0x007B, r24
	speed(0,0);
	set_encoder(-1);
	
	while (true)
	{
		ratio_base = ratio_default + (get_switch() / 20.0);
     c80:	0e 94 ed 01 	call	0x3da	; 0x3da <_Z10get_switchv>
     c84:	68 2f       	mov	r22, r24
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__floatsisf>
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 ea       	ldi	r20, 0xA0	; 160
     c96:	51 e4       	ldi	r21, 0x41	; 65
     c98:	0e 94 42 0c 	call	0x1884	; 0x1884 <__divsf3>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e8       	ldi	r20, 0x80	; 128
     ca2:	5e e3       	ldi	r21, 0x3E	; 62
     ca4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__addsf3>
     ca8:	60 93 74 00 	sts	0x0074, r22
     cac:	70 93 75 00 	sts	0x0075, r23
     cb0:	80 93 76 00 	sts	0x0076, r24
     cb4:	90 93 77 00 	sts	0x0077, r25
		ratio = ratio_base;
     cb8:	60 93 70 00 	sts	0x0070, r22
     cbc:	70 93 71 00 	sts	0x0071, r23
     cc0:	80 93 72 00 	sts	0x0072, r24
     cc4:	90 93 73 00 	sts	0x0073, r25
		led7(ratio_base * 100);
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	48 ec       	ldi	r20, 0xC8	; 200
     cce:	52 e4       	ldi	r21, 0x42	; 66
     cd0:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
     cd4:	0e 94 af 0c 	call	0x195e	; 0x195e <__fixunssfsi>
     cd8:	cb 01       	movw	r24, r22
     cda:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
		delay = (1.4 - 1.125 * ratio);
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e9       	ldi	r20, 0x90	; 144
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	60 91 70 00 	lds	r22, 0x0070
     cea:	70 91 71 00 	lds	r23, 0x0071
     cee:	80 91 72 00 	lds	r24, 0x0072
     cf2:	90 91 73 00 	lds	r25, 0x0073
     cf6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
     cfa:	9b 01       	movw	r18, r22
     cfc:	ac 01       	movw	r20, r24
     cfe:	63 e3       	ldi	r22, 0x33	; 51
     d00:	73 e3       	ldi	r23, 0x33	; 51
     d02:	83 eb       	ldi	r24, 0xB3	; 179
     d04:	9f e3       	ldi	r25, 0x3F	; 63
     d06:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__subsf3>
     d0a:	60 93 6c 00 	sts	0x006C, r22
     d0e:	70 93 6d 00 	sts	0x006D, r23
     d12:	80 93 6e 00 	sts	0x006E, r24
     d16:	90 93 6f 00 	sts	0x006F, r25
		sensor_cmp();
     d1a:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
		if(get_button(BTN0))		return;
     d1e:	8d ef       	ldi	r24, 0xFD	; 253
     d20:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     d24:	81 11       	cpse	r24, r1
     d26:	0f c0       	rjmp	.+30     	; 0xd46 <_Z8sel_modev+0xe6>
		else if (get_button(BTN1))	test_hardware(); /*test_servo();*/
     d28:	8b ef       	ldi	r24, 0xFB	; 251
     d2a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     d2e:	81 11       	cpse	r24, r1
     d30:	0e 94 b2 05 	call	0xb64	; 0xb64 <_Z13test_hardwarev>
		else if (get_button(BTN2))	learn_color();
     d34:	87 ef       	ldi	r24, 0xF7	; 247
     d36:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     d3a:	88 23       	and	r24, r24
     d3c:	09 f4       	brne	.+2      	; 0xd40 <_Z8sel_modev+0xe0>
     d3e:	a0 cf       	rjmp	.-192    	; 0xc80 <_Z8sel_modev+0x20>
     d40:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <_Z11learn_colorv>
     d44:	9d cf       	rjmp	.-198    	; 0xc80 <_Z8sel_modev+0x20>
     d46:	08 95       	ret

00000d48 <__vector_19>:
		}
    }
}

ISR(TIMER0_COMP_vect) /* 1ms */
{
     d48:	1f 92       	push	r1
     d4a:	0f 92       	push	r0
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	0f 92       	push	r0
     d50:	11 24       	eor	r1, r1
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
	print();
     d6a:	0e 94 0e 04 	call	0x81c	; 0x81c <_Z5printv>
	cal_ratio();
     d6e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z9cal_ratiov>
	timer_cnt++;
     d72:	80 91 66 00 	lds	r24, 0x0066
     d76:	90 91 67 00 	lds	r25, 0x0067
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	90 93 67 00 	sts	0x0067, r25
     d80:	80 93 66 00 	sts	0x0066, r24
}
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	bf 91       	pop	r27
     d8a:	af 91       	pop	r26
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	7f 91       	pop	r23
     d92:	6f 91       	pop	r22
     d94:	5f 91       	pop	r21
     d96:	4f 91       	pop	r20
     d98:	3f 91       	pop	r19
     d9a:	2f 91       	pop	r18
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <__vector_1>:

ISR(INT0_vect) /* encoder */
{
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
	encoder_pulse++;
     db4:	80 91 64 00 	lds	r24, 0x0064
     db8:	90 91 65 00 	lds	r25, 0x0065
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	90 93 65 00 	sts	0x0065, r25
     dc2:	80 93 64 00 	sts	0x0064, r24
	pulse_ratio++;
     dc6:	80 91 78 00 	lds	r24, 0x0078
     dca:	90 91 79 00 	lds	r25, 0x0079
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	90 93 79 00 	sts	0x0079, r25
     dd4:	80 93 78 00 	sts	0x0078, r24
}
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <_Z15check_crosslinev>:

bool check_crossline( void )
{
	sensor = sensor_cmp();
     de6:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
     dea:	80 93 68 00 	sts	0x0068, r24
	return (((sensor & 0b11111111) == 0b11111111) || ((sensor & 0b01111110) == 0b01111110));
     dee:	8f 3f       	cpi	r24, 0xFF	; 255
     df0:	39 f0       	breq	.+14     	; 0xe00 <_Z15check_crosslinev+0x1a>
     df2:	8e 77       	andi	r24, 0x7E	; 126
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	8e 37       	cpi	r24, 0x7E	; 126
     df8:	09 f0       	breq	.+2      	; 0xdfc <_Z15check_crosslinev+0x16>
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	89 2f       	mov	r24, r25
     dfe:	08 95       	ret
     e00:	81 e0       	ldi	r24, 0x01	; 1
}
     e02:	08 95       	ret

00000e04 <_Z15check_rightlinev>:
bool check_rightline( void )
{
	sensor = sensor_cmp();
     e04:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
     e08:	80 93 68 00 	sts	0x0068, r24
	return (((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111));
     e0c:	98 2f       	mov	r25, r24
     e0e:	9f 70       	andi	r25, 0x0F	; 15
     e10:	9f 30       	cpi	r25, 0x0F	; 15
     e12:	39 f0       	breq	.+14     	; 0xe22 <_Z15check_rightlinev+0x1e>
     e14:	8f 71       	andi	r24, 0x1F	; 31
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	8f 31       	cpi	r24, 0x1F	; 31
     e1a:	09 f0       	breq	.+2      	; 0xe1e <_Z15check_rightlinev+0x1a>
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	89 2f       	mov	r24, r25
     e20:	08 95       	ret
     e22:	81 e0       	ldi	r24, 0x01	; 1
}
     e24:	08 95       	ret

00000e26 <_Z14check_leftlinev>:
bool check_leftline( void )
{
	sensor = sensor_cmp();
     e26:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
     e2a:	80 93 68 00 	sts	0x0068, r24
	return (((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000));
     e2e:	98 2f       	mov	r25, r24
     e30:	90 7f       	andi	r25, 0xF0	; 240
     e32:	90 3f       	cpi	r25, 0xF0	; 240
     e34:	39 f0       	breq	.+14     	; 0xe44 <_Z14check_leftlinev+0x1e>
     e36:	88 7f       	andi	r24, 0xF8	; 248
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	88 3f       	cpi	r24, 0xF8	; 248
     e3c:	09 f0       	breq	.+2      	; 0xe40 <_Z14check_leftlinev+0x1a>
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	89 2f       	mov	r24, r25
     e42:	08 95       	ret
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	08 95       	ret

00000e48 <main>:

int16_t tmp = 0, tmp2;

int main(void)
{
	INIT();
     e48:	0e 94 7e 05 	call	0xafc	; 0xafc <_Z4INITv>
	sel_mode();
     e4c:	0e 94 30 06 	call	0xc60	; 0xc60 <_Z8sel_modev>
	
	if (get_switch2())
     e50:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_Z11get_switch2v>
     e54:	88 23       	and	r24, r24
     e56:	19 f0       	breq	.+6      	; 0xe5e <main+0x16>
	{
		servo_calibrate();
     e58:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_Z15servo_calibratev>
     e5c:	16 c0       	rjmp	.+44     	; 0xe8a <main+0x42>
	}
	else
	{
		while (true)
		{
			sensor_cmp();
     e5e:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
			led7(encoder_pulse);
     e62:	80 91 64 00 	lds	r24, 0x0064
     e66:	90 91 65 00 	lds	r25, 0x0065
     e6a:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
			if (get_button(BTN0)) encoder_pulse = 0;
     e6e:	8d ef       	ldi	r24, 0xFD	; 253
     e70:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     e74:	88 23       	and	r24, r24
     e76:	21 f0       	breq	.+8      	; 0xe80 <main+0x38>
     e78:	10 92 65 00 	sts	0x0065, r1
     e7c:	10 92 64 00 	sts	0x0064, r1
			if (get_button(BTN1)) break;
     e80:	8b ef       	ldi	r24, 0xFB	; 251
     e82:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     e86:	88 23       	and	r24, r24
     e88:	51 f3       	breq	.-44     	; 0xe5e <main+0x16>
		}	
	}
	
	pattern = 10; /* Chay thang */
     e8a:	8a e0       	ldi	r24, 0x0A	; 10
     e8c:	80 93 60 00 	sts	0x0060, r24
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     e90:	8f ef       	ldi	r24, 0xFF	; 255
     e92:	9f ef       	ldi	r25, 0xFF	; 255
     e94:	90 93 7c 00 	sts	0x007C, r25
     e98:	80 93 7b 00 	sts	0x007B, r24
				set_encoder(-1);
			}
			break; /* case 73 */
			
			default:
				pattern = 10;
     e9c:	0f 2e       	mov	r0, r31
     e9e:	fa e0       	ldi	r31, 0x0A	; 10
     ea0:	bf 2e       	mov	r11, r31
     ea2:	f0 2d       	mov	r31, r0
     ea4:	cc e0       	ldi	r28, 0x0C	; 12
     ea6:	d0 e0       	ldi	r29, 0x00	; 0
     ea8:	0f ef       	ldi	r16, 0xFF	; 255
     eaa:	1f ef       	ldi	r17, 0xFF	; 255
			case 62:
				led7(62);
				
				handle(50);
				speed( 100 ,80 );
				pattern = 63;
     eac:	0f 2e       	mov	r0, r31
     eae:	ff e3       	ldi	r31, 0x3F	; 63
     eb0:	6f 2e       	mov	r6, r31
     eb2:	f0 2d       	mov	r31, r0
			case 61:
				led7(61);
				sensor = sensor_cmp();
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000))
				{
					pattern = 21 ;
     eb4:	0f 2e       	mov	r0, r31
     eb6:	f5 e1       	ldi	r31, 0x15	; 21
     eb8:	af 2e       	mov	r10, r31
     eba:	f0 2d       	mov	r31, r0
				
				speed(100, 100);
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
				{
					pattern = 62;
     ebc:	0f 2e       	mov	r0, r31
     ebe:	fe e3       	ldi	r31, 0x3E	; 62
     ec0:	3f 2e       	mov	r3, r31
     ec2:	f0 2d       	mov	r31, r0
			case 52:
				led7(52);
				
				handle(-50);
				speed( 80 ,100 );
				pattern = 53;
     ec4:	0f 2e       	mov	r0, r31
     ec6:	f5 e3       	ldi	r31, 0x35	; 53
     ec8:	7f 2e       	mov	r7, r31
     eca:	f0 2d       	mov	r31, r0
			case 41:
				led7(41);
				
				if( timer_cnt > 200 ) /* 200ms */
				{
					pattern = 42;
     ecc:	0f 2e       	mov	r0, r31
     ece:	fa e2       	ldi	r31, 0x2A	; 42
     ed0:	5f 2e       	mov	r5, r31
     ed2:	f0 2d       	mov	r31, r0
			case 31:
				led7(31);
				
				if( timer_cnt > 200 ) /* 200ms */
				{
					pattern = 32;
     ed4:	68 94       	set
     ed6:	44 24       	eor	r4, r4
     ed8:	45 f8       	bld	r4, 5
			case 27: /* phai */
				led7(27);
				
				handle(SERVO_ANGLE_MAX); /* 120 */
				speed( 80 , -100 );
				pattern = 41;
     eda:	0f 2e       	mov	r0, r31
     edc:	f9 e2       	ldi	r31, 0x29	; 41
     ede:	8f 2e       	mov	r8, r31
     ee0:	f0 2d       	mov	r31, r0
			case 26: /* trai */
				led7(26);
				
				handle(-SERVO_ANGLE_MAX); /* -120 */
				speed( -100 , 80 );
				pattern = 31;
     ee2:	0f 2e       	mov	r0, r31
     ee4:	ff e1       	ldi	r31, 0x1F	; 31
     ee6:	9f 2e       	mov	r9, r31
     ee8:	f0 2d       	mov	r31, r0
	pattern = 10; /* Chay thang */
	set_encoder(-1);
	
    while (true)
    {
        switch (pattern)
     eea:	80 91 60 00 	lds	r24, 0x0060
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	fc 01       	movw	r30, r24
     ef2:	3a 97       	sbiw	r30, 0x0a	; 10
     ef4:	e0 34       	cpi	r30, 0x40	; 64
     ef6:	f1 05       	cpc	r31, r1
     ef8:	08 f0       	brcs	.+2      	; 0xefc <main+0xb4>
     efa:	58 c4       	rjmp	.+2224   	; 0x17ac <main+0x964>
     efc:	e6 5d       	subi	r30, 0xD6	; 214
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__tablejump2__>
		{
			/* Chay thang */
			case 10:
				led7(10);
     f04:	8a e0       	ldi	r24, 0x0A	; 10
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				if (check_crossline())     /* Cua vuong */
     f0c:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z15check_crosslinev>
     f10:	88 23       	and	r24, r24
     f12:	19 f0       	breq	.+6      	; 0xf1a <main+0xd2>
				{
					pattern = 21;
     f14:	a0 92 60 00 	sts	0x0060, r10
					break;
     f18:	e8 cf       	rjmp	.-48     	; 0xeea <main+0xa2>
				}
				else if (check_leftline()) /* Chuyen lan trai */
     f1a:	0e 94 13 07 	call	0xe26	; 0xe26 <_Z14check_leftlinev>
     f1e:	88 23       	and	r24, r24
     f20:	61 f0       	breq	.+24     	; 0xf3a <main+0xf2>
				{
					pattern = 51;
     f22:	83 e3       	ldi	r24, 0x33	; 51
     f24:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
     f28:	10 92 67 00 	sts	0x0067, r1
     f2c:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
     f30:	10 92 65 00 	sts	0x0065, r1
     f34:	10 92 64 00 	sts	0x0064, r1
					break;
     f38:	d8 cf       	rjmp	.-80     	; 0xeea <main+0xa2>
				}
				else if (check_rightline()) /* Chuyen lan phai */
     f3a:	0e 94 02 07 	call	0xe04	; 0xe04 <_Z15check_rightlinev>
     f3e:	88 23       	and	r24, r24
     f40:	61 f0       	breq	.+24     	; 0xf5a <main+0x112>
				{
					pattern = 61;
     f42:	8d e3       	ldi	r24, 0x3D	; 61
     f44:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
     f48:	10 92 67 00 	sts	0x0067, r1
     f4c:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
     f50:	10 92 65 00 	sts	0x0065, r1
     f54:	10 92 64 00 	sts	0x0064, r1
					break;
     f58:	c8 cf       	rjmp	.-112    	; 0xeea <main+0xa2>
				}
				
				switch (sensor_cmp() & 0b01111110)
     f5a:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
     f5e:	8e 77       	andi	r24, 0x7E	; 126
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	fc 01       	movw	r30, r24
     f64:	32 97       	sbiw	r30, 0x02	; 2
     f66:	ef 36       	cpi	r30, 0x6F	; 111
     f68:	f1 05       	cpc	r31, r1
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <main+0x126>
     f6c:	be cf       	rjmp	.-132    	; 0xeea <main+0xa2>
     f6e:	e6 59       	subi	r30, 0x96	; 150
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
						handle(0);
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
						speed(100 ,100);
     f7e:	64 e6       	ldi	r22, 0x64	; 100
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	84 e6       	ldi	r24, 0x64	; 100
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
					break;
     f8a:	af cf       	rjmp	.-162    	; 0xeea <main+0xa2>
					
					case 0b00011100:
					case 0b00001000:
						speed(100,100);
     f8c:	64 e6       	ldi	r22, 0x64	; 100
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	84 e6       	ldi	r24, 0x64	; 100
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(9);
     f98:	89 e0       	ldi	r24, 0x09	; 9
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
     fa0:	a4 cf       	rjmp	.-184    	; 0xeea <main+0xa2>
					case 0b00001100:
						speed(100,100);
     fa2:	64 e6       	ldi	r22, 0x64	; 100
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	84 e6       	ldi	r24, 0x64	; 100
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(17);
     fae:	81 e1       	ldi	r24, 0x11	; 17
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
     fb6:	99 cf       	rjmp	.-206    	; 0xeea <main+0xa2>
					case 0b00001110:
					case 0b00000100:
						speed(100,85);
     fb8:	65 e5       	ldi	r22, 0x55	; 85
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	84 e6       	ldi	r24, 0x64	; 100
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(31);
     fc4:	8f e1       	ldi	r24, 0x1F	; 31
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
     fcc:	8e cf       	rjmp	.-228    	; 0xeea <main+0xa2>
					case 0b00000110:
						speed(100,80);
     fce:	60 e5       	ldi	r22, 0x50	; 80
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	84 e6       	ldi	r24, 0x64	; 100
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(50);
     fda:	82 e3       	ldi	r24, 0x32	; 50
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
     fe2:	83 cf       	rjmp	.-250    	; 0xeea <main+0xa2>
					case 0b00000010:
						speed(100,70);
     fe4:	66 e4       	ldi	r22, 0x46	; 70
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	84 e6       	ldi	r24, 0x64	; 100
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(75);
     ff0:	8b e4       	ldi	r24, 0x4B	; 75
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
						pattern=11;	/* Lech phai goc lon */
     ff8:	8b e0       	ldi	r24, 0x0B	; 11
     ffa:	80 93 60 00 	sts	0x0060, r24
					break;		
     ffe:	75 cf       	rjmp	.-278    	; 0xeea <main+0xa2>
					
					case 0b00111000:
					case 0b00010000:
						speed(100,100);
    1000:	64 e6       	ldi	r22, 0x64	; 100
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	84 e6       	ldi	r24, 0x64	; 100
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(-9);
    100c:	87 ef       	ldi	r24, 0xF7	; 247
    100e:	9f ef       	ldi	r25, 0xFF	; 255
    1010:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1014:	6a cf       	rjmp	.-300    	; 0xeea <main+0xa2>
					case 0b00110000:
						speed(100,100);
    1016:	64 e6       	ldi	r22, 0x64	; 100
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	84 e6       	ldi	r24, 0x64	; 100
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(-17);
    1022:	8f ee       	ldi	r24, 0xEF	; 239
    1024:	9f ef       	ldi	r25, 0xFF	; 255
    1026:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    102a:	5f cf       	rjmp	.-322    	; 0xeea <main+0xa2>
					case 0b01110000:
					case 0b00100000:
						speed(85,100);
    102c:	64 e6       	ldi	r22, 0x64	; 100
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	85 e5       	ldi	r24, 0x55	; 85
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(-31);
    1038:	81 ee       	ldi	r24, 0xE1	; 225
    103a:	9f ef       	ldi	r25, 0xFF	; 255
    103c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1040:	54 cf       	rjmp	.-344    	; 0xeea <main+0xa2>
					case 0b01100000:
						speed(80,100);
    1042:	64 e6       	ldi	r22, 0x64	; 100
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	80 e5       	ldi	r24, 0x50	; 80
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(-50);
    104e:	8e ec       	ldi	r24, 0xCE	; 206
    1050:	9f ef       	ldi	r25, 0xFF	; 255
    1052:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1056:	49 cf       	rjmp	.-366    	; 0xeea <main+0xa2>
					case 0b01000000:
						speed(70,100);
    1058:	64 e6       	ldi	r22, 0x64	; 100
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	86 e4       	ldi	r24, 0x46	; 70
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(-75);
    1064:	85 eb       	ldi	r24, 0xB5	; 181
    1066:	9f ef       	ldi	r25, 0xFF	; 255
    1068:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
						pattern=12; /* Lech trai goc lon */
    106c:	8c e0       	ldi	r24, 0x0C	; 12
    106e:	80 93 60 00 	sts	0x0060, r24
					break;
    1072:	3b cf       	rjmp	.-394    	; 0xeea <main+0xa2>
				}
			break; /* case 10 */
			
			/* Lech phai goc lon */
			case 11:
				led7(11);
    1074:	8b e0       	ldi	r24, 0x0B	; 11
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
    107c:	d0 93 7c 00 	sts	0x007C, r29
    1080:	c0 93 7b 00 	sts	0x007B, r28
				set_encoder(12);
				switch (sensor_cmp() & 0b11001100)
    1084:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    1088:	8c 7c       	andi	r24, 0xCC	; 204
    108a:	8c 30       	cpi	r24, 0x0C	; 12
    108c:	d1 f1       	breq	.+116    	; 0x1102 <main+0x2ba>
    108e:	28 f4       	brcc	.+10     	; 0x109a <main+0x252>
    1090:	88 23       	and	r24, r24
    1092:	09 f1       	breq	.+66     	; 0x10d6 <main+0x28e>
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	51 f1       	breq	.+84     	; 0x10ec <main+0x2a4>
    1098:	49 c0       	rjmp	.+146    	; 0x112c <main+0x2e4>
    109a:	80 38       	cpi	r24, 0x80	; 128
    109c:	89 f0       	breq	.+34     	; 0x10c0 <main+0x278>
    109e:	80 3c       	cpi	r24, 0xC0	; 192
    10a0:	21 f0       	breq	.+8      	; 0x10aa <main+0x262>
    10a2:	80 36       	cpi	r24, 0x60	; 96
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <main+0x260>
    10a6:	42 c0       	rjmp	.+132    	; 0x112c <main+0x2e4>
    10a8:	3d c0       	rjmp	.+122    	; 0x1124 <main+0x2dc>
				{
					case 0b11000000:
						speed(80, /*0*/-10);
    10aa:	66 ef       	ldi	r22, 0xF6	; 246
    10ac:	7f ef       	ldi	r23, 0xFF	; 255
    10ae:	80 e5       	ldi	r24, 0x50	; 80
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(105);
    10b6:	89 e6       	ldi	r24, 0x69	; 105
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    10be:	15 cf       	rjmp	.-470    	; 0xeea <main+0xa2>
					
					case 0b10000000:
						speed(80, /*15*/5);
    10c0:	65 e0       	ldi	r22, 0x05	; 5
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	80 e5       	ldi	r24, 0x50	; 80
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(90);
    10cc:	8a e5       	ldi	r24, 0x5A	; 90
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    10d4:	0a cf       	rjmp	.-492    	; 0xeea <main+0xa2>
					
					case 0b00000000:
						speed(80, /*20*/10);
    10d6:	6a e0       	ldi	r22, 0x0A	; 10
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	80 e5       	ldi	r24, 0x50	; 80
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(78);
    10e2:	8e e4       	ldi	r24, 0x4E	; 78
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    10ea:	ff ce       	rjmp	.-514    	; 0xeea <main+0xa2>
					
					case 0b00000100:
						speed(80, /*25*/15);
    10ec:	6f e0       	ldi	r22, 0x0F	; 15
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	80 e5       	ldi	r24, 0x50	; 80
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(60);
    10f8:	8c e3       	ldi	r24, 0x3C	; 60
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1100:	f4 ce       	rjmp	.-536    	; 0xeea <main+0xa2>
					
					case 0b00001100:
						speed(80, /*30*/20);
    1102:	64 e1       	ldi	r22, 0x14	; 20
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	80 e5       	ldi	r24, 0x50	; 80
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(52);
    110e:	84 e3       	ldi	r24, 0x34	; 52
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
						pattern = 10;
    1116:	b0 92 60 00 	sts	0x0060, r11
    111a:	10 93 7c 00 	sts	0x007C, r17
    111e:	00 93 7b 00 	sts	0x007B, r16
    1122:	e3 ce       	rjmp	.-570    	; 0xeea <main+0xa2>
						set_encoder(-1);
					break;
					
					case 0b01100000:
					pattern=12;
    1124:	8c e0       	ldi	r24, 0x0C	; 12
    1126:	80 93 60 00 	sts	0x0060, r24
					break;
    112a:	df ce       	rjmp	.-578    	; 0xeea <main+0xa2>
					
					default:
						pattern=11;
    112c:	8b e0       	ldi	r24, 0x0B	; 11
    112e:	80 93 60 00 	sts	0x0060, r24
					break;
    1132:	db ce       	rjmp	.-586    	; 0xeea <main+0xa2>
				}
			break; /* case 11 */
			
			/* Lech trai goc lon */
			case 12:
				led7(12);
    1134:	ce 01       	movw	r24, r28
    1136:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
    113a:	d0 93 7c 00 	sts	0x007C, r29
    113e:	c0 93 7b 00 	sts	0x007B, r28
				set_encoder(12);
				switch(sensor_cmp() & 0b00110011)
    1142:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    1146:	83 73       	andi	r24, 0x33	; 51
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	69 f0       	breq	.+26     	; 0x1166 <main+0x31e>
    114c:	28 f4       	brcc	.+10     	; 0x1158 <main+0x310>
    114e:	88 23       	and	r24, r24
    1150:	01 f1       	breq	.+64     	; 0x1192 <main+0x34a>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	99 f0       	breq	.+38     	; 0x117c <main+0x334>
    1156:	44 c0       	rjmp	.+136    	; 0x11e0 <main+0x398>
    1158:	80 32       	cpi	r24, 0x20	; 32
    115a:	31 f1       	breq	.+76     	; 0x11a8 <main+0x360>
    115c:	80 33       	cpi	r24, 0x30	; 48
    115e:	79 f1       	breq	.+94     	; 0x11be <main+0x376>
    1160:	86 30       	cpi	r24, 0x06	; 6
    1162:	f1 f5       	brne	.+124    	; 0x11e0 <main+0x398>
    1164:	39 c0       	rjmp	.+114    	; 0x11d8 <main+0x390>
				{
					case 0b00000011:
						speed(-10,80);
    1166:	60 e5       	ldi	r22, 0x50	; 80
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	86 ef       	ldi	r24, 0xF6	; 246
    116c:	9f ef       	ldi	r25, 0xFF	; 255
    116e:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(-105);
    1172:	87 e9       	ldi	r24, 0x97	; 151
    1174:	9f ef       	ldi	r25, 0xFF	; 255
    1176:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    117a:	b7 ce       	rjmp	.-658    	; 0xeea <main+0xa2>
					
					case 0b00000001:
						speed(5,80);
    117c:	60 e5       	ldi	r22, 0x50	; 80
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	85 e0       	ldi	r24, 0x05	; 5
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(-90);
    1188:	86 ea       	ldi	r24, 0xA6	; 166
    118a:	9f ef       	ldi	r25, 0xFF	; 255
    118c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1190:	ac ce       	rjmp	.-680    	; 0xeea <main+0xa2>
					
					case 0b00000000:
						speed(10,80);
    1192:	60 e5       	ldi	r22, 0x50	; 80
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	8a e0       	ldi	r24, 0x0A	; 10
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(-78);
    119e:	82 eb       	ldi	r24, 0xB2	; 178
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    11a6:	a1 ce       	rjmp	.-702    	; 0xeea <main+0xa2>
					
					case 0b00100000:
						speed(15,80);
    11a8:	60 e5       	ldi	r22, 0x50	; 80
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	8f e0       	ldi	r24, 0x0F	; 15
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(-60);
    11b4:	84 ec       	ldi	r24, 0xC4	; 196
    11b6:	9f ef       	ldi	r25, 0xFF	; 255
    11b8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    11bc:	96 ce       	rjmp	.-724    	; 0xeea <main+0xa2>
					
					case 0b00110000:
						speed(20,80);
    11be:	60 e5       	ldi	r22, 0x50	; 80
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	84 e1       	ldi	r24, 0x14	; 20
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
						handle(-52);
    11ca:	8c ec       	ldi	r24, 0xCC	; 204
    11cc:	9f ef       	ldi	r25, 0xFF	; 255
    11ce:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
						pattern = 10;
    11d2:	b0 92 60 00 	sts	0x0060, r11
					break;
    11d6:	89 ce       	rjmp	.-750    	; 0xeea <main+0xa2>
					
					case 0b00000110:
					pattern=11;
    11d8:	8b e0       	ldi	r24, 0x0B	; 11
    11da:	80 93 60 00 	sts	0x0060, r24
					break;
    11de:	85 ce       	rjmp	.-758    	; 0xeea <main+0xa2>
					
					default:
						pattern=12;
    11e0:	8c e0       	ldi	r24, 0x0C	; 12
    11e2:	80 93 60 00 	sts	0x0060, r24
					break;
    11e6:	81 ce       	rjmp	.-766    	; 0xeea <main+0xa2>
				}
			break; /* case 12 */
			
			/* Cua vuong */
			case 21:
				led7(21);
    11e8:	85 e1       	ldi	r24, 0x15	; 21
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				handle(0);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
				speed(-40,-40);
    11f8:	68 ed       	ldi	r22, 0xD8	; 216
    11fa:	7f ef       	ldi	r23, 0xFF	; 255
    11fc:	88 ed       	ldi	r24, 0xD8	; 216
    11fe:	9f ef       	ldi	r25, 0xFF	; 255
    1200:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
				timer_cnt = 0;
    1204:	10 92 67 00 	sts	0x0067, r1
    1208:	10 92 66 00 	sts	0x0066, r1
				encoder_pulse = 0;
    120c:	10 92 65 00 	sts	0x0065, r1
    1210:	10 92 64 00 	sts	0x0064, r1
				pattern = 22;
    1214:	86 e1       	ldi	r24, 0x16	; 22
    1216:	80 93 60 00 	sts	0x0060, r24
			break; /* case 21 */
    121a:	67 ce       	rjmp	.-818    	; 0xeea <main+0xa2>
			
			case 22:
				led7(22);
    121c:	86 e1       	ldi	r24, 0x16	; 22
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				//if( timer_cnt > (285 - (delay * 200)) || encoder_pulse > 35 )
				if (speed_wait(2))
    1224:	80 91 61 00 	lds	r24, 0x0061
    1228:	83 30       	cpi	r24, 0x03	; 3
    122a:	88 f4       	brcc	.+34     	; 0x124e <main+0x406>
				{
					speed(50, 50);
    122c:	62 e3       	ldi	r22, 0x32	; 50
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	82 e3       	ldi	r24, 0x32	; 50
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
					pattern = 23;
    1238:	87 e1       	ldi	r24, 0x17	; 23
    123a:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    123e:	10 92 67 00 	sts	0x0067, r1
    1242:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
    1246:	10 92 65 00 	sts	0x0065, r1
    124a:	10 92 64 00 	sts	0x0064, r1
				}
				
				/* Nguoc lai thi chinh thang cho xe */
				switch (sensor_cmp() & 0b01111110)
    124e:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    1252:	8e 77       	andi	r24, 0x7E	; 126
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	fc 01       	movw	r30, r24
    1258:	32 97       	sbiw	r30, 0x02	; 2
    125a:	ef 36       	cpi	r30, 0x6F	; 111
    125c:	f1 05       	cpc	r31, r1
    125e:	08 f0       	brcs	.+2      	; 0x1262 <main+0x41a>
    1260:	44 ce       	rjmp	.-888    	; 0xeea <main+0xa2>
    1262:	e7 52       	subi	r30, 0x27	; 39
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle(0);
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1272:	3b ce       	rjmp	.-906    	; 0xeea <main+0xa2>
					
					case 0b00011100:
					case 0b00001000:
					handle(9);
    1274:	89 e0       	ldi	r24, 0x09	; 9
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    127c:	36 ce       	rjmp	.-916    	; 0xeea <main+0xa2>
					
					case 0b00001100:
					handle(17);
    127e:	81 e1       	ldi	r24, 0x11	; 17
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1286:	31 ce       	rjmp	.-926    	; 0xeea <main+0xa2>
					
					case 0b00001110:
					case 0b00000100:
					handle(31);
    1288:	8f e1       	ldi	r24, 0x1F	; 31
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1290:	2c ce       	rjmp	.-936    	; 0xeea <main+0xa2>
					
					case 0b00000110:
					handle(50);
    1292:	82 e3       	ldi	r24, 0x32	; 50
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    129a:	27 ce       	rjmp	.-946    	; 0xeea <main+0xa2>
					
					case 0b00000010:
					handle(75);
    129c:	8b e4       	ldi	r24, 0x4B	; 75
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12a4:	22 ce       	rjmp	.-956    	; 0xeea <main+0xa2>
					
					case 0b00111000:
					case 0b00010000:
					handle(-9);
    12a6:	87 ef       	ldi	r24, 0xF7	; 247
    12a8:	9f ef       	ldi	r25, 0xFF	; 255
    12aa:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12ae:	1d ce       	rjmp	.-966    	; 0xeea <main+0xa2>
					
					case 0b00110000:
					handle(-17);
    12b0:	8f ee       	ldi	r24, 0xEF	; 239
    12b2:	9f ef       	ldi	r25, 0xFF	; 255
    12b4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12b8:	18 ce       	rjmp	.-976    	; 0xeea <main+0xa2>
					
					case 0b01110000:
					case 0b00100000:
					handle(-31);
    12ba:	81 ee       	ldi	r24, 0xE1	; 225
    12bc:	9f ef       	ldi	r25, 0xFF	; 255
    12be:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12c2:	13 ce       	rjmp	.-986    	; 0xeea <main+0xa2>
					
					case 0b01100000:
					handle(-50);
    12c4:	8e ec       	ldi	r24, 0xCE	; 206
    12c6:	9f ef       	ldi	r25, 0xFF	; 255
    12c8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12cc:	0e ce       	rjmp	.-996    	; 0xeea <main+0xa2>
					
					case 0b01000000:
					handle(-75);
    12ce:	85 eb       	ldi	r24, 0xB5	; 181
    12d0:	9f ef       	ldi	r25, 0xFF	; 255
    12d2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12d6:	09 ce       	rjmp	.-1006   	; 0xeea <main+0xa2>
					break;
				}
			break; /* case 22 */
			
			case 23:
				led7(23);
    12d8:	87 e1       	ldi	r24, 0x17	; 23
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				sensor = sensor_cmp();
    12e0:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    12e4:	80 93 68 00 	sts	0x0068, r24
				/* Cua trai */
				if ((encoder_pulse > 12) && (((sensor & 0b11111000) == 0b11111000) || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11111100) == 0b11111100)))	/* Neu gap tin hieu nay la goc cua 90 trai thi be */
    12e8:	20 91 64 00 	lds	r18, 0x0064
    12ec:	30 91 65 00 	lds	r19, 0x0065
    12f0:	2d 30       	cpi	r18, 0x0D	; 13
    12f2:	31 05       	cpc	r19, r1
    12f4:	c0 f1       	brcs	.+112    	; 0x1366 <main+0x51e>
    12f6:	98 2f       	mov	r25, r24
    12f8:	98 7f       	andi	r25, 0xF8	; 248
    12fa:	98 3f       	cpi	r25, 0xF8	; 248
    12fc:	61 f0       	breq	.+24     	; 0x1316 <main+0x4ce>
    12fe:	98 2f       	mov	r25, r24
    1300:	90 7f       	andi	r25, 0xF0	; 240
    1302:	90 3f       	cpi	r25, 0xF0	; 240
    1304:	41 f0       	breq	.+16     	; 0x1316 <main+0x4ce>
    1306:	98 2f       	mov	r25, r24
    1308:	90 7e       	andi	r25, 0xE0	; 224
    130a:	90 3e       	cpi	r25, 0xE0	; 224
    130c:	21 f0       	breq	.+8      	; 0x1316 <main+0x4ce>
    130e:	98 2f       	mov	r25, r24
    1310:	9c 7f       	andi	r25, 0xFC	; 252
    1312:	9c 3f       	cpi	r25, 0xFC	; 252
    1314:	61 f4       	brne	.+24     	; 0x132e <main+0x4e6>
				{
					pattern = 26;
    1316:	8a e1       	ldi	r24, 0x1A	; 26
    1318:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    131c:	10 92 67 00 	sts	0x0067, r1
    1320:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
    1324:	10 92 65 00 	sts	0x0065, r1
    1328:	10 92 64 00 	sts	0x0064, r1
					break;
    132c:	de cd       	rjmp	.-1092   	; 0xeea <main+0xa2>
				}
				/* Cua phai */
				if ((encoder_pulse > 12) && (((sensor & 0b00011111) == 0b00011111 ) || ((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00111111) == 0b00111111))) /* Neu gap tin hieu nay la goc cua 90 phai thi be */
    132e:	98 2f       	mov	r25, r24
    1330:	9f 71       	andi	r25, 0x1F	; 31
    1332:	9f 31       	cpi	r25, 0x1F	; 31
    1334:	61 f0       	breq	.+24     	; 0x134e <main+0x506>
    1336:	98 2f       	mov	r25, r24
    1338:	97 70       	andi	r25, 0x07	; 7
    133a:	97 30       	cpi	r25, 0x07	; 7
    133c:	41 f0       	breq	.+16     	; 0x134e <main+0x506>
    133e:	98 2f       	mov	r25, r24
    1340:	9f 70       	andi	r25, 0x0F	; 15
    1342:	9f 30       	cpi	r25, 0x0F	; 15
    1344:	21 f0       	breq	.+8      	; 0x134e <main+0x506>
    1346:	98 2f       	mov	r25, r24
    1348:	9f 73       	andi	r25, 0x3F	; 63
    134a:	9f 33       	cpi	r25, 0x3F	; 63
    134c:	61 f4       	brne	.+24     	; 0x1366 <main+0x51e>
				{
					pattern = 27;
    134e:	8b e1       	ldi	r24, 0x1B	; 27
    1350:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    1354:	10 92 67 00 	sts	0x0067, r1
    1358:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
    135c:	10 92 65 00 	sts	0x0065, r1
    1360:	10 92 64 00 	sts	0x0064, r1
					break;
    1364:	c2 cd       	rjmp	.-1148   	; 0xeea <main+0xa2>
				}
				/* No line */
				if ((sensor & 0b01111110) == 0x00)
    1366:	8e 77       	andi	r24, 0x7E	; 126
    1368:	a9 f4       	brne	.+42     	; 0x1394 <main+0x54c>
				{
					pattern = 73;
    136a:	89 e4       	ldi	r24, 0x49	; 73
    136c:	80 93 60 00 	sts	0x0060, r24
					handle(0);
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					speed(100, 100);
    1378:	64 e6       	ldi	r22, 0x64	; 100
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	84 e6       	ldi	r24, 0x64	; 100
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
					timer_cnt = 0;
    1384:	10 92 67 00 	sts	0x0067, r1
    1388:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
    138c:	10 92 65 00 	sts	0x0065, r1
    1390:	10 92 64 00 	sts	0x0064, r1
				}
				
				/* Nguoc lai thi chinh thang cho xe */
				switch (sensor_cmp() & 0b01111110)
    1394:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    1398:	8e 77       	andi	r24, 0x7E	; 126
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	fc 01       	movw	r30, r24
    139e:	32 97       	sbiw	r30, 0x02	; 2
    13a0:	ef 36       	cpi	r30, 0x6F	; 111
    13a2:	f1 05       	cpc	r31, r1
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <main+0x560>
    13a6:	a1 cd       	rjmp	.-1214   	; 0xeea <main+0xa2>
    13a8:	e8 5b       	subi	r30, 0xB8	; 184
    13aa:	fe 4f       	sbci	r31, 0xFE	; 254
    13ac:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle(0);
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    13b8:	98 cd       	rjmp	.-1232   	; 0xeea <main+0xa2>
					
					case 0b00011100:
					case 0b00001000:
					handle(9);
    13ba:	89 e0       	ldi	r24, 0x09	; 9
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    13c2:	93 cd       	rjmp	.-1242   	; 0xeea <main+0xa2>
					
					case 0b00001100:
					handle(17);
    13c4:	81 e1       	ldi	r24, 0x11	; 17
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    13cc:	8e cd       	rjmp	.-1252   	; 0xeea <main+0xa2>
					
					case 0b00001110:
					case 0b00000100:
					handle(31);
    13ce:	8f e1       	ldi	r24, 0x1F	; 31
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    13d6:	89 cd       	rjmp	.-1262   	; 0xeea <main+0xa2>
					
					case 0b00000110:
					handle(50);
    13d8:	82 e3       	ldi	r24, 0x32	; 50
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    13e0:	84 cd       	rjmp	.-1272   	; 0xeea <main+0xa2>
					
					case 0b00000010:
					handle(75);
    13e2:	8b e4       	ldi	r24, 0x4B	; 75
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    13ea:	7f cd       	rjmp	.-1282   	; 0xeea <main+0xa2>
					
					case 0b00111000:
					case 0b00010000:
					handle(-9);
    13ec:	87 ef       	ldi	r24, 0xF7	; 247
    13ee:	9f ef       	ldi	r25, 0xFF	; 255
    13f0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    13f4:	7a cd       	rjmp	.-1292   	; 0xeea <main+0xa2>
					
					case 0b00110000:
					handle(-17);
    13f6:	8f ee       	ldi	r24, 0xEF	; 239
    13f8:	9f ef       	ldi	r25, 0xFF	; 255
    13fa:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    13fe:	75 cd       	rjmp	.-1302   	; 0xeea <main+0xa2>
					
					case 0b01110000:
					case 0b00100000:
					handle(-31);
    1400:	81 ee       	ldi	r24, 0xE1	; 225
    1402:	9f ef       	ldi	r25, 0xFF	; 255
    1404:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1408:	70 cd       	rjmp	.-1312   	; 0xeea <main+0xa2>
					
					case 0b01100000:
					handle(-50);
    140a:	8e ec       	ldi	r24, 0xCE	; 206
    140c:	9f ef       	ldi	r25, 0xFF	; 255
    140e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1412:	6b cd       	rjmp	.-1322   	; 0xeea <main+0xa2>
					
					case 0b01000000:
					handle(-75);
    1414:	85 eb       	ldi	r24, 0xB5	; 181
    1416:	9f ef       	ldi	r25, 0xFF	; 255
    1418:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    141c:	66 cd       	rjmp	.-1332   	; 0xeea <main+0xa2>
					break;
				}
			break; /* case 23 */
			
			case 26: /* trai */
				led7(26);
    141e:	8a e1       	ldi	r24, 0x1A	; 26
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				handle(-SERVO_ANGLE_MAX); /* -120 */
    1426:	85 e6       	ldi	r24, 0x65	; 101
    1428:	9f ef       	ldi	r25, 0xFF	; 255
    142a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
				speed( -100 , 80 );
    142e:	60 e5       	ldi	r22, 0x50	; 80
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	8c e9       	ldi	r24, 0x9C	; 156
    1434:	9f ef       	ldi	r25, 0xFF	; 255
    1436:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
				pattern = 31;
    143a:	90 92 60 00 	sts	0x0060, r9
				timer_cnt = 0;
    143e:	10 92 67 00 	sts	0x0067, r1
    1442:	10 92 66 00 	sts	0x0066, r1
				encoder_pulse = 0;
    1446:	10 92 65 00 	sts	0x0065, r1
    144a:	10 92 64 00 	sts	0x0064, r1
			break; /* case 26 */
    144e:	4d cd       	rjmp	.-1382   	; 0xeea <main+0xa2>
			
			case 27: /* phai */
				led7(27);
    1450:	8b e1       	ldi	r24, 0x1B	; 27
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				handle(SERVO_ANGLE_MAX); /* 120 */
    1458:	8b e9       	ldi	r24, 0x9B	; 155
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
				speed( 80 , -100 );
    1460:	6c e9       	ldi	r22, 0x9C	; 156
    1462:	7f ef       	ldi	r23, 0xFF	; 255
    1464:	80 e5       	ldi	r24, 0x50	; 80
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
				pattern = 41;
    146c:	80 92 60 00 	sts	0x0060, r8
				timer_cnt = 0;
    1470:	10 92 67 00 	sts	0x0067, r1
    1474:	10 92 66 00 	sts	0x0066, r1
				encoder_pulse = 0;
    1478:	10 92 65 00 	sts	0x0065, r1
    147c:	10 92 64 00 	sts	0x0064, r1
			break; /* case 27 */
    1480:	34 cd       	rjmp	.-1432   	; 0xeea <main+0xa2>
			
			case 31:
				led7(31);
    1482:	8f e1       	ldi	r24, 0x1F	; 31
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				if( timer_cnt > 200 ) /* 200ms */
    148a:	80 91 66 00 	lds	r24, 0x0066
    148e:	90 91 67 00 	lds	r25, 0x0067
    1492:	89 3c       	cpi	r24, 0xC9	; 201
    1494:	91 05       	cpc	r25, r1
    1496:	08 f4       	brcc	.+2      	; 0x149a <main+0x652>
    1498:	28 cd       	rjmp	.-1456   	; 0xeea <main+0xa2>
				{
					pattern = 32;
    149a:	40 92 60 00 	sts	0x0060, r4
					timer_cnt = 0;
    149e:	10 92 67 00 	sts	0x0067, r1
    14a2:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
    14a6:	10 92 65 00 	sts	0x0065, r1
    14aa:	10 92 64 00 	sts	0x0064, r1
    14ae:	1d cd       	rjmp	.-1478   	; 0xeea <main+0xa2>
				}
			break; /* case 31 */
			
			case 32:
				led7(32);
    14b0:	80 e2       	ldi	r24, 0x20	; 32
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				sensor = sensor_cmp();
    14b8:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    14bc:	80 93 68 00 	sts	0x0068, r24
				if((sensor & 0b11100111) == 0b00100000)
    14c0:	87 7e       	andi	r24, 0xE7	; 231
    14c2:	80 32       	cpi	r24, 0x20	; 32
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <main+0x680>
    14c6:	11 cd       	rjmp	.-1502   	; 0xeea <main+0xa2>
				{
					pattern = 10;
    14c8:	b0 92 60 00 	sts	0x0060, r11
    14cc:	0e cd       	rjmp	.-1508   	; 0xeea <main+0xa2>
				}
			break; /* case 32 */
			
			case 41:
				led7(41);
    14ce:	89 e2       	ldi	r24, 0x29	; 41
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				if( timer_cnt > 200 ) /* 200ms */
    14d6:	80 91 66 00 	lds	r24, 0x0066
    14da:	90 91 67 00 	lds	r25, 0x0067
    14de:	89 3c       	cpi	r24, 0xC9	; 201
    14e0:	91 05       	cpc	r25, r1
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <main+0x69e>
    14e4:	02 cd       	rjmp	.-1532   	; 0xeea <main+0xa2>
				{
					pattern = 42;
    14e6:	50 92 60 00 	sts	0x0060, r5
					timer_cnt = 0;
    14ea:	10 92 67 00 	sts	0x0067, r1
    14ee:	10 92 66 00 	sts	0x0066, r1
    14f2:	fb cc       	rjmp	.-1546   	; 0xeea <main+0xa2>
				}
			break; /* case 41 */
			
			case 42:
				led7(42);
    14f4:	8a e2       	ldi	r24, 0x2A	; 42
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				sensor = sensor_cmp();
    14fc:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    1500:	80 93 68 00 	sts	0x0068, r24
				if((sensor & 0b11100111) == 0b00000100) 
    1504:	87 7e       	andi	r24, 0xE7	; 231
    1506:	84 30       	cpi	r24, 0x04	; 4
    1508:	09 f0       	breq	.+2      	; 0x150c <main+0x6c4>
    150a:	ef cc       	rjmp	.-1570   	; 0xeea <main+0xa2>
				{
					pattern = 10;
    150c:	b0 92 60 00 	sts	0x0060, r11
    1510:	ec cc       	rjmp	.-1576   	; 0xeea <main+0xa2>
				}
			break; /* case 42 */
			
			/* Chuyen lan trai */
			case 51:
				led7(51);
    1512:	83 e3       	ldi	r24, 0x33	; 51
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				sensor = sensor_cmp();
    151a:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    151e:	80 93 68 00 	sts	0x0068, r24
				if (((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111))
    1522:	98 2f       	mov	r25, r24
    1524:	97 70       	andi	r25, 0x07	; 7
    1526:	97 30       	cpi	r25, 0x07	; 7
    1528:	39 f0       	breq	.+14     	; 0x1538 <main+0x6f0>
    152a:	98 2f       	mov	r25, r24
    152c:	9f 70       	andi	r25, 0x0F	; 15
    152e:	9f 30       	cpi	r25, 0x0F	; 15
    1530:	19 f0       	breq	.+6      	; 0x1538 <main+0x6f0>
    1532:	8f 71       	andi	r24, 0x1F	; 31
    1534:	8f 31       	cpi	r24, 0x1F	; 31
    1536:	19 f4       	brne	.+6      	; 0x153e <main+0x6f6>
				{
					pattern = 21;
    1538:	a0 92 60 00 	sts	0x0060, r10
					break;
    153c:	d6 cc       	rjmp	.-1620   	; 0xeea <main+0xa2>
				}
				
				speed(100, 100);
    153e:	64 e6       	ldi	r22, 0x64	; 100
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	84 e6       	ldi	r24, 0x64	; 100
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    154a:	80 91 64 00 	lds	r24, 0x0064
    154e:	90 91 65 00 	lds	r25, 0x0065
    1552:	49 97       	sbiw	r24, 0x19	; 25
    1554:	40 f4       	brcc	.+16     	; 0x1566 <main+0x71e>
    1556:	80 91 66 00 	lds	r24, 0x0066
    155a:	90 91 67 00 	lds	r25, 0x0067
    155e:	88 37       	cpi	r24, 0x78	; 120
    1560:	91 05       	cpc	r25, r1
    1562:	08 f4       	brcc	.+2      	; 0x1566 <main+0x71e>
    1564:	c2 cc       	rjmp	.-1660   	; 0xeea <main+0xa2>
				{
					pattern = 52;
    1566:	84 e3       	ldi	r24, 0x34	; 52
    1568:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    156c:	10 92 67 00 	sts	0x0067, r1
    1570:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse=0;
    1574:	10 92 65 00 	sts	0x0065, r1
    1578:	10 92 64 00 	sts	0x0064, r1
    157c:	b6 cc       	rjmp	.-1684   	; 0xeea <main+0xa2>
				}
			break; /* case 51 */
			
			case 52:
				led7(52);
    157e:	84 e3       	ldi	r24, 0x34	; 52
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				handle(-50);
    1586:	8e ec       	ldi	r24, 0xCE	; 206
    1588:	9f ef       	ldi	r25, 0xFF	; 255
    158a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
				speed( 80 ,100 );
    158e:	64 e6       	ldi	r22, 0x64	; 100
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	80 e5       	ldi	r24, 0x50	; 80
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
				pattern = 53;
    159a:	70 92 60 00 	sts	0x0060, r7
				timer_cnt = 0;
    159e:	10 92 67 00 	sts	0x0067, r1
    15a2:	10 92 66 00 	sts	0x0066, r1
				encoder_pulse = 0;
    15a6:	10 92 65 00 	sts	0x0065, r1
    15aa:	10 92 64 00 	sts	0x0064, r1
			break; /* case 52 */
    15ae:	9d cc       	rjmp	.-1734   	; 0xeea <main+0xa2>
			
			case 53:
				led7(53);
    15b0:	85 e3       	ldi	r24, 0x35	; 53
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				sensor = sensor_cmp();
    15b8:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    15bc:	28 2e       	mov	r2, r24
    15be:	80 93 68 00 	sts	0x0068, r24
				if(((encoder_pulse > 100) || (timer_cnt > 200 * delay)) && ((sensor & 0b00110000 ) == 0b00110000))
    15c2:	80 91 64 00 	lds	r24, 0x0064
    15c6:	90 91 65 00 	lds	r25, 0x0065
    15ca:	85 36       	cpi	r24, 0x65	; 101
    15cc:	91 05       	cpc	r25, r1
    15ce:	08 f5       	brcc	.+66     	; 0x1612 <main+0x7ca>
    15d0:	60 91 66 00 	lds	r22, 0x0066
    15d4:	70 91 67 00 	lds	r23, 0x0067
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatunsisf>
    15e0:	6b 01       	movw	r12, r22
    15e2:	7c 01       	movw	r14, r24
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	48 e4       	ldi	r20, 0x48	; 72
    15ea:	53 e4       	ldi	r21, 0x43	; 67
    15ec:	60 91 6c 00 	lds	r22, 0x006C
    15f0:	70 91 6d 00 	lds	r23, 0x006D
    15f4:	80 91 6e 00 	lds	r24, 0x006E
    15f8:	90 91 6f 00 	lds	r25, 0x006F
    15fc:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    1600:	9b 01       	movw	r18, r22
    1602:	ac 01       	movw	r20, r24
    1604:	c7 01       	movw	r24, r14
    1606:	b6 01       	movw	r22, r12
    1608:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__gesf2>
    160c:	18 16       	cp	r1, r24
    160e:	0c f0       	brlt	.+2      	; 0x1612 <main+0x7ca>
    1610:	6c cc       	rjmp	.-1832   	; 0xeea <main+0xa2>
    1612:	82 2d       	mov	r24, r2
    1614:	80 73       	andi	r24, 0x30	; 48
    1616:	80 33       	cpi	r24, 0x30	; 48
    1618:	09 f0       	breq	.+2      	; 0x161c <main+0x7d4>
    161a:	67 cc       	rjmp	.-1842   	; 0xeea <main+0xa2>
				{
					pattern = 10;
    161c:	b0 92 60 00 	sts	0x0060, r11
    1620:	64 cc       	rjmp	.-1848   	; 0xeea <main+0xa2>
				}
			break; /* case 53 */
			
			/* Chuyen lan phai */
			case 61:
				led7(61);
    1622:	8d e3       	ldi	r24, 0x3D	; 61
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				sensor = sensor_cmp();
    162a:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    162e:	80 93 68 00 	sts	0x0068, r24
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000))
    1632:	98 2f       	mov	r25, r24
    1634:	90 7e       	andi	r25, 0xE0	; 224
    1636:	90 3e       	cpi	r25, 0xE0	; 224
    1638:	39 f0       	breq	.+14     	; 0x1648 <main+0x800>
    163a:	98 2f       	mov	r25, r24
    163c:	90 7f       	andi	r25, 0xF0	; 240
    163e:	90 3f       	cpi	r25, 0xF0	; 240
    1640:	19 f0       	breq	.+6      	; 0x1648 <main+0x800>
    1642:	88 7f       	andi	r24, 0xF8	; 248
    1644:	88 3f       	cpi	r24, 0xF8	; 248
    1646:	19 f4       	brne	.+6      	; 0x164e <main+0x806>
				{
					pattern = 21 ;
    1648:	a0 92 60 00 	sts	0x0060, r10
					break;
    164c:	4e cc       	rjmp	.-1892   	; 0xeea <main+0xa2>
				}
				
				speed(100, 100);
    164e:	64 e6       	ldi	r22, 0x64	; 100
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	84 e6       	ldi	r24, 0x64	; 100
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    165a:	80 91 64 00 	lds	r24, 0x0064
    165e:	90 91 65 00 	lds	r25, 0x0065
    1662:	49 97       	sbiw	r24, 0x19	; 25
    1664:	40 f4       	brcc	.+16     	; 0x1676 <main+0x82e>
    1666:	80 91 66 00 	lds	r24, 0x0066
    166a:	90 91 67 00 	lds	r25, 0x0067
    166e:	88 37       	cpi	r24, 0x78	; 120
    1670:	91 05       	cpc	r25, r1
    1672:	08 f4       	brcc	.+2      	; 0x1676 <main+0x82e>
    1674:	3a cc       	rjmp	.-1932   	; 0xeea <main+0xa2>
				{
					pattern = 62;
    1676:	30 92 60 00 	sts	0x0060, r3
					timer_cnt = 0;
    167a:	10 92 67 00 	sts	0x0067, r1
    167e:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse=0;
    1682:	10 92 65 00 	sts	0x0065, r1
    1686:	10 92 64 00 	sts	0x0064, r1
    168a:	2f cc       	rjmp	.-1954   	; 0xeea <main+0xa2>
				}
			break; /* case 61 */
			
			case 62:
				led7(62);
    168c:	8e e3       	ldi	r24, 0x3E	; 62
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				handle(50);
    1694:	82 e3       	ldi	r24, 0x32	; 50
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
				speed( 100 ,80 );
    169c:	60 e5       	ldi	r22, 0x50	; 80
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	84 e6       	ldi	r24, 0x64	; 100
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
				pattern = 63;
    16a8:	60 92 60 00 	sts	0x0060, r6
				timer_cnt = 0;
    16ac:	10 92 67 00 	sts	0x0067, r1
    16b0:	10 92 66 00 	sts	0x0066, r1
				encoder_pulse = 0;
    16b4:	10 92 65 00 	sts	0x0065, r1
    16b8:	10 92 64 00 	sts	0x0064, r1
			break; /* case 62 */
    16bc:	16 cc       	rjmp	.-2004   	; 0xeea <main+0xa2>
			
			case 63:
				led7(63);
    16be:	8f e3       	ldi	r24, 0x3F	; 63
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
				
				sensor = sensor_cmp();
    16c6:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    16ca:	28 2e       	mov	r2, r24
    16cc:	80 93 68 00 	sts	0x0068, r24
				if(((encoder_pulse > 100) || (timer_cnt > 200 * delay)) && ((sensor & 0b00110000 ) == 0b00110000))
    16d0:	80 91 64 00 	lds	r24, 0x0064
    16d4:	90 91 65 00 	lds	r25, 0x0065
    16d8:	85 36       	cpi	r24, 0x65	; 101
    16da:	91 05       	cpc	r25, r1
    16dc:	08 f5       	brcc	.+66     	; 0x1720 <main+0x8d8>
    16de:	60 91 66 00 	lds	r22, 0x0066
    16e2:	70 91 67 00 	lds	r23, 0x0067
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__floatunsisf>
    16ee:	6b 01       	movw	r12, r22
    16f0:	7c 01       	movw	r14, r24
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	48 e4       	ldi	r20, 0x48	; 72
    16f8:	53 e4       	ldi	r21, 0x43	; 67
    16fa:	60 91 6c 00 	lds	r22, 0x006C
    16fe:	70 91 6d 00 	lds	r23, 0x006D
    1702:	80 91 6e 00 	lds	r24, 0x006E
    1706:	90 91 6f 00 	lds	r25, 0x006F
    170a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__mulsf3>
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	c7 01       	movw	r24, r14
    1714:	b6 01       	movw	r22, r12
    1716:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__gesf2>
    171a:	18 16       	cp	r1, r24
    171c:	0c f0       	brlt	.+2      	; 0x1720 <main+0x8d8>
    171e:	e5 cb       	rjmp	.-2102   	; 0xeea <main+0xa2>
    1720:	82 2d       	mov	r24, r2
    1722:	80 73       	andi	r24, 0x30	; 48
    1724:	80 33       	cpi	r24, 0x30	; 48
    1726:	09 f0       	breq	.+2      	; 0x172a <main+0x8e2>
    1728:	e0 cb       	rjmp	.-2112   	; 0xeea <main+0xa2>
				{
					pattern = 10;
    172a:	b0 92 60 00 	sts	0x0060, r11
    172e:	dd cb       	rjmp	.-2118   	; 0xeea <main+0xa2>
				}
			break; /* case 63 */
			
			/* No line */
			case 73:
			led7(73);
    1730:	89 e4       	ldi	r24, 0x49	; 73
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 6d 03 	call	0x6da	; 0x6da <_Z4led7j>
    1738:	d0 93 7c 00 	sts	0x007C, r29
    173c:	c0 93 7b 00 	sts	0x007B, r28
			set_encoder(12);
			speed(60,60);
    1740:	6c e3       	ldi	r22, 0x3C	; 60
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	8c e3       	ldi	r24, 0x3C	; 60
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 ef 02 	call	0x5de	; 0x5de <_Z5speedii>
			sensor = sensor_cmp();
    174c:	0e 94 b4 04 	call	0x968	; 0x968 <_Z10sensor_cmpv>
    1750:	80 93 68 00 	sts	0x0068, r24
			if ((sensor & 0b11000000) == 0b11000000) handle(40);
    1754:	80 7c       	andi	r24, 0xC0	; 192
    1756:	80 3c       	cpi	r24, 0xC0	; 192
    1758:	21 f4       	brne	.+8      	; 0x1762 <main+0x91a>
    175a:	88 e2       	ldi	r24, 0x28	; 40
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
			if ((sensor & 0b10000000) == 0b10000000) handle(30);
    1762:	80 91 68 00 	lds	r24, 0x0068
    1766:	88 23       	and	r24, r24
    1768:	24 f4       	brge	.+8      	; 0x1772 <main+0x92a>
    176a:	8e e1       	ldi	r24, 0x1E	; 30
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
			if ((sensor & 0b00000011) == 0b00000011) handle(-40);
    1772:	80 91 68 00 	lds	r24, 0x0068
    1776:	83 70       	andi	r24, 0x03	; 3
    1778:	83 30       	cpi	r24, 0x03	; 3
    177a:	21 f4       	brne	.+8      	; 0x1784 <main+0x93c>
    177c:	88 ed       	ldi	r24, 0xD8	; 216
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
			if ((sensor & 0b00000001) == 0b00000001) handle(-30);
    1784:	80 91 68 00 	lds	r24, 0x0068
    1788:	80 ff       	sbrs	r24, 0
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <main+0x94c>
    178c:	82 ee       	ldi	r24, 0xE2	; 226
    178e:	9f ef       	ldi	r25, 0xFF	; 255
    1790:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
			if ((sensor & 0b00111100) != 0)
    1794:	80 91 68 00 	lds	r24, 0x0068
    1798:	8c 73       	andi	r24, 0x3C	; 60
    179a:	09 f4       	brne	.+2      	; 0x179e <main+0x956>
    179c:	a6 cb       	rjmp	.-2228   	; 0xeea <main+0xa2>
			{
				pattern = 10;
    179e:	b0 92 60 00 	sts	0x0060, r11
    17a2:	10 93 7c 00 	sts	0x007C, r17
    17a6:	00 93 7b 00 	sts	0x007B, r16
    17aa:	9f cb       	rjmp	.-2242   	; 0xeea <main+0xa2>
				set_encoder(-1);
			}
			break; /* case 73 */
			
			default:
				pattern = 10;
    17ac:	b0 92 60 00 	sts	0x0060, r11
			break; /* default */
    17b0:	9c cb       	rjmp	.-2248   	; 0xeea <main+0xa2>

000017b2 <__subsf3>:
    17b2:	50 58       	subi	r21, 0x80	; 128

000017b4 <__addsf3>:
    17b4:	bb 27       	eor	r27, r27
    17b6:	aa 27       	eor	r26, r26
    17b8:	0e d0       	rcall	.+28     	; 0x17d6 <__addsf3x>
    17ba:	75 c1       	rjmp	.+746    	; 0x1aa6 <__fp_round>
    17bc:	66 d1       	rcall	.+716    	; 0x1a8a <__fp_pscA>
    17be:	30 f0       	brcs	.+12     	; 0x17cc <__addsf3+0x18>
    17c0:	6b d1       	rcall	.+726    	; 0x1a98 <__fp_pscB>
    17c2:	20 f0       	brcs	.+8      	; 0x17cc <__addsf3+0x18>
    17c4:	31 f4       	brne	.+12     	; 0x17d2 <__addsf3+0x1e>
    17c6:	9f 3f       	cpi	r25, 0xFF	; 255
    17c8:	11 f4       	brne	.+4      	; 0x17ce <__addsf3+0x1a>
    17ca:	1e f4       	brtc	.+6      	; 0x17d2 <__addsf3+0x1e>
    17cc:	5b c1       	rjmp	.+694    	; 0x1a84 <__fp_nan>
    17ce:	0e f4       	brtc	.+2      	; 0x17d2 <__addsf3+0x1e>
    17d0:	e0 95       	com	r30
    17d2:	e7 fb       	bst	r30, 7
    17d4:	51 c1       	rjmp	.+674    	; 0x1a78 <__fp_inf>

000017d6 <__addsf3x>:
    17d6:	e9 2f       	mov	r30, r25
    17d8:	77 d1       	rcall	.+750    	; 0x1ac8 <__fp_split3>
    17da:	80 f3       	brcs	.-32     	; 0x17bc <__addsf3+0x8>
    17dc:	ba 17       	cp	r27, r26
    17de:	62 07       	cpc	r22, r18
    17e0:	73 07       	cpc	r23, r19
    17e2:	84 07       	cpc	r24, r20
    17e4:	95 07       	cpc	r25, r21
    17e6:	18 f0       	brcs	.+6      	; 0x17ee <__addsf3x+0x18>
    17e8:	71 f4       	brne	.+28     	; 0x1806 <__addsf3x+0x30>
    17ea:	9e f5       	brtc	.+102    	; 0x1852 <__addsf3x+0x7c>
    17ec:	8f c1       	rjmp	.+798    	; 0x1b0c <__fp_zero>
    17ee:	0e f4       	brtc	.+2      	; 0x17f2 <__addsf3x+0x1c>
    17f0:	e0 95       	com	r30
    17f2:	0b 2e       	mov	r0, r27
    17f4:	ba 2f       	mov	r27, r26
    17f6:	a0 2d       	mov	r26, r0
    17f8:	0b 01       	movw	r0, r22
    17fa:	b9 01       	movw	r22, r18
    17fc:	90 01       	movw	r18, r0
    17fe:	0c 01       	movw	r0, r24
    1800:	ca 01       	movw	r24, r20
    1802:	a0 01       	movw	r20, r0
    1804:	11 24       	eor	r1, r1
    1806:	ff 27       	eor	r31, r31
    1808:	59 1b       	sub	r21, r25
    180a:	99 f0       	breq	.+38     	; 0x1832 <__addsf3x+0x5c>
    180c:	59 3f       	cpi	r21, 0xF9	; 249
    180e:	50 f4       	brcc	.+20     	; 0x1824 <__addsf3x+0x4e>
    1810:	50 3e       	cpi	r21, 0xE0	; 224
    1812:	68 f1       	brcs	.+90     	; 0x186e <__addsf3x+0x98>
    1814:	1a 16       	cp	r1, r26
    1816:	f0 40       	sbci	r31, 0x00	; 0
    1818:	a2 2f       	mov	r26, r18
    181a:	23 2f       	mov	r18, r19
    181c:	34 2f       	mov	r19, r20
    181e:	44 27       	eor	r20, r20
    1820:	58 5f       	subi	r21, 0xF8	; 248
    1822:	f3 cf       	rjmp	.-26     	; 0x180a <__addsf3x+0x34>
    1824:	46 95       	lsr	r20
    1826:	37 95       	ror	r19
    1828:	27 95       	ror	r18
    182a:	a7 95       	ror	r26
    182c:	f0 40       	sbci	r31, 0x00	; 0
    182e:	53 95       	inc	r21
    1830:	c9 f7       	brne	.-14     	; 0x1824 <__addsf3x+0x4e>
    1832:	7e f4       	brtc	.+30     	; 0x1852 <__addsf3x+0x7c>
    1834:	1f 16       	cp	r1, r31
    1836:	ba 0b       	sbc	r27, r26
    1838:	62 0b       	sbc	r22, r18
    183a:	73 0b       	sbc	r23, r19
    183c:	84 0b       	sbc	r24, r20
    183e:	ba f0       	brmi	.+46     	; 0x186e <__addsf3x+0x98>
    1840:	91 50       	subi	r25, 0x01	; 1
    1842:	a1 f0       	breq	.+40     	; 0x186c <__addsf3x+0x96>
    1844:	ff 0f       	add	r31, r31
    1846:	bb 1f       	adc	r27, r27
    1848:	66 1f       	adc	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	88 1f       	adc	r24, r24
    184e:	c2 f7       	brpl	.-16     	; 0x1840 <__addsf3x+0x6a>
    1850:	0e c0       	rjmp	.+28     	; 0x186e <__addsf3x+0x98>
    1852:	ba 0f       	add	r27, r26
    1854:	62 1f       	adc	r22, r18
    1856:	73 1f       	adc	r23, r19
    1858:	84 1f       	adc	r24, r20
    185a:	48 f4       	brcc	.+18     	; 0x186e <__addsf3x+0x98>
    185c:	87 95       	ror	r24
    185e:	77 95       	ror	r23
    1860:	67 95       	ror	r22
    1862:	b7 95       	ror	r27
    1864:	f7 95       	ror	r31
    1866:	9e 3f       	cpi	r25, 0xFE	; 254
    1868:	08 f0       	brcs	.+2      	; 0x186c <__addsf3x+0x96>
    186a:	b3 cf       	rjmp	.-154    	; 0x17d2 <__addsf3+0x1e>
    186c:	93 95       	inc	r25
    186e:	88 0f       	add	r24, r24
    1870:	08 f0       	brcs	.+2      	; 0x1874 <__addsf3x+0x9e>
    1872:	99 27       	eor	r25, r25
    1874:	ee 0f       	add	r30, r30
    1876:	97 95       	ror	r25
    1878:	87 95       	ror	r24
    187a:	08 95       	ret

0000187c <__cmpsf2>:
    187c:	d9 d0       	rcall	.+434    	; 0x1a30 <__fp_cmp>
    187e:	08 f4       	brcc	.+2      	; 0x1882 <__cmpsf2+0x6>
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	08 95       	ret

00001884 <__divsf3>:
    1884:	0c d0       	rcall	.+24     	; 0x189e <__divsf3x>
    1886:	0f c1       	rjmp	.+542    	; 0x1aa6 <__fp_round>
    1888:	07 d1       	rcall	.+526    	; 0x1a98 <__fp_pscB>
    188a:	40 f0       	brcs	.+16     	; 0x189c <__divsf3+0x18>
    188c:	fe d0       	rcall	.+508    	; 0x1a8a <__fp_pscA>
    188e:	30 f0       	brcs	.+12     	; 0x189c <__divsf3+0x18>
    1890:	21 f4       	brne	.+8      	; 0x189a <__divsf3+0x16>
    1892:	5f 3f       	cpi	r21, 0xFF	; 255
    1894:	19 f0       	breq	.+6      	; 0x189c <__divsf3+0x18>
    1896:	f0 c0       	rjmp	.+480    	; 0x1a78 <__fp_inf>
    1898:	51 11       	cpse	r21, r1
    189a:	39 c1       	rjmp	.+626    	; 0x1b0e <__fp_szero>
    189c:	f3 c0       	rjmp	.+486    	; 0x1a84 <__fp_nan>

0000189e <__divsf3x>:
    189e:	14 d1       	rcall	.+552    	; 0x1ac8 <__fp_split3>
    18a0:	98 f3       	brcs	.-26     	; 0x1888 <__divsf3+0x4>

000018a2 <__divsf3_pse>:
    18a2:	99 23       	and	r25, r25
    18a4:	c9 f3       	breq	.-14     	; 0x1898 <__divsf3+0x14>
    18a6:	55 23       	and	r21, r21
    18a8:	b1 f3       	breq	.-20     	; 0x1896 <__divsf3+0x12>
    18aa:	95 1b       	sub	r25, r21
    18ac:	55 0b       	sbc	r21, r21
    18ae:	bb 27       	eor	r27, r27
    18b0:	aa 27       	eor	r26, r26
    18b2:	62 17       	cp	r22, r18
    18b4:	73 07       	cpc	r23, r19
    18b6:	84 07       	cpc	r24, r20
    18b8:	38 f0       	brcs	.+14     	; 0x18c8 <__divsf3_pse+0x26>
    18ba:	9f 5f       	subi	r25, 0xFF	; 255
    18bc:	5f 4f       	sbci	r21, 0xFF	; 255
    18be:	22 0f       	add	r18, r18
    18c0:	33 1f       	adc	r19, r19
    18c2:	44 1f       	adc	r20, r20
    18c4:	aa 1f       	adc	r26, r26
    18c6:	a9 f3       	breq	.-22     	; 0x18b2 <__divsf3_pse+0x10>
    18c8:	33 d0       	rcall	.+102    	; 0x1930 <__divsf3_pse+0x8e>
    18ca:	0e 2e       	mov	r0, r30
    18cc:	3a f0       	brmi	.+14     	; 0x18dc <__divsf3_pse+0x3a>
    18ce:	e0 e8       	ldi	r30, 0x80	; 128
    18d0:	30 d0       	rcall	.+96     	; 0x1932 <__divsf3_pse+0x90>
    18d2:	91 50       	subi	r25, 0x01	; 1
    18d4:	50 40       	sbci	r21, 0x00	; 0
    18d6:	e6 95       	lsr	r30
    18d8:	00 1c       	adc	r0, r0
    18da:	ca f7       	brpl	.-14     	; 0x18ce <__divsf3_pse+0x2c>
    18dc:	29 d0       	rcall	.+82     	; 0x1930 <__divsf3_pse+0x8e>
    18de:	fe 2f       	mov	r31, r30
    18e0:	27 d0       	rcall	.+78     	; 0x1930 <__divsf3_pse+0x8e>
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	88 1f       	adc	r24, r24
    18e8:	bb 1f       	adc	r27, r27
    18ea:	26 17       	cp	r18, r22
    18ec:	37 07       	cpc	r19, r23
    18ee:	48 07       	cpc	r20, r24
    18f0:	ab 07       	cpc	r26, r27
    18f2:	b0 e8       	ldi	r27, 0x80	; 128
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <__divsf3_pse+0x56>
    18f6:	bb 0b       	sbc	r27, r27
    18f8:	80 2d       	mov	r24, r0
    18fa:	bf 01       	movw	r22, r30
    18fc:	ff 27       	eor	r31, r31
    18fe:	93 58       	subi	r25, 0x83	; 131
    1900:	5f 4f       	sbci	r21, 0xFF	; 255
    1902:	2a f0       	brmi	.+10     	; 0x190e <__divsf3_pse+0x6c>
    1904:	9e 3f       	cpi	r25, 0xFE	; 254
    1906:	51 05       	cpc	r21, r1
    1908:	68 f0       	brcs	.+26     	; 0x1924 <__divsf3_pse+0x82>
    190a:	b6 c0       	rjmp	.+364    	; 0x1a78 <__fp_inf>
    190c:	00 c1       	rjmp	.+512    	; 0x1b0e <__fp_szero>
    190e:	5f 3f       	cpi	r21, 0xFF	; 255
    1910:	ec f3       	brlt	.-6      	; 0x190c <__divsf3_pse+0x6a>
    1912:	98 3e       	cpi	r25, 0xE8	; 232
    1914:	dc f3       	brlt	.-10     	; 0x190c <__divsf3_pse+0x6a>
    1916:	86 95       	lsr	r24
    1918:	77 95       	ror	r23
    191a:	67 95       	ror	r22
    191c:	b7 95       	ror	r27
    191e:	f7 95       	ror	r31
    1920:	9f 5f       	subi	r25, 0xFF	; 255
    1922:	c9 f7       	brne	.-14     	; 0x1916 <__divsf3_pse+0x74>
    1924:	88 0f       	add	r24, r24
    1926:	91 1d       	adc	r25, r1
    1928:	96 95       	lsr	r25
    192a:	87 95       	ror	r24
    192c:	97 f9       	bld	r25, 7
    192e:	08 95       	ret
    1930:	e1 e0       	ldi	r30, 0x01	; 1
    1932:	66 0f       	add	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	88 1f       	adc	r24, r24
    1938:	bb 1f       	adc	r27, r27
    193a:	62 17       	cp	r22, r18
    193c:	73 07       	cpc	r23, r19
    193e:	84 07       	cpc	r24, r20
    1940:	ba 07       	cpc	r27, r26
    1942:	20 f0       	brcs	.+8      	; 0x194c <__divsf3_pse+0xaa>
    1944:	62 1b       	sub	r22, r18
    1946:	73 0b       	sbc	r23, r19
    1948:	84 0b       	sbc	r24, r20
    194a:	ba 0b       	sbc	r27, r26
    194c:	ee 1f       	adc	r30, r30
    194e:	88 f7       	brcc	.-30     	; 0x1932 <__divsf3_pse+0x90>
    1950:	e0 95       	com	r30
    1952:	08 95       	ret

00001954 <__fixsfsi>:
    1954:	04 d0       	rcall	.+8      	; 0x195e <__fixunssfsi>
    1956:	68 94       	set
    1958:	b1 11       	cpse	r27, r1
    195a:	d9 c0       	rjmp	.+434    	; 0x1b0e <__fp_szero>
    195c:	08 95       	ret

0000195e <__fixunssfsi>:
    195e:	bc d0       	rcall	.+376    	; 0x1ad8 <__fp_splitA>
    1960:	88 f0       	brcs	.+34     	; 0x1984 <__fixunssfsi+0x26>
    1962:	9f 57       	subi	r25, 0x7F	; 127
    1964:	90 f0       	brcs	.+36     	; 0x198a <__fixunssfsi+0x2c>
    1966:	b9 2f       	mov	r27, r25
    1968:	99 27       	eor	r25, r25
    196a:	b7 51       	subi	r27, 0x17	; 23
    196c:	a0 f0       	brcs	.+40     	; 0x1996 <__fixunssfsi+0x38>
    196e:	d1 f0       	breq	.+52     	; 0x19a4 <__fixunssfsi+0x46>
    1970:	66 0f       	add	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	88 1f       	adc	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	1a f0       	brmi	.+6      	; 0x1980 <__fixunssfsi+0x22>
    197a:	ba 95       	dec	r27
    197c:	c9 f7       	brne	.-14     	; 0x1970 <__fixunssfsi+0x12>
    197e:	12 c0       	rjmp	.+36     	; 0x19a4 <__fixunssfsi+0x46>
    1980:	b1 30       	cpi	r27, 0x01	; 1
    1982:	81 f0       	breq	.+32     	; 0x19a4 <__fixunssfsi+0x46>
    1984:	c3 d0       	rcall	.+390    	; 0x1b0c <__fp_zero>
    1986:	b1 e0       	ldi	r27, 0x01	; 1
    1988:	08 95       	ret
    198a:	c0 c0       	rjmp	.+384    	; 0x1b0c <__fp_zero>
    198c:	67 2f       	mov	r22, r23
    198e:	78 2f       	mov	r23, r24
    1990:	88 27       	eor	r24, r24
    1992:	b8 5f       	subi	r27, 0xF8	; 248
    1994:	39 f0       	breq	.+14     	; 0x19a4 <__fixunssfsi+0x46>
    1996:	b9 3f       	cpi	r27, 0xF9	; 249
    1998:	cc f3       	brlt	.-14     	; 0x198c <__fixunssfsi+0x2e>
    199a:	86 95       	lsr	r24
    199c:	77 95       	ror	r23
    199e:	67 95       	ror	r22
    19a0:	b3 95       	inc	r27
    19a2:	d9 f7       	brne	.-10     	; 0x199a <__fixunssfsi+0x3c>
    19a4:	3e f4       	brtc	.+14     	; 0x19b4 <__fixunssfsi+0x56>
    19a6:	90 95       	com	r25
    19a8:	80 95       	com	r24
    19aa:	70 95       	com	r23
    19ac:	61 95       	neg	r22
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	8f 4f       	sbci	r24, 0xFF	; 255
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	08 95       	ret

000019b6 <__floatunsisf>:
    19b6:	e8 94       	clt
    19b8:	09 c0       	rjmp	.+18     	; 0x19cc <__floatsisf+0x12>

000019ba <__floatsisf>:
    19ba:	97 fb       	bst	r25, 7
    19bc:	3e f4       	brtc	.+14     	; 0x19cc <__floatsisf+0x12>
    19be:	90 95       	com	r25
    19c0:	80 95       	com	r24
    19c2:	70 95       	com	r23
    19c4:	61 95       	neg	r22
    19c6:	7f 4f       	sbci	r23, 0xFF	; 255
    19c8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ca:	9f 4f       	sbci	r25, 0xFF	; 255
    19cc:	99 23       	and	r25, r25
    19ce:	a9 f0       	breq	.+42     	; 0x19fa <__floatsisf+0x40>
    19d0:	f9 2f       	mov	r31, r25
    19d2:	96 e9       	ldi	r25, 0x96	; 150
    19d4:	bb 27       	eor	r27, r27
    19d6:	93 95       	inc	r25
    19d8:	f6 95       	lsr	r31
    19da:	87 95       	ror	r24
    19dc:	77 95       	ror	r23
    19de:	67 95       	ror	r22
    19e0:	b7 95       	ror	r27
    19e2:	f1 11       	cpse	r31, r1
    19e4:	f8 cf       	rjmp	.-16     	; 0x19d6 <__floatsisf+0x1c>
    19e6:	fa f4       	brpl	.+62     	; 0x1a26 <__floatsisf+0x6c>
    19e8:	bb 0f       	add	r27, r27
    19ea:	11 f4       	brne	.+4      	; 0x19f0 <__floatsisf+0x36>
    19ec:	60 ff       	sbrs	r22, 0
    19ee:	1b c0       	rjmp	.+54     	; 0x1a26 <__floatsisf+0x6c>
    19f0:	6f 5f       	subi	r22, 0xFF	; 255
    19f2:	7f 4f       	sbci	r23, 0xFF	; 255
    19f4:	8f 4f       	sbci	r24, 0xFF	; 255
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	16 c0       	rjmp	.+44     	; 0x1a26 <__floatsisf+0x6c>
    19fa:	88 23       	and	r24, r24
    19fc:	11 f0       	breq	.+4      	; 0x1a02 <__floatsisf+0x48>
    19fe:	96 e9       	ldi	r25, 0x96	; 150
    1a00:	11 c0       	rjmp	.+34     	; 0x1a24 <__floatsisf+0x6a>
    1a02:	77 23       	and	r23, r23
    1a04:	21 f0       	breq	.+8      	; 0x1a0e <__floatsisf+0x54>
    1a06:	9e e8       	ldi	r25, 0x8E	; 142
    1a08:	87 2f       	mov	r24, r23
    1a0a:	76 2f       	mov	r23, r22
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <__floatsisf+0x5e>
    1a0e:	66 23       	and	r22, r22
    1a10:	71 f0       	breq	.+28     	; 0x1a2e <__floatsisf+0x74>
    1a12:	96 e8       	ldi	r25, 0x86	; 134
    1a14:	86 2f       	mov	r24, r22
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	2a f0       	brmi	.+10     	; 0x1a26 <__floatsisf+0x6c>
    1a1c:	9a 95       	dec	r25
    1a1e:	66 0f       	add	r22, r22
    1a20:	77 1f       	adc	r23, r23
    1a22:	88 1f       	adc	r24, r24
    1a24:	da f7       	brpl	.-10     	; 0x1a1c <__floatsisf+0x62>
    1a26:	88 0f       	add	r24, r24
    1a28:	96 95       	lsr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	97 f9       	bld	r25, 7
    1a2e:	08 95       	ret

00001a30 <__fp_cmp>:
    1a30:	99 0f       	add	r25, r25
    1a32:	00 08       	sbc	r0, r0
    1a34:	55 0f       	add	r21, r21
    1a36:	aa 0b       	sbc	r26, r26
    1a38:	e0 e8       	ldi	r30, 0x80	; 128
    1a3a:	fe ef       	ldi	r31, 0xFE	; 254
    1a3c:	16 16       	cp	r1, r22
    1a3e:	17 06       	cpc	r1, r23
    1a40:	e8 07       	cpc	r30, r24
    1a42:	f9 07       	cpc	r31, r25
    1a44:	c0 f0       	brcs	.+48     	; 0x1a76 <__fp_cmp+0x46>
    1a46:	12 16       	cp	r1, r18
    1a48:	13 06       	cpc	r1, r19
    1a4a:	e4 07       	cpc	r30, r20
    1a4c:	f5 07       	cpc	r31, r21
    1a4e:	98 f0       	brcs	.+38     	; 0x1a76 <__fp_cmp+0x46>
    1a50:	62 1b       	sub	r22, r18
    1a52:	73 0b       	sbc	r23, r19
    1a54:	84 0b       	sbc	r24, r20
    1a56:	95 0b       	sbc	r25, r21
    1a58:	39 f4       	brne	.+14     	; 0x1a68 <__fp_cmp+0x38>
    1a5a:	0a 26       	eor	r0, r26
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <__fp_cmp+0x46>
    1a5e:	23 2b       	or	r18, r19
    1a60:	24 2b       	or	r18, r20
    1a62:	25 2b       	or	r18, r21
    1a64:	21 f4       	brne	.+8      	; 0x1a6e <__fp_cmp+0x3e>
    1a66:	08 95       	ret
    1a68:	0a 26       	eor	r0, r26
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <__fp_cmp+0x3e>
    1a6c:	a1 40       	sbci	r26, 0x01	; 1
    1a6e:	a6 95       	lsr	r26
    1a70:	8f ef       	ldi	r24, 0xFF	; 255
    1a72:	81 1d       	adc	r24, r1
    1a74:	81 1d       	adc	r24, r1
    1a76:	08 95       	ret

00001a78 <__fp_inf>:
    1a78:	97 f9       	bld	r25, 7
    1a7a:	9f 67       	ori	r25, 0x7F	; 127
    1a7c:	80 e8       	ldi	r24, 0x80	; 128
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	08 95       	ret

00001a84 <__fp_nan>:
    1a84:	9f ef       	ldi	r25, 0xFF	; 255
    1a86:	80 ec       	ldi	r24, 0xC0	; 192
    1a88:	08 95       	ret

00001a8a <__fp_pscA>:
    1a8a:	00 24       	eor	r0, r0
    1a8c:	0a 94       	dec	r0
    1a8e:	16 16       	cp	r1, r22
    1a90:	17 06       	cpc	r1, r23
    1a92:	18 06       	cpc	r1, r24
    1a94:	09 06       	cpc	r0, r25
    1a96:	08 95       	ret

00001a98 <__fp_pscB>:
    1a98:	00 24       	eor	r0, r0
    1a9a:	0a 94       	dec	r0
    1a9c:	12 16       	cp	r1, r18
    1a9e:	13 06       	cpc	r1, r19
    1aa0:	14 06       	cpc	r1, r20
    1aa2:	05 06       	cpc	r0, r21
    1aa4:	08 95       	ret

00001aa6 <__fp_round>:
    1aa6:	09 2e       	mov	r0, r25
    1aa8:	03 94       	inc	r0
    1aaa:	00 0c       	add	r0, r0
    1aac:	11 f4       	brne	.+4      	; 0x1ab2 <__fp_round+0xc>
    1aae:	88 23       	and	r24, r24
    1ab0:	52 f0       	brmi	.+20     	; 0x1ac6 <__fp_round+0x20>
    1ab2:	bb 0f       	add	r27, r27
    1ab4:	40 f4       	brcc	.+16     	; 0x1ac6 <__fp_round+0x20>
    1ab6:	bf 2b       	or	r27, r31
    1ab8:	11 f4       	brne	.+4      	; 0x1abe <__fp_round+0x18>
    1aba:	60 ff       	sbrs	r22, 0
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <__fp_round+0x20>
    1abe:	6f 5f       	subi	r22, 0xFF	; 255
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	08 95       	ret

00001ac8 <__fp_split3>:
    1ac8:	57 fd       	sbrc	r21, 7
    1aca:	90 58       	subi	r25, 0x80	; 128
    1acc:	44 0f       	add	r20, r20
    1ace:	55 1f       	adc	r21, r21
    1ad0:	59 f0       	breq	.+22     	; 0x1ae8 <__fp_splitA+0x10>
    1ad2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad4:	71 f0       	breq	.+28     	; 0x1af2 <__fp_splitA+0x1a>
    1ad6:	47 95       	ror	r20

00001ad8 <__fp_splitA>:
    1ad8:	88 0f       	add	r24, r24
    1ada:	97 fb       	bst	r25, 7
    1adc:	99 1f       	adc	r25, r25
    1ade:	61 f0       	breq	.+24     	; 0x1af8 <__fp_splitA+0x20>
    1ae0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae2:	79 f0       	breq	.+30     	; 0x1b02 <__fp_splitA+0x2a>
    1ae4:	87 95       	ror	r24
    1ae6:	08 95       	ret
    1ae8:	12 16       	cp	r1, r18
    1aea:	13 06       	cpc	r1, r19
    1aec:	14 06       	cpc	r1, r20
    1aee:	55 1f       	adc	r21, r21
    1af0:	f2 cf       	rjmp	.-28     	; 0x1ad6 <__fp_split3+0xe>
    1af2:	46 95       	lsr	r20
    1af4:	f1 df       	rcall	.-30     	; 0x1ad8 <__fp_splitA>
    1af6:	08 c0       	rjmp	.+16     	; 0x1b08 <__fp_splitA+0x30>
    1af8:	16 16       	cp	r1, r22
    1afa:	17 06       	cpc	r1, r23
    1afc:	18 06       	cpc	r1, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	f1 cf       	rjmp	.-30     	; 0x1ae4 <__fp_splitA+0xc>
    1b02:	86 95       	lsr	r24
    1b04:	71 05       	cpc	r23, r1
    1b06:	61 05       	cpc	r22, r1
    1b08:	08 94       	sec
    1b0a:	08 95       	ret

00001b0c <__fp_zero>:
    1b0c:	e8 94       	clt

00001b0e <__fp_szero>:
    1b0e:	bb 27       	eor	r27, r27
    1b10:	66 27       	eor	r22, r22
    1b12:	77 27       	eor	r23, r23
    1b14:	cb 01       	movw	r24, r22
    1b16:	97 f9       	bld	r25, 7
    1b18:	08 95       	ret

00001b1a <__gesf2>:
    1b1a:	8a df       	rcall	.-236    	; 0x1a30 <__fp_cmp>
    1b1c:	08 f4       	brcc	.+2      	; 0x1b20 <__gesf2+0x6>
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	08 95       	ret

00001b22 <__mulsf3>:
    1b22:	0b d0       	rcall	.+22     	; 0x1b3a <__mulsf3x>
    1b24:	c0 cf       	rjmp	.-128    	; 0x1aa6 <__fp_round>
    1b26:	b1 df       	rcall	.-158    	; 0x1a8a <__fp_pscA>
    1b28:	28 f0       	brcs	.+10     	; 0x1b34 <__mulsf3+0x12>
    1b2a:	b6 df       	rcall	.-148    	; 0x1a98 <__fp_pscB>
    1b2c:	18 f0       	brcs	.+6      	; 0x1b34 <__mulsf3+0x12>
    1b2e:	95 23       	and	r25, r21
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <__mulsf3+0x12>
    1b32:	a2 cf       	rjmp	.-188    	; 0x1a78 <__fp_inf>
    1b34:	a7 cf       	rjmp	.-178    	; 0x1a84 <__fp_nan>
    1b36:	11 24       	eor	r1, r1
    1b38:	ea cf       	rjmp	.-44     	; 0x1b0e <__fp_szero>

00001b3a <__mulsf3x>:
    1b3a:	c6 df       	rcall	.-116    	; 0x1ac8 <__fp_split3>
    1b3c:	a0 f3       	brcs	.-24     	; 0x1b26 <__mulsf3+0x4>

00001b3e <__mulsf3_pse>:
    1b3e:	95 9f       	mul	r25, r21
    1b40:	d1 f3       	breq	.-12     	; 0x1b36 <__mulsf3+0x14>
    1b42:	95 0f       	add	r25, r21
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	55 1f       	adc	r21, r21
    1b48:	62 9f       	mul	r22, r18
    1b4a:	f0 01       	movw	r30, r0
    1b4c:	72 9f       	mul	r23, r18
    1b4e:	bb 27       	eor	r27, r27
    1b50:	f0 0d       	add	r31, r0
    1b52:	b1 1d       	adc	r27, r1
    1b54:	63 9f       	mul	r22, r19
    1b56:	aa 27       	eor	r26, r26
    1b58:	f0 0d       	add	r31, r0
    1b5a:	b1 1d       	adc	r27, r1
    1b5c:	aa 1f       	adc	r26, r26
    1b5e:	64 9f       	mul	r22, r20
    1b60:	66 27       	eor	r22, r22
    1b62:	b0 0d       	add	r27, r0
    1b64:	a1 1d       	adc	r26, r1
    1b66:	66 1f       	adc	r22, r22
    1b68:	82 9f       	mul	r24, r18
    1b6a:	22 27       	eor	r18, r18
    1b6c:	b0 0d       	add	r27, r0
    1b6e:	a1 1d       	adc	r26, r1
    1b70:	62 1f       	adc	r22, r18
    1b72:	73 9f       	mul	r23, r19
    1b74:	b0 0d       	add	r27, r0
    1b76:	a1 1d       	adc	r26, r1
    1b78:	62 1f       	adc	r22, r18
    1b7a:	83 9f       	mul	r24, r19
    1b7c:	a0 0d       	add	r26, r0
    1b7e:	61 1d       	adc	r22, r1
    1b80:	22 1f       	adc	r18, r18
    1b82:	74 9f       	mul	r23, r20
    1b84:	33 27       	eor	r19, r19
    1b86:	a0 0d       	add	r26, r0
    1b88:	61 1d       	adc	r22, r1
    1b8a:	23 1f       	adc	r18, r19
    1b8c:	84 9f       	mul	r24, r20
    1b8e:	60 0d       	add	r22, r0
    1b90:	21 1d       	adc	r18, r1
    1b92:	82 2f       	mov	r24, r18
    1b94:	76 2f       	mov	r23, r22
    1b96:	6a 2f       	mov	r22, r26
    1b98:	11 24       	eor	r1, r1
    1b9a:	9f 57       	subi	r25, 0x7F	; 127
    1b9c:	50 40       	sbci	r21, 0x00	; 0
    1b9e:	8a f0       	brmi	.+34     	; 0x1bc2 <__mulsf3_pse+0x84>
    1ba0:	e1 f0       	breq	.+56     	; 0x1bda <__mulsf3_pse+0x9c>
    1ba2:	88 23       	and	r24, r24
    1ba4:	4a f0       	brmi	.+18     	; 0x1bb8 <__mulsf3_pse+0x7a>
    1ba6:	ee 0f       	add	r30, r30
    1ba8:	ff 1f       	adc	r31, r31
    1baa:	bb 1f       	adc	r27, r27
    1bac:	66 1f       	adc	r22, r22
    1bae:	77 1f       	adc	r23, r23
    1bb0:	88 1f       	adc	r24, r24
    1bb2:	91 50       	subi	r25, 0x01	; 1
    1bb4:	50 40       	sbci	r21, 0x00	; 0
    1bb6:	a9 f7       	brne	.-22     	; 0x1ba2 <__mulsf3_pse+0x64>
    1bb8:	9e 3f       	cpi	r25, 0xFE	; 254
    1bba:	51 05       	cpc	r21, r1
    1bbc:	70 f0       	brcs	.+28     	; 0x1bda <__mulsf3_pse+0x9c>
    1bbe:	5c cf       	rjmp	.-328    	; 0x1a78 <__fp_inf>
    1bc0:	a6 cf       	rjmp	.-180    	; 0x1b0e <__fp_szero>
    1bc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc4:	ec f3       	brlt	.-6      	; 0x1bc0 <__mulsf3_pse+0x82>
    1bc6:	98 3e       	cpi	r25, 0xE8	; 232
    1bc8:	dc f3       	brlt	.-10     	; 0x1bc0 <__mulsf3_pse+0x82>
    1bca:	86 95       	lsr	r24
    1bcc:	77 95       	ror	r23
    1bce:	67 95       	ror	r22
    1bd0:	b7 95       	ror	r27
    1bd2:	f7 95       	ror	r31
    1bd4:	e7 95       	ror	r30
    1bd6:	9f 5f       	subi	r25, 0xFF	; 255
    1bd8:	c1 f7       	brne	.-16     	; 0x1bca <__mulsf3_pse+0x8c>
    1bda:	fe 2b       	or	r31, r30
    1bdc:	88 0f       	add	r24, r24
    1bde:	91 1d       	adc	r25, r1
    1be0:	96 95       	lsr	r25
    1be2:	87 95       	ror	r24
    1be4:	97 f9       	bld	r25, 7
    1be6:	08 95       	ret

00001be8 <__divmodhi4>:
    1be8:	97 fb       	bst	r25, 7
    1bea:	07 2e       	mov	r0, r23
    1bec:	16 f4       	brtc	.+4      	; 0x1bf2 <__divmodhi4+0xa>
    1bee:	00 94       	com	r0
    1bf0:	07 d0       	rcall	.+14     	; 0x1c00 <__divmodhi4_neg1>
    1bf2:	77 fd       	sbrc	r23, 7
    1bf4:	09 d0       	rcall	.+18     	; 0x1c08 <__divmodhi4_neg2>
    1bf6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__udivmodhi4>
    1bfa:	07 fc       	sbrc	r0, 7
    1bfc:	05 d0       	rcall	.+10     	; 0x1c08 <__divmodhi4_neg2>
    1bfe:	3e f4       	brtc	.+14     	; 0x1c0e <__divmodhi4_exit>

00001c00 <__divmodhi4_neg1>:
    1c00:	90 95       	com	r25
    1c02:	81 95       	neg	r24
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	08 95       	ret

00001c08 <__divmodhi4_neg2>:
    1c08:	70 95       	com	r23
    1c0a:	61 95       	neg	r22
    1c0c:	7f 4f       	sbci	r23, 0xFF	; 255

00001c0e <__divmodhi4_exit>:
    1c0e:	08 95       	ret

00001c10 <__tablejump2__>:
    1c10:	ee 0f       	add	r30, r30
    1c12:	ff 1f       	adc	r31, r31

00001c14 <__tablejump__>:
    1c14:	05 90       	lpm	r0, Z+
    1c16:	f4 91       	lpm	r31, Z
    1c18:	e0 2d       	mov	r30, r0
    1c1a:	09 94       	ijmp

00001c1c <__umulhisi3>:
    1c1c:	a2 9f       	mul	r26, r18
    1c1e:	b0 01       	movw	r22, r0
    1c20:	b3 9f       	mul	r27, r19
    1c22:	c0 01       	movw	r24, r0
    1c24:	a3 9f       	mul	r26, r19
    1c26:	70 0d       	add	r23, r0
    1c28:	81 1d       	adc	r24, r1
    1c2a:	11 24       	eor	r1, r1
    1c2c:	91 1d       	adc	r25, r1
    1c2e:	b2 9f       	mul	r27, r18
    1c30:	70 0d       	add	r23, r0
    1c32:	81 1d       	adc	r24, r1
    1c34:	11 24       	eor	r1, r1
    1c36:	91 1d       	adc	r25, r1
    1c38:	08 95       	ret

00001c3a <__udivmodhi4>:
    1c3a:	aa 1b       	sub	r26, r26
    1c3c:	bb 1b       	sub	r27, r27
    1c3e:	51 e1       	ldi	r21, 0x11	; 17
    1c40:	07 c0       	rjmp	.+14     	; 0x1c50 <__udivmodhi4_ep>

00001c42 <__udivmodhi4_loop>:
    1c42:	aa 1f       	adc	r26, r26
    1c44:	bb 1f       	adc	r27, r27
    1c46:	a6 17       	cp	r26, r22
    1c48:	b7 07       	cpc	r27, r23
    1c4a:	10 f0       	brcs	.+4      	; 0x1c50 <__udivmodhi4_ep>
    1c4c:	a6 1b       	sub	r26, r22
    1c4e:	b7 0b       	sbc	r27, r23

00001c50 <__udivmodhi4_ep>:
    1c50:	88 1f       	adc	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	5a 95       	dec	r21
    1c56:	a9 f7       	brne	.-22     	; 0x1c42 <__udivmodhi4_loop>
    1c58:	80 95       	com	r24
    1c5a:	90 95       	com	r25
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	08 95       	ret

00001c62 <__eerd_word_m16>:
    1c62:	a8 e1       	ldi	r26, 0x18	; 24
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	42 e0       	ldi	r20, 0x02	; 2
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__eerd_blraw_m16>

00001c6e <__eewr_word_m16>:
    1c6e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__eewr_byte_m16>
    1c72:	27 2f       	mov	r18, r23
    1c74:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__eewr_r18_m16>

00001c78 <__eerd_block_m16>:
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22

00001c7c <__eerd_blraw_m16>:
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	e1 99       	sbic	0x1c, 1	; 28
    1c80:	fe cf       	rjmp	.-4      	; 0x1c7e <__eerd_blraw_m16+0x2>
    1c82:	06 c0       	rjmp	.+12     	; 0x1c90 <__eerd_blraw_m16+0x14>
    1c84:	ff bb       	out	0x1f, r31	; 31
    1c86:	ee bb       	out	0x1e, r30	; 30
    1c88:	e0 9a       	sbi	0x1c, 0	; 28
    1c8a:	31 96       	adiw	r30, 0x01	; 1
    1c8c:	0d b2       	in	r0, 0x1d	; 29
    1c8e:	0d 92       	st	X+, r0
    1c90:	41 50       	subi	r20, 0x01	; 1
    1c92:	50 40       	sbci	r21, 0x00	; 0
    1c94:	b8 f7       	brcc	.-18     	; 0x1c84 <__eerd_blraw_m16+0x8>
    1c96:	08 95       	ret

00001c98 <__eewr_byte_m16>:
    1c98:	26 2f       	mov	r18, r22

00001c9a <__eewr_r18_m16>:
    1c9a:	e1 99       	sbic	0x1c, 1	; 28
    1c9c:	fe cf       	rjmp	.-4      	; 0x1c9a <__eewr_r18_m16>
    1c9e:	9f bb       	out	0x1f, r25	; 31
    1ca0:	8e bb       	out	0x1e, r24	; 30
    1ca2:	2d bb       	out	0x1d, r18	; 29
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	e2 9a       	sbi	0x1c, 2	; 28
    1caa:	e1 9a       	sbi	0x1c, 1	; 28
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	08 95       	ret

00001cb2 <_exit>:
    1cb2:	f8 94       	cli

00001cb4 <__stop_program>:
    1cb4:	ff cf       	rjmp	.-2      	; 0x1cb4 <__stop_program>
