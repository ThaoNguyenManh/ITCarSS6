
Ver1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000224a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000224a  000022de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800064  00800064  000022e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00002312  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001fde  00000000  00000000  00002422  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000044e  00000000  00000000  00004400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000884  00000000  00000000  0000484e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  000050d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ec  00000000  00000000  00005444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1c  00000000  00000000  00005a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  0000644c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__ctors_end>
       4:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__vector_1>
       8:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
       c:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      10:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      14:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      18:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      1c:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      20:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      24:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      28:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      2c:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      30:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      34:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      38:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      3c:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      40:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      44:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      48:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      4c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_19>
      50:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      54:	fa 08       	sbc	r15, r10
      56:	c1 09       	sbc	r28, r1
      58:	31 0a       	sbc	r3, r17
      5a:	9c 0e       	add	r9, r28
      5c:	9c 0e       	add	r9, r28
      5e:	9c 0e       	add	r9, r28
      60:	9c 0e       	add	r9, r28
      62:	9c 0e       	add	r9, r28
      64:	9c 0e       	add	r9, r28
      66:	9c 0e       	add	r9, r28
      68:	9c 0e       	add	r9, r28
      6a:	a0 0a       	sbc	r10, r16
      6c:	ba 0a       	sbc	r11, r26
      6e:	1c 0b       	sbc	r17, r28
      70:	9c 0e       	add	r9, r28
      72:	9c 0e       	add	r9, r28
      74:	c8 0b       	sbc	r28, r24
      76:	e2 0b       	sbc	r30, r18
      78:	9c 0e       	add	r9, r28
      7a:	9c 0e       	add	r9, r28
      7c:	9c 0e       	add	r9, r28
      7e:	fc 0b       	sbc	r31, r28
      80:	14 0c       	add	r1, r4
      82:	9c 0e       	add	r9, r28
      84:	9c 0e       	add	r9, r28
      86:	9c 0e       	add	r9, r28
      88:	9c 0e       	add	r9, r28
      8a:	9c 0e       	add	r9, r28
      8c:	9c 0e       	add	r9, r28
      8e:	9c 0e       	add	r9, r28
      90:	9c 0e       	add	r9, r28
      92:	23 0c       	add	r2, r3
      94:	36 0c       	add	r3, r6
      96:	9c 0e       	add	r9, r28
      98:	9c 0e       	add	r9, r28
      9a:	9c 0e       	add	r9, r28
      9c:	9c 0e       	add	r9, r28
      9e:	9c 0e       	add	r9, r28
      a0:	9c 0e       	add	r9, r28
      a2:	9c 0e       	add	r9, r28
      a4:	9c 0e       	add	r9, r28
      a6:	45 0c       	add	r4, r5
      a8:	c2 0c       	add	r12, r2
      aa:	db 0c       	add	r13, r11
      ac:	9c 0e       	add	r9, r28
      ae:	9c 0e       	add	r9, r28
      b0:	9c 0e       	add	r9, r28
      b2:	9c 0e       	add	r9, r28
      b4:	9c 0e       	add	r9, r28
      b6:	9c 0e       	add	r9, r28
      b8:	9c 0e       	add	r9, r28
      ba:	22 0d       	add	r18, r2
      bc:	a3 0d       	add	r26, r3
      be:	bc 0d       	add	r27, r12
      c0:	9c 0e       	add	r9, r28
      c2:	9c 0e       	add	r9, r28
      c4:	9c 0e       	add	r9, r28
      c6:	9c 0e       	add	r9, r28
      c8:	9c 0e       	add	r9, r28
      ca:	9c 0e       	add	r9, r28
      cc:	9c 0e       	add	r9, r28
      ce:	9c 0e       	add	r9, r28
      d0:	9c 0e       	add	r9, r28
      d2:	03 0e       	add	r0, r19
      d4:	9c 0e       	add	r9, r28
      d6:	9c 0e       	add	r9, r28
      d8:	9c 0e       	add	r9, r28
      da:	9c 0e       	add	r9, r28
      dc:	9c 0e       	add	r9, r28
      de:	9c 0e       	add	r9, r28
      e0:	9c 0e       	add	r9, r28
      e2:	9c 0e       	add	r9, r28
      e4:	9c 0e       	add	r9, r28
      e6:	9c 0e       	add	r9, r28
      e8:	9c 0e       	add	r9, r28
      ea:	9c 0e       	add	r9, r28
      ec:	9c 0e       	add	r9, r28
      ee:	9c 0e       	add	r9, r28
      f0:	9c 0e       	add	r9, r28
      f2:	9c 0e       	add	r9, r28
      f4:	9c 0e       	add	r9, r28
      f6:	9c 0e       	add	r9, r28
      f8:	9c 0e       	add	r9, r28
      fa:	9c 0e       	add	r9, r28
      fc:	9c 0e       	add	r9, r28
      fe:	9c 0e       	add	r9, r28
     100:	9c 0e       	add	r9, r28
     102:	9c 0e       	add	r9, r28
     104:	9c 0e       	add	r9, r28
     106:	41 0e       	add	r4, r17
     108:	79 09       	sbc	r23, r9
     10a:	ed 08       	sbc	r14, r13
     10c:	63 09       	sbc	r22, r3
     10e:	ed 08       	sbc	r14, r13
     110:	6e 09       	sbc	r22, r14
     112:	ed 08       	sbc	r14, r13
     114:	4d 09       	sbc	r20, r13
     116:	ed 08       	sbc	r14, r13
     118:	ed 08       	sbc	r14, r13
     11a:	ed 08       	sbc	r14, r13
     11c:	58 09       	sbc	r21, r8
     11e:	ed 08       	sbc	r14, r13
     120:	63 09       	sbc	r22, r3
     122:	ed 08       	sbc	r14, r13
     124:	87 09       	sbc	r24, r7
     126:	ed 08       	sbc	r14, r13
     128:	ed 08       	sbc	r14, r13
     12a:	ed 08       	sbc	r14, r13
     12c:	ed 08       	sbc	r14, r13
     12e:	ed 08       	sbc	r14, r13
     130:	ed 08       	sbc	r14, r13
     132:	ed 08       	sbc	r14, r13
     134:	42 09       	sbc	r20, r2
     136:	ed 08       	sbc	r14, r13
     138:	ed 08       	sbc	r14, r13
     13a:	ed 08       	sbc	r14, r13
     13c:	4d 09       	sbc	r20, r13
     13e:	ed 08       	sbc	r14, r13
     140:	ed 08       	sbc	r14, r13
     142:	ed 08       	sbc	r14, r13
     144:	9d 09       	sbc	r25, r13
     146:	ed 08       	sbc	r14, r13
     148:	ed 08       	sbc	r14, r13
     14a:	ed 08       	sbc	r14, r13
     14c:	ed 08       	sbc	r14, r13
     14e:	ed 08       	sbc	r14, r13
     150:	ed 08       	sbc	r14, r13
     152:	ed 08       	sbc	r14, r13
     154:	ed 08       	sbc	r14, r13
     156:	ed 08       	sbc	r14, r13
     158:	ed 08       	sbc	r14, r13
     15a:	ed 08       	sbc	r14, r13
     15c:	ed 08       	sbc	r14, r13
     15e:	ed 08       	sbc	r14, r13
     160:	ed 08       	sbc	r14, r13
     162:	ed 08       	sbc	r14, r13
     164:	92 09       	sbc	r25, r2
     166:	ed 08       	sbc	r14, r13
     168:	ed 08       	sbc	r14, r13
     16a:	ed 08       	sbc	r14, r13
     16c:	ed 08       	sbc	r14, r13
     16e:	ed 08       	sbc	r14, r13
     170:	ed 08       	sbc	r14, r13
     172:	ed 08       	sbc	r14, r13
     174:	87 09       	sbc	r24, r7
     176:	ed 08       	sbc	r14, r13
     178:	ed 08       	sbc	r14, r13
     17a:	ed 08       	sbc	r14, r13
     17c:	ed 08       	sbc	r14, r13
     17e:	ed 08       	sbc	r14, r13
     180:	ed 08       	sbc	r14, r13
     182:	ed 08       	sbc	r14, r13
     184:	b3 09       	sbc	r27, r3
     186:	ed 08       	sbc	r14, r13
     188:	ed 08       	sbc	r14, r13
     18a:	ed 08       	sbc	r14, r13
     18c:	ed 08       	sbc	r14, r13
     18e:	ed 08       	sbc	r14, r13
     190:	ed 08       	sbc	r14, r13
     192:	ed 08       	sbc	r14, r13
     194:	ed 08       	sbc	r14, r13
     196:	ed 08       	sbc	r14, r13
     198:	ed 08       	sbc	r14, r13
     19a:	ed 08       	sbc	r14, r13
     19c:	ed 08       	sbc	r14, r13
     19e:	ed 08       	sbc	r14, r13
     1a0:	ed 08       	sbc	r14, r13
     1a2:	ed 08       	sbc	r14, r13
     1a4:	ed 08       	sbc	r14, r13
     1a6:	ed 08       	sbc	r14, r13
     1a8:	ed 08       	sbc	r14, r13
     1aa:	ed 08       	sbc	r14, r13
     1ac:	ed 08       	sbc	r14, r13
     1ae:	ed 08       	sbc	r14, r13
     1b0:	ed 08       	sbc	r14, r13
     1b2:	ed 08       	sbc	r14, r13
     1b4:	ed 08       	sbc	r14, r13
     1b6:	ed 08       	sbc	r14, r13
     1b8:	ed 08       	sbc	r14, r13
     1ba:	ed 08       	sbc	r14, r13
     1bc:	ed 08       	sbc	r14, r13
     1be:	ed 08       	sbc	r14, r13
     1c0:	ed 08       	sbc	r14, r13
     1c2:	ed 08       	sbc	r14, r13
     1c4:	a8 09       	sbc	r26, r8
     1c6:	ed 08       	sbc	r14, r13
     1c8:	ed 08       	sbc	r14, r13
     1ca:	ed 08       	sbc	r14, r13
     1cc:	ed 08       	sbc	r14, r13
     1ce:	ed 08       	sbc	r14, r13
     1d0:	ed 08       	sbc	r14, r13
     1d2:	ed 08       	sbc	r14, r13
     1d4:	ed 08       	sbc	r14, r13
     1d6:	ed 08       	sbc	r14, r13
     1d8:	ed 08       	sbc	r14, r13
     1da:	ed 08       	sbc	r14, r13
     1dc:	ed 08       	sbc	r14, r13
     1de:	ed 08       	sbc	r14, r13
     1e0:	ed 08       	sbc	r14, r13
     1e2:	ed 08       	sbc	r14, r13
     1e4:	9d 09       	sbc	r25, r13
     1e6:	fe 0a       	sbc	r15, r30
     1e8:	ed 08       	sbc	r14, r13
     1ea:	f4 0a       	sbc	r15, r20
     1ec:	ed 08       	sbc	r14, r13
     1ee:	f9 0a       	sbc	r15, r25
     1f0:	ed 08       	sbc	r14, r13
     1f2:	ea 0a       	sbc	r14, r26
     1f4:	ed 08       	sbc	r14, r13
     1f6:	ed 08       	sbc	r14, r13
     1f8:	ed 08       	sbc	r14, r13
     1fa:	ef 0a       	sbc	r14, r31
     1fc:	ed 08       	sbc	r14, r13
     1fe:	f4 0a       	sbc	r15, r20
     200:	ed 08       	sbc	r14, r13
     202:	03 0b       	sbc	r16, r19
     204:	ed 08       	sbc	r14, r13
     206:	ed 08       	sbc	r14, r13
     208:	ed 08       	sbc	r14, r13
     20a:	ed 08       	sbc	r14, r13
     20c:	ed 08       	sbc	r14, r13
     20e:	ed 08       	sbc	r14, r13
     210:	ed 08       	sbc	r14, r13
     212:	e5 0a       	sbc	r14, r21
     214:	ed 08       	sbc	r14, r13
     216:	ed 08       	sbc	r14, r13
     218:	ed 08       	sbc	r14, r13
     21a:	ea 0a       	sbc	r14, r26
     21c:	ed 08       	sbc	r14, r13
     21e:	ed 08       	sbc	r14, r13
     220:	ed 08       	sbc	r14, r13
     222:	0d 0b       	sbc	r16, r29
     224:	ed 08       	sbc	r14, r13
     226:	ed 08       	sbc	r14, r13
     228:	ed 08       	sbc	r14, r13
     22a:	ed 08       	sbc	r14, r13
     22c:	ed 08       	sbc	r14, r13
     22e:	ed 08       	sbc	r14, r13
     230:	ed 08       	sbc	r14, r13
     232:	ed 08       	sbc	r14, r13
     234:	ed 08       	sbc	r14, r13
     236:	ed 08       	sbc	r14, r13
     238:	ed 08       	sbc	r14, r13
     23a:	ed 08       	sbc	r14, r13
     23c:	ed 08       	sbc	r14, r13
     23e:	ed 08       	sbc	r14, r13
     240:	ed 08       	sbc	r14, r13
     242:	08 0b       	sbc	r16, r24
     244:	ed 08       	sbc	r14, r13
     246:	ed 08       	sbc	r14, r13
     248:	ed 08       	sbc	r14, r13
     24a:	ed 08       	sbc	r14, r13
     24c:	ed 08       	sbc	r14, r13
     24e:	ed 08       	sbc	r14, r13
     250:	ed 08       	sbc	r14, r13
     252:	03 0b       	sbc	r16, r19
     254:	ed 08       	sbc	r14, r13
     256:	ed 08       	sbc	r14, r13
     258:	ed 08       	sbc	r14, r13
     25a:	ed 08       	sbc	r14, r13
     25c:	ed 08       	sbc	r14, r13
     25e:	ed 08       	sbc	r14, r13
     260:	ed 08       	sbc	r14, r13
     262:	17 0b       	sbc	r17, r23
     264:	ed 08       	sbc	r14, r13
     266:	ed 08       	sbc	r14, r13
     268:	ed 08       	sbc	r14, r13
     26a:	ed 08       	sbc	r14, r13
     26c:	ed 08       	sbc	r14, r13
     26e:	ed 08       	sbc	r14, r13
     270:	ed 08       	sbc	r14, r13
     272:	ed 08       	sbc	r14, r13
     274:	ed 08       	sbc	r14, r13
     276:	ed 08       	sbc	r14, r13
     278:	ed 08       	sbc	r14, r13
     27a:	ed 08       	sbc	r14, r13
     27c:	ed 08       	sbc	r14, r13
     27e:	ed 08       	sbc	r14, r13
     280:	ed 08       	sbc	r14, r13
     282:	ed 08       	sbc	r14, r13
     284:	ed 08       	sbc	r14, r13
     286:	ed 08       	sbc	r14, r13
     288:	ed 08       	sbc	r14, r13
     28a:	ed 08       	sbc	r14, r13
     28c:	ed 08       	sbc	r14, r13
     28e:	ed 08       	sbc	r14, r13
     290:	ed 08       	sbc	r14, r13
     292:	ed 08       	sbc	r14, r13
     294:	ed 08       	sbc	r14, r13
     296:	ed 08       	sbc	r14, r13
     298:	ed 08       	sbc	r14, r13
     29a:	ed 08       	sbc	r14, r13
     29c:	ed 08       	sbc	r14, r13
     29e:	ed 08       	sbc	r14, r13
     2a0:	ed 08       	sbc	r14, r13
     2a2:	12 0b       	sbc	r17, r18
     2a4:	ed 08       	sbc	r14, r13
     2a6:	ed 08       	sbc	r14, r13
     2a8:	ed 08       	sbc	r14, r13
     2aa:	ed 08       	sbc	r14, r13
     2ac:	ed 08       	sbc	r14, r13
     2ae:	ed 08       	sbc	r14, r13
     2b0:	ed 08       	sbc	r14, r13
     2b2:	ed 08       	sbc	r14, r13
     2b4:	ed 08       	sbc	r14, r13
     2b6:	ed 08       	sbc	r14, r13
     2b8:	ed 08       	sbc	r14, r13
     2ba:	ed 08       	sbc	r14, r13
     2bc:	ed 08       	sbc	r14, r13
     2be:	ed 08       	sbc	r14, r13
     2c0:	ed 08       	sbc	r14, r13
     2c2:	0d 0b       	sbc	r16, r29
     2c4:	aa 0b       	sbc	r26, r26
     2c6:	ed 08       	sbc	r14, r13
     2c8:	a0 0b       	sbc	r26, r16
     2ca:	ed 08       	sbc	r14, r13
     2cc:	a5 0b       	sbc	r26, r21
     2ce:	ed 08       	sbc	r14, r13
     2d0:	96 0b       	sbc	r25, r22
     2d2:	ed 08       	sbc	r14, r13
     2d4:	ed 08       	sbc	r14, r13
     2d6:	ed 08       	sbc	r14, r13
     2d8:	9b 0b       	sbc	r25, r27
     2da:	ed 08       	sbc	r14, r13
     2dc:	a0 0b       	sbc	r26, r16
     2de:	ed 08       	sbc	r14, r13
     2e0:	af 0b       	sbc	r26, r31
     2e2:	ed 08       	sbc	r14, r13
     2e4:	ed 08       	sbc	r14, r13
     2e6:	ed 08       	sbc	r14, r13
     2e8:	ed 08       	sbc	r14, r13
     2ea:	ed 08       	sbc	r14, r13
     2ec:	ed 08       	sbc	r14, r13
     2ee:	ed 08       	sbc	r14, r13
     2f0:	91 0b       	sbc	r25, r17
     2f2:	ed 08       	sbc	r14, r13
     2f4:	ed 08       	sbc	r14, r13
     2f6:	ed 08       	sbc	r14, r13
     2f8:	96 0b       	sbc	r25, r22
     2fa:	ed 08       	sbc	r14, r13
     2fc:	ed 08       	sbc	r14, r13
     2fe:	ed 08       	sbc	r14, r13
     300:	b9 0b       	sbc	r27, r25
     302:	ed 08       	sbc	r14, r13
     304:	ed 08       	sbc	r14, r13
     306:	ed 08       	sbc	r14, r13
     308:	ed 08       	sbc	r14, r13
     30a:	ed 08       	sbc	r14, r13
     30c:	ed 08       	sbc	r14, r13
     30e:	ed 08       	sbc	r14, r13
     310:	ed 08       	sbc	r14, r13
     312:	ed 08       	sbc	r14, r13
     314:	ed 08       	sbc	r14, r13
     316:	ed 08       	sbc	r14, r13
     318:	ed 08       	sbc	r14, r13
     31a:	ed 08       	sbc	r14, r13
     31c:	ed 08       	sbc	r14, r13
     31e:	ed 08       	sbc	r14, r13
     320:	b4 0b       	sbc	r27, r20
     322:	ed 08       	sbc	r14, r13
     324:	ed 08       	sbc	r14, r13
     326:	ed 08       	sbc	r14, r13
     328:	ed 08       	sbc	r14, r13
     32a:	ed 08       	sbc	r14, r13
     32c:	ed 08       	sbc	r14, r13
     32e:	ed 08       	sbc	r14, r13
     330:	af 0b       	sbc	r26, r31
     332:	ed 08       	sbc	r14, r13
     334:	ed 08       	sbc	r14, r13
     336:	ed 08       	sbc	r14, r13
     338:	ed 08       	sbc	r14, r13
     33a:	ed 08       	sbc	r14, r13
     33c:	ed 08       	sbc	r14, r13
     33e:	ed 08       	sbc	r14, r13
     340:	c3 0b       	sbc	r28, r19
     342:	ed 08       	sbc	r14, r13
     344:	ed 08       	sbc	r14, r13
     346:	ed 08       	sbc	r14, r13
     348:	ed 08       	sbc	r14, r13
     34a:	ed 08       	sbc	r14, r13
     34c:	ed 08       	sbc	r14, r13
     34e:	ed 08       	sbc	r14, r13
     350:	ed 08       	sbc	r14, r13
     352:	ed 08       	sbc	r14, r13
     354:	ed 08       	sbc	r14, r13
     356:	ed 08       	sbc	r14, r13
     358:	ed 08       	sbc	r14, r13
     35a:	ed 08       	sbc	r14, r13
     35c:	ed 08       	sbc	r14, r13
     35e:	ed 08       	sbc	r14, r13
     360:	ed 08       	sbc	r14, r13
     362:	ed 08       	sbc	r14, r13
     364:	ed 08       	sbc	r14, r13
     366:	ed 08       	sbc	r14, r13
     368:	ed 08       	sbc	r14, r13
     36a:	ed 08       	sbc	r14, r13
     36c:	ed 08       	sbc	r14, r13
     36e:	ed 08       	sbc	r14, r13
     370:	ed 08       	sbc	r14, r13
     372:	ed 08       	sbc	r14, r13
     374:	ed 08       	sbc	r14, r13
     376:	ed 08       	sbc	r14, r13
     378:	ed 08       	sbc	r14, r13
     37a:	ed 08       	sbc	r14, r13
     37c:	ed 08       	sbc	r14, r13
     37e:	ed 08       	sbc	r14, r13
     380:	be 0b       	sbc	r27, r30
     382:	ed 08       	sbc	r14, r13
     384:	ed 08       	sbc	r14, r13
     386:	ed 08       	sbc	r14, r13
     388:	ed 08       	sbc	r14, r13
     38a:	ed 08       	sbc	r14, r13
     38c:	ed 08       	sbc	r14, r13
     38e:	ed 08       	sbc	r14, r13
     390:	ed 08       	sbc	r14, r13
     392:	ed 08       	sbc	r14, r13
     394:	ed 08       	sbc	r14, r13
     396:	ed 08       	sbc	r14, r13
     398:	ed 08       	sbc	r14, r13
     39a:	ed 08       	sbc	r14, r13
     39c:	ed 08       	sbc	r14, r13
     39e:	ed 08       	sbc	r14, r13
     3a0:	b9 0b       	sbc	r27, r25
     3a2:	a4 0c       	add	r10, r4
     3a4:	ed 08       	sbc	r14, r13
     3a6:	9a 0c       	add	r9, r10
     3a8:	ed 08       	sbc	r14, r13
     3aa:	9f 0c       	add	r9, r15
     3ac:	ed 08       	sbc	r14, r13
     3ae:	90 0c       	add	r9, r0
     3b0:	ed 08       	sbc	r14, r13
     3b2:	ed 08       	sbc	r14, r13
     3b4:	ed 08       	sbc	r14, r13
     3b6:	95 0c       	add	r9, r5
     3b8:	ed 08       	sbc	r14, r13
     3ba:	9a 0c       	add	r9, r10
     3bc:	ed 08       	sbc	r14, r13
     3be:	a9 0c       	add	r10, r9
     3c0:	ed 08       	sbc	r14, r13
     3c2:	ed 08       	sbc	r14, r13
     3c4:	ed 08       	sbc	r14, r13
     3c6:	ed 08       	sbc	r14, r13
     3c8:	ed 08       	sbc	r14, r13
     3ca:	ed 08       	sbc	r14, r13
     3cc:	ed 08       	sbc	r14, r13
     3ce:	8b 0c       	add	r8, r11
     3d0:	ed 08       	sbc	r14, r13
     3d2:	ed 08       	sbc	r14, r13
     3d4:	ed 08       	sbc	r14, r13
     3d6:	90 0c       	add	r9, r0
     3d8:	ed 08       	sbc	r14, r13
     3da:	ed 08       	sbc	r14, r13
     3dc:	ed 08       	sbc	r14, r13
     3de:	b3 0c       	add	r11, r3
     3e0:	ed 08       	sbc	r14, r13
     3e2:	ed 08       	sbc	r14, r13
     3e4:	ed 08       	sbc	r14, r13
     3e6:	ed 08       	sbc	r14, r13
     3e8:	ed 08       	sbc	r14, r13
     3ea:	ed 08       	sbc	r14, r13
     3ec:	ed 08       	sbc	r14, r13
     3ee:	ed 08       	sbc	r14, r13
     3f0:	ed 08       	sbc	r14, r13
     3f2:	ed 08       	sbc	r14, r13
     3f4:	ed 08       	sbc	r14, r13
     3f6:	ed 08       	sbc	r14, r13
     3f8:	ed 08       	sbc	r14, r13
     3fa:	ed 08       	sbc	r14, r13
     3fc:	ed 08       	sbc	r14, r13
     3fe:	ae 0c       	add	r10, r14
     400:	ed 08       	sbc	r14, r13
     402:	ed 08       	sbc	r14, r13
     404:	ed 08       	sbc	r14, r13
     406:	ed 08       	sbc	r14, r13
     408:	ed 08       	sbc	r14, r13
     40a:	ed 08       	sbc	r14, r13
     40c:	ed 08       	sbc	r14, r13
     40e:	a9 0c       	add	r10, r9
     410:	ed 08       	sbc	r14, r13
     412:	ed 08       	sbc	r14, r13
     414:	ed 08       	sbc	r14, r13
     416:	ed 08       	sbc	r14, r13
     418:	ed 08       	sbc	r14, r13
     41a:	ed 08       	sbc	r14, r13
     41c:	ed 08       	sbc	r14, r13
     41e:	bd 0c       	add	r11, r13
     420:	ed 08       	sbc	r14, r13
     422:	ed 08       	sbc	r14, r13
     424:	ed 08       	sbc	r14, r13
     426:	ed 08       	sbc	r14, r13
     428:	ed 08       	sbc	r14, r13
     42a:	ed 08       	sbc	r14, r13
     42c:	ed 08       	sbc	r14, r13
     42e:	ed 08       	sbc	r14, r13
     430:	ed 08       	sbc	r14, r13
     432:	ed 08       	sbc	r14, r13
     434:	ed 08       	sbc	r14, r13
     436:	ed 08       	sbc	r14, r13
     438:	ed 08       	sbc	r14, r13
     43a:	ed 08       	sbc	r14, r13
     43c:	ed 08       	sbc	r14, r13
     43e:	ed 08       	sbc	r14, r13
     440:	ed 08       	sbc	r14, r13
     442:	ed 08       	sbc	r14, r13
     444:	ed 08       	sbc	r14, r13
     446:	ed 08       	sbc	r14, r13
     448:	ed 08       	sbc	r14, r13
     44a:	ed 08       	sbc	r14, r13
     44c:	ed 08       	sbc	r14, r13
     44e:	ed 08       	sbc	r14, r13
     450:	ed 08       	sbc	r14, r13
     452:	ed 08       	sbc	r14, r13
     454:	ed 08       	sbc	r14, r13
     456:	ed 08       	sbc	r14, r13
     458:	ed 08       	sbc	r14, r13
     45a:	ed 08       	sbc	r14, r13
     45c:	ed 08       	sbc	r14, r13
     45e:	b8 0c       	add	r11, r8
     460:	ed 08       	sbc	r14, r13
     462:	ed 08       	sbc	r14, r13
     464:	ed 08       	sbc	r14, r13
     466:	ed 08       	sbc	r14, r13
     468:	ed 08       	sbc	r14, r13
     46a:	ed 08       	sbc	r14, r13
     46c:	ed 08       	sbc	r14, r13
     46e:	ed 08       	sbc	r14, r13
     470:	ed 08       	sbc	r14, r13
     472:	ed 08       	sbc	r14, r13
     474:	ed 08       	sbc	r14, r13
     476:	ed 08       	sbc	r14, r13
     478:	ed 08       	sbc	r14, r13
     47a:	ed 08       	sbc	r14, r13
     47c:	ed 08       	sbc	r14, r13
     47e:	b3 0c       	add	r11, r3
     480:	85 0d       	add	r24, r5
     482:	ed 08       	sbc	r14, r13
     484:	7b 0d       	add	r23, r11
     486:	ed 08       	sbc	r14, r13
     488:	80 0d       	add	r24, r0
     48a:	ed 08       	sbc	r14, r13
     48c:	71 0d       	add	r23, r1
     48e:	ed 08       	sbc	r14, r13
     490:	ed 08       	sbc	r14, r13
     492:	ed 08       	sbc	r14, r13
     494:	76 0d       	add	r23, r6
     496:	ed 08       	sbc	r14, r13
     498:	7b 0d       	add	r23, r11
     49a:	ed 08       	sbc	r14, r13
     49c:	8a 0d       	add	r24, r10
     49e:	ed 08       	sbc	r14, r13
     4a0:	ed 08       	sbc	r14, r13
     4a2:	ed 08       	sbc	r14, r13
     4a4:	ed 08       	sbc	r14, r13
     4a6:	ed 08       	sbc	r14, r13
     4a8:	ed 08       	sbc	r14, r13
     4aa:	ed 08       	sbc	r14, r13
     4ac:	6c 0d       	add	r22, r12
     4ae:	ed 08       	sbc	r14, r13
     4b0:	ed 08       	sbc	r14, r13
     4b2:	ed 08       	sbc	r14, r13
     4b4:	71 0d       	add	r23, r1
     4b6:	ed 08       	sbc	r14, r13
     4b8:	ed 08       	sbc	r14, r13
     4ba:	ed 08       	sbc	r14, r13
     4bc:	94 0d       	add	r25, r4
     4be:	ed 08       	sbc	r14, r13
     4c0:	ed 08       	sbc	r14, r13
     4c2:	ed 08       	sbc	r14, r13
     4c4:	ed 08       	sbc	r14, r13
     4c6:	ed 08       	sbc	r14, r13
     4c8:	ed 08       	sbc	r14, r13
     4ca:	ed 08       	sbc	r14, r13
     4cc:	ed 08       	sbc	r14, r13
     4ce:	ed 08       	sbc	r14, r13
     4d0:	ed 08       	sbc	r14, r13
     4d2:	ed 08       	sbc	r14, r13
     4d4:	ed 08       	sbc	r14, r13
     4d6:	ed 08       	sbc	r14, r13
     4d8:	ed 08       	sbc	r14, r13
     4da:	ed 08       	sbc	r14, r13
     4dc:	8f 0d       	add	r24, r15
     4de:	ed 08       	sbc	r14, r13
     4e0:	ed 08       	sbc	r14, r13
     4e2:	ed 08       	sbc	r14, r13
     4e4:	ed 08       	sbc	r14, r13
     4e6:	ed 08       	sbc	r14, r13
     4e8:	ed 08       	sbc	r14, r13
     4ea:	ed 08       	sbc	r14, r13
     4ec:	8a 0d       	add	r24, r10
     4ee:	ed 08       	sbc	r14, r13
     4f0:	ed 08       	sbc	r14, r13
     4f2:	ed 08       	sbc	r14, r13
     4f4:	ed 08       	sbc	r14, r13
     4f6:	ed 08       	sbc	r14, r13
     4f8:	ed 08       	sbc	r14, r13
     4fa:	ed 08       	sbc	r14, r13
     4fc:	9e 0d       	add	r25, r14
     4fe:	ed 08       	sbc	r14, r13
     500:	ed 08       	sbc	r14, r13
     502:	ed 08       	sbc	r14, r13
     504:	ed 08       	sbc	r14, r13
     506:	ed 08       	sbc	r14, r13
     508:	ed 08       	sbc	r14, r13
     50a:	ed 08       	sbc	r14, r13
     50c:	ed 08       	sbc	r14, r13
     50e:	ed 08       	sbc	r14, r13
     510:	ed 08       	sbc	r14, r13
     512:	ed 08       	sbc	r14, r13
     514:	ed 08       	sbc	r14, r13
     516:	ed 08       	sbc	r14, r13
     518:	ed 08       	sbc	r14, r13
     51a:	ed 08       	sbc	r14, r13
     51c:	ed 08       	sbc	r14, r13
     51e:	ed 08       	sbc	r14, r13
     520:	ed 08       	sbc	r14, r13
     522:	ed 08       	sbc	r14, r13
     524:	ed 08       	sbc	r14, r13
     526:	ed 08       	sbc	r14, r13
     528:	ed 08       	sbc	r14, r13
     52a:	ed 08       	sbc	r14, r13
     52c:	ed 08       	sbc	r14, r13
     52e:	ed 08       	sbc	r14, r13
     530:	ed 08       	sbc	r14, r13
     532:	ed 08       	sbc	r14, r13
     534:	ed 08       	sbc	r14, r13
     536:	ed 08       	sbc	r14, r13
     538:	ed 08       	sbc	r14, r13
     53a:	ed 08       	sbc	r14, r13
     53c:	99 0d       	add	r25, r9
     53e:	ed 08       	sbc	r14, r13
     540:	ed 08       	sbc	r14, r13
     542:	ed 08       	sbc	r14, r13
     544:	ed 08       	sbc	r14, r13
     546:	ed 08       	sbc	r14, r13
     548:	ed 08       	sbc	r14, r13
     54a:	ed 08       	sbc	r14, r13
     54c:	ed 08       	sbc	r14, r13
     54e:	ed 08       	sbc	r14, r13
     550:	ed 08       	sbc	r14, r13
     552:	ed 08       	sbc	r14, r13
     554:	ed 08       	sbc	r14, r13
     556:	ed 08       	sbc	r14, r13
     558:	ed 08       	sbc	r14, r13
     55a:	ed 08       	sbc	r14, r13
     55c:	94 0d       	add	r25, r4
     55e:	71 0e       	add	r7, r17
     560:	8e 0e       	add	r8, r30
     562:	67 0e       	add	r6, r23
     564:	8e 0e       	add	r8, r30
     566:	6c 0e       	add	r6, r28
     568:	8e 0e       	add	r8, r30
     56a:	5d 0e       	add	r5, r29
     56c:	8e 0e       	add	r8, r30
     56e:	8e 0e       	add	r8, r30
     570:	8e 0e       	add	r8, r30
     572:	62 0e       	add	r6, r18
     574:	8e 0e       	add	r8, r30
     576:	67 0e       	add	r6, r23
     578:	8e 0e       	add	r8, r30
     57a:	76 0e       	add	r7, r22
     57c:	8e 0e       	add	r8, r30
     57e:	8e 0e       	add	r8, r30
     580:	8e 0e       	add	r8, r30
     582:	8e 0e       	add	r8, r30
     584:	8e 0e       	add	r8, r30
     586:	8e 0e       	add	r8, r30
     588:	8e 0e       	add	r8, r30
     58a:	58 0e       	add	r5, r24
     58c:	8e 0e       	add	r8, r30
     58e:	8e 0e       	add	r8, r30
     590:	8e 0e       	add	r8, r30
     592:	5d 0e       	add	r5, r29
     594:	8e 0e       	add	r8, r30
     596:	8e 0e       	add	r8, r30
     598:	8e 0e       	add	r8, r30
     59a:	80 0e       	add	r8, r16
     59c:	8e 0e       	add	r8, r30
     59e:	8e 0e       	add	r8, r30
     5a0:	8e 0e       	add	r8, r30
     5a2:	8e 0e       	add	r8, r30
     5a4:	8e 0e       	add	r8, r30
     5a6:	8e 0e       	add	r8, r30
     5a8:	8e 0e       	add	r8, r30
     5aa:	8e 0e       	add	r8, r30
     5ac:	8e 0e       	add	r8, r30
     5ae:	8e 0e       	add	r8, r30
     5b0:	8e 0e       	add	r8, r30
     5b2:	8e 0e       	add	r8, r30
     5b4:	8e 0e       	add	r8, r30
     5b6:	8e 0e       	add	r8, r30
     5b8:	8e 0e       	add	r8, r30
     5ba:	7b 0e       	add	r7, r27
     5bc:	8e 0e       	add	r8, r30
     5be:	8e 0e       	add	r8, r30
     5c0:	8e 0e       	add	r8, r30
     5c2:	8e 0e       	add	r8, r30
     5c4:	8e 0e       	add	r8, r30
     5c6:	8e 0e       	add	r8, r30
     5c8:	8e 0e       	add	r8, r30
     5ca:	76 0e       	add	r7, r22
     5cc:	8e 0e       	add	r8, r30
     5ce:	8e 0e       	add	r8, r30
     5d0:	8e 0e       	add	r8, r30
     5d2:	8e 0e       	add	r8, r30
     5d4:	8e 0e       	add	r8, r30
     5d6:	8e 0e       	add	r8, r30
     5d8:	8e 0e       	add	r8, r30
     5da:	8a 0e       	add	r8, r26
     5dc:	8e 0e       	add	r8, r30
     5de:	8e 0e       	add	r8, r30
     5e0:	8e 0e       	add	r8, r30
     5e2:	8e 0e       	add	r8, r30
     5e4:	8e 0e       	add	r8, r30
     5e6:	8e 0e       	add	r8, r30
     5e8:	8e 0e       	add	r8, r30
     5ea:	8e 0e       	add	r8, r30
     5ec:	8e 0e       	add	r8, r30
     5ee:	8e 0e       	add	r8, r30
     5f0:	8e 0e       	add	r8, r30
     5f2:	8e 0e       	add	r8, r30
     5f4:	8e 0e       	add	r8, r30
     5f6:	8e 0e       	add	r8, r30
     5f8:	8e 0e       	add	r8, r30
     5fa:	8e 0e       	add	r8, r30
     5fc:	8e 0e       	add	r8, r30
     5fe:	8e 0e       	add	r8, r30
     600:	8e 0e       	add	r8, r30
     602:	8e 0e       	add	r8, r30
     604:	8e 0e       	add	r8, r30
     606:	8e 0e       	add	r8, r30
     608:	8e 0e       	add	r8, r30
     60a:	8e 0e       	add	r8, r30
     60c:	8e 0e       	add	r8, r30
     60e:	8e 0e       	add	r8, r30
     610:	8e 0e       	add	r8, r30
     612:	8e 0e       	add	r8, r30
     614:	8e 0e       	add	r8, r30
     616:	8e 0e       	add	r8, r30
     618:	8e 0e       	add	r8, r30
     61a:	85 0e       	add	r8, r21
     61c:	8e 0e       	add	r8, r30
     61e:	8e 0e       	add	r8, r30
     620:	8e 0e       	add	r8, r30
     622:	8e 0e       	add	r8, r30
     624:	8e 0e       	add	r8, r30
     626:	8e 0e       	add	r8, r30
     628:	8e 0e       	add	r8, r30
     62a:	8e 0e       	add	r8, r30
     62c:	8e 0e       	add	r8, r30
     62e:	8e 0e       	add	r8, r30
     630:	8e 0e       	add	r8, r30
     632:	8e 0e       	add	r8, r30
     634:	8e 0e       	add	r8, r30
     636:	8e 0e       	add	r8, r30
     638:	8e 0e       	add	r8, r30
     63a:	80 0e       	add	r8, r16

0000063c <__ctors_end>:
     63c:	11 24       	eor	r1, r1
     63e:	1f be       	out	0x3f, r1	; 63
     640:	cf e5       	ldi	r28, 0x5F	; 95
     642:	d4 e0       	ldi	r29, 0x04	; 4
     644:	de bf       	out	0x3e, r29	; 62
     646:	cd bf       	out	0x3d, r28	; 61

00000648 <__do_copy_data>:
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	a0 e6       	ldi	r26, 0x60	; 96
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	ea e4       	ldi	r30, 0x4A	; 74
     650:	f2 e2       	ldi	r31, 0x22	; 34
     652:	02 c0       	rjmp	.+4      	; 0x658 <__do_copy_data+0x10>
     654:	05 90       	lpm	r0, Z+
     656:	0d 92       	st	X+, r0
     658:	a4 36       	cpi	r26, 0x64	; 100
     65a:	b1 07       	cpc	r27, r17
     65c:	d9 f7       	brne	.-10     	; 0x654 <__do_copy_data+0xc>

0000065e <__do_clear_bss>:
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	a4 e6       	ldi	r26, 0x64	; 100
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	01 c0       	rjmp	.+2      	; 0x668 <.do_clear_bss_start>

00000666 <.do_clear_bss_loop>:
     666:	1d 92       	st	X+, r1

00000668 <.do_clear_bss_start>:
     668:	a5 3b       	cpi	r26, 0xB5	; 181
     66a:	b2 07       	cpc	r27, r18
     66c:	e1 f7       	brne	.-8      	; 0x666 <.do_clear_bss_loop>
     66e:	0e 94 a9 08 	call	0x1152	; 0x1152 <main>
     672:	0c 94 23 11 	jmp	0x2246	; 0x2246 <_exit>

00000676 <__bad_interrupt>:
     676:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000067a <_Z10get_buttonh>:
uint8_t cSpeed = 0xff, incCounter = 0;
int16_t cSpeedDiff = 0;

/* -------------------- BUTTON + SWITCH -------------------- */
uint8_t get_button(uint8_t keyid)
{
     67a:	98 2f       	mov	r25, r24
	if ((PINB & 0x0e) != 0x0e)
     67c:	86 b3       	in	r24, 0x16	; 22
     67e:	8e 70       	andi	r24, 0x0E	; 14
     680:	8e 30       	cpi	r24, 0x0E	; 14
     682:	81 f0       	breq	.+32     	; 0x6a4 <_Z10get_buttonh+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     684:	2f ef       	ldi	r18, 0xFF	; 255
     686:	37 ee       	ldi	r19, 0xE7	; 231
     688:	83 e0       	ldi	r24, 0x03	; 3
     68a:	21 50       	subi	r18, 0x01	; 1
     68c:	30 40       	sbci	r19, 0x00	; 0
     68e:	80 40       	sbci	r24, 0x00	; 0
     690:	e1 f7       	brne	.-8      	; 0x68a <_Z10get_buttonh+0x10>
     692:	00 c0       	rjmp	.+0      	; 0x694 <_Z10get_buttonh+0x1a>
     694:	00 00       	nop
	{
		_delay_ms(80);
		if ((PINB|keyid) == keyid) return 1;
     696:	26 b3       	in	r18, 0x16	; 22
     698:	29 2b       	or	r18, r25
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	92 17       	cp	r25, r18
     69e:	19 f0       	breq	.+6      	; 0x6a6 <_Z10get_buttonh+0x2c>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	08 95       	ret
	}
	return 0;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
}
     6a6:	08 95       	ret

000006a8 <_Z10get_switchv>:

uint8_t get_switch()
{
	uint8_t x=0;
	x = ~PINC;
     6a8:	83 b3       	in	r24, 0x13	; 19
     6aa:	80 95       	com	r24
	x = x & 0b00000011;
	return x;
}
     6ac:	83 70       	andi	r24, 0x03	; 3
     6ae:	08 95       	ret

000006b0 <_Z11get_switch2v>:

uint8_t get_switch2()
{
	uint8_t x=0;
	x = ~PINC;
     6b0:	83 b3       	in	r24, 0x13	; 19
     6b2:	80 95       	com	r24
	x = x & 0b00000100;
	return x;
}
     6b4:	84 70       	andi	r24, 0x04	; 4
     6b6:	08 95       	ret

000006b8 <_Z9cal_ratiov>:
	velocity = veloc;
}

void cal_ratio( void )
{
	cnt_ratio++;
     6b8:	80 91 7c 00 	lds	r24, 0x007C
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	80 93 7c 00 	sts	0x007C, r24
	if (cnt_ratio >= 20) /* 20ms */
     6c2:	84 31       	cpi	r24, 0x14	; 20
     6c4:	08 f4       	brcc	.+2      	; 0x6c8 <_Z9cal_ratiov+0x10>
     6c6:	d6 c0       	rjmp	.+428    	; 0x874 <_Z9cal_ratiov+0x1bc>
	{
		if (velocity < 0)
     6c8:	80 91 7d 00 	lds	r24, 0x007D
     6cc:	90 91 7e 00 	lds	r25, 0x007E
     6d0:	99 23       	and	r25, r25
     6d2:	8c f4       	brge	.+34     	; 0x6f6 <_Z9cal_ratiov+0x3e>
		{
			ratio = ratio_base;
     6d4:	80 91 76 00 	lds	r24, 0x0076
     6d8:	90 91 77 00 	lds	r25, 0x0077
     6dc:	a0 91 78 00 	lds	r26, 0x0078
     6e0:	b0 91 79 00 	lds	r27, 0x0079
     6e4:	80 93 72 00 	sts	0x0072, r24
     6e8:	90 93 73 00 	sts	0x0073, r25
     6ec:	a0 93 74 00 	sts	0x0074, r26
     6f0:	b0 93 75 00 	sts	0x0075, r27
     6f4:	9f c0       	rjmp	.+318    	; 0x834 <_Z9cal_ratiov+0x17c>
		}
		else
		{
			if      (pulse_ratio < velocity / 2)    ratio = ratio_base + 0.3;
     6f6:	9c 01       	movw	r18, r24
     6f8:	99 23       	and	r25, r25
     6fa:	14 f4       	brge	.+4      	; 0x700 <_Z9cal_ratiov+0x48>
     6fc:	2f 5f       	subi	r18, 0xFF	; 255
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	a9 01       	movw	r20, r18
     702:	55 95       	asr	r21
     704:	47 95       	ror	r20
     706:	20 91 7a 00 	lds	r18, 0x007A
     70a:	30 91 7b 00 	lds	r19, 0x007B
     70e:	24 17       	cp	r18, r20
     710:	35 07       	cpc	r19, r21
     712:	bc f4       	brge	.+46     	; 0x742 <_Z9cal_ratiov+0x8a>
     714:	2a e9       	ldi	r18, 0x9A	; 154
     716:	39 e9       	ldi	r19, 0x99	; 153
     718:	49 e9       	ldi	r20, 0x99	; 153
     71a:	5e e3       	ldi	r21, 0x3E	; 62
     71c:	60 91 76 00 	lds	r22, 0x0076
     720:	70 91 77 00 	lds	r23, 0x0077
     724:	80 91 78 00 	lds	r24, 0x0078
     728:	90 91 79 00 	lds	r25, 0x0079
     72c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
     730:	60 93 72 00 	sts	0x0072, r22
     734:	70 93 73 00 	sts	0x0073, r23
     738:	80 93 74 00 	sts	0x0074, r24
     73c:	90 93 75 00 	sts	0x0075, r25
     740:	5e c0       	rjmp	.+188    	; 0x7fe <_Z9cal_ratiov+0x146>
			else if (pulse_ratio < velocity)        ratio = ratio_base + 0.1;
     742:	28 17       	cp	r18, r24
     744:	39 07       	cpc	r19, r25
     746:	bc f4       	brge	.+46     	; 0x776 <_Z9cal_ratiov+0xbe>
     748:	2d ec       	ldi	r18, 0xCD	; 205
     74a:	3c ec       	ldi	r19, 0xCC	; 204
     74c:	4c ec       	ldi	r20, 0xCC	; 204
     74e:	5d e3       	ldi	r21, 0x3D	; 61
     750:	60 91 76 00 	lds	r22, 0x0076
     754:	70 91 77 00 	lds	r23, 0x0077
     758:	80 91 78 00 	lds	r24, 0x0078
     75c:	90 91 79 00 	lds	r25, 0x0079
     760:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
     764:	60 93 72 00 	sts	0x0072, r22
     768:	70 93 73 00 	sts	0x0073, r23
     76c:	80 93 74 00 	sts	0x0074, r24
     770:	90 93 75 00 	sts	0x0075, r25
     774:	44 c0       	rjmp	.+136    	; 0x7fe <_Z9cal_ratiov+0x146>
			else if (pulse_ratio > velocity)        ratio = ratio_base - 0.35;
     776:	82 17       	cp	r24, r18
     778:	93 07       	cpc	r25, r19
     77a:	bc f4       	brge	.+46     	; 0x7aa <_Z9cal_ratiov+0xf2>
     77c:	23 e3       	ldi	r18, 0x33	; 51
     77e:	33 e3       	ldi	r19, 0x33	; 51
     780:	43 eb       	ldi	r20, 0xB3	; 179
     782:	5e e3       	ldi	r21, 0x3E	; 62
     784:	60 91 76 00 	lds	r22, 0x0076
     788:	70 91 77 00 	lds	r23, 0x0077
     78c:	80 91 78 00 	lds	r24, 0x0078
     790:	90 91 79 00 	lds	r25, 0x0079
     794:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
     798:	60 93 72 00 	sts	0x0072, r22
     79c:	70 93 73 00 	sts	0x0073, r23
     7a0:	80 93 74 00 	sts	0x0074, r24
     7a4:	90 93 75 00 	sts	0x0075, r25
     7a8:	2a c0       	rjmp	.+84     	; 0x7fe <_Z9cal_ratiov+0x146>
			else if (pulse_ratio > velocity / 2)    ratio = ratio_base - 0.25;
     7aa:	42 17       	cp	r20, r18
     7ac:	53 07       	cpc	r21, r19
     7ae:	bc f4       	brge	.+46     	; 0x7de <_Z9cal_ratiov+0x126>
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	40 e8       	ldi	r20, 0x80	; 128
     7b6:	5e e3       	ldi	r21, 0x3E	; 62
     7b8:	60 91 76 00 	lds	r22, 0x0076
     7bc:	70 91 77 00 	lds	r23, 0x0077
     7c0:	80 91 78 00 	lds	r24, 0x0078
     7c4:	90 91 79 00 	lds	r25, 0x0079
     7c8:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
     7cc:	60 93 72 00 	sts	0x0072, r22
     7d0:	70 93 73 00 	sts	0x0073, r23
     7d4:	80 93 74 00 	sts	0x0074, r24
     7d8:	90 93 75 00 	sts	0x0075, r25
     7dc:	10 c0       	rjmp	.+32     	; 0x7fe <_Z9cal_ratiov+0x146>
			else ratio = ratio_base;
     7de:	80 91 76 00 	lds	r24, 0x0076
     7e2:	90 91 77 00 	lds	r25, 0x0077
     7e6:	a0 91 78 00 	lds	r26, 0x0078
     7ea:	b0 91 79 00 	lds	r27, 0x0079
     7ee:	80 93 72 00 	sts	0x0072, r24
     7f2:	90 93 73 00 	sts	0x0073, r25
     7f6:	a0 93 74 00 	sts	0x0074, r26
     7fa:	b0 93 75 00 	sts	0x0075, r27
			
			if (ratio <= 0) ratio = 0.1;
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	a9 01       	movw	r20, r18
     804:	60 91 72 00 	lds	r22, 0x0072
     808:	70 91 73 00 	lds	r23, 0x0073
     80c:	80 91 74 00 	lds	r24, 0x0074
     810:	90 91 75 00 	lds	r25, 0x0075
     814:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__cmpsf2>
     818:	18 16       	cp	r1, r24
     81a:	64 f0       	brlt	.+24     	; 0x834 <_Z9cal_ratiov+0x17c>
     81c:	8d ec       	ldi	r24, 0xCD	; 205
     81e:	9c ec       	ldi	r25, 0xCC	; 204
     820:	ac ec       	ldi	r26, 0xCC	; 204
     822:	bd e3       	ldi	r27, 0x3D	; 61
     824:	80 93 72 00 	sts	0x0072, r24
     828:	90 93 73 00 	sts	0x0073, r25
     82c:	a0 93 74 00 	sts	0x0074, r26
     830:	b0 93 75 00 	sts	0x0075, r27
		}
		
		cSpeedDiff = pulse_ratio - cSpeed;
     834:	80 91 7a 00 	lds	r24, 0x007A
     838:	90 91 7b 00 	lds	r25, 0x007B
     83c:	20 91 61 00 	lds	r18, 0x0061
     840:	ac 01       	movw	r20, r24
     842:	42 1b       	sub	r20, r18
     844:	51 09       	sbc	r21, r1
     846:	50 93 6c 00 	sts	0x006C, r21
     84a:	40 93 6b 00 	sts	0x006B, r20
		if (cSpeedDiff > 0) incCounter++;
     84e:	14 16       	cp	r1, r20
     850:	15 06       	cpc	r1, r21
     852:	34 f4       	brge	.+12     	; 0x860 <_Z9cal_ratiov+0x1a8>
     854:	20 91 6d 00 	lds	r18, 0x006D
     858:	2f 5f       	subi	r18, 0xFF	; 255
     85a:	20 93 6d 00 	sts	0x006D, r18
     85e:	02 c0       	rjmp	.+4      	; 0x864 <_Z9cal_ratiov+0x1ac>
		else incCounter = 0;
     860:	10 92 6d 00 	sts	0x006D, r1
		cSpeed = pulse_ratio;
     864:	80 93 61 00 	sts	0x0061, r24
		
		pulse_ratio = 0;
     868:	10 92 7b 00 	sts	0x007B, r1
     86c:	10 92 7a 00 	sts	0x007A, r1
		cnt_ratio = 0;
     870:	10 92 7c 00 	sts	0x007C, r1
     874:	08 95       	ret

00000876 <_Z6handlei>:
	}
	return false;
}

void handle(int goc)
{
     876:	85 36       	cpi	r24, 0x65	; 101
     878:	2f ef       	ldi	r18, 0xFF	; 255
     87a:	92 07       	cpc	r25, r18
     87c:	14 f4       	brge	.+4      	; 0x882 <_Z6handlei+0xc>
     87e:	85 e6       	ldi	r24, 0x65	; 101
     880:	9f ef       	ldi	r25, 0xFF	; 255
     882:	8c 39       	cpi	r24, 0x9C	; 156
     884:	91 05       	cpc	r25, r1
     886:	14 f0       	brlt	.+4      	; 0x88c <_Z6handlei+0x16>
     888:	8b e9       	ldi	r24, 0x9B	; 155
     88a:	90 e0       	ldi	r25, 0x00	; 0
	if      (goc > SERVO_ANGLE_MAX)  goc =  SERVO_ANGLE_MAX;
	else if (goc < -SERVO_ANGLE_MAX) goc = -SERVO_ANGLE_MAX;
	
	OCR1A = SERVO_CENTER + (goc * STEP);
     88c:	9c 01       	movw	r18, r24
     88e:	22 0f       	add	r18, r18
     890:	33 1f       	adc	r19, r19
     892:	22 0f       	add	r18, r18
     894:	33 1f       	adc	r19, r19
     896:	82 0f       	add	r24, r18
     898:	93 1f       	adc	r25, r19
     89a:	20 91 62 00 	lds	r18, 0x0062
     89e:	30 91 63 00 	lds	r19, 0x0063
     8a2:	82 0f       	add	r24, r18
     8a4:	93 1f       	adc	r25, r19
     8a6:	9b bd       	out	0x2b, r25	; 43
     8a8:	8a bd       	out	0x2a, r24	; 42
     8aa:	08 95       	ret

000008ac <_Z5speedii>:
}

void speed(int left, int right)
{
     8ac:	8f 92       	push	r8
     8ae:	9f 92       	push	r9
     8b0:	af 92       	push	r10
     8b2:	bf 92       	push	r11
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	8b 01       	movw	r16, r22
	left  = left  *  ratio;
     8c6:	80 90 72 00 	lds	r8, 0x0072
     8ca:	90 90 73 00 	lds	r9, 0x0073
     8ce:	a0 90 74 00 	lds	r10, 0x0074
     8d2:	b0 90 75 00 	lds	r11, 0x0075
     8d6:	bc 01       	movw	r22, r24
     8d8:	88 27       	eor	r24, r24
     8da:	77 fd       	sbrc	r23, 7
     8dc:	80 95       	com	r24
     8de:	98 2f       	mov	r25, r24
     8e0:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__floatsisf>
     8e4:	a5 01       	movw	r20, r10
     8e6:	94 01       	movw	r18, r8
     8e8:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__mulsf3>
     8ec:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__fixsfsi>
     8f0:	6b 01       	movw	r12, r22
     8f2:	7c 01       	movw	r14, r24
     8f4:	eb 01       	movw	r28, r22
	right = right *  ratio;
     8f6:	b8 01       	movw	r22, r16
     8f8:	88 27       	eor	r24, r24
     8fa:	77 fd       	sbrc	r23, 7
     8fc:	80 95       	com	r24
     8fe:	98 2f       	mov	r25, r24
     900:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__floatsisf>
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	c5 01       	movw	r24, r10
     90a:	b4 01       	movw	r22, r8
     90c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__mulsf3>
     910:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__fixsfsi>
     914:	9b 01       	movw	r18, r22

	if (left >= 0)
     916:	dd 23       	and	r29, r29
     918:	5c f0       	brlt	.+22     	; 0x930 <_Z5speedii+0x84>
	{
		sbi(PORTD, DIR00);
     91a:	90 9a       	sbi	0x12, 0	; 18
		cbi(PORTD, DIR01);
     91c:	91 98       	cbi	0x12, 1	; 18
		OCR1B = left * 200;
     91e:	e8 ec       	ldi	r30, 0xC8	; 200
     920:	ec 9d       	mul	r30, r12
     922:	a0 01       	movw	r20, r0
     924:	ed 9d       	mul	r30, r13
     926:	50 0d       	add	r21, r0
     928:	11 24       	eor	r1, r1
     92a:	59 bd       	out	0x29, r21	; 41
     92c:	48 bd       	out	0x28, r20	; 40
     92e:	0b c0       	rjmp	.+22     	; 0x946 <_Z5speedii+0x9a>
	}
	else
	{
		cbi(PORTD, DIR00);
     930:	90 98       	cbi	0x12, 0	; 18
		sbi(PORTD, DIR01);
     932:	91 9a       	sbi	0x12, 1	; 18
		OCR1B = (-left) * 200;
     934:	e8 e3       	ldi	r30, 0x38	; 56
     936:	ec 9d       	mul	r30, r12
     938:	a0 01       	movw	r20, r0
     93a:	ed 9d       	mul	r30, r13
     93c:	50 0d       	add	r21, r0
     93e:	5c 19       	sub	r21, r12
     940:	11 24       	eor	r1, r1
     942:	59 bd       	out	0x29, r21	; 41
     944:	48 bd       	out	0x28, r20	; 40
	}
	
	if (right >= 0)
     946:	33 23       	and	r19, r19
     948:	7c f0       	brlt	.+30     	; 0x968 <_Z5speedii+0xbc>
	{
		sbi(PORTD, DIR10);
     94a:	93 9a       	sbi	0x12, 3	; 18
		cbi(PORTD, DIR11);
     94c:	96 98       	cbi	0x12, 6	; 18
		OCR2 = right * 255/100;
     94e:	4f ef       	ldi	r20, 0xFF	; 255
     950:	46 9f       	mul	r20, r22
     952:	90 01       	movw	r18, r0
     954:	47 9f       	mul	r20, r23
     956:	30 0d       	add	r19, r0
     958:	11 24       	eor	r1, r1
     95a:	c9 01       	movw	r24, r18
     95c:	64 e6       	ldi	r22, 0x64	; 100
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	0e 94 be 10 	call	0x217c	; 0x217c <__divmodhi4>
     964:	63 bd       	out	0x23, r22	; 35
     966:	0f c0       	rjmp	.+30     	; 0x986 <_Z5speedii+0xda>
	}
	else
	{
		cbi(PORTD, DIR10);
     968:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD, DIR11);
     96a:	96 9a       	sbi	0x12, 6	; 18
		OCR2 = (-right) * 255/100;
     96c:	41 e0       	ldi	r20, 0x01	; 1
     96e:	46 9f       	mul	r20, r22
     970:	90 01       	movw	r18, r0
     972:	47 9f       	mul	r20, r23
     974:	30 0d       	add	r19, r0
     976:	36 1b       	sub	r19, r22
     978:	11 24       	eor	r1, r1
     97a:	c9 01       	movw	r24, r18
     97c:	64 e6       	ldi	r22, 0x64	; 100
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	0e 94 be 10 	call	0x217c	; 0x217c <__divmodhi4>
     984:	63 bd       	out	0x23, r22	; 35
	}
}
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	bf 90       	pop	r11
     998:	af 90       	pop	r10
     99a:	9f 90       	pop	r9
     99c:	8f 90       	pop	r8
     99e:	08 95       	ret

000009a0 <_Z3SPIh>:

/* -------------------- LED7 -------------------- */
void SPI(uint8_t data)
{
	SPDR = data;
     9a0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     9a2:	77 9b       	sbis	0x0e, 7	; 14
     9a4:	fe cf       	rjmp	.-4      	; 0x9a2 <_Z3SPIh+0x2>
}
     9a6:	08 95       	ret

000009a8 <_Z4led7j>:

void led7(unsigned int num)
{
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ac 01       	movw	r20, r24
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
     9b2:	9c 01       	movw	r18, r24
     9b4:	ad ec       	ldi	r26, 0xCD	; 205
     9b6:	bc ec       	ldi	r27, 0xCC	; 204
     9b8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__umulhisi3>
     9bc:	96 95       	lsr	r25
     9be:	87 95       	ror	r24
     9c0:	96 95       	lsr	r25
     9c2:	87 95       	ror	r24
     9c4:	96 95       	lsr	r25
     9c6:	87 95       	ror	r24
     9c8:	9c 01       	movw	r18, r24
     9ca:	22 0f       	add	r18, r18
     9cc:	33 1f       	adc	r19, r19
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	82 0f       	add	r24, r18
     9dc:	93 1f       	adc	r25, r19
     9de:	9a 01       	movw	r18, r20
     9e0:	28 1b       	sub	r18, r24
     9e2:	39 0b       	sbc	r19, r25
     9e4:	c9 01       	movw	r24, r18
     9e6:	80 68       	ori	r24, 0x80	; 128
     9e8:	80 93 80 00 	sts	0x0080, r24
	led7_data.ten		 = (unsigned int)(num%100 / 10);
     9ec:	9a 01       	movw	r18, r20
     9ee:	36 95       	lsr	r19
     9f0:	27 95       	ror	r18
     9f2:	36 95       	lsr	r19
     9f4:	27 95       	ror	r18
     9f6:	ab e7       	ldi	r26, 0x7B	; 123
     9f8:	b4 e1       	ldi	r27, 0x14	; 20
     9fa:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__umulhisi3>
     9fe:	96 95       	lsr	r25
     a00:	87 95       	ror	r24
     a02:	64 e6       	ldi	r22, 0x64	; 100
     a04:	68 9f       	mul	r22, r24
     a06:	90 01       	movw	r18, r0
     a08:	69 9f       	mul	r22, r25
     a0a:	30 0d       	add	r19, r0
     a0c:	11 24       	eor	r1, r1
     a0e:	ca 01       	movw	r24, r20
     a10:	82 1b       	sub	r24, r18
     a12:	93 0b       	sbc	r25, r19
     a14:	9c 01       	movw	r18, r24
     a16:	ad ec       	ldi	r26, 0xCD	; 205
     a18:	bc ec       	ldi	r27, 0xCC	; 204
     a1a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__umulhisi3>
     a1e:	fc 01       	movw	r30, r24
     a20:	f6 95       	lsr	r31
     a22:	e7 95       	ror	r30
     a24:	f6 95       	lsr	r31
     a26:	e7 95       	ror	r30
     a28:	f6 95       	lsr	r31
     a2a:	e7 95       	ror	r30
     a2c:	1e 2f       	mov	r17, r30
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
     a2e:	ea 01       	movw	r28, r20
     a30:	d6 95       	lsr	r29
     a32:	c7 95       	ror	r28
     a34:	d6 95       	lsr	r29
     a36:	c7 95       	ror	r28
     a38:	d6 95       	lsr	r29
     a3a:	c7 95       	ror	r28
     a3c:	9e 01       	movw	r18, r28
     a3e:	a5 ec       	ldi	r26, 0xC5	; 197
     a40:	b0 e2       	ldi	r27, 0x20	; 32
     a42:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__umulhisi3>
     a46:	92 95       	swap	r25
     a48:	82 95       	swap	r24
     a4a:	8f 70       	andi	r24, 0x0F	; 15
     a4c:	89 27       	eor	r24, r25
     a4e:	9f 70       	andi	r25, 0x0F	; 15
     a50:	89 27       	eor	r24, r25
     a52:	68 ee       	ldi	r22, 0xE8	; 232
     a54:	73 e0       	ldi	r23, 0x03	; 3
     a56:	86 9f       	mul	r24, r22
     a58:	90 01       	movw	r18, r0
     a5a:	87 9f       	mul	r24, r23
     a5c:	30 0d       	add	r19, r0
     a5e:	96 9f       	mul	r25, r22
     a60:	30 0d       	add	r19, r0
     a62:	11 24       	eor	r1, r1
     a64:	42 1b       	sub	r20, r18
     a66:	53 0b       	sbc	r21, r19
     a68:	9a 01       	movw	r18, r20
     a6a:	36 95       	lsr	r19
     a6c:	27 95       	ror	r18
     a6e:	36 95       	lsr	r19
     a70:	27 95       	ror	r18
     a72:	ab e7       	ldi	r26, 0x7B	; 123
     a74:	b4 e1       	ldi	r27, 0x14	; 20
     a76:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__umulhisi3>
     a7a:	ac 01       	movw	r20, r24
     a7c:	56 95       	lsr	r21
     a7e:	47 95       	ror	r20
     a80:	04 2f       	mov	r16, r20
	led7_data.thousand	 = (unsigned int)(num/ 1000);
     a82:	9e 01       	movw	r18, r28
     a84:	a5 ec       	ldi	r26, 0xC5	; 197
     a86:	b0 e2       	ldi	r27, 0x20	; 32
     a88:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__umulhisi3>
     a8c:	92 95       	swap	r25
     a8e:	82 95       	swap	r24
     a90:	8f 70       	andi	r24, 0x0F	; 15
     a92:	89 27       	eor	r24, r25
     a94:	9f 70       	andi	r25, 0x0F	; 15
     a96:	89 27       	eor	r24, r25
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
     a98:	88 23       	and	r24, r24
     a9a:	11 f0       	breq	.+4      	; 0xaa0 <_Z4led7j+0xf8>
     a9c:	20 e1       	ldi	r18, 0x10	; 16
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <_Z4led7j+0xfa>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	82 2b       	or	r24, r18
     aa4:	80 93 83 00 	sts	0x0083, r24
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     aa8:	81 11       	cpse	r24, r1
     aaa:	15 c0       	rjmp	.+42     	; 0xad6 <_Z4led7j+0x12e>
     aac:	01 11       	cpse	r16, r1
     aae:	0c c0       	rjmp	.+24     	; 0xac8 <_Z4led7j+0x120>
     ab0:	0c c0       	rjmp	.+24     	; 0xaca <_Z4led7j+0x122>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     ab2:	11 23       	and	r17, r17
     ab4:	11 f0       	breq	.+4      	; 0xaba <_Z4led7j+0x112>
     ab6:	80 e4       	ldi	r24, 0x40	; 64
     ab8:	03 c0       	rjmp	.+6      	; 0xac0 <_Z4led7j+0x118>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <_Z4led7j+0x118>
     abe:	80 e4       	ldi	r24, 0x40	; 64
     ac0:	e8 2b       	or	r30, r24
     ac2:	e0 93 81 00 	sts	0x0081, r30
     ac6:	0c c0       	rjmp	.+24     	; 0xae0 <_Z4led7j+0x138>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     ac8:	80 e2       	ldi	r24, 0x20	; 32
     aca:	48 2b       	or	r20, r24
     acc:	40 93 82 00 	sts	0x0082, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     ad0:	44 23       	and	r20, r20
     ad2:	79 f3       	breq	.-34     	; 0xab2 <_Z4led7j+0x10a>
     ad4:	f4 cf       	rjmp	.-24     	; 0xabe <_Z4led7j+0x116>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     ad6:	40 62       	ori	r20, 0x20	; 32
     ad8:	40 93 82 00 	sts	0x0082, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     adc:	80 e4       	ldi	r24, 0x40	; 64
     ade:	f0 cf       	rjmp	.-32     	; 0xac0 <_Z4led7j+0x118>
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	08 95       	ret

00000aea <_Z5printv>:

void print( void )
{
     aea:	cf 93       	push	r28
	uint8_t value=0;
	if(led7_data.i++ == 4) led7_data.i=0;
     aec:	ef e7       	ldi	r30, 0x7F	; 127
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	90 81       	ld	r25, Z
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	89 0f       	add	r24, r25
     af6:	80 83       	st	Z, r24
     af8:	94 30       	cpi	r25, 0x04	; 4
     afa:	19 f4       	brne	.+6      	; 0xb02 <_Z5printv+0x18>
     afc:	10 92 7f 00 	sts	0x007F, r1
     b00:	08 c0       	rjmp	.+16     	; 0xb12 <_Z5printv+0x28>
	switch(led7_data.i)
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	49 f0       	breq	.+18     	; 0xb18 <_Z5printv+0x2e>
     b06:	28 f0       	brcs	.+10     	; 0xb12 <_Z5printv+0x28>
     b08:	82 30       	cpi	r24, 0x02	; 2
     b0a:	49 f0       	breq	.+18     	; 0xb1e <_Z5printv+0x34>
     b0c:	83 30       	cpi	r24, 0x03	; 3
     b0e:	51 f0       	breq	.+20     	; 0xb24 <_Z5printv+0x3a>
     b10:	0c c0       	rjmp	.+24     	; 0xb2a <_Z5printv+0x40>
	{
		case 0: value=led7_data.thousand;	break;
     b12:	c0 91 83 00 	lds	r28, 0x0083
     b16:	0a c0       	rjmp	.+20     	; 0xb2c <_Z5printv+0x42>
		case 1: value=led7_data.hundred;	break;
     b18:	c0 91 82 00 	lds	r28, 0x0082
     b1c:	07 c0       	rjmp	.+14     	; 0xb2c <_Z5printv+0x42>
		case 2: value=led7_data.ten;		break;
     b1e:	c0 91 81 00 	lds	r28, 0x0081
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <_Z5printv+0x42>
		case 3: value=led7_data.unit;		break;
     b24:	c0 91 80 00 	lds	r28, 0x0080
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <_Z5printv+0x42>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
}

void print( void )
{
	uint8_t value=0;
     b2a:	c0 e0       	ldi	r28, 0x00	; 0
		case 1: value=led7_data.hundred;	break;
		case 2: value=led7_data.ten;		break;
		case 3: value=led7_data.unit;		break;
		default: break;
	}
	SPI(~led7_data.sensor_out);
     b2c:	80 91 84 00 	lds	r24, 0x0084
     b30:	80 95       	com	r24
     b32:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_Z3SPIh>
	SPI(value);
     b36:	8c 2f       	mov	r24, r28
     b38:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_Z3SPIh>
	sbi(PORTB,LATCH);
     b3c:	c4 9a       	sbi	0x18, 4	; 24
	cbi(PORTB,LATCH);
     b3e:	c4 98       	cbi	0x18, 4	; 24
}
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <_Z15read_adc_eepromv>:

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	0f 2e       	mov	r0, r31
     b52:	f5 e9       	ldi	r31, 0x95	; 149
     b54:	ef 2e       	mov	r14, r31
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	ff 2e       	mov	r15, r31
     b5a:	f0 2d       	mov	r31, r0
     b5c:	05 e8       	ldi	r16, 0x85	; 133
     b5e:	10 e0       	ldi	r17, 0x00	; 0
     b60:	c0 e0       	ldi	r28, 0x00	; 0
     b62:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     b64:	e1 99       	sbic	0x1c, 1	; 28
     b66:	fe cf       	rjmp	.-4      	; 0xb64 <_Z15read_adc_eepromv+0x20>
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
     b68:	ce 01       	movw	r24, r28
     b6a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__eerd_word_m16>
     b6e:	f7 01       	movw	r30, r14
     b70:	81 93       	st	Z+, r24
     b72:	91 93       	st	Z+, r25
     b74:	7f 01       	movw	r14, r30
		while(!eeprom_is_ready());
     b76:	e1 99       	sbic	0x1c, 1	; 28
     b78:	fe cf       	rjmp	.-4      	; 0xb76 <_Z15read_adc_eepromv+0x32>
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
     b7a:	ce 01       	movw	r24, r28
     b7c:	40 96       	adiw	r24, 0x10	; 16
     b7e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__eerd_word_m16>
     b82:	f8 01       	movw	r30, r16
     b84:	81 93       	st	Z+, r24
     b86:	91 93       	st	Z+, r25
     b88:	8f 01       	movw	r16, r30
     b8a:	22 96       	adiw	r28, 0x02	; 2
}

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     b8c:	c0 31       	cpi	r28, 0x10	; 16
     b8e:	d1 05       	cpc	r29, r1
     b90:	49 f7       	brne	.-46     	; 0xb64 <_Z15read_adc_eepromv+0x20>
     b92:	c5 ea       	ldi	r28, 0xA5	; 165
     b94:	d0 e0       	ldi	r29, 0x00	; 0
     b96:	45 ea       	ldi	r20, 0xA5	; 165
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	a5 e8       	ldi	r26, 0x85	; 133
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e5 e9       	ldi	r30, 0x95	; 149
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     ba2:	81 91       	ld	r24, Z+
     ba4:	91 91       	ld	r25, Z+
     ba6:	2d 91       	ld	r18, X+
     ba8:	3d 91       	ld	r19, X+
     baa:	82 0f       	add	r24, r18
     bac:	93 1f       	adc	r25, r19
     bae:	96 95       	lsr	r25
     bb0:	87 95       	ror	r24
     bb2:	89 93       	st	Y+, r24
     bb4:	99 93       	st	Y+, r25
		while(!eeprom_is_ready());
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
     bb6:	e4 17       	cp	r30, r20
     bb8:	f5 07       	cpc	r31, r21
     bba:	99 f7       	brne	.-26     	; 0xba2 <_Z15read_adc_eepromv+0x5e>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
}
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	08 95       	ret

00000bca <_Z16write_adc_eepromv>:

void write_adc_eeprom( void )
{
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	0f 2e       	mov	r0, r31
     bd8:	f5 e8       	ldi	r31, 0x85	; 133
     bda:	ef 2e       	mov	r14, r31
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	ff 2e       	mov	r15, r31
     be0:	f0 2d       	mov	r31, r0
     be2:	05 e9       	ldi	r16, 0x95	; 149
     be4:	10 e0       	ldi	r17, 0x00	; 0
     be6:	c0 e0       	ldi	r28, 0x00	; 0
     be8:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     bea:	e1 99       	sbic	0x1c, 1	; 28
     bec:	fe cf       	rjmp	.-4      	; 0xbea <_Z16write_adc_eepromv+0x20>
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
     bee:	f8 01       	movw	r30, r16
     bf0:	61 91       	ld	r22, Z+
     bf2:	71 91       	ld	r23, Z+
     bf4:	8f 01       	movw	r16, r30
     bf6:	ce 01       	movw	r24, r28
     bf8:	0e 94 01 11 	call	0x2202	; 0x2202 <__eewr_word_m16>
		while(!eeprom_is_ready());
     bfc:	e1 99       	sbic	0x1c, 1	; 28
     bfe:	fe cf       	rjmp	.-4      	; 0xbfc <_Z16write_adc_eepromv+0x32>
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
     c00:	f7 01       	movw	r30, r14
     c02:	61 91       	ld	r22, Z+
     c04:	71 91       	ld	r23, Z+
     c06:	7f 01       	movw	r14, r30
     c08:	ce 01       	movw	r24, r28
     c0a:	40 96       	adiw	r24, 0x10	; 16
     c0c:	0e 94 01 11 	call	0x2202	; 0x2202 <__eewr_word_m16>
     c10:	22 96       	adiw	r28, 0x02	; 2
	}
}

void write_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     c12:	c0 31       	cpi	r28, 0x10	; 16
     c14:	d1 05       	cpc	r29, r1
     c16:	49 f7       	brne	.-46     	; 0xbea <_Z16write_adc_eepromv+0x20>
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
	}
}
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	08 95       	ret

00000c26 <_Z8adc_readh>:

uint16_t adc_read( uint8_t ch )
{
	ADMUX = (1<< REFS0)|ch;
     c26:	80 64       	ori	r24, 0x40	; 64
     c28:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
     c2a:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
     c2c:	34 9b       	sbis	0x06, 4	; 6
     c2e:	fe cf       	rjmp	.-4      	; 0xc2c <_Z8adc_readh+0x6>
	return ADCW;
     c30:	84 b1       	in	r24, 0x04	; 4
     c32:	95 b1       	in	r25, 0x05	; 5
}
     c34:	08 95       	ret

00000c36 <_Z10sensor_cmpv>:

uint8_t sensor_cmp( void )
{
     c36:	df 92       	push	r13
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	05 ea       	ldi	r16, 0xA5	; 165
     c46:	10 e0       	ldi	r17, 0x00	; 0
     c48:	c0 e0       	ldi	r28, 0x00	; 0
     c4a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t ADC_value=0;
     c4c:	d1 2c       	mov	r13, r1
	for(uint8_t i=0; i<8; i++)
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
     c4e:	ee 24       	eor	r14, r14
     c50:	e3 94       	inc	r14
     c52:	f1 2c       	mov	r15, r1
     c54:	8c 2f       	mov	r24, r28
     c56:	0e 94 13 06 	call	0xc26	; 0xc26 <_Z8adc_readh>
     c5a:	f8 01       	movw	r30, r16
     c5c:	21 91       	ld	r18, Z+
     c5e:	31 91       	ld	r19, Z+
     c60:	8f 01       	movw	r16, r30
     c62:	82 17       	cp	r24, r18
     c64:	93 07       	cpc	r25, r19
     c66:	40 f4       	brcc	.+16     	; 0xc78 <_Z10sensor_cmpv+0x42>
     c68:	97 01       	movw	r18, r14
     c6a:	0c 2e       	mov	r0, r28
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <_Z10sensor_cmpv+0x3c>
     c6e:	22 0f       	add	r18, r18
     c70:	33 1f       	adc	r19, r19
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <_Z10sensor_cmpv+0x38>
     c76:	d2 2a       	or	r13, r18
     c78:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t sensor_cmp( void )
{
	uint8_t ADC_value=0;
	for(uint8_t i=0; i<8; i++)
     c7a:	c8 30       	cpi	r28, 0x08	; 8
     c7c:	d1 05       	cpc	r29, r1
     c7e:	51 f7       	brne	.-44     	; 0xc54 <_Z10sensor_cmpv+0x1e>
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
	}
	led7_data.sensor_out=ADC_value;
     c80:	d0 92 84 00 	sts	0x0084, r13
	return (ADC_value);
}
     c84:	8d 2d       	mov	r24, r13
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	df 90       	pop	r13
     c94:	08 95       	ret

00000c96 <_Z11learn_colorv>:

void learn_color( void )
{
     c96:	8f 92       	push	r8
     c98:	9f 92       	push	r9
     c9a:	af 92       	push	r10
     c9c:	bf 92       	push	r11
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	c5 e9       	ldi	r28, 0x95	; 149
     cb0:	d0 e0       	ldi	r29, 0x00	; 0
     cb2:	05 e8       	ldi	r16, 0x85	; 133
     cb4:	10 e0       	ldi	r17, 0x00	; 0
     cb6:	0f 2e       	mov	r0, r31
     cb8:	f5 ea       	ldi	r31, 0xA5	; 165
     cba:	ef 2e       	mov	r14, r31
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	ff 2e       	mov	r15, r31
     cc0:	f0 2d       	mov	r31, r0
     cc2:	d8 01       	movw	r26, r16
     cc4:	fe 01       	movw	r30, r28
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
	{
		lineTrang[i] = 1024;
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	94 e0       	ldi	r25, 0x04	; 4
     cca:	81 93       	st	Z+, r24
     ccc:	91 93       	st	Z+, r25
		lineDen[i] = 0;
     cce:	1d 92       	st	X+, r1
     cd0:	1d 92       	st	X+, r1

void learn_color( void )
{
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
     cd2:	ee 15       	cp	r30, r14
     cd4:	ff 05       	cpc	r31, r15
     cd6:	c9 f7       	brne	.-14     	; 0xcca <_Z11learn_colorv+0x34>
	{
		lineTrang[i] = 1024;
		lineDen[i] = 0;
	}
	
	led7(6969);
     cd8:	89 e3       	ldi	r24, 0x39	; 57
     cda:	9b e1       	ldi	r25, 0x1B	; 27
     cdc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
	while (1)
	{
		if(get_button(BTN2)) break;
     ce0:	b0 2e       	mov	r11, r16
     ce2:	a1 2e       	mov	r10, r17
     ce4:	9c 2e       	mov	r9, r28
     ce6:	8d 2e       	mov	r8, r29
     ce8:	c1 2c       	mov	r12, r1
     cea:	87 ef       	ldi	r24, 0xF7	; 247
     cec:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     cf0:	81 11       	cpse	r24, r1
     cf2:	1f c0       	rjmp	.+62     	; 0xd32 <_Z11learn_colorv+0x9c>
     cf4:	0b 2d       	mov	r16, r11
     cf6:	1a 2d       	mov	r17, r10
     cf8:	c9 2d       	mov	r28, r9
     cfa:	d8 2d       	mov	r29, r8
     cfc:	dc 2c       	mov	r13, r12
		
		for (uint8_t i = 0; i < 8; i++)
		{
			ADC_temp = adc_read(i);
     cfe:	8d 2d       	mov	r24, r13
     d00:	0e 94 13 06 	call	0xc26	; 0xc26 <_Z8adc_readh>
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
     d04:	28 81       	ld	r18, Y
     d06:	39 81       	ldd	r19, Y+1	; 0x01
     d08:	82 17       	cp	r24, r18
     d0a:	93 07       	cpc	r25, r19
     d0c:	10 f4       	brcc	.+4      	; 0xd12 <_Z11learn_colorv+0x7c>
     d0e:	99 83       	std	Y+1, r25	; 0x01
     d10:	88 83       	st	Y, r24
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
     d12:	f8 01       	movw	r30, r16
     d14:	20 81       	ld	r18, Z
     d16:	31 81       	ldd	r19, Z+1	; 0x01
     d18:	28 17       	cp	r18, r24
     d1a:	39 07       	cpc	r19, r25
     d1c:	10 f4       	brcc	.+4      	; 0xd22 <_Z11learn_colorv+0x8c>
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24
	led7(6969);
	while (1)
	{
		if(get_button(BTN2)) break;
		
		for (uint8_t i = 0; i < 8; i++)
     d22:	d3 94       	inc	r13
     d24:	22 96       	adiw	r28, 0x02	; 2
     d26:	0e 5f       	subi	r16, 0xFE	; 254
     d28:	1f 4f       	sbci	r17, 0xFF	; 255
     d2a:	f8 e0       	ldi	r31, 0x08	; 8
     d2c:	df 12       	cpse	r13, r31
     d2e:	e7 cf       	rjmp	.-50     	; 0xcfe <_Z11learn_colorv+0x68>
     d30:	dc cf       	rjmp	.-72     	; 0xcea <_Z11learn_colorv+0x54>
     d32:	c5 ea       	ldi	r28, 0xA5	; 165
     d34:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	led7(6969);
	while (1)
	{
		if(get_button(BTN2)) break;
     d36:	a5 e8       	ldi	r26, 0x85	; 133
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e5 e9       	ldi	r30, 0x95	; 149
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
	
	for (uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     d3e:	81 91       	ld	r24, Z+
     d40:	91 91       	ld	r25, Z+
     d42:	2d 91       	ld	r18, X+
     d44:	3d 91       	ld	r19, X+
     d46:	82 0f       	add	r24, r18
     d48:	93 1f       	adc	r25, r19
     d4a:	96 95       	lsr	r25
     d4c:	87 95       	ror	r24
     d4e:	89 93       	st	Y+, r24
     d50:	99 93       	st	Y+, r25
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
		}
	}
	
	for (uint8_t i=0; i<8; i++)
     d52:	ee 15       	cp	r30, r14
     d54:	ff 05       	cpc	r31, r15
     d56:	99 f7       	brne	.-26     	; 0xd3e <_Z11learn_colorv+0xa8>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
	
	write_adc_eeprom();
     d58:	0e 94 e5 05 	call	0xbca	; 0xbca <_Z16write_adc_eepromv>
	return (ADC_value);
}

void learn_color( void )
{
	uint8_t sel = 0;
     d5c:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1)
	{
		if(get_button(BTN0))
		{
			if (++sel > 7) sel = 0;
     d5e:	f1 2c       	mov	r15, r1
		{
			break;
		}
		
		led7(ADC_average[sel]);
		led7_data.sensor_out = (1 << sel);
     d60:	c4 e8       	ldi	r28, 0x84	; 132
     d62:	d0 e0       	ldi	r29, 0x00	; 0
     d64:	01 e0       	ldi	r16, 0x01	; 1
	
	write_adc_eeprom();
	
	while (1)
	{
		if(get_button(BTN0))
     d66:	8d ef       	ldi	r24, 0xFD	; 253
     d68:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     d6c:	88 23       	and	r24, r24
     d6e:	21 f0       	breq	.+8      	; 0xd78 <_Z11learn_colorv+0xe2>
		{
			if (++sel > 7) sel = 0;
     d70:	1f 5f       	subi	r17, 0xFF	; 255
     d72:	18 30       	cpi	r17, 0x08	; 8
     d74:	08 f0       	brcs	.+2      	; 0xd78 <_Z11learn_colorv+0xe2>
     d76:	1f 2d       	mov	r17, r15
		}
		if (get_button(BTN1))
     d78:	8b ef       	ldi	r24, 0xFB	; 251
     d7a:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     d7e:	81 11       	cpse	r24, r1
		{
			if (--sel < 0)  sel = 7;
     d80:	11 50       	subi	r17, 0x01	; 1
		}
		if (get_button(BTN2))
     d82:	87 ef       	ldi	r24, 0xF7	; 247
     d84:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     d88:	81 11       	cpse	r24, r1
     d8a:	12 c0       	rjmp	.+36     	; 0xdb0 <_Z11learn_colorv+0x11a>
		{
			break;
		}
		
		led7(ADC_average[sel]);
     d8c:	e1 2f       	mov	r30, r17
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	eb 55       	subi	r30, 0x5B	; 91
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	80 81       	ld	r24, Z
     d9a:	91 81       	ldd	r25, Z+1	; 0x01
     d9c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
		led7_data.sensor_out = (1 << sel);
     da0:	80 2f       	mov	r24, r16
     da2:	01 2e       	mov	r0, r17
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <_Z11learn_colorv+0x112>
     da6:	88 0f       	add	r24, r24
     da8:	0a 94       	dec	r0
     daa:	ea f7       	brpl	.-6      	; 0xda6 <_Z11learn_colorv+0x110>
     dac:	88 83       	st	Y, r24
	}
     dae:	db cf       	rjmp	.-74     	; 0xd66 <_Z11learn_colorv+0xd0>
}
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	ef 90       	pop	r14
     dbc:	df 90       	pop	r13
     dbe:	cf 90       	pop	r12
     dc0:	bf 90       	pop	r11
     dc2:	af 90       	pop	r10
     dc4:	9f 90       	pop	r9
     dc6:	8f 90       	pop	r8
     dc8:	08 95       	ret

00000dca <_Z4INITv>:

/* -------------------- INITIAL -------------------- */
void INIT( void )
{
	/* ADC */
	ADMUX=(1<<REFS0);
     dca:	80 e4       	ldi	r24, 0x40	; 64
     dcc:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN) | (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     dce:	87 e8       	ldi	r24, 0x87	; 135
     dd0:	86 b9       	out	0x06, r24	; 6
	read_adc_eeprom();
     dd2:	0e 94 a2 05 	call	0xb44	; 0xb44 <_Z15read_adc_eepromv>
	
	/* PORT */
	DDRB  = 0b11110001;
     dd6:	81 ef       	ldi	r24, 0xF1	; 241
     dd8:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111111;
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	88 bb       	out	0x18, r24	; 24
	
	DDRC  = 0b00000000;
     dde:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b11111111;
     de0:	85 bb       	out	0x15, r24	; 21
	
	DDRD  = 0b11111011;
     de2:	8b ef       	ldi	r24, 0xFB	; 251
     de4:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000;
     de6:	12 ba       	out	0x12, r1	; 18
	
	/* SPI */
	SPCR = (1<<SPE)|(1<<MSTR);
     de8:	80 e5       	ldi	r24, 0x50	; 80
     dea:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	8e b9       	out	0x0e, r24	; 14
	
	/* TIMER */
	TCCR0=(1<<WGM01) | (1<<CS02);
     df0:	8c e0       	ldi	r24, 0x0C	; 12
     df2:	83 bf       	out	0x33, r24	; 51
	OCR0=62;
     df4:	8e e3       	ldi	r24, 0x3E	; 62
     df6:	8c bf       	out	0x3c, r24	; 60
	TIMSK=(1<<OCIE0);
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
     dfc:	82 ea       	ldi	r24, 0xA2	; 162
     dfe:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS11);
     e00:	8a e1       	ldi	r24, 0x1A	; 26
     e02:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 20000;
     e04:	80 e2       	ldi	r24, 0x20	; 32
     e06:	9e e4       	ldi	r25, 0x4E	; 78
     e08:	97 bd       	out	0x27, r25	; 39
     e0a:	86 bd       	out	0x26, r24	; 38
	OCR1B = 0;
     e0c:	19 bc       	out	0x29, r1	; 41
     e0e:	18 bc       	out	0x28, r1	; 40
	
	TCCR2=(1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS22)|(1<<CS21)|(1<<CS20);
     e10:	8f e6       	ldi	r24, 0x6F	; 111
     e12:	85 bd       	out	0x25, r24	; 37
	OCR2=0;
     e14:	13 bc       	out	0x23, r1	; 35
	sei();
     e16:	78 94       	sei
	
	/* ENCODER */
	MCUCR |= (1<<ISC00)|(1<<ISC01);
     e18:	85 b7       	in	r24, 0x35	; 53
     e1a:	83 60       	ori	r24, 0x03	; 3
     e1c:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     e1e:	8b b7       	in	r24, 0x3b	; 59
     e20:	80 64       	ori	r24, 0x40	; 64
     e22:	8b bf       	out	0x3b, r24	; 59
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     e24:	83 e1       	ldi	r24, 0x13	; 19
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	90 93 7e 00 	sts	0x007E, r25
     e2c:	80 93 7d 00 	sts	0x007D, r24
     e30:	08 95       	ret

00000e32 <_Z13test_hardwarev>:
	set_encoder(19);
}

void test_hardware( void )
{
	uint8_t _index=0;
     e32:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     e34:	f1 2c       	mov	r15, r1
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
		led7_data.sensor_out = 0 | (1<<_index);
     e36:	c4 e8       	ldi	r28, 0x84	; 132
     e38:	d0 e0       	ldi	r29, 0x00	; 0
     e3a:	01 e0       	ldi	r16, 0x01	; 1
void test_hardware( void )
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
     e3c:	8d ef       	ldi	r24, 0xFD	; 253
     e3e:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     e42:	88 23       	and	r24, r24
     e44:	59 f0       	breq	.+22     	; 0xe5c <_Z13test_hardwarev+0x2a>
     e46:	6c e9       	ldi	r22, 0x9C	; 156
     e48:	7f ef       	ldi	r23, 0xFF	; 255
     e4a:	84 e6       	ldi	r24, 0x64	; 100
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
     e52:	85 e6       	ldi	r24, 0x65	; 101
     e54:	9f ef       	ldi	r25, 0xFF	; 255
     e56:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
     e5a:	25 c0       	rjmp	.+74     	; 0xea6 <_Z13test_hardwarev+0x74>
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     e5c:	8b ef       	ldi	r24, 0xFB	; 251
     e5e:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     e62:	88 23       	and	r24, r24
     e64:	21 f0       	breq	.+8      	; 0xe6e <_Z13test_hardwarev+0x3c>
     e66:	1f 5f       	subi	r17, 0xFF	; 255
     e68:	18 30       	cpi	r17, 0x08	; 8
     e6a:	e9 f4       	brne	.+58     	; 0xea6 <_Z13test_hardwarev+0x74>
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <_Z13test_hardwarev+0x72>
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
     e6e:	87 ef       	ldi	r24, 0xF7	; 247
     e70:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     e74:	88 23       	and	r24, r24
     e76:	59 f0       	breq	.+22     	; 0xe8e <_Z13test_hardwarev+0x5c>
     e78:	64 e6       	ldi	r22, 0x64	; 100
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	8c e9       	ldi	r24, 0x9C	; 156
     e7e:	9f ef       	ldi	r25, 0xFF	; 255
     e80:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
     e84:	8b e9       	ldi	r24, 0x9B	; 155
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
     e8c:	0c c0       	rjmp	.+24     	; 0xea6 <_Z13test_hardwarev+0x74>
		else						{ speed(0,0);  handle(0);                 }
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <_Z13test_hardwarev+0x74>
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     ea4:	1f 2d       	mov	r17, r15
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
     ea6:	81 2f       	mov	r24, r17
     ea8:	0e 94 13 06 	call	0xc26	; 0xc26 <_Z8adc_readh>
     eac:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
		led7_data.sensor_out = 0 | (1<<_index);
     eb0:	80 2f       	mov	r24, r16
     eb2:	01 2e       	mov	r0, r17
     eb4:	01 c0       	rjmp	.+2      	; 0xeb8 <_Z13test_hardwarev+0x86>
     eb6:	88 0f       	add	r24, r24
     eb8:	0a 94       	dec	r0
     eba:	ea f7       	brpl	.-6      	; 0xeb6 <_Z13test_hardwarev+0x84>
     ebc:	88 83       	st	Y, r24
	}
     ebe:	be cf       	rjmp	.-132    	; 0xe3c <_Z13test_hardwarev+0xa>

00000ec0 <_Z15servo_calibratev>:
		if (get_button(BTN2)) angle++;
	}
}

void servo_calibrate( void )
{
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
	int16_t angle = 0;
     ec4:	c0 e0       	ldi	r28, 0x00	; 0
     ec6:	d0 e0       	ldi	r29, 0x00	; 0
	while (true)
	{
		led7((angle>=0)?angle:(-angle));
     ec8:	ce 01       	movw	r24, r28
     eca:	dd 23       	and	r29, r29
     ecc:	24 f4       	brge	.+8      	; 0xed6 <_Z15servo_calibratev+0x16>
     ece:	88 27       	eor	r24, r24
     ed0:	99 27       	eor	r25, r25
     ed2:	8c 1b       	sub	r24, r28
     ed4:	9d 0b       	sbc	r25, r29
     ed6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
		sensor_cmp();
     eda:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
		handle(angle);
     ede:	ce 01       	movw	r24, r28
     ee0:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
		if (get_button(BTN0)) angle--;
     ee4:	8d ef       	ldi	r24, 0xFD	; 253
     ee6:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     eea:	81 11       	cpse	r24, r1
     eec:	21 97       	sbiw	r28, 0x01	; 1
		if (get_button(BTN1)) break;
     eee:	8b ef       	ldi	r24, 0xFB	; 251
     ef0:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     ef4:	81 11       	cpse	r24, r1
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <_Z15servo_calibratev+0x46>
		if (get_button(BTN2)) angle++;
     ef8:	87 ef       	ldi	r24, 0xF7	; 247
     efa:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     efe:	88 23       	and	r24, r24
     f00:	19 f3       	breq	.-58     	; 0xec8 <_Z15servo_calibratev+0x8>
     f02:	21 96       	adiw	r28, 0x01	; 1
     f04:	e1 cf       	rjmp	.-62     	; 0xec8 <_Z15servo_calibratev+0x8>
	}
	
	SERVO_CENTER = SERVO_CENTER + (angle * STEP);
     f06:	ce 01       	movw	r24, r28
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	c8 0f       	add	r28, r24
     f12:	d9 1f       	adc	r29, r25
     f14:	80 91 62 00 	lds	r24, 0x0062
     f18:	90 91 63 00 	lds	r25, 0x0063
     f1c:	c8 0f       	add	r28, r24
     f1e:	d9 1f       	adc	r29, r25
     f20:	d0 93 63 00 	sts	0x0063, r29
     f24:	c0 93 62 00 	sts	0x0062, r28
}
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <_Z8sel_modev>:

/* -------------------- START -------------------- */
void sel_mode()
{
	handle(0);
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
	speed(0,0);
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	9f ef       	ldi	r25, 0xFF	; 255
     f46:	90 93 7e 00 	sts	0x007E, r25
     f4a:	80 93 7d 00 	sts	0x007D, r24
	speed(0,0);
	set_encoder(-1);
	
	while (true)
	{
		ratio_base = ratio_default + (get_switch() / 20.0);
     f4e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_Z10get_switchv>
     f52:	68 2f       	mov	r22, r24
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__floatsisf>
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 ea       	ldi	r20, 0xA0	; 160
     f64:	51 e4       	ldi	r21, 0x41	; 65
     f66:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divsf3>
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e8       	ldi	r20, 0x80	; 128
     f70:	5e e3       	ldi	r21, 0x3E	; 62
     f72:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__addsf3>
     f76:	60 93 76 00 	sts	0x0076, r22
     f7a:	70 93 77 00 	sts	0x0077, r23
     f7e:	80 93 78 00 	sts	0x0078, r24
     f82:	90 93 79 00 	sts	0x0079, r25
		ratio = ratio_base;
     f86:	60 93 72 00 	sts	0x0072, r22
     f8a:	70 93 73 00 	sts	0x0073, r23
     f8e:	80 93 74 00 	sts	0x0074, r24
     f92:	90 93 75 00 	sts	0x0075, r25
		led7(ratio_base * 100);
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	48 ec       	ldi	r20, 0xC8	; 200
     f9c:	52 e4       	ldi	r21, 0x42	; 66
     f9e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__mulsf3>
     fa2:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fixunssfsi>
     fa6:	cb 01       	movw	r24, r22
     fa8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
		delay = (1.4 - 1.125 * ratio);
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 e9       	ldi	r20, 0x90	; 144
     fb2:	5f e3       	ldi	r21, 0x3F	; 63
     fb4:	60 91 72 00 	lds	r22, 0x0072
     fb8:	70 91 73 00 	lds	r23, 0x0073
     fbc:	80 91 74 00 	lds	r24, 0x0074
     fc0:	90 91 75 00 	lds	r25, 0x0075
     fc4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__mulsf3>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	63 e3       	ldi	r22, 0x33	; 51
     fce:	73 e3       	ldi	r23, 0x33	; 51
     fd0:	83 eb       	ldi	r24, 0xB3	; 179
     fd2:	9f e3       	ldi	r25, 0x3F	; 63
     fd4:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__subsf3>
     fd8:	60 93 6e 00 	sts	0x006E, r22
     fdc:	70 93 6f 00 	sts	0x006F, r23
     fe0:	80 93 70 00 	sts	0x0070, r24
     fe4:	90 93 71 00 	sts	0x0071, r25
		sensor_cmp();
     fe8:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
		if(get_button(BTN0))		return;
     fec:	8d ef       	ldi	r24, 0xFD	; 253
     fee:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     ff2:	81 11       	cpse	r24, r1
     ff4:	0f c0       	rjmp	.+30     	; 0x1014 <_Z8sel_modev+0xe6>
		else if (get_button(BTN1))	test_hardware(); /*test_servo();*/
     ff6:	8b ef       	ldi	r24, 0xFB	; 251
     ff8:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     ffc:	81 11       	cpse	r24, r1
     ffe:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z13test_hardwarev>
		else if (get_button(BTN2))	learn_color();
    1002:	87 ef       	ldi	r24, 0xF7	; 247
    1004:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <_Z8sel_modev+0xe0>
    100c:	a0 cf       	rjmp	.-192    	; 0xf4e <_Z8sel_modev+0x20>
    100e:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z11learn_colorv>
    1012:	9d cf       	rjmp	.-198    	; 0xf4e <_Z8sel_modev+0x20>
    1014:	08 95       	ret

00001016 <__vector_19>:
		}
    }
}

ISR(TIMER0_COMP_vect) /* 1ms */
{
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	2f 93       	push	r18
    1022:	3f 93       	push	r19
    1024:	4f 93       	push	r20
    1026:	5f 93       	push	r21
    1028:	6f 93       	push	r22
    102a:	7f 93       	push	r23
    102c:	8f 93       	push	r24
    102e:	9f 93       	push	r25
    1030:	af 93       	push	r26
    1032:	bf 93       	push	r27
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
	print();
    1038:	0e 94 75 05 	call	0xaea	; 0xaea <_Z5printv>
	cal_ratio();
    103c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_Z9cal_ratiov>
	timer_cnt++;
    1040:	80 91 68 00 	lds	r24, 0x0068
    1044:	90 91 69 00 	lds	r25, 0x0069
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	90 93 69 00 	sts	0x0069, r25
    104e:	80 93 68 00 	sts	0x0068, r24
}
    1052:	ff 91       	pop	r31
    1054:	ef 91       	pop	r30
    1056:	bf 91       	pop	r27
    1058:	af 91       	pop	r26
    105a:	9f 91       	pop	r25
    105c:	8f 91       	pop	r24
    105e:	7f 91       	pop	r23
    1060:	6f 91       	pop	r22
    1062:	5f 91       	pop	r21
    1064:	4f 91       	pop	r20
    1066:	3f 91       	pop	r19
    1068:	2f 91       	pop	r18
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	0f 90       	pop	r0
    1070:	1f 90       	pop	r1
    1072:	18 95       	reti

00001074 <__vector_1>:

ISR(INT0_vect) /* encoder */
{
    1074:	1f 92       	push	r1
    1076:	0f 92       	push	r0
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	0f 92       	push	r0
    107c:	11 24       	eor	r1, r1
    107e:	8f 93       	push	r24
    1080:	9f 93       	push	r25
	encoder_pulse++;
    1082:	80 91 66 00 	lds	r24, 0x0066
    1086:	90 91 67 00 	lds	r25, 0x0067
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	90 93 67 00 	sts	0x0067, r25
    1090:	80 93 66 00 	sts	0x0066, r24
	pulse_ratio++;
    1094:	80 91 7a 00 	lds	r24, 0x007A
    1098:	90 91 7b 00 	lds	r25, 0x007B
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	90 93 7b 00 	sts	0x007B, r25
    10a2:	80 93 7a 00 	sts	0x007A, r24
	if (pattern == 10) bridgeCounter++;
    10a6:	80 91 60 00 	lds	r24, 0x0060
    10aa:	8a 30       	cpi	r24, 0x0A	; 10
    10ac:	51 f4       	brne	.+20     	; 0x10c2 <__vector_1+0x4e>
    10ae:	80 91 64 00 	lds	r24, 0x0064
    10b2:	90 91 65 00 	lds	r25, 0x0065
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	90 93 65 00 	sts	0x0065, r25
    10bc:	80 93 64 00 	sts	0x0064, r24
    10c0:	04 c0       	rjmp	.+8      	; 0x10ca <__vector_1+0x56>
	else bridgeCounter = 0;
    10c2:	10 92 65 00 	sts	0x0065, r1
    10c6:	10 92 64 00 	sts	0x0064, r1
}
    10ca:	9f 91       	pop	r25
    10cc:	8f 91       	pop	r24
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <_Z15check_crosslinev>:

bool check_crossline( void )
{
	sensor = sensor_cmp();
    10d8:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    10dc:	80 93 6a 00 	sts	0x006A, r24
	return (((sensor & 0b11111111) == 0b11111111) || ((sensor & 0b01111110) == 0b01111110));
    10e0:	8f 3f       	cpi	r24, 0xFF	; 255
    10e2:	39 f0       	breq	.+14     	; 0x10f2 <_Z15check_crosslinev+0x1a>
    10e4:	8e 77       	andi	r24, 0x7E	; 126
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	8e 37       	cpi	r24, 0x7E	; 126
    10ea:	09 f0       	breq	.+2      	; 0x10ee <_Z15check_crosslinev+0x16>
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	89 2f       	mov	r24, r25
    10f0:	08 95       	ret
    10f2:	81 e0       	ldi	r24, 0x01	; 1
}
    10f4:	08 95       	ret

000010f6 <_Z15check_rightlinev>:
bool check_rightline( void )
{
	sensor = sensor_cmp();
    10f6:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    10fa:	80 93 6a 00 	sts	0x006A, r24
	return (((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111) || ((sensor & 0b00000111) == 0b00000111));
    10fe:	98 2f       	mov	r25, r24
    1100:	9f 70       	andi	r25, 0x0F	; 15
    1102:	9f 30       	cpi	r25, 0x0F	; 15
    1104:	59 f0       	breq	.+22     	; 0x111c <_Z15check_rightlinev+0x26>
    1106:	98 2f       	mov	r25, r24
    1108:	9f 71       	andi	r25, 0x1F	; 31
    110a:	9f 31       	cpi	r25, 0x1F	; 31
    110c:	49 f0       	breq	.+18     	; 0x1120 <_Z15check_rightlinev+0x2a>
    110e:	98 2f       	mov	r25, r24
    1110:	97 70       	andi	r25, 0x07	; 7
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	97 30       	cpi	r25, 0x07	; 7
    1116:	29 f0       	breq	.+10     	; 0x1122 <_Z15check_rightlinev+0x2c>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	08 95       	ret
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	08 95       	ret
    1120:	81 e0       	ldi	r24, 0x01	; 1
}
    1122:	08 95       	ret

00001124 <_Z14check_leftlinev>:
bool check_leftline( void )
{
	sensor = sensor_cmp();
    1124:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    1128:	80 93 6a 00 	sts	0x006A, r24
	return (((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000) || ((sensor & 0b11100000) == 0b11100000));
    112c:	98 2f       	mov	r25, r24
    112e:	90 7f       	andi	r25, 0xF0	; 240
    1130:	90 3f       	cpi	r25, 0xF0	; 240
    1132:	59 f0       	breq	.+22     	; 0x114a <_Z14check_leftlinev+0x26>
    1134:	98 2f       	mov	r25, r24
    1136:	98 7f       	andi	r25, 0xF8	; 248
    1138:	98 3f       	cpi	r25, 0xF8	; 248
    113a:	49 f0       	breq	.+18     	; 0x114e <_Z14check_leftlinev+0x2a>
    113c:	98 2f       	mov	r25, r24
    113e:	90 7e       	andi	r25, 0xE0	; 224
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 3e       	cpi	r25, 0xE0	; 224
    1144:	29 f0       	breq	.+10     	; 0x1150 <_Z14check_leftlinev+0x2c>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	08 95       	ret
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	08 95       	ret
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	08 95       	ret

00001152 <main>:
uint16_t bridgeCounter = 0;


int main(void)
{
	INIT();
    1152:	0e 94 e5 06 	call	0xdca	; 0xdca <_Z4INITv>
	sel_mode();
    1156:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z8sel_modev>
	if (get_switch2())
    115a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z11get_switch2v>
    115e:	88 23       	and	r24, r24
    1160:	19 f0       	breq	.+6      	; 0x1168 <main+0x16>
	{
		servo_calibrate();
    1162:	0e 94 60 07 	call	0xec0	; 0xec0 <_Z15servo_calibratev>
    1166:	16 c0       	rjmp	.+44     	; 0x1194 <main+0x42>
	}
	else
	{
		while (true)
		{
			sensor_cmp();
    1168:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
			led7(encoder_pulse);
    116c:	80 91 66 00 	lds	r24, 0x0066
    1170:	90 91 67 00 	lds	r25, 0x0067
    1174:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
			if (get_button(BTN0)) encoder_pulse = 0;
    1178:	8d ef       	ldi	r24, 0xFD	; 253
    117a:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
    117e:	88 23       	and	r24, r24
    1180:	21 f0       	breq	.+8      	; 0x118a <main+0x38>
    1182:	10 92 67 00 	sts	0x0067, r1
    1186:	10 92 66 00 	sts	0x0066, r1
			if (get_button(BTN1)) break;
    118a:	8b ef       	ldi	r24, 0xFB	; 251
    118c:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
    1190:	88 23       	and	r24, r24
    1192:	51 f3       	breq	.-44     	; 0x1168 <main+0x16>
		}	
	}
	
	pattern = 10; /* Chay thang */
    1194:	8a e0       	ldi	r24, 0x0A	; 10
    1196:	80 93 60 00 	sts	0x0060, r24
				pattern = 10;
			};
			break; /* case 99 */
			
			default:
			pattern = 10;
    119a:	0f 2e       	mov	r0, r31
    119c:	fa e0       	ldi	r31, 0x0A	; 10
    119e:	7f 2e       	mov	r7, r31
    11a0:	f0 2d       	mov	r31, r0
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
    11a2:	cc e0       	ldi	r28, 0x0C	; 12
    11a4:	d0 e0       	ldi	r29, 0x00	; 0
    11a6:	ee 24       	eor	r14, r14
    11a8:	ea 94       	dec	r14
    11aa:	fe 2c       	mov	r15, r14
			case 62:
				led7(62);
				
				handle(35);
				speed( 100 ,80 );
				pattern = 63;
    11ac:	0f 2e       	mov	r0, r31
    11ae:	ff e3       	ldi	r31, 0x3F	; 63
    11b0:	5f 2e       	mov	r5, r31
    11b2:	f0 2d       	mov	r31, r0
    11b4:	08 e0       	ldi	r16, 0x08	; 8
    11b6:	10 e0       	ldi	r17, 0x00	; 0
				led7(61);
				set_encoder(8);
				sensor = sensor_cmp();
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000))
				{
					pattern = 21;
    11b8:	0f 2e       	mov	r0, r31
    11ba:	f5 e1       	ldi	r31, 0x15	; 21
    11bc:	6f 2e       	mov	r6, r31
    11be:	f0 2d       	mov	r31, r0
			case 52:
				led7(52);
				
				handle(-50);
				speed( 35 ,50 );
				pattern = 53;
    11c0:	0f 2e       	mov	r0, r31
    11c2:	f5 e3       	ldi	r31, 0x35	; 53
    11c4:	4f 2e       	mov	r4, r31
    11c6:	f0 2d       	mov	r31, r0
			case 41:
				led7(41);
				
				if( timer_cnt > 200 ) /* 200ms */
				{
					pattern = 42;
    11c8:	0f 2e       	mov	r0, r31
    11ca:	fa e2       	ldi	r31, 0x2A	; 42
    11cc:	3f 2e       	mov	r3, r31
    11ce:	f0 2d       	mov	r31, r0
    11d0:	0f 2e       	mov	r0, r31
    11d2:	fa e0       	ldi	r31, 0x0A	; 10
    11d4:	cf 2e       	mov	r12, r31
    11d6:	d1 2c       	mov	r13, r1
    11d8:	f0 2d       	mov	r31, r0
	
	pattern = 10; /* Chay thang */
	
    while (true)
    {
        switch (pattern)
    11da:	80 91 60 00 	lds	r24, 0x0060
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	fc 01       	movw	r30, r24
    11e2:	3a 97       	sbiw	r30, 0x0a	; 10
    11e4:	ea 35       	cpi	r30, 0x5A	; 90
    11e6:	f1 05       	cpc	r31, r1
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <main+0x9a>
    11ea:	a6 c5       	rjmp	.+2892   	; 0x1d38 <main+0xbe6>
    11ec:	e6 5d       	subi	r30, 0xD6	; 214
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__tablejump2__>
		{
			/* Chay thang */
			case 10:
				led7(10);
    11f4:	c6 01       	movw	r24, r12
    11f6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
    11fa:	d0 93 7e 00 	sts	0x007E, r29
    11fe:	c0 93 7d 00 	sts	0x007D, r28
				set_encoder(12);
				if (check_crossline())     /* Cua vuong */
    1202:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_Z15check_crosslinev>
    1206:	88 23       	and	r24, r24
    1208:	19 f0       	breq	.+6      	; 0x1210 <main+0xbe>
				{
					pattern = 21;
    120a:	60 92 60 00 	sts	0x0060, r6
					break;
    120e:	e5 cf       	rjmp	.-54     	; 0x11da <main+0x88>
				}
				else if (check_leftline()) /* Chuyen lan trai */
    1210:	0e 94 92 08 	call	0x1124	; 0x1124 <_Z14check_leftlinev>
    1214:	88 23       	and	r24, r24
    1216:	61 f0       	breq	.+24     	; 0x1230 <main+0xde>
				{
					pattern = 51;
    1218:	83 e3       	ldi	r24, 0x33	; 51
    121a:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    121e:	10 92 69 00 	sts	0x0069, r1
    1222:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    1226:	10 92 67 00 	sts	0x0067, r1
    122a:	10 92 66 00 	sts	0x0066, r1
					break;
    122e:	d5 cf       	rjmp	.-86     	; 0x11da <main+0x88>
				}
				else if (check_rightline()) /* Chuyen lan phai */
    1230:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <_Z15check_rightlinev>
    1234:	88 23       	and	r24, r24
    1236:	61 f0       	breq	.+24     	; 0x1250 <main+0xfe>
				{
					pattern = 61;
    1238:	8d e3       	ldi	r24, 0x3D	; 61
    123a:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    123e:	10 92 69 00 	sts	0x0069, r1
    1242:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    1246:	10 92 67 00 	sts	0x0067, r1
    124a:	10 92 66 00 	sts	0x0066, r1
					break;
    124e:	c5 cf       	rjmp	.-118    	; 0x11da <main+0x88>
				}
				if ((get_speed() > 8) && (bridgeCounter > 500))
    1250:	80 91 61 00 	lds	r24, 0x0061
    1254:	89 30       	cpi	r24, 0x09	; 9
    1256:	40 f0       	brcs	.+16     	; 0x1268 <main+0x116>
    1258:	80 91 64 00 	lds	r24, 0x0064
    125c:	90 91 65 00 	lds	r25, 0x0065
    1260:	85 3f       	cpi	r24, 0xF5	; 245
    1262:	91 40       	sbci	r25, 0x01	; 1
    1264:	08 f0       	brcs	.+2      	; 0x1268 <main+0x116>
    1266:	6b c5       	rjmp	.+2774   	; 0x1d3e <main+0xbec>
				{
					pattern = 99;
				}
				
				switch (sensor_cmp() & 0b01111110)
    1268:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    126c:	8e 77       	andi	r24, 0x7E	; 126
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	fc 01       	movw	r30, r24
    1272:	32 97       	sbiw	r30, 0x02	; 2
    1274:	ef 36       	cpi	r30, 0x6F	; 111
    1276:	f1 05       	cpc	r31, r1
    1278:	08 f0       	brcs	.+2      	; 0x127c <main+0x12a>
    127a:	af cf       	rjmp	.-162    	; 0x11da <main+0x88>
    127c:	ec 57       	subi	r30, 0x7C	; 124
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
						handle(0);
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
						speed(100 ,100);
    128c:	64 e6       	ldi	r22, 0x64	; 100
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	84 e6       	ldi	r24, 0x64	; 100
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
					break;
    1298:	a0 cf       	rjmp	.-192    	; 0x11da <main+0x88>
					
					case 0b00011100:
					case 0b00001000:
						speed(100,100);
    129a:	64 e6       	ldi	r22, 0x64	; 100
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	84 e6       	ldi	r24, 0x64	; 100
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(9);
    12a6:	89 e0       	ldi	r24, 0x09	; 9
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    12ae:	95 cf       	rjmp	.-214    	; 0x11da <main+0x88>
					case 0b00001100:
						speed(100,100);
    12b0:	64 e6       	ldi	r22, 0x64	; 100
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	84 e6       	ldi	r24, 0x64	; 100
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(17);
    12bc:	81 e1       	ldi	r24, 0x11	; 17
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    12c4:	8a cf       	rjmp	.-236    	; 0x11da <main+0x88>
					case 0b00001110:
					case 0b00000100:
						speed(100,85);
    12c6:	65 e5       	ldi	r22, 0x55	; 85
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	84 e6       	ldi	r24, 0x64	; 100
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(31);
    12d2:	8f e1       	ldi	r24, 0x1F	; 31
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    12da:	7f cf       	rjmp	.-258    	; 0x11da <main+0x88>
					case 0b00000110:
						speed(100,80);
    12dc:	60 e5       	ldi	r22, 0x50	; 80
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	84 e6       	ldi	r24, 0x64	; 100
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(50);
    12e8:	82 e3       	ldi	r24, 0x32	; 50
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    12f0:	74 cf       	rjmp	.-280    	; 0x11da <main+0x88>
					case 0b00000010:
						speed(100,70);
    12f2:	66 e4       	ldi	r22, 0x46	; 70
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	84 e6       	ldi	r24, 0x64	; 100
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(75);
    12fe:	8b e4       	ldi	r24, 0x4B	; 75
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
						pattern=11;	/* Lech phai goc lon */
    1306:	8b e0       	ldi	r24, 0x0B	; 11
    1308:	80 93 60 00 	sts	0x0060, r24
					break;		
    130c:	66 cf       	rjmp	.-308    	; 0x11da <main+0x88>
					
					case 0b00111000:
					case 0b00010000:
						speed(100,100);
    130e:	64 e6       	ldi	r22, 0x64	; 100
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	84 e6       	ldi	r24, 0x64	; 100
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(-9);
    131a:	87 ef       	ldi	r24, 0xF7	; 247
    131c:	9f ef       	ldi	r25, 0xFF	; 255
    131e:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1322:	5b cf       	rjmp	.-330    	; 0x11da <main+0x88>
					case 0b00110000:
						speed(100,100);
    1324:	64 e6       	ldi	r22, 0x64	; 100
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	84 e6       	ldi	r24, 0x64	; 100
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(-17);
    1330:	8f ee       	ldi	r24, 0xEF	; 239
    1332:	9f ef       	ldi	r25, 0xFF	; 255
    1334:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1338:	50 cf       	rjmp	.-352    	; 0x11da <main+0x88>
					case 0b01110000:
					case 0b00100000:
						speed(85,100);
    133a:	64 e6       	ldi	r22, 0x64	; 100
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	85 e5       	ldi	r24, 0x55	; 85
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(-31);
    1346:	81 ee       	ldi	r24, 0xE1	; 225
    1348:	9f ef       	ldi	r25, 0xFF	; 255
    134a:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    134e:	45 cf       	rjmp	.-374    	; 0x11da <main+0x88>
					case 0b01100000:
						speed(80,100);
    1350:	64 e6       	ldi	r22, 0x64	; 100
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	80 e5       	ldi	r24, 0x50	; 80
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(-50);
    135c:	8e ec       	ldi	r24, 0xCE	; 206
    135e:	9f ef       	ldi	r25, 0xFF	; 255
    1360:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1364:	3a cf       	rjmp	.-396    	; 0x11da <main+0x88>
					case 0b01000000:
						speed(70,100);
    1366:	64 e6       	ldi	r22, 0x64	; 100
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	86 e4       	ldi	r24, 0x46	; 70
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(-75);
    1372:	85 eb       	ldi	r24, 0xB5	; 181
    1374:	9f ef       	ldi	r25, 0xFF	; 255
    1376:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
						pattern=12; /* Lech trai goc lon */
    137a:	8c e0       	ldi	r24, 0x0C	; 12
    137c:	80 93 60 00 	sts	0x0060, r24
					break;
    1380:	2c cf       	rjmp	.-424    	; 0x11da <main+0x88>
				}
			break; /* case 10 */
			
			/* Lech phai goc lon */
			case 11:
				led7(11);
    1382:	8b e0       	ldi	r24, 0x0B	; 11
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				switch (sensor_cmp() & 0b11001100)
    138a:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    138e:	8c 7c       	andi	r24, 0xCC	; 204
    1390:	8c 30       	cpi	r24, 0x0C	; 12
    1392:	09 f4       	brne	.+2      	; 0x1396 <main+0x244>
    1394:	4d c0       	rjmp	.+154    	; 0x1430 <main+0x2de>
    1396:	28 f4       	brcc	.+10     	; 0x13a2 <main+0x250>
    1398:	88 23       	and	r24, r24
    139a:	69 f1       	breq	.+90     	; 0x13f6 <main+0x2a4>
    139c:	84 30       	cpi	r24, 0x04	; 4
    139e:	c9 f1       	breq	.+114    	; 0x1412 <main+0x2c0>
    13a0:	5c c0       	rjmp	.+184    	; 0x145a <main+0x308>
    13a2:	80 38       	cpi	r24, 0x80	; 128
    13a4:	b9 f0       	breq	.+46     	; 0x13d4 <main+0x282>
    13a6:	80 3c       	cpi	r24, 0xC0	; 192
    13a8:	21 f0       	breq	.+8      	; 0x13b2 <main+0x260>
    13aa:	80 36       	cpi	r24, 0x60	; 96
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <main+0x25e>
    13ae:	55 c0       	rjmp	.+170    	; 0x145a <main+0x308>
    13b0:	50 c0       	rjmp	.+160    	; 0x1452 <main+0x300>
    13b2:	86 e0       	ldi	r24, 0x06	; 6
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	90 93 7e 00 	sts	0x007E, r25
    13ba:	80 93 7d 00 	sts	0x007D, r24
				{
					case 0b11000000:
						set_encoder(6);
						speed(80, /*0*/-10);
    13be:	66 ef       	ldi	r22, 0xF6	; 246
    13c0:	7f ef       	ldi	r23, 0xFF	; 255
    13c2:	80 e5       	ldi	r24, 0x50	; 80
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(135);
    13ca:	87 e8       	ldi	r24, 0x87	; 135
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    13d2:	03 cf       	rjmp	.-506    	; 0x11da <main+0x88>
    13d4:	86 e0       	ldi	r24, 0x06	; 6
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	90 93 7e 00 	sts	0x007E, r25
    13dc:	80 93 7d 00 	sts	0x007D, r24
					
					case 0b10000000:
						set_encoder(6);
						speed(80, /*15*/5);
    13e0:	65 e0       	ldi	r22, 0x05	; 5
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	80 e5       	ldi	r24, 0x50	; 80
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(120);
    13ec:	88 e7       	ldi	r24, 0x78	; 120
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    13f4:	f2 ce       	rjmp	.-540    	; 0x11da <main+0x88>
    13f6:	10 93 7e 00 	sts	0x007E, r17
    13fa:	00 93 7d 00 	sts	0x007D, r16
					
					case 0b00000000:
						set_encoder(8);
						speed(80, /*20*/10);
    13fe:	b6 01       	movw	r22, r12
    1400:	80 e5       	ldi	r24, 0x50	; 80
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(90);
    1408:	8a e5       	ldi	r24, 0x5A	; 90
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1410:	e4 ce       	rjmp	.-568    	; 0x11da <main+0x88>
    1412:	d0 92 7e 00 	sts	0x007E, r13
    1416:	c0 92 7d 00 	sts	0x007D, r12
					
					case 0b00000100:
						set_encoder(10);
						speed(80, /*25*/15);
    141a:	6f e0       	ldi	r22, 0x0F	; 15
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	80 e5       	ldi	r24, 0x50	; 80
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(70);
    1426:	86 e4       	ldi	r24, 0x46	; 70
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    142e:	d5 ce       	rjmp	.-598    	; 0x11da <main+0x88>
					
					case 0b00001100:
						speed(80, /*30*/20);
    1430:	64 e1       	ldi	r22, 0x14	; 20
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	80 e5       	ldi	r24, 0x50	; 80
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(55);
    143c:	87 e3       	ldi	r24, 0x37	; 55
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
						pattern = 10;
    1444:	70 92 60 00 	sts	0x0060, r7
    1448:	f0 92 7e 00 	sts	0x007E, r15
    144c:	e0 92 7d 00 	sts	0x007D, r14
    1450:	c4 ce       	rjmp	.-632    	; 0x11da <main+0x88>
						set_encoder(-1);
					break;
					
					case 0b01100000:
					pattern=12;
    1452:	8c e0       	ldi	r24, 0x0C	; 12
    1454:	80 93 60 00 	sts	0x0060, r24
					break;
    1458:	c0 ce       	rjmp	.-640    	; 0x11da <main+0x88>
					
					default:
						pattern=11;
    145a:	8b e0       	ldi	r24, 0x0B	; 11
    145c:	80 93 60 00 	sts	0x0060, r24
					break;
    1460:	bc ce       	rjmp	.-648    	; 0x11da <main+0x88>
				}
			break; /* case 11 */
			
			/* Lech trai goc lon */
			case 12:
				led7(12);
    1462:	ce 01       	movw	r24, r28
    1464:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				switch(sensor_cmp() & 0b00110011)
    1468:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    146c:	83 73       	andi	r24, 0x33	; 51
    146e:	83 30       	cpi	r24, 0x03	; 3
    1470:	79 f0       	breq	.+30     	; 0x1490 <main+0x33e>
    1472:	28 f4       	brcc	.+10     	; 0x147e <main+0x32c>
    1474:	88 23       	and	r24, r24
    1476:	71 f1       	breq	.+92     	; 0x14d4 <main+0x382>
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	d9 f0       	breq	.+54     	; 0x14b2 <main+0x360>
    147c:	5d c0       	rjmp	.+186    	; 0x1538 <main+0x3e6>
    147e:	80 32       	cpi	r24, 0x20	; 32
    1480:	b9 f1       	breq	.+110    	; 0x14f0 <main+0x39e>
    1482:	80 33       	cpi	r24, 0x30	; 48
    1484:	09 f4       	brne	.+2      	; 0x1488 <main+0x336>
    1486:	43 c0       	rjmp	.+134    	; 0x150e <main+0x3bc>
    1488:	86 30       	cpi	r24, 0x06	; 6
    148a:	09 f0       	breq	.+2      	; 0x148e <main+0x33c>
    148c:	55 c0       	rjmp	.+170    	; 0x1538 <main+0x3e6>
    148e:	50 c0       	rjmp	.+160    	; 0x1530 <main+0x3de>
    1490:	86 e0       	ldi	r24, 0x06	; 6
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	90 93 7e 00 	sts	0x007E, r25
    1498:	80 93 7d 00 	sts	0x007D, r24
				{
					case 0b00000011:
						set_encoder(6);
						speed(-10,80);
    149c:	60 e5       	ldi	r22, 0x50	; 80
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	86 ef       	ldi	r24, 0xF6	; 246
    14a2:	9f ef       	ldi	r25, 0xFF	; 255
    14a4:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(-135);
    14a8:	89 e7       	ldi	r24, 0x79	; 121
    14aa:	9f ef       	ldi	r25, 0xFF	; 255
    14ac:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    14b0:	94 ce       	rjmp	.-728    	; 0x11da <main+0x88>
    14b2:	86 e0       	ldi	r24, 0x06	; 6
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	90 93 7e 00 	sts	0x007E, r25
    14ba:	80 93 7d 00 	sts	0x007D, r24
					
					case 0b00000001:
						set_encoder(6);
						speed(5,80);
    14be:	60 e5       	ldi	r22, 0x50	; 80
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	85 e0       	ldi	r24, 0x05	; 5
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(-120);
    14ca:	88 e8       	ldi	r24, 0x88	; 136
    14cc:	9f ef       	ldi	r25, 0xFF	; 255
    14ce:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    14d2:	83 ce       	rjmp	.-762    	; 0x11da <main+0x88>
    14d4:	10 93 7e 00 	sts	0x007E, r17
    14d8:	00 93 7d 00 	sts	0x007D, r16
					
					case 0b00000000:
						set_encoder(8);	
						speed(10,80);
    14dc:	60 e5       	ldi	r22, 0x50	; 80
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	c6 01       	movw	r24, r12
    14e2:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(-90);
    14e6:	86 ea       	ldi	r24, 0xA6	; 166
    14e8:	9f ef       	ldi	r25, 0xFF	; 255
    14ea:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    14ee:	75 ce       	rjmp	.-790    	; 0x11da <main+0x88>
    14f0:	d0 92 7e 00 	sts	0x007E, r13
    14f4:	c0 92 7d 00 	sts	0x007D, r12
					
					case 0b00100000:
						set_encoder(10);
						speed(15,80);
    14f8:	60 e5       	ldi	r22, 0x50	; 80
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	8f e0       	ldi	r24, 0x0F	; 15
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(-70);
    1504:	8a eb       	ldi	r24, 0xBA	; 186
    1506:	9f ef       	ldi	r25, 0xFF	; 255
    1508:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    150c:	66 ce       	rjmp	.-820    	; 0x11da <main+0x88>
					
					case 0b00110000:
						speed(20,80);
    150e:	60 e5       	ldi	r22, 0x50	; 80
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	84 e1       	ldi	r24, 0x14	; 20
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
						handle(-55);
    151a:	89 ec       	ldi	r24, 0xC9	; 201
    151c:	9f ef       	ldi	r25, 0xFF	; 255
    151e:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
						pattern = 10;
    1522:	70 92 60 00 	sts	0x0060, r7
    1526:	f0 92 7e 00 	sts	0x007E, r15
    152a:	e0 92 7d 00 	sts	0x007D, r14
    152e:	55 ce       	rjmp	.-854    	; 0x11da <main+0x88>
						set_encoder(-1);
					break;
					
					case 0b00000110:
					pattern=11;
    1530:	8b e0       	ldi	r24, 0x0B	; 11
    1532:	80 93 60 00 	sts	0x0060, r24
					break;
    1536:	51 ce       	rjmp	.-862    	; 0x11da <main+0x88>
					
					default:
						pattern=12;
    1538:	8c e0       	ldi	r24, 0x0C	; 12
    153a:	80 93 60 00 	sts	0x0060, r24
					break;
    153e:	4d ce       	rjmp	.-870    	; 0x11da <main+0x88>
				}
			break; /* case 12 */
			
			/* Cua vuong */
			case 21:
				led7(21);
    1540:	85 e1       	ldi	r24, 0x15	; 21
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				
				handle(0);
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				speed(-40,-40);
    1550:	68 ed       	ldi	r22, 0xD8	; 216
    1552:	7f ef       	ldi	r23, 0xFF	; 255
    1554:	88 ed       	ldi	r24, 0xD8	; 216
    1556:	9f ef       	ldi	r25, 0xFF	; 255
    1558:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
				timer_cnt = 0;
    155c:	10 92 69 00 	sts	0x0069, r1
    1560:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    1564:	10 92 67 00 	sts	0x0067, r1
    1568:	10 92 66 00 	sts	0x0066, r1
				pattern = 22;
    156c:	86 e1       	ldi	r24, 0x16	; 22
    156e:	80 93 60 00 	sts	0x0060, r24
			break; /* case 21 */
    1572:	33 ce       	rjmp	.-922    	; 0x11da <main+0x88>
			
			case 22:
				led7(22);
    1574:	86 e1       	ldi	r24, 0x16	; 22
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				
				//if( timer_cnt > (285 - (delay * 200)) || encoder_pulse > 35 )
				if (speed_wait(3))
    157c:	80 91 61 00 	lds	r24, 0x0061
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	a8 f4       	brcc	.+42     	; 0x15ae <main+0x45c>
    1584:	d0 92 7e 00 	sts	0x007E, r13
    1588:	c0 92 7d 00 	sts	0x007D, r12
				{
					set_encoder(10);
					speed(70, 70);
    158c:	66 e4       	ldi	r22, 0x46	; 70
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	86 e4       	ldi	r24, 0x46	; 70
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
					pattern = 23;
    1598:	87 e1       	ldi	r24, 0x17	; 23
    159a:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    159e:	10 92 69 00 	sts	0x0069, r1
    15a2:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    15a6:	10 92 67 00 	sts	0x0067, r1
    15aa:	10 92 66 00 	sts	0x0066, r1
				}
				
				/* Nguoc lai thi chinh thang cho xe */
				switch (sensor_cmp() & 0b01111110)
    15ae:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    15b2:	8e 77       	andi	r24, 0x7E	; 126
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	fc 01       	movw	r30, r24
    15b8:	32 97       	sbiw	r30, 0x02	; 2
    15ba:	ef 36       	cpi	r30, 0x6F	; 111
    15bc:	f1 05       	cpc	r31, r1
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <main+0x470>
    15c0:	0c ce       	rjmp	.-1000   	; 0x11da <main+0x88>
    15c2:	ed 50       	subi	r30, 0x0D	; 13
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle(0);
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    15d2:	03 ce       	rjmp	.-1018   	; 0x11da <main+0x88>
					
					case 0b00011100:
					case 0b00001000:
					handle(9);
    15d4:	89 e0       	ldi	r24, 0x09	; 9
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    15dc:	fe cd       	rjmp	.-1028   	; 0x11da <main+0x88>
					
					case 0b00001100:
					handle(17);
    15de:	81 e1       	ldi	r24, 0x11	; 17
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    15e6:	f9 cd       	rjmp	.-1038   	; 0x11da <main+0x88>
					
					case 0b00001110:
					case 0b00000100:
					handle(31);
    15e8:	8f e1       	ldi	r24, 0x1F	; 31
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    15f0:	f4 cd       	rjmp	.-1048   	; 0x11da <main+0x88>
					
					case 0b00000110:
					handle(50);
    15f2:	82 e3       	ldi	r24, 0x32	; 50
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    15fa:	ef cd       	rjmp	.-1058   	; 0x11da <main+0x88>
					
					case 0b00000010:
					handle(75);
    15fc:	8b e4       	ldi	r24, 0x4B	; 75
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1604:	ea cd       	rjmp	.-1068   	; 0x11da <main+0x88>
					
					case 0b00111000:
					case 0b00010000:
					handle(-9);
    1606:	87 ef       	ldi	r24, 0xF7	; 247
    1608:	9f ef       	ldi	r25, 0xFF	; 255
    160a:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    160e:	e5 cd       	rjmp	.-1078   	; 0x11da <main+0x88>
					
					case 0b00110000:
					handle(-17);
    1610:	8f ee       	ldi	r24, 0xEF	; 239
    1612:	9f ef       	ldi	r25, 0xFF	; 255
    1614:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1618:	e0 cd       	rjmp	.-1088   	; 0x11da <main+0x88>
					
					case 0b01110000:
					case 0b00100000:
					handle(-31);
    161a:	81 ee       	ldi	r24, 0xE1	; 225
    161c:	9f ef       	ldi	r25, 0xFF	; 255
    161e:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1622:	db cd       	rjmp	.-1098   	; 0x11da <main+0x88>
					
					case 0b01100000:
					handle(-50);
    1624:	8e ec       	ldi	r24, 0xCE	; 206
    1626:	9f ef       	ldi	r25, 0xFF	; 255
    1628:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    162c:	d6 cd       	rjmp	.-1108   	; 0x11da <main+0x88>
					
					case 0b01000000:
					handle(-75);
    162e:	85 eb       	ldi	r24, 0xB5	; 181
    1630:	9f ef       	ldi	r25, 0xFF	; 255
    1632:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1636:	d1 cd       	rjmp	.-1118   	; 0x11da <main+0x88>
					break;
				}
			break; /* case 22 */
			
			case 23:
				led7(23);
    1638:	87 e1       	ldi	r24, 0x17	; 23
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				
				sensor = sensor_cmp();
    1640:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    1644:	80 93 6a 00 	sts	0x006A, r24
				/* Cua trai */
				if ((encoder_pulse > 12) && (((sensor & 0b11111000) == 0b11111000) || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11111100) == 0b11111100)))	/* Neu gap tin hieu nay la goc cua 90 trai thi be */
    1648:	20 91 66 00 	lds	r18, 0x0066
    164c:	30 91 67 00 	lds	r19, 0x0067
    1650:	2d 30       	cpi	r18, 0x0D	; 13
    1652:	31 05       	cpc	r19, r1
    1654:	08 f4       	brcc	.+2      	; 0x1658 <main+0x506>
    1656:	40 c0       	rjmp	.+128    	; 0x16d8 <main+0x586>
    1658:	98 2f       	mov	r25, r24
    165a:	98 7f       	andi	r25, 0xF8	; 248
    165c:	98 3f       	cpi	r25, 0xF8	; 248
    165e:	61 f0       	breq	.+24     	; 0x1678 <main+0x526>
    1660:	98 2f       	mov	r25, r24
    1662:	90 7f       	andi	r25, 0xF0	; 240
    1664:	90 3f       	cpi	r25, 0xF0	; 240
    1666:	41 f0       	breq	.+16     	; 0x1678 <main+0x526>
    1668:	98 2f       	mov	r25, r24
    166a:	90 7e       	andi	r25, 0xE0	; 224
    166c:	90 3e       	cpi	r25, 0xE0	; 224
    166e:	21 f0       	breq	.+8      	; 0x1678 <main+0x526>
    1670:	98 2f       	mov	r25, r24
    1672:	9c 7f       	andi	r25, 0xFC	; 252
    1674:	9c 3f       	cpi	r25, 0xFC	; 252
    1676:	81 f4       	brne	.+32     	; 0x1698 <main+0x546>
    1678:	f0 92 7e 00 	sts	0x007E, r15
    167c:	e0 92 7d 00 	sts	0x007D, r14
				{
					set_encoder(-1);
					pattern = 26;
    1680:	8a e1       	ldi	r24, 0x1A	; 26
    1682:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    1686:	10 92 69 00 	sts	0x0069, r1
    168a:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    168e:	10 92 67 00 	sts	0x0067, r1
    1692:	10 92 66 00 	sts	0x0066, r1
					break;
    1696:	a1 cd       	rjmp	.-1214   	; 0x11da <main+0x88>
				}
				/* Cua phai */
				if ((encoder_pulse > 12) && (((sensor & 0b00011111) == 0b00011111 ) || ((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00111111) == 0b00111111))) /* Neu gap tin hieu nay la goc cua 90 phai thi be */
    1698:	98 2f       	mov	r25, r24
    169a:	9f 71       	andi	r25, 0x1F	; 31
    169c:	9f 31       	cpi	r25, 0x1F	; 31
    169e:	61 f0       	breq	.+24     	; 0x16b8 <main+0x566>
    16a0:	98 2f       	mov	r25, r24
    16a2:	97 70       	andi	r25, 0x07	; 7
    16a4:	97 30       	cpi	r25, 0x07	; 7
    16a6:	41 f0       	breq	.+16     	; 0x16b8 <main+0x566>
    16a8:	98 2f       	mov	r25, r24
    16aa:	9f 70       	andi	r25, 0x0F	; 15
    16ac:	9f 30       	cpi	r25, 0x0F	; 15
    16ae:	21 f0       	breq	.+8      	; 0x16b8 <main+0x566>
    16b0:	98 2f       	mov	r25, r24
    16b2:	9f 73       	andi	r25, 0x3F	; 63
    16b4:	9f 33       	cpi	r25, 0x3F	; 63
    16b6:	81 f4       	brne	.+32     	; 0x16d8 <main+0x586>
    16b8:	f0 92 7e 00 	sts	0x007E, r15
    16bc:	e0 92 7d 00 	sts	0x007D, r14
				{
					set_encoder(-1);
					pattern = 27;
    16c0:	8b e1       	ldi	r24, 0x1B	; 27
    16c2:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    16c6:	10 92 69 00 	sts	0x0069, r1
    16ca:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    16ce:	10 92 67 00 	sts	0x0067, r1
    16d2:	10 92 66 00 	sts	0x0066, r1
					break;
    16d6:	81 cd       	rjmp	.-1278   	; 0x11da <main+0x88>
				}
				/* No line */
				if ((sensor & 0b01111110) == 0x00)
    16d8:	8e 77       	andi	r24, 0x7E	; 126
    16da:	a9 f4       	brne	.+42     	; 0x1706 <main+0x5b4>
				{
					pattern = 73;
    16dc:	89 e4       	ldi	r24, 0x49	; 73
    16de:	80 93 60 00 	sts	0x0060, r24
					handle(0);
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					speed(100, 100);
    16ea:	64 e6       	ldi	r22, 0x64	; 100
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	84 e6       	ldi	r24, 0x64	; 100
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
					timer_cnt = 0;
    16f6:	10 92 69 00 	sts	0x0069, r1
    16fa:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    16fe:	10 92 67 00 	sts	0x0067, r1
    1702:	10 92 66 00 	sts	0x0066, r1
				}
				
				/* Nguoc lai thi chinh thang cho xe */
				switch (sensor_cmp() & 0b01111110)
    1706:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    170a:	8e 77       	andi	r24, 0x7E	; 126
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	fc 01       	movw	r30, r24
    1710:	32 97       	sbiw	r30, 0x02	; 2
    1712:	ef 36       	cpi	r30, 0x6F	; 111
    1714:	f1 05       	cpc	r31, r1
    1716:	08 f0       	brcs	.+2      	; 0x171a <main+0x5c8>
    1718:	60 cd       	rjmp	.-1344   	; 0x11da <main+0x88>
    171a:	ee 59       	subi	r30, 0x9E	; 158
    171c:	fe 4f       	sbci	r31, 0xFE	; 254
    171e:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle(0);
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    172a:	57 cd       	rjmp	.-1362   	; 0x11da <main+0x88>
					
					case 0b00011100:
					case 0b00001000:
					handle(9);
    172c:	89 e0       	ldi	r24, 0x09	; 9
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1734:	52 cd       	rjmp	.-1372   	; 0x11da <main+0x88>
					
					case 0b00001100:
					handle(17);
    1736:	81 e1       	ldi	r24, 0x11	; 17
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    173e:	4d cd       	rjmp	.-1382   	; 0x11da <main+0x88>
					
					case 0b00001110:
					case 0b00000100:
					handle(31);
    1740:	8f e1       	ldi	r24, 0x1F	; 31
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1748:	48 cd       	rjmp	.-1392   	; 0x11da <main+0x88>
					
					case 0b00000110:
					handle(50);
    174a:	82 e3       	ldi	r24, 0x32	; 50
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1752:	43 cd       	rjmp	.-1402   	; 0x11da <main+0x88>
					
					case 0b00000010:
					handle(75);
    1754:	8b e4       	ldi	r24, 0x4B	; 75
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    175c:	3e cd       	rjmp	.-1412   	; 0x11da <main+0x88>
					
					case 0b00111000:
					case 0b00010000:
					handle(-9);
    175e:	87 ef       	ldi	r24, 0xF7	; 247
    1760:	9f ef       	ldi	r25, 0xFF	; 255
    1762:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1766:	39 cd       	rjmp	.-1422   	; 0x11da <main+0x88>
					
					case 0b00110000:
					handle(-17);
    1768:	8f ee       	ldi	r24, 0xEF	; 239
    176a:	9f ef       	ldi	r25, 0xFF	; 255
    176c:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1770:	34 cd       	rjmp	.-1432   	; 0x11da <main+0x88>
					
					case 0b01110000:
					case 0b00100000:
					handle(-31);
    1772:	81 ee       	ldi	r24, 0xE1	; 225
    1774:	9f ef       	ldi	r25, 0xFF	; 255
    1776:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    177a:	2f cd       	rjmp	.-1442   	; 0x11da <main+0x88>
					
					case 0b01100000:
					handle(-50);
    177c:	8e ec       	ldi	r24, 0xCE	; 206
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1784:	2a cd       	rjmp	.-1452   	; 0x11da <main+0x88>
					
					case 0b01000000:
					handle(-75);
    1786:	85 eb       	ldi	r24, 0xB5	; 181
    1788:	9f ef       	ldi	r25, 0xFF	; 255
    178a:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    178e:	25 cd       	rjmp	.-1462   	; 0x11da <main+0x88>
					break;
				}
			break; /* case 23 */
			
			case 26: /* trai */
				led7(26);
    1790:	8a e1       	ldi	r24, 0x1A	; 26
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				
				handle(-SERVO_ANGLE_MAX); /* -120 */
    1798:	85 e6       	ldi	r24, 0x65	; 101
    179a:	9f ef       	ldi	r25, 0xFF	; 255
    179c:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				speed( -80 , 80 );
    17a0:	60 e5       	ldi	r22, 0x50	; 80
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	80 eb       	ldi	r24, 0xB0	; 176
    17a6:	9f ef       	ldi	r25, 0xFF	; 255
    17a8:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
				pattern = 31;
    17ac:	8f e1       	ldi	r24, 0x1F	; 31
    17ae:	80 93 60 00 	sts	0x0060, r24
				timer_cnt = 0;
    17b2:	10 92 69 00 	sts	0x0069, r1
    17b6:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    17ba:	10 92 67 00 	sts	0x0067, r1
    17be:	10 92 66 00 	sts	0x0066, r1
			break; /* case 26 */
    17c2:	0b cd       	rjmp	.-1514   	; 0x11da <main+0x88>
			
			case 27: /* phai */
				led7(27);
    17c4:	8b e1       	ldi	r24, 0x1B	; 27
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				
				handle(SERVO_ANGLE_MAX); /* 120 */
    17cc:	8b e9       	ldi	r24, 0x9B	; 155
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				speed( 80 , -80 );
    17d4:	60 eb       	ldi	r22, 0xB0	; 176
    17d6:	7f ef       	ldi	r23, 0xFF	; 255
    17d8:	80 e5       	ldi	r24, 0x50	; 80
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
				pattern = 41;
    17e0:	89 e2       	ldi	r24, 0x29	; 41
    17e2:	80 93 60 00 	sts	0x0060, r24
				timer_cnt = 0;
    17e6:	10 92 69 00 	sts	0x0069, r1
    17ea:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    17ee:	10 92 67 00 	sts	0x0067, r1
    17f2:	10 92 66 00 	sts	0x0066, r1
			break; /* case 27 */
    17f6:	f1 cc       	rjmp	.-1566   	; 0x11da <main+0x88>
			
			case 31:
				led7(31);
    17f8:	8f e1       	ldi	r24, 0x1F	; 31
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				
				if( timer_cnt > 200 ) /* 200ms */
    1800:	80 91 68 00 	lds	r24, 0x0068
    1804:	90 91 69 00 	lds	r25, 0x0069
    1808:	89 3c       	cpi	r24, 0xC9	; 201
    180a:	91 05       	cpc	r25, r1
    180c:	08 f4       	brcc	.+2      	; 0x1810 <main+0x6be>
    180e:	e5 cc       	rjmp	.-1590   	; 0x11da <main+0x88>
				{
					pattern = 32;
    1810:	90 e2       	ldi	r25, 0x20	; 32
    1812:	90 93 60 00 	sts	0x0060, r25
					timer_cnt = 0;
    1816:	10 92 69 00 	sts	0x0069, r1
    181a:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    181e:	10 92 67 00 	sts	0x0067, r1
    1822:	10 92 66 00 	sts	0x0066, r1
    1826:	d9 cc       	rjmp	.-1614   	; 0x11da <main+0x88>
				}
			break; /* case 31 */
			
			case 32:
				led7(32);
    1828:	80 e2       	ldi	r24, 0x20	; 32
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				sensor = sensor_cmp();
    1830:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    1834:	80 93 6a 00 	sts	0x006A, r24
				if((sensor & 0b11100111) == 0b00100000)
    1838:	87 7e       	andi	r24, 0xE7	; 231
    183a:	80 32       	cpi	r24, 0x20	; 32
    183c:	09 f0       	breq	.+2      	; 0x1840 <main+0x6ee>
    183e:	cd cc       	rjmp	.-1638   	; 0x11da <main+0x88>
				{
					pattern = 10;
    1840:	70 92 60 00 	sts	0x0060, r7
    1844:	ca cc       	rjmp	.-1644   	; 0x11da <main+0x88>
				}
			break; /* case 32 */
			
			case 41:
				led7(41);
    1846:	89 e2       	ldi	r24, 0x29	; 41
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				
				if( timer_cnt > 200 ) /* 200ms */
    184e:	80 91 68 00 	lds	r24, 0x0068
    1852:	90 91 69 00 	lds	r25, 0x0069
    1856:	89 3c       	cpi	r24, 0xC9	; 201
    1858:	91 05       	cpc	r25, r1
    185a:	08 f4       	brcc	.+2      	; 0x185e <main+0x70c>
    185c:	be cc       	rjmp	.-1668   	; 0x11da <main+0x88>
				{
					pattern = 42;
    185e:	30 92 60 00 	sts	0x0060, r3
					timer_cnt = 0;
    1862:	10 92 69 00 	sts	0x0069, r1
    1866:	10 92 68 00 	sts	0x0068, r1
    186a:	b7 cc       	rjmp	.-1682   	; 0x11da <main+0x88>
				}
			break; /* case 41 */
			
			case 42:
				led7(42);
    186c:	8a e2       	ldi	r24, 0x2A	; 42
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				sensor = sensor_cmp();
    1874:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    1878:	80 93 6a 00 	sts	0x006A, r24
				if((sensor & 0b11100111) == 0b00000100) 
    187c:	87 7e       	andi	r24, 0xE7	; 231
    187e:	84 30       	cpi	r24, 0x04	; 4
    1880:	09 f0       	breq	.+2      	; 0x1884 <main+0x732>
    1882:	ab cc       	rjmp	.-1706   	; 0x11da <main+0x88>
				{
					pattern = 10;
    1884:	70 92 60 00 	sts	0x0060, r7
    1888:	a8 cc       	rjmp	.-1712   	; 0x11da <main+0x88>
				}
			break; /* case 42 */
			
			/* Chuyen lan trai */
			case 51:
				led7(51);
    188a:	83 e3       	ldi	r24, 0x33	; 51
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
    1892:	10 93 7e 00 	sts	0x007E, r17
    1896:	00 93 7d 00 	sts	0x007D, r16
				set_encoder(8);
				sensor = sensor_cmp();
    189a:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    189e:	80 93 6a 00 	sts	0x006A, r24
				if (((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111))
    18a2:	98 2f       	mov	r25, r24
    18a4:	97 70       	andi	r25, 0x07	; 7
    18a6:	97 30       	cpi	r25, 0x07	; 7
    18a8:	39 f0       	breq	.+14     	; 0x18b8 <main+0x766>
    18aa:	98 2f       	mov	r25, r24
    18ac:	9f 70       	andi	r25, 0x0F	; 15
    18ae:	9f 30       	cpi	r25, 0x0F	; 15
    18b0:	19 f0       	breq	.+6      	; 0x18b8 <main+0x766>
    18b2:	8f 71       	andi	r24, 0x1F	; 31
    18b4:	8f 31       	cpi	r24, 0x1F	; 31
    18b6:	19 f4       	brne	.+6      	; 0x18be <main+0x76c>
				{
					pattern = 21;
    18b8:	60 92 60 00 	sts	0x0060, r6
					break;
    18bc:	8e cc       	rjmp	.-1764   	; 0x11da <main+0x88>
				}
				
				speed(50, 50);
    18be:	62 e3       	ldi	r22, 0x32	; 50
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	82 e3       	ldi	r24, 0x32	; 50
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    18ca:	80 91 66 00 	lds	r24, 0x0066
    18ce:	90 91 67 00 	lds	r25, 0x0067
    18d2:	49 97       	sbiw	r24, 0x19	; 25
    18d4:	38 f4       	brcc	.+14     	; 0x18e4 <main+0x792>
    18d6:	80 91 68 00 	lds	r24, 0x0068
    18da:	90 91 69 00 	lds	r25, 0x0069
    18de:	88 37       	cpi	r24, 0x78	; 120
    18e0:	91 05       	cpc	r25, r1
    18e2:	58 f0       	brcs	.+22     	; 0x18fa <main+0x7a8>
				{
					pattern = 52;
    18e4:	24 e3       	ldi	r18, 0x34	; 52
    18e6:	20 93 60 00 	sts	0x0060, r18
					timer_cnt = 0;
    18ea:	10 92 69 00 	sts	0x0069, r1
    18ee:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse=0;
    18f2:	10 92 67 00 	sts	0x0067, r1
    18f6:	10 92 66 00 	sts	0x0066, r1
				}
				
				/* Nguoc lai thi chinh thang cho xe */
				switch (sensor_cmp() & 0b01111110)
    18fa:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    18fe:	8e 77       	andi	r24, 0x7E	; 126
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	fc 01       	movw	r30, r24
    1904:	32 97       	sbiw	r30, 0x02	; 2
    1906:	ef 36       	cpi	r30, 0x6F	; 111
    1908:	f1 05       	cpc	r31, r1
    190a:	08 f0       	brcs	.+2      	; 0x190e <main+0x7bc>
    190c:	66 cc       	rjmp	.-1844   	; 0x11da <main+0x88>
    190e:	ef 52       	subi	r30, 0x2F	; 47
    1910:	fe 4f       	sbci	r31, 0xFE	; 254
    1912:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle(0);
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    191e:	5d cc       	rjmp	.-1862   	; 0x11da <main+0x88>
					
					case 0b00011100:
					case 0b00001000:
					handle(9);
    1920:	89 e0       	ldi	r24, 0x09	; 9
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1928:	58 cc       	rjmp	.-1872   	; 0x11da <main+0x88>
					
					case 0b00001100:
					handle(17);
    192a:	81 e1       	ldi	r24, 0x11	; 17
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1932:	53 cc       	rjmp	.-1882   	; 0x11da <main+0x88>
					
					case 0b00001110:
					case 0b00000100:
					handle(31);
    1934:	8f e1       	ldi	r24, 0x1F	; 31
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    193c:	4e cc       	rjmp	.-1892   	; 0x11da <main+0x88>
					
					case 0b00000110:
					handle(50);
    193e:	82 e3       	ldi	r24, 0x32	; 50
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1946:	49 cc       	rjmp	.-1902   	; 0x11da <main+0x88>
					
					case 0b00000010:
					handle(75);
    1948:	8b e4       	ldi	r24, 0x4B	; 75
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1950:	44 cc       	rjmp	.-1912   	; 0x11da <main+0x88>
					
					case 0b00111000:
					case 0b00010000:
					handle(-9);
    1952:	87 ef       	ldi	r24, 0xF7	; 247
    1954:	9f ef       	ldi	r25, 0xFF	; 255
    1956:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    195a:	3f cc       	rjmp	.-1922   	; 0x11da <main+0x88>
					
					case 0b00110000:
					handle(-17);
    195c:	8f ee       	ldi	r24, 0xEF	; 239
    195e:	9f ef       	ldi	r25, 0xFF	; 255
    1960:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1964:	3a cc       	rjmp	.-1932   	; 0x11da <main+0x88>
					
					case 0b01110000:
					case 0b00100000:
					handle(-31);
    1966:	81 ee       	ldi	r24, 0xE1	; 225
    1968:	9f ef       	ldi	r25, 0xFF	; 255
    196a:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    196e:	35 cc       	rjmp	.-1942   	; 0x11da <main+0x88>
					
					case 0b01100000:
					handle(-50);
    1970:	8e ec       	ldi	r24, 0xCE	; 206
    1972:	9f ef       	ldi	r25, 0xFF	; 255
    1974:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1978:	30 cc       	rjmp	.-1952   	; 0x11da <main+0x88>
					
					case 0b01000000:
					handle(-75);
    197a:	85 eb       	ldi	r24, 0xB5	; 181
    197c:	9f ef       	ldi	r25, 0xFF	; 255
    197e:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1982:	2b cc       	rjmp	.-1962   	; 0x11da <main+0x88>
					break;
				}
			break; /* case 51 */
			
			case 52:
				led7(52);
    1984:	84 e3       	ldi	r24, 0x34	; 52
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				
				handle(-50);
    198c:	8e ec       	ldi	r24, 0xCE	; 206
    198e:	9f ef       	ldi	r25, 0xFF	; 255
    1990:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				speed( 35 ,50 );
    1994:	62 e3       	ldi	r22, 0x32	; 50
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	83 e2       	ldi	r24, 0x23	; 35
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
				pattern = 53;
    19a0:	40 92 60 00 	sts	0x0060, r4
				timer_cnt = 0;
    19a4:	10 92 69 00 	sts	0x0069, r1
    19a8:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    19ac:	10 92 67 00 	sts	0x0067, r1
    19b0:	10 92 66 00 	sts	0x0066, r1
			break; /* case 52 */
    19b4:	12 cc       	rjmp	.-2012   	; 0x11da <main+0x88>
			
			case 53:
				led7(53);
    19b6:	85 e3       	ldi	r24, 0x35	; 53
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				
				sensor = sensor_cmp();
    19be:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    19c2:	28 2e       	mov	r2, r24
    19c4:	80 93 6a 00 	sts	0x006A, r24
				if(((encoder_pulse > 75) || (timer_cnt > 175 * delay)) && ((sensor & 0b00110000 ) == 0b00110000))
    19c8:	80 91 66 00 	lds	r24, 0x0066
    19cc:	90 91 67 00 	lds	r25, 0x0067
    19d0:	8c 34       	cpi	r24, 0x4C	; 76
    19d2:	91 05       	cpc	r25, r1
    19d4:	08 f5       	brcc	.+66     	; 0x1a18 <main+0x8c6>
    19d6:	60 91 68 00 	lds	r22, 0x0068
    19da:	70 91 69 00 	lds	r23, 0x0069
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatunsisf>
    19e6:	4b 01       	movw	r8, r22
    19e8:	5c 01       	movw	r10, r24
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4f e2       	ldi	r20, 0x2F	; 47
    19f0:	53 e4       	ldi	r21, 0x43	; 67
    19f2:	60 91 6e 00 	lds	r22, 0x006E
    19f6:	70 91 6f 00 	lds	r23, 0x006F
    19fa:	80 91 70 00 	lds	r24, 0x0070
    19fe:	90 91 71 00 	lds	r25, 0x0071
    1a02:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__mulsf3>
    1a06:	9b 01       	movw	r18, r22
    1a08:	ac 01       	movw	r20, r24
    1a0a:	c5 01       	movw	r24, r10
    1a0c:	b4 01       	movw	r22, r8
    1a0e:	0e 94 57 10 	call	0x20ae	; 0x20ae <__gesf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	0c f0       	brlt	.+2      	; 0x1a18 <main+0x8c6>
    1a16:	e1 cb       	rjmp	.-2110   	; 0x11da <main+0x88>
    1a18:	82 2d       	mov	r24, r2
    1a1a:	80 73       	andi	r24, 0x30	; 48
    1a1c:	80 33       	cpi	r24, 0x30	; 48
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <main+0x8d0>
    1a20:	dc cb       	rjmp	.-2120   	; 0x11da <main+0x88>
				{
					pattern = 10;
    1a22:	70 92 60 00 	sts	0x0060, r7
    1a26:	f0 92 7e 00 	sts	0x007E, r15
    1a2a:	e0 92 7d 00 	sts	0x007D, r14
					set_encoder(-1);
					
					handle(35);
    1a2e:	83 e2       	ldi	r24, 0x23	; 35
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					speed(100, 70);
    1a36:	66 e4       	ldi	r22, 0x46	; 70
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	84 e6       	ldi	r24, 0x64	; 100
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
    1a42:	cb cb       	rjmp	.-2154   	; 0x11da <main+0x88>
				}
			break; /* case 53 */
			
			/* Chuyen lan phai */
			case 61:
				led7(61);
    1a44:	8d e3       	ldi	r24, 0x3D	; 61
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
    1a4c:	10 93 7e 00 	sts	0x007E, r17
    1a50:	00 93 7d 00 	sts	0x007D, r16
				set_encoder(8);
				sensor = sensor_cmp();
    1a54:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    1a58:	80 93 6a 00 	sts	0x006A, r24
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000))
    1a5c:	98 2f       	mov	r25, r24
    1a5e:	90 7e       	andi	r25, 0xE0	; 224
    1a60:	90 3e       	cpi	r25, 0xE0	; 224
    1a62:	39 f0       	breq	.+14     	; 0x1a72 <main+0x920>
    1a64:	98 2f       	mov	r25, r24
    1a66:	90 7f       	andi	r25, 0xF0	; 240
    1a68:	90 3f       	cpi	r25, 0xF0	; 240
    1a6a:	19 f0       	breq	.+6      	; 0x1a72 <main+0x920>
    1a6c:	88 7f       	andi	r24, 0xF8	; 248
    1a6e:	88 3f       	cpi	r24, 0xF8	; 248
    1a70:	39 f4       	brne	.+14     	; 0x1a80 <main+0x92e>
				{
					pattern = 21;
    1a72:	60 92 60 00 	sts	0x0060, r6
    1a76:	f0 92 7e 00 	sts	0x007E, r15
    1a7a:	e0 92 7d 00 	sts	0x007D, r14
    1a7e:	ad cb       	rjmp	.-2214   	; 0x11da <main+0x88>
					set_encoder(-1);
					break;
				}
				
				speed(50, 50);
    1a80:	62 e3       	ldi	r22, 0x32	; 50
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	82 e3       	ldi	r24, 0x32	; 50
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    1a8c:	80 91 66 00 	lds	r24, 0x0066
    1a90:	90 91 67 00 	lds	r25, 0x0067
    1a94:	49 97       	sbiw	r24, 0x19	; 25
    1a96:	38 f4       	brcc	.+14     	; 0x1aa6 <main+0x954>
    1a98:	80 91 68 00 	lds	r24, 0x0068
    1a9c:	90 91 69 00 	lds	r25, 0x0069
    1aa0:	88 37       	cpi	r24, 0x78	; 120
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	58 f0       	brcs	.+22     	; 0x1abc <main+0x96a>
				{
					pattern = 62;
    1aa6:	8e e3       	ldi	r24, 0x3E	; 62
    1aa8:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    1aac:	10 92 69 00 	sts	0x0069, r1
    1ab0:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse=0;
    1ab4:	10 92 67 00 	sts	0x0067, r1
    1ab8:	10 92 66 00 	sts	0x0066, r1
				}
				
				/* Nguoc lai thi chinh thang cho xe */
				switch (sensor_cmp() & 0b01111110)
    1abc:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    1ac0:	8e 77       	andi	r24, 0x7E	; 126
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	32 97       	sbiw	r30, 0x02	; 2
    1ac8:	ef 36       	cpi	r30, 0x6F	; 111
    1aca:	f1 05       	cpc	r31, r1
    1acc:	08 f0       	brcs	.+2      	; 0x1ad0 <main+0x97e>
    1ace:	85 cb       	rjmp	.-2294   	; 0x11da <main+0x88>
    1ad0:	e0 5c       	subi	r30, 0xC0	; 192
    1ad2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ad4:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle(0);
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1ae0:	7c cb       	rjmp	.-2312   	; 0x11da <main+0x88>
					
					case 0b00011100:
					case 0b00001000:
					handle(9);
    1ae2:	89 e0       	ldi	r24, 0x09	; 9
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1aea:	77 cb       	rjmp	.-2322   	; 0x11da <main+0x88>
					
					case 0b00001100:
					handle(17);
    1aec:	81 e1       	ldi	r24, 0x11	; 17
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1af4:	72 cb       	rjmp	.-2332   	; 0x11da <main+0x88>
					
					case 0b00001110:
					case 0b00000100:
					handle(31);
    1af6:	8f e1       	ldi	r24, 0x1F	; 31
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1afe:	6d cb       	rjmp	.-2342   	; 0x11da <main+0x88>
					
					case 0b00000110:
					handle(50);
    1b00:	82 e3       	ldi	r24, 0x32	; 50
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1b08:	68 cb       	rjmp	.-2352   	; 0x11da <main+0x88>
					
					case 0b00000010:
					handle(75);
    1b0a:	8b e4       	ldi	r24, 0x4B	; 75
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1b12:	63 cb       	rjmp	.-2362   	; 0x11da <main+0x88>
					
					case 0b00111000:
					case 0b00010000:
					handle(-9);
    1b14:	87 ef       	ldi	r24, 0xF7	; 247
    1b16:	9f ef       	ldi	r25, 0xFF	; 255
    1b18:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1b1c:	5e cb       	rjmp	.-2372   	; 0x11da <main+0x88>
					
					case 0b00110000:
					handle(-17);
    1b1e:	8f ee       	ldi	r24, 0xEF	; 239
    1b20:	9f ef       	ldi	r25, 0xFF	; 255
    1b22:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1b26:	59 cb       	rjmp	.-2382   	; 0x11da <main+0x88>
					
					case 0b01110000:
					case 0b00100000:
					handle(-31);
    1b28:	81 ee       	ldi	r24, 0xE1	; 225
    1b2a:	9f ef       	ldi	r25, 0xFF	; 255
    1b2c:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1b30:	54 cb       	rjmp	.-2392   	; 0x11da <main+0x88>
					
					case 0b01100000:
					handle(-50);
    1b32:	8e ec       	ldi	r24, 0xCE	; 206
    1b34:	9f ef       	ldi	r25, 0xFF	; 255
    1b36:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1b3a:	4f cb       	rjmp	.-2402   	; 0x11da <main+0x88>
					
					case 0b01000000:
					handle(-75);
    1b3c:	85 eb       	ldi	r24, 0xB5	; 181
    1b3e:	9f ef       	ldi	r25, 0xFF	; 255
    1b40:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					break;
    1b44:	4a cb       	rjmp	.-2412   	; 0x11da <main+0x88>
					break;
				}
			break; /* case 61 */
			
			case 62:
				led7(62);
    1b46:	8e e3       	ldi	r24, 0x3E	; 62
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				
				handle(35);
    1b4e:	83 e2       	ldi	r24, 0x23	; 35
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				speed( 100 ,80 );
    1b56:	60 e5       	ldi	r22, 0x50	; 80
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	84 e6       	ldi	r24, 0x64	; 100
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
				pattern = 63;
    1b62:	50 92 60 00 	sts	0x0060, r5
				timer_cnt = 0;
    1b66:	10 92 69 00 	sts	0x0069, r1
    1b6a:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    1b6e:	10 92 67 00 	sts	0x0067, r1
    1b72:	10 92 66 00 	sts	0x0066, r1
			break; /* case 62 */
    1b76:	31 cb       	rjmp	.-2462   	; 0x11da <main+0x88>
			
			case 63:
				led7(63);
    1b78:	8f e3       	ldi	r24, 0x3F	; 63
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
				
				sensor = sensor_cmp();
    1b80:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    1b84:	28 2e       	mov	r2, r24
    1b86:	80 93 6a 00 	sts	0x006A, r24
				if(((encoder_pulse > 75) || (timer_cnt > 175 * delay)) && ((sensor & 0b00001100 ) == 0b00001100))
    1b8a:	80 91 66 00 	lds	r24, 0x0066
    1b8e:	90 91 67 00 	lds	r25, 0x0067
    1b92:	8c 34       	cpi	r24, 0x4C	; 76
    1b94:	91 05       	cpc	r25, r1
    1b96:	08 f5       	brcc	.+66     	; 0x1bda <main+0xa88>
    1b98:	60 91 68 00 	lds	r22, 0x0068
    1b9c:	70 91 69 00 	lds	r23, 0x0069
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatunsisf>
    1ba8:	4b 01       	movw	r8, r22
    1baa:	5c 01       	movw	r10, r24
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	4f e2       	ldi	r20, 0x2F	; 47
    1bb2:	53 e4       	ldi	r21, 0x43	; 67
    1bb4:	60 91 6e 00 	lds	r22, 0x006E
    1bb8:	70 91 6f 00 	lds	r23, 0x006F
    1bbc:	80 91 70 00 	lds	r24, 0x0070
    1bc0:	90 91 71 00 	lds	r25, 0x0071
    1bc4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__mulsf3>
    1bc8:	9b 01       	movw	r18, r22
    1bca:	ac 01       	movw	r20, r24
    1bcc:	c5 01       	movw	r24, r10
    1bce:	b4 01       	movw	r22, r8
    1bd0:	0e 94 57 10 	call	0x20ae	; 0x20ae <__gesf2>
    1bd4:	18 16       	cp	r1, r24
    1bd6:	0c f0       	brlt	.+2      	; 0x1bda <main+0xa88>
    1bd8:	00 cb       	rjmp	.-2560   	; 0x11da <main+0x88>
    1bda:	82 2d       	mov	r24, r2
    1bdc:	8c 70       	andi	r24, 0x0C	; 12
    1bde:	8c 30       	cpi	r24, 0x0C	; 12
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <main+0xa92>
    1be2:	fb ca       	rjmp	.-2570   	; 0x11da <main+0x88>
				{
					pattern = 10;
    1be4:	70 92 60 00 	sts	0x0060, r7
    1be8:	f0 92 7e 00 	sts	0x007E, r15
    1bec:	e0 92 7d 00 	sts	0x007D, r14
					set_encoder(-1);
					
					handle(-40);
    1bf0:	88 ed       	ldi	r24, 0xD8	; 216
    1bf2:	9f ef       	ldi	r25, 0xFF	; 255
    1bf4:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
					speed(70, 100);
    1bf8:	64 e6       	ldi	r22, 0x64	; 100
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	86 e4       	ldi	r24, 0x46	; 70
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
    1c04:	ea ca       	rjmp	.-2604   	; 0x11da <main+0x88>
				}
			break; /* case 63 */
			
			/* No line */
			case 73:
			led7(73);
    1c06:	89 e4       	ldi	r24, 0x49	; 73
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
    1c0e:	d0 93 7e 00 	sts	0x007E, r29
    1c12:	c0 93 7d 00 	sts	0x007D, r28
			set_encoder(12);
			speed(60,60);
    1c16:	6c e3       	ldi	r22, 0x3C	; 60
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	8c e3       	ldi	r24, 0x3C	; 60
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
			sensor = sensor_cmp();
    1c22:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    1c26:	80 93 6a 00 	sts	0x006A, r24
			if ((sensor & 0b11000000) == 0b11000000) handle(40);
    1c2a:	80 7c       	andi	r24, 0xC0	; 192
    1c2c:	80 3c       	cpi	r24, 0xC0	; 192
    1c2e:	21 f4       	brne	.+8      	; 0x1c38 <main+0xae6>
    1c30:	88 e2       	ldi	r24, 0x28	; 40
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
			if ((sensor & 0b10000000) == 0b10000000) handle(30);
    1c38:	80 91 6a 00 	lds	r24, 0x006A
    1c3c:	88 23       	and	r24, r24
    1c3e:	24 f4       	brge	.+8      	; 0x1c48 <main+0xaf6>
    1c40:	8e e1       	ldi	r24, 0x1E	; 30
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
			if ((sensor & 0b00000011) == 0b00000011) handle(-40);
    1c48:	80 91 6a 00 	lds	r24, 0x006A
    1c4c:	83 70       	andi	r24, 0x03	; 3
    1c4e:	83 30       	cpi	r24, 0x03	; 3
    1c50:	21 f4       	brne	.+8      	; 0x1c5a <main+0xb08>
    1c52:	88 ed       	ldi	r24, 0xD8	; 216
    1c54:	9f ef       	ldi	r25, 0xFF	; 255
    1c56:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
			if ((sensor & 0b00000001) == 0b00000001) handle(-30);
    1c5a:	80 91 6a 00 	lds	r24, 0x006A
    1c5e:	80 ff       	sbrs	r24, 0
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <main+0xb18>
    1c62:	82 ee       	ldi	r24, 0xE2	; 226
    1c64:	9f ef       	ldi	r25, 0xFF	; 255
    1c66:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
			if ((sensor & 0b00111100) != 0)
    1c6a:	80 91 6a 00 	lds	r24, 0x006A
    1c6e:	8c 73       	andi	r24, 0x3C	; 60
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <main+0xb22>
    1c72:	b3 ca       	rjmp	.-2714   	; 0x11da <main+0x88>
			{
				pattern = 10;
    1c74:	70 92 60 00 	sts	0x0060, r7
    1c78:	f0 92 7e 00 	sts	0x007E, r15
    1c7c:	e0 92 7d 00 	sts	0x007D, r14
    1c80:	ac ca       	rjmp	.-2728   	; 0x11da <main+0x88>
			}
			break; /* case 73 */
			
			/* Bridge */
			case 99:
			led7(99);
    1c82:	83 e6       	ldi	r24, 0x63	; 99
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z4led7j>
			speed(-50, -50);
    1c8a:	6e ec       	ldi	r22, 0xCE	; 206
    1c8c:	7f ef       	ldi	r23, 0xFF	; 255
    1c8e:	8e ec       	ldi	r24, 0xCE	; 206
    1c90:	9f ef       	ldi	r25, 0xFF	; 255
    1c92:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
			
			/* Nguoc lai thi chinh thang cho xe */
			switch (sensor_cmp() & 0b01111110)
    1c96:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z10sensor_cmpv>
    1c9a:	8e 77       	andi	r24, 0x7E	; 126
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	32 97       	sbiw	r30, 0x02	; 2
    1ca2:	ef 36       	cpi	r30, 0x6F	; 111
    1ca4:	f1 05       	cpc	r31, r1
    1ca6:	d0 f5       	brcc	.+116    	; 0x1d1c <main+0xbca>
    1ca8:	e1 55       	subi	r30, 0x51	; 81
    1caa:	fd 4f       	sbci	r31, 0xFD	; 253
    1cac:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__tablejump2__>
			{
				case 0b01111110:
				break;
				
				case 0b00011000: /* Chay thang */
				handle(0);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				break;
    1cb8:	31 c0       	rjmp	.+98     	; 0x1d1c <main+0xbca>
				
				case 0b00011100:
				case 0b00001000:
				handle(9);
    1cba:	89 e0       	ldi	r24, 0x09	; 9
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				break;
    1cc2:	2c c0       	rjmp	.+88     	; 0x1d1c <main+0xbca>
				
				case 0b00001100:
				handle(17);
    1cc4:	81 e1       	ldi	r24, 0x11	; 17
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				break;
    1ccc:	27 c0       	rjmp	.+78     	; 0x1d1c <main+0xbca>
				
				case 0b00001110:
				case 0b00000100:
				handle(31);
    1cce:	8f e1       	ldi	r24, 0x1F	; 31
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				break;
    1cd6:	22 c0       	rjmp	.+68     	; 0x1d1c <main+0xbca>
				
				case 0b00000110:
				handle(50);
    1cd8:	82 e3       	ldi	r24, 0x32	; 50
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				break;
    1ce0:	1d c0       	rjmp	.+58     	; 0x1d1c <main+0xbca>
				
				case 0b00000010:
				handle(75);
    1ce2:	8b e4       	ldi	r24, 0x4B	; 75
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				break;
    1cea:	18 c0       	rjmp	.+48     	; 0x1d1c <main+0xbca>
				
				case 0b00111000:
				case 0b00010000:
				handle(-9);
    1cec:	87 ef       	ldi	r24, 0xF7	; 247
    1cee:	9f ef       	ldi	r25, 0xFF	; 255
    1cf0:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				break;
    1cf4:	13 c0       	rjmp	.+38     	; 0x1d1c <main+0xbca>
				
				case 0b00110000:
				handle(-17);
    1cf6:	8f ee       	ldi	r24, 0xEF	; 239
    1cf8:	9f ef       	ldi	r25, 0xFF	; 255
    1cfa:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				break;
    1cfe:	0e c0       	rjmp	.+28     	; 0x1d1c <main+0xbca>
				
				case 0b01110000:
				case 0b00100000:
				handle(-31);
    1d00:	81 ee       	ldi	r24, 0xE1	; 225
    1d02:	9f ef       	ldi	r25, 0xFF	; 255
    1d04:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				break;
    1d08:	09 c0       	rjmp	.+18     	; 0x1d1c <main+0xbca>
				
				case 0b01100000:
				handle(-50);
    1d0a:	8e ec       	ldi	r24, 0xCE	; 206
    1d0c:	9f ef       	ldi	r25, 0xFF	; 255
    1d0e:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				break;
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <main+0xbca>
				
				case 0b01000000:
				handle(-75);
    1d14:	85 eb       	ldi	r24, 0xB5	; 181
    1d16:	9f ef       	ldi	r25, 0xFF	; 255
    1d18:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6handlei>
				
				default:
				break;
			}
			
			if (speed_wait(3))
    1d1c:	80 91 61 00 	lds	r24, 0x0061
    1d20:	84 30       	cpi	r24, 0x04	; 4
    1d22:	08 f0       	brcs	.+2      	; 0x1d26 <main+0xbd4>
    1d24:	5a ca       	rjmp	.-2892   	; 0x11da <main+0x88>
			{
				speed(70, 70);
    1d26:	66 e4       	ldi	r22, 0x46	; 70
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	86 e4       	ldi	r24, 0x46	; 70
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z5speedii>
				pattern = 10;
    1d32:	70 92 60 00 	sts	0x0060, r7
    1d36:	51 ca       	rjmp	.-2910   	; 0x11da <main+0x88>
			};
			break; /* case 99 */
			
			default:
			pattern = 10;
    1d38:	70 92 60 00 	sts	0x0060, r7
			break; /* default */
    1d3c:	4e ca       	rjmp	.-2916   	; 0x11da <main+0x88>
					encoder_pulse = 0;
					break;
				}
				if ((get_speed() > 8) && (bridgeCounter > 500))
				{
					pattern = 99;
    1d3e:	83 e6       	ldi	r24, 0x63	; 99
    1d40:	80 93 60 00 	sts	0x0060, r24
    1d44:	91 ca       	rjmp	.-2782   	; 0x1268 <main+0x116>

00001d46 <__subsf3>:
    1d46:	50 58       	subi	r21, 0x80	; 128

00001d48 <__addsf3>:
    1d48:	bb 27       	eor	r27, r27
    1d4a:	aa 27       	eor	r26, r26
    1d4c:	0e d0       	rcall	.+28     	; 0x1d6a <__addsf3x>
    1d4e:	75 c1       	rjmp	.+746    	; 0x203a <__fp_round>
    1d50:	66 d1       	rcall	.+716    	; 0x201e <__fp_pscA>
    1d52:	30 f0       	brcs	.+12     	; 0x1d60 <__addsf3+0x18>
    1d54:	6b d1       	rcall	.+726    	; 0x202c <__fp_pscB>
    1d56:	20 f0       	brcs	.+8      	; 0x1d60 <__addsf3+0x18>
    1d58:	31 f4       	brne	.+12     	; 0x1d66 <__addsf3+0x1e>
    1d5a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d5c:	11 f4       	brne	.+4      	; 0x1d62 <__addsf3+0x1a>
    1d5e:	1e f4       	brtc	.+6      	; 0x1d66 <__addsf3+0x1e>
    1d60:	5b c1       	rjmp	.+694    	; 0x2018 <__fp_nan>
    1d62:	0e f4       	brtc	.+2      	; 0x1d66 <__addsf3+0x1e>
    1d64:	e0 95       	com	r30
    1d66:	e7 fb       	bst	r30, 7
    1d68:	51 c1       	rjmp	.+674    	; 0x200c <__fp_inf>

00001d6a <__addsf3x>:
    1d6a:	e9 2f       	mov	r30, r25
    1d6c:	77 d1       	rcall	.+750    	; 0x205c <__fp_split3>
    1d6e:	80 f3       	brcs	.-32     	; 0x1d50 <__addsf3+0x8>
    1d70:	ba 17       	cp	r27, r26
    1d72:	62 07       	cpc	r22, r18
    1d74:	73 07       	cpc	r23, r19
    1d76:	84 07       	cpc	r24, r20
    1d78:	95 07       	cpc	r25, r21
    1d7a:	18 f0       	brcs	.+6      	; 0x1d82 <__addsf3x+0x18>
    1d7c:	71 f4       	brne	.+28     	; 0x1d9a <__addsf3x+0x30>
    1d7e:	9e f5       	brtc	.+102    	; 0x1de6 <__addsf3x+0x7c>
    1d80:	8f c1       	rjmp	.+798    	; 0x20a0 <__fp_zero>
    1d82:	0e f4       	brtc	.+2      	; 0x1d86 <__addsf3x+0x1c>
    1d84:	e0 95       	com	r30
    1d86:	0b 2e       	mov	r0, r27
    1d88:	ba 2f       	mov	r27, r26
    1d8a:	a0 2d       	mov	r26, r0
    1d8c:	0b 01       	movw	r0, r22
    1d8e:	b9 01       	movw	r22, r18
    1d90:	90 01       	movw	r18, r0
    1d92:	0c 01       	movw	r0, r24
    1d94:	ca 01       	movw	r24, r20
    1d96:	a0 01       	movw	r20, r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	ff 27       	eor	r31, r31
    1d9c:	59 1b       	sub	r21, r25
    1d9e:	99 f0       	breq	.+38     	; 0x1dc6 <__addsf3x+0x5c>
    1da0:	59 3f       	cpi	r21, 0xF9	; 249
    1da2:	50 f4       	brcc	.+20     	; 0x1db8 <__addsf3x+0x4e>
    1da4:	50 3e       	cpi	r21, 0xE0	; 224
    1da6:	68 f1       	brcs	.+90     	; 0x1e02 <__addsf3x+0x98>
    1da8:	1a 16       	cp	r1, r26
    1daa:	f0 40       	sbci	r31, 0x00	; 0
    1dac:	a2 2f       	mov	r26, r18
    1dae:	23 2f       	mov	r18, r19
    1db0:	34 2f       	mov	r19, r20
    1db2:	44 27       	eor	r20, r20
    1db4:	58 5f       	subi	r21, 0xF8	; 248
    1db6:	f3 cf       	rjmp	.-26     	; 0x1d9e <__addsf3x+0x34>
    1db8:	46 95       	lsr	r20
    1dba:	37 95       	ror	r19
    1dbc:	27 95       	ror	r18
    1dbe:	a7 95       	ror	r26
    1dc0:	f0 40       	sbci	r31, 0x00	; 0
    1dc2:	53 95       	inc	r21
    1dc4:	c9 f7       	brne	.-14     	; 0x1db8 <__addsf3x+0x4e>
    1dc6:	7e f4       	brtc	.+30     	; 0x1de6 <__addsf3x+0x7c>
    1dc8:	1f 16       	cp	r1, r31
    1dca:	ba 0b       	sbc	r27, r26
    1dcc:	62 0b       	sbc	r22, r18
    1dce:	73 0b       	sbc	r23, r19
    1dd0:	84 0b       	sbc	r24, r20
    1dd2:	ba f0       	brmi	.+46     	; 0x1e02 <__addsf3x+0x98>
    1dd4:	91 50       	subi	r25, 0x01	; 1
    1dd6:	a1 f0       	breq	.+40     	; 0x1e00 <__addsf3x+0x96>
    1dd8:	ff 0f       	add	r31, r31
    1dda:	bb 1f       	adc	r27, r27
    1ddc:	66 1f       	adc	r22, r22
    1dde:	77 1f       	adc	r23, r23
    1de0:	88 1f       	adc	r24, r24
    1de2:	c2 f7       	brpl	.-16     	; 0x1dd4 <__addsf3x+0x6a>
    1de4:	0e c0       	rjmp	.+28     	; 0x1e02 <__addsf3x+0x98>
    1de6:	ba 0f       	add	r27, r26
    1de8:	62 1f       	adc	r22, r18
    1dea:	73 1f       	adc	r23, r19
    1dec:	84 1f       	adc	r24, r20
    1dee:	48 f4       	brcc	.+18     	; 0x1e02 <__addsf3x+0x98>
    1df0:	87 95       	ror	r24
    1df2:	77 95       	ror	r23
    1df4:	67 95       	ror	r22
    1df6:	b7 95       	ror	r27
    1df8:	f7 95       	ror	r31
    1dfa:	9e 3f       	cpi	r25, 0xFE	; 254
    1dfc:	08 f0       	brcs	.+2      	; 0x1e00 <__addsf3x+0x96>
    1dfe:	b3 cf       	rjmp	.-154    	; 0x1d66 <__addsf3+0x1e>
    1e00:	93 95       	inc	r25
    1e02:	88 0f       	add	r24, r24
    1e04:	08 f0       	brcs	.+2      	; 0x1e08 <__addsf3x+0x9e>
    1e06:	99 27       	eor	r25, r25
    1e08:	ee 0f       	add	r30, r30
    1e0a:	97 95       	ror	r25
    1e0c:	87 95       	ror	r24
    1e0e:	08 95       	ret

00001e10 <__cmpsf2>:
    1e10:	d9 d0       	rcall	.+434    	; 0x1fc4 <__fp_cmp>
    1e12:	08 f4       	brcc	.+2      	; 0x1e16 <__cmpsf2+0x6>
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	08 95       	ret

00001e18 <__divsf3>:
    1e18:	0c d0       	rcall	.+24     	; 0x1e32 <__divsf3x>
    1e1a:	0f c1       	rjmp	.+542    	; 0x203a <__fp_round>
    1e1c:	07 d1       	rcall	.+526    	; 0x202c <__fp_pscB>
    1e1e:	40 f0       	brcs	.+16     	; 0x1e30 <__divsf3+0x18>
    1e20:	fe d0       	rcall	.+508    	; 0x201e <__fp_pscA>
    1e22:	30 f0       	brcs	.+12     	; 0x1e30 <__divsf3+0x18>
    1e24:	21 f4       	brne	.+8      	; 0x1e2e <__divsf3+0x16>
    1e26:	5f 3f       	cpi	r21, 0xFF	; 255
    1e28:	19 f0       	breq	.+6      	; 0x1e30 <__divsf3+0x18>
    1e2a:	f0 c0       	rjmp	.+480    	; 0x200c <__fp_inf>
    1e2c:	51 11       	cpse	r21, r1
    1e2e:	39 c1       	rjmp	.+626    	; 0x20a2 <__fp_szero>
    1e30:	f3 c0       	rjmp	.+486    	; 0x2018 <__fp_nan>

00001e32 <__divsf3x>:
    1e32:	14 d1       	rcall	.+552    	; 0x205c <__fp_split3>
    1e34:	98 f3       	brcs	.-26     	; 0x1e1c <__divsf3+0x4>

00001e36 <__divsf3_pse>:
    1e36:	99 23       	and	r25, r25
    1e38:	c9 f3       	breq	.-14     	; 0x1e2c <__divsf3+0x14>
    1e3a:	55 23       	and	r21, r21
    1e3c:	b1 f3       	breq	.-20     	; 0x1e2a <__divsf3+0x12>
    1e3e:	95 1b       	sub	r25, r21
    1e40:	55 0b       	sbc	r21, r21
    1e42:	bb 27       	eor	r27, r27
    1e44:	aa 27       	eor	r26, r26
    1e46:	62 17       	cp	r22, r18
    1e48:	73 07       	cpc	r23, r19
    1e4a:	84 07       	cpc	r24, r20
    1e4c:	38 f0       	brcs	.+14     	; 0x1e5c <__divsf3_pse+0x26>
    1e4e:	9f 5f       	subi	r25, 0xFF	; 255
    1e50:	5f 4f       	sbci	r21, 0xFF	; 255
    1e52:	22 0f       	add	r18, r18
    1e54:	33 1f       	adc	r19, r19
    1e56:	44 1f       	adc	r20, r20
    1e58:	aa 1f       	adc	r26, r26
    1e5a:	a9 f3       	breq	.-22     	; 0x1e46 <__divsf3_pse+0x10>
    1e5c:	33 d0       	rcall	.+102    	; 0x1ec4 <__divsf3_pse+0x8e>
    1e5e:	0e 2e       	mov	r0, r30
    1e60:	3a f0       	brmi	.+14     	; 0x1e70 <__divsf3_pse+0x3a>
    1e62:	e0 e8       	ldi	r30, 0x80	; 128
    1e64:	30 d0       	rcall	.+96     	; 0x1ec6 <__divsf3_pse+0x90>
    1e66:	91 50       	subi	r25, 0x01	; 1
    1e68:	50 40       	sbci	r21, 0x00	; 0
    1e6a:	e6 95       	lsr	r30
    1e6c:	00 1c       	adc	r0, r0
    1e6e:	ca f7       	brpl	.-14     	; 0x1e62 <__divsf3_pse+0x2c>
    1e70:	29 d0       	rcall	.+82     	; 0x1ec4 <__divsf3_pse+0x8e>
    1e72:	fe 2f       	mov	r31, r30
    1e74:	27 d0       	rcall	.+78     	; 0x1ec4 <__divsf3_pse+0x8e>
    1e76:	66 0f       	add	r22, r22
    1e78:	77 1f       	adc	r23, r23
    1e7a:	88 1f       	adc	r24, r24
    1e7c:	bb 1f       	adc	r27, r27
    1e7e:	26 17       	cp	r18, r22
    1e80:	37 07       	cpc	r19, r23
    1e82:	48 07       	cpc	r20, r24
    1e84:	ab 07       	cpc	r26, r27
    1e86:	b0 e8       	ldi	r27, 0x80	; 128
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <__divsf3_pse+0x56>
    1e8a:	bb 0b       	sbc	r27, r27
    1e8c:	80 2d       	mov	r24, r0
    1e8e:	bf 01       	movw	r22, r30
    1e90:	ff 27       	eor	r31, r31
    1e92:	93 58       	subi	r25, 0x83	; 131
    1e94:	5f 4f       	sbci	r21, 0xFF	; 255
    1e96:	2a f0       	brmi	.+10     	; 0x1ea2 <__divsf3_pse+0x6c>
    1e98:	9e 3f       	cpi	r25, 0xFE	; 254
    1e9a:	51 05       	cpc	r21, r1
    1e9c:	68 f0       	brcs	.+26     	; 0x1eb8 <__divsf3_pse+0x82>
    1e9e:	b6 c0       	rjmp	.+364    	; 0x200c <__fp_inf>
    1ea0:	00 c1       	rjmp	.+512    	; 0x20a2 <__fp_szero>
    1ea2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea4:	ec f3       	brlt	.-6      	; 0x1ea0 <__divsf3_pse+0x6a>
    1ea6:	98 3e       	cpi	r25, 0xE8	; 232
    1ea8:	dc f3       	brlt	.-10     	; 0x1ea0 <__divsf3_pse+0x6a>
    1eaa:	86 95       	lsr	r24
    1eac:	77 95       	ror	r23
    1eae:	67 95       	ror	r22
    1eb0:	b7 95       	ror	r27
    1eb2:	f7 95       	ror	r31
    1eb4:	9f 5f       	subi	r25, 0xFF	; 255
    1eb6:	c9 f7       	brne	.-14     	; 0x1eaa <__divsf3_pse+0x74>
    1eb8:	88 0f       	add	r24, r24
    1eba:	91 1d       	adc	r25, r1
    1ebc:	96 95       	lsr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	97 f9       	bld	r25, 7
    1ec2:	08 95       	ret
    1ec4:	e1 e0       	ldi	r30, 0x01	; 1
    1ec6:	66 0f       	add	r22, r22
    1ec8:	77 1f       	adc	r23, r23
    1eca:	88 1f       	adc	r24, r24
    1ecc:	bb 1f       	adc	r27, r27
    1ece:	62 17       	cp	r22, r18
    1ed0:	73 07       	cpc	r23, r19
    1ed2:	84 07       	cpc	r24, r20
    1ed4:	ba 07       	cpc	r27, r26
    1ed6:	20 f0       	brcs	.+8      	; 0x1ee0 <__divsf3_pse+0xaa>
    1ed8:	62 1b       	sub	r22, r18
    1eda:	73 0b       	sbc	r23, r19
    1edc:	84 0b       	sbc	r24, r20
    1ede:	ba 0b       	sbc	r27, r26
    1ee0:	ee 1f       	adc	r30, r30
    1ee2:	88 f7       	brcc	.-30     	; 0x1ec6 <__divsf3_pse+0x90>
    1ee4:	e0 95       	com	r30
    1ee6:	08 95       	ret

00001ee8 <__fixsfsi>:
    1ee8:	04 d0       	rcall	.+8      	; 0x1ef2 <__fixunssfsi>
    1eea:	68 94       	set
    1eec:	b1 11       	cpse	r27, r1
    1eee:	d9 c0       	rjmp	.+434    	; 0x20a2 <__fp_szero>
    1ef0:	08 95       	ret

00001ef2 <__fixunssfsi>:
    1ef2:	bc d0       	rcall	.+376    	; 0x206c <__fp_splitA>
    1ef4:	88 f0       	brcs	.+34     	; 0x1f18 <__fixunssfsi+0x26>
    1ef6:	9f 57       	subi	r25, 0x7F	; 127
    1ef8:	90 f0       	brcs	.+36     	; 0x1f1e <__fixunssfsi+0x2c>
    1efa:	b9 2f       	mov	r27, r25
    1efc:	99 27       	eor	r25, r25
    1efe:	b7 51       	subi	r27, 0x17	; 23
    1f00:	a0 f0       	brcs	.+40     	; 0x1f2a <__fixunssfsi+0x38>
    1f02:	d1 f0       	breq	.+52     	; 0x1f38 <__fixunssfsi+0x46>
    1f04:	66 0f       	add	r22, r22
    1f06:	77 1f       	adc	r23, r23
    1f08:	88 1f       	adc	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	1a f0       	brmi	.+6      	; 0x1f14 <__fixunssfsi+0x22>
    1f0e:	ba 95       	dec	r27
    1f10:	c9 f7       	brne	.-14     	; 0x1f04 <__fixunssfsi+0x12>
    1f12:	12 c0       	rjmp	.+36     	; 0x1f38 <__fixunssfsi+0x46>
    1f14:	b1 30       	cpi	r27, 0x01	; 1
    1f16:	81 f0       	breq	.+32     	; 0x1f38 <__fixunssfsi+0x46>
    1f18:	c3 d0       	rcall	.+390    	; 0x20a0 <__fp_zero>
    1f1a:	b1 e0       	ldi	r27, 0x01	; 1
    1f1c:	08 95       	ret
    1f1e:	c0 c0       	rjmp	.+384    	; 0x20a0 <__fp_zero>
    1f20:	67 2f       	mov	r22, r23
    1f22:	78 2f       	mov	r23, r24
    1f24:	88 27       	eor	r24, r24
    1f26:	b8 5f       	subi	r27, 0xF8	; 248
    1f28:	39 f0       	breq	.+14     	; 0x1f38 <__fixunssfsi+0x46>
    1f2a:	b9 3f       	cpi	r27, 0xF9	; 249
    1f2c:	cc f3       	brlt	.-14     	; 0x1f20 <__fixunssfsi+0x2e>
    1f2e:	86 95       	lsr	r24
    1f30:	77 95       	ror	r23
    1f32:	67 95       	ror	r22
    1f34:	b3 95       	inc	r27
    1f36:	d9 f7       	brne	.-10     	; 0x1f2e <__fixunssfsi+0x3c>
    1f38:	3e f4       	brtc	.+14     	; 0x1f48 <__fixunssfsi+0x56>
    1f3a:	90 95       	com	r25
    1f3c:	80 95       	com	r24
    1f3e:	70 95       	com	r23
    1f40:	61 95       	neg	r22
    1f42:	7f 4f       	sbci	r23, 0xFF	; 255
    1f44:	8f 4f       	sbci	r24, 0xFF	; 255
    1f46:	9f 4f       	sbci	r25, 0xFF	; 255
    1f48:	08 95       	ret

00001f4a <__floatunsisf>:
    1f4a:	e8 94       	clt
    1f4c:	09 c0       	rjmp	.+18     	; 0x1f60 <__floatsisf+0x12>

00001f4e <__floatsisf>:
    1f4e:	97 fb       	bst	r25, 7
    1f50:	3e f4       	brtc	.+14     	; 0x1f60 <__floatsisf+0x12>
    1f52:	90 95       	com	r25
    1f54:	80 95       	com	r24
    1f56:	70 95       	com	r23
    1f58:	61 95       	neg	r22
    1f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f60:	99 23       	and	r25, r25
    1f62:	a9 f0       	breq	.+42     	; 0x1f8e <__floatsisf+0x40>
    1f64:	f9 2f       	mov	r31, r25
    1f66:	96 e9       	ldi	r25, 0x96	; 150
    1f68:	bb 27       	eor	r27, r27
    1f6a:	93 95       	inc	r25
    1f6c:	f6 95       	lsr	r31
    1f6e:	87 95       	ror	r24
    1f70:	77 95       	ror	r23
    1f72:	67 95       	ror	r22
    1f74:	b7 95       	ror	r27
    1f76:	f1 11       	cpse	r31, r1
    1f78:	f8 cf       	rjmp	.-16     	; 0x1f6a <__floatsisf+0x1c>
    1f7a:	fa f4       	brpl	.+62     	; 0x1fba <__floatsisf+0x6c>
    1f7c:	bb 0f       	add	r27, r27
    1f7e:	11 f4       	brne	.+4      	; 0x1f84 <__floatsisf+0x36>
    1f80:	60 ff       	sbrs	r22, 0
    1f82:	1b c0       	rjmp	.+54     	; 0x1fba <__floatsisf+0x6c>
    1f84:	6f 5f       	subi	r22, 0xFF	; 255
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	16 c0       	rjmp	.+44     	; 0x1fba <__floatsisf+0x6c>
    1f8e:	88 23       	and	r24, r24
    1f90:	11 f0       	breq	.+4      	; 0x1f96 <__floatsisf+0x48>
    1f92:	96 e9       	ldi	r25, 0x96	; 150
    1f94:	11 c0       	rjmp	.+34     	; 0x1fb8 <__floatsisf+0x6a>
    1f96:	77 23       	and	r23, r23
    1f98:	21 f0       	breq	.+8      	; 0x1fa2 <__floatsisf+0x54>
    1f9a:	9e e8       	ldi	r25, 0x8E	; 142
    1f9c:	87 2f       	mov	r24, r23
    1f9e:	76 2f       	mov	r23, r22
    1fa0:	05 c0       	rjmp	.+10     	; 0x1fac <__floatsisf+0x5e>
    1fa2:	66 23       	and	r22, r22
    1fa4:	71 f0       	breq	.+28     	; 0x1fc2 <__floatsisf+0x74>
    1fa6:	96 e8       	ldi	r25, 0x86	; 134
    1fa8:	86 2f       	mov	r24, r22
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	2a f0       	brmi	.+10     	; 0x1fba <__floatsisf+0x6c>
    1fb0:	9a 95       	dec	r25
    1fb2:	66 0f       	add	r22, r22
    1fb4:	77 1f       	adc	r23, r23
    1fb6:	88 1f       	adc	r24, r24
    1fb8:	da f7       	brpl	.-10     	; 0x1fb0 <__floatsisf+0x62>
    1fba:	88 0f       	add	r24, r24
    1fbc:	96 95       	lsr	r25
    1fbe:	87 95       	ror	r24
    1fc0:	97 f9       	bld	r25, 7
    1fc2:	08 95       	ret

00001fc4 <__fp_cmp>:
    1fc4:	99 0f       	add	r25, r25
    1fc6:	00 08       	sbc	r0, r0
    1fc8:	55 0f       	add	r21, r21
    1fca:	aa 0b       	sbc	r26, r26
    1fcc:	e0 e8       	ldi	r30, 0x80	; 128
    1fce:	fe ef       	ldi	r31, 0xFE	; 254
    1fd0:	16 16       	cp	r1, r22
    1fd2:	17 06       	cpc	r1, r23
    1fd4:	e8 07       	cpc	r30, r24
    1fd6:	f9 07       	cpc	r31, r25
    1fd8:	c0 f0       	brcs	.+48     	; 0x200a <__fp_cmp+0x46>
    1fda:	12 16       	cp	r1, r18
    1fdc:	13 06       	cpc	r1, r19
    1fde:	e4 07       	cpc	r30, r20
    1fe0:	f5 07       	cpc	r31, r21
    1fe2:	98 f0       	brcs	.+38     	; 0x200a <__fp_cmp+0x46>
    1fe4:	62 1b       	sub	r22, r18
    1fe6:	73 0b       	sbc	r23, r19
    1fe8:	84 0b       	sbc	r24, r20
    1fea:	95 0b       	sbc	r25, r21
    1fec:	39 f4       	brne	.+14     	; 0x1ffc <__fp_cmp+0x38>
    1fee:	0a 26       	eor	r0, r26
    1ff0:	61 f0       	breq	.+24     	; 0x200a <__fp_cmp+0x46>
    1ff2:	23 2b       	or	r18, r19
    1ff4:	24 2b       	or	r18, r20
    1ff6:	25 2b       	or	r18, r21
    1ff8:	21 f4       	brne	.+8      	; 0x2002 <__fp_cmp+0x3e>
    1ffa:	08 95       	ret
    1ffc:	0a 26       	eor	r0, r26
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <__fp_cmp+0x3e>
    2000:	a1 40       	sbci	r26, 0x01	; 1
    2002:	a6 95       	lsr	r26
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	81 1d       	adc	r24, r1
    2008:	81 1d       	adc	r24, r1
    200a:	08 95       	ret

0000200c <__fp_inf>:
    200c:	97 f9       	bld	r25, 7
    200e:	9f 67       	ori	r25, 0x7F	; 127
    2010:	80 e8       	ldi	r24, 0x80	; 128
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	08 95       	ret

00002018 <__fp_nan>:
    2018:	9f ef       	ldi	r25, 0xFF	; 255
    201a:	80 ec       	ldi	r24, 0xC0	; 192
    201c:	08 95       	ret

0000201e <__fp_pscA>:
    201e:	00 24       	eor	r0, r0
    2020:	0a 94       	dec	r0
    2022:	16 16       	cp	r1, r22
    2024:	17 06       	cpc	r1, r23
    2026:	18 06       	cpc	r1, r24
    2028:	09 06       	cpc	r0, r25
    202a:	08 95       	ret

0000202c <__fp_pscB>:
    202c:	00 24       	eor	r0, r0
    202e:	0a 94       	dec	r0
    2030:	12 16       	cp	r1, r18
    2032:	13 06       	cpc	r1, r19
    2034:	14 06       	cpc	r1, r20
    2036:	05 06       	cpc	r0, r21
    2038:	08 95       	ret

0000203a <__fp_round>:
    203a:	09 2e       	mov	r0, r25
    203c:	03 94       	inc	r0
    203e:	00 0c       	add	r0, r0
    2040:	11 f4       	brne	.+4      	; 0x2046 <__fp_round+0xc>
    2042:	88 23       	and	r24, r24
    2044:	52 f0       	brmi	.+20     	; 0x205a <__fp_round+0x20>
    2046:	bb 0f       	add	r27, r27
    2048:	40 f4       	brcc	.+16     	; 0x205a <__fp_round+0x20>
    204a:	bf 2b       	or	r27, r31
    204c:	11 f4       	brne	.+4      	; 0x2052 <__fp_round+0x18>
    204e:	60 ff       	sbrs	r22, 0
    2050:	04 c0       	rjmp	.+8      	; 0x205a <__fp_round+0x20>
    2052:	6f 5f       	subi	r22, 0xFF	; 255
    2054:	7f 4f       	sbci	r23, 0xFF	; 255
    2056:	8f 4f       	sbci	r24, 0xFF	; 255
    2058:	9f 4f       	sbci	r25, 0xFF	; 255
    205a:	08 95       	ret

0000205c <__fp_split3>:
    205c:	57 fd       	sbrc	r21, 7
    205e:	90 58       	subi	r25, 0x80	; 128
    2060:	44 0f       	add	r20, r20
    2062:	55 1f       	adc	r21, r21
    2064:	59 f0       	breq	.+22     	; 0x207c <__fp_splitA+0x10>
    2066:	5f 3f       	cpi	r21, 0xFF	; 255
    2068:	71 f0       	breq	.+28     	; 0x2086 <__fp_splitA+0x1a>
    206a:	47 95       	ror	r20

0000206c <__fp_splitA>:
    206c:	88 0f       	add	r24, r24
    206e:	97 fb       	bst	r25, 7
    2070:	99 1f       	adc	r25, r25
    2072:	61 f0       	breq	.+24     	; 0x208c <__fp_splitA+0x20>
    2074:	9f 3f       	cpi	r25, 0xFF	; 255
    2076:	79 f0       	breq	.+30     	; 0x2096 <__fp_splitA+0x2a>
    2078:	87 95       	ror	r24
    207a:	08 95       	ret
    207c:	12 16       	cp	r1, r18
    207e:	13 06       	cpc	r1, r19
    2080:	14 06       	cpc	r1, r20
    2082:	55 1f       	adc	r21, r21
    2084:	f2 cf       	rjmp	.-28     	; 0x206a <__fp_split3+0xe>
    2086:	46 95       	lsr	r20
    2088:	f1 df       	rcall	.-30     	; 0x206c <__fp_splitA>
    208a:	08 c0       	rjmp	.+16     	; 0x209c <__fp_splitA+0x30>
    208c:	16 16       	cp	r1, r22
    208e:	17 06       	cpc	r1, r23
    2090:	18 06       	cpc	r1, r24
    2092:	99 1f       	adc	r25, r25
    2094:	f1 cf       	rjmp	.-30     	; 0x2078 <__fp_splitA+0xc>
    2096:	86 95       	lsr	r24
    2098:	71 05       	cpc	r23, r1
    209a:	61 05       	cpc	r22, r1
    209c:	08 94       	sec
    209e:	08 95       	ret

000020a0 <__fp_zero>:
    20a0:	e8 94       	clt

000020a2 <__fp_szero>:
    20a2:	bb 27       	eor	r27, r27
    20a4:	66 27       	eor	r22, r22
    20a6:	77 27       	eor	r23, r23
    20a8:	cb 01       	movw	r24, r22
    20aa:	97 f9       	bld	r25, 7
    20ac:	08 95       	ret

000020ae <__gesf2>:
    20ae:	8a df       	rcall	.-236    	; 0x1fc4 <__fp_cmp>
    20b0:	08 f4       	brcc	.+2      	; 0x20b4 <__gesf2+0x6>
    20b2:	8f ef       	ldi	r24, 0xFF	; 255
    20b4:	08 95       	ret

000020b6 <__mulsf3>:
    20b6:	0b d0       	rcall	.+22     	; 0x20ce <__mulsf3x>
    20b8:	c0 cf       	rjmp	.-128    	; 0x203a <__fp_round>
    20ba:	b1 df       	rcall	.-158    	; 0x201e <__fp_pscA>
    20bc:	28 f0       	brcs	.+10     	; 0x20c8 <__mulsf3+0x12>
    20be:	b6 df       	rcall	.-148    	; 0x202c <__fp_pscB>
    20c0:	18 f0       	brcs	.+6      	; 0x20c8 <__mulsf3+0x12>
    20c2:	95 23       	and	r25, r21
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <__mulsf3+0x12>
    20c6:	a2 cf       	rjmp	.-188    	; 0x200c <__fp_inf>
    20c8:	a7 cf       	rjmp	.-178    	; 0x2018 <__fp_nan>
    20ca:	11 24       	eor	r1, r1
    20cc:	ea cf       	rjmp	.-44     	; 0x20a2 <__fp_szero>

000020ce <__mulsf3x>:
    20ce:	c6 df       	rcall	.-116    	; 0x205c <__fp_split3>
    20d0:	a0 f3       	brcs	.-24     	; 0x20ba <__mulsf3+0x4>

000020d2 <__mulsf3_pse>:
    20d2:	95 9f       	mul	r25, r21
    20d4:	d1 f3       	breq	.-12     	; 0x20ca <__mulsf3+0x14>
    20d6:	95 0f       	add	r25, r21
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	55 1f       	adc	r21, r21
    20dc:	62 9f       	mul	r22, r18
    20de:	f0 01       	movw	r30, r0
    20e0:	72 9f       	mul	r23, r18
    20e2:	bb 27       	eor	r27, r27
    20e4:	f0 0d       	add	r31, r0
    20e6:	b1 1d       	adc	r27, r1
    20e8:	63 9f       	mul	r22, r19
    20ea:	aa 27       	eor	r26, r26
    20ec:	f0 0d       	add	r31, r0
    20ee:	b1 1d       	adc	r27, r1
    20f0:	aa 1f       	adc	r26, r26
    20f2:	64 9f       	mul	r22, r20
    20f4:	66 27       	eor	r22, r22
    20f6:	b0 0d       	add	r27, r0
    20f8:	a1 1d       	adc	r26, r1
    20fa:	66 1f       	adc	r22, r22
    20fc:	82 9f       	mul	r24, r18
    20fe:	22 27       	eor	r18, r18
    2100:	b0 0d       	add	r27, r0
    2102:	a1 1d       	adc	r26, r1
    2104:	62 1f       	adc	r22, r18
    2106:	73 9f       	mul	r23, r19
    2108:	b0 0d       	add	r27, r0
    210a:	a1 1d       	adc	r26, r1
    210c:	62 1f       	adc	r22, r18
    210e:	83 9f       	mul	r24, r19
    2110:	a0 0d       	add	r26, r0
    2112:	61 1d       	adc	r22, r1
    2114:	22 1f       	adc	r18, r18
    2116:	74 9f       	mul	r23, r20
    2118:	33 27       	eor	r19, r19
    211a:	a0 0d       	add	r26, r0
    211c:	61 1d       	adc	r22, r1
    211e:	23 1f       	adc	r18, r19
    2120:	84 9f       	mul	r24, r20
    2122:	60 0d       	add	r22, r0
    2124:	21 1d       	adc	r18, r1
    2126:	82 2f       	mov	r24, r18
    2128:	76 2f       	mov	r23, r22
    212a:	6a 2f       	mov	r22, r26
    212c:	11 24       	eor	r1, r1
    212e:	9f 57       	subi	r25, 0x7F	; 127
    2130:	50 40       	sbci	r21, 0x00	; 0
    2132:	8a f0       	brmi	.+34     	; 0x2156 <__mulsf3_pse+0x84>
    2134:	e1 f0       	breq	.+56     	; 0x216e <__mulsf3_pse+0x9c>
    2136:	88 23       	and	r24, r24
    2138:	4a f0       	brmi	.+18     	; 0x214c <__mulsf3_pse+0x7a>
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	bb 1f       	adc	r27, r27
    2140:	66 1f       	adc	r22, r22
    2142:	77 1f       	adc	r23, r23
    2144:	88 1f       	adc	r24, r24
    2146:	91 50       	subi	r25, 0x01	; 1
    2148:	50 40       	sbci	r21, 0x00	; 0
    214a:	a9 f7       	brne	.-22     	; 0x2136 <__mulsf3_pse+0x64>
    214c:	9e 3f       	cpi	r25, 0xFE	; 254
    214e:	51 05       	cpc	r21, r1
    2150:	70 f0       	brcs	.+28     	; 0x216e <__mulsf3_pse+0x9c>
    2152:	5c cf       	rjmp	.-328    	; 0x200c <__fp_inf>
    2154:	a6 cf       	rjmp	.-180    	; 0x20a2 <__fp_szero>
    2156:	5f 3f       	cpi	r21, 0xFF	; 255
    2158:	ec f3       	brlt	.-6      	; 0x2154 <__mulsf3_pse+0x82>
    215a:	98 3e       	cpi	r25, 0xE8	; 232
    215c:	dc f3       	brlt	.-10     	; 0x2154 <__mulsf3_pse+0x82>
    215e:	86 95       	lsr	r24
    2160:	77 95       	ror	r23
    2162:	67 95       	ror	r22
    2164:	b7 95       	ror	r27
    2166:	f7 95       	ror	r31
    2168:	e7 95       	ror	r30
    216a:	9f 5f       	subi	r25, 0xFF	; 255
    216c:	c1 f7       	brne	.-16     	; 0x215e <__mulsf3_pse+0x8c>
    216e:	fe 2b       	or	r31, r30
    2170:	88 0f       	add	r24, r24
    2172:	91 1d       	adc	r25, r1
    2174:	96 95       	lsr	r25
    2176:	87 95       	ror	r24
    2178:	97 f9       	bld	r25, 7
    217a:	08 95       	ret

0000217c <__divmodhi4>:
    217c:	97 fb       	bst	r25, 7
    217e:	07 2e       	mov	r0, r23
    2180:	16 f4       	brtc	.+4      	; 0x2186 <__divmodhi4+0xa>
    2182:	00 94       	com	r0
    2184:	07 d0       	rcall	.+14     	; 0x2194 <__divmodhi4_neg1>
    2186:	77 fd       	sbrc	r23, 7
    2188:	09 d0       	rcall	.+18     	; 0x219c <__divmodhi4_neg2>
    218a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__udivmodhi4>
    218e:	07 fc       	sbrc	r0, 7
    2190:	05 d0       	rcall	.+10     	; 0x219c <__divmodhi4_neg2>
    2192:	3e f4       	brtc	.+14     	; 0x21a2 <__divmodhi4_exit>

00002194 <__divmodhi4_neg1>:
    2194:	90 95       	com	r25
    2196:	81 95       	neg	r24
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	08 95       	ret

0000219c <__divmodhi4_neg2>:
    219c:	70 95       	com	r23
    219e:	61 95       	neg	r22
    21a0:	7f 4f       	sbci	r23, 0xFF	; 255

000021a2 <__divmodhi4_exit>:
    21a2:	08 95       	ret

000021a4 <__tablejump2__>:
    21a4:	ee 0f       	add	r30, r30
    21a6:	ff 1f       	adc	r31, r31

000021a8 <__tablejump__>:
    21a8:	05 90       	lpm	r0, Z+
    21aa:	f4 91       	lpm	r31, Z
    21ac:	e0 2d       	mov	r30, r0
    21ae:	09 94       	ijmp

000021b0 <__umulhisi3>:
    21b0:	a2 9f       	mul	r26, r18
    21b2:	b0 01       	movw	r22, r0
    21b4:	b3 9f       	mul	r27, r19
    21b6:	c0 01       	movw	r24, r0
    21b8:	a3 9f       	mul	r26, r19
    21ba:	70 0d       	add	r23, r0
    21bc:	81 1d       	adc	r24, r1
    21be:	11 24       	eor	r1, r1
    21c0:	91 1d       	adc	r25, r1
    21c2:	b2 9f       	mul	r27, r18
    21c4:	70 0d       	add	r23, r0
    21c6:	81 1d       	adc	r24, r1
    21c8:	11 24       	eor	r1, r1
    21ca:	91 1d       	adc	r25, r1
    21cc:	08 95       	ret

000021ce <__udivmodhi4>:
    21ce:	aa 1b       	sub	r26, r26
    21d0:	bb 1b       	sub	r27, r27
    21d2:	51 e1       	ldi	r21, 0x11	; 17
    21d4:	07 c0       	rjmp	.+14     	; 0x21e4 <__udivmodhi4_ep>

000021d6 <__udivmodhi4_loop>:
    21d6:	aa 1f       	adc	r26, r26
    21d8:	bb 1f       	adc	r27, r27
    21da:	a6 17       	cp	r26, r22
    21dc:	b7 07       	cpc	r27, r23
    21de:	10 f0       	brcs	.+4      	; 0x21e4 <__udivmodhi4_ep>
    21e0:	a6 1b       	sub	r26, r22
    21e2:	b7 0b       	sbc	r27, r23

000021e4 <__udivmodhi4_ep>:
    21e4:	88 1f       	adc	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	5a 95       	dec	r21
    21ea:	a9 f7       	brne	.-22     	; 0x21d6 <__udivmodhi4_loop>
    21ec:	80 95       	com	r24
    21ee:	90 95       	com	r25
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	08 95       	ret

000021f6 <__eerd_word_m16>:
    21f6:	a8 e1       	ldi	r26, 0x18	; 24
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	42 e0       	ldi	r20, 0x02	; 2
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__eerd_blraw_m16>

00002202 <__eewr_word_m16>:
    2202:	0e 94 16 11 	call	0x222c	; 0x222c <__eewr_byte_m16>
    2206:	27 2f       	mov	r18, r23
    2208:	0c 94 17 11 	jmp	0x222e	; 0x222e <__eewr_r18_m16>

0000220c <__eerd_block_m16>:
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22

00002210 <__eerd_blraw_m16>:
    2210:	fc 01       	movw	r30, r24
    2212:	e1 99       	sbic	0x1c, 1	; 28
    2214:	fe cf       	rjmp	.-4      	; 0x2212 <__eerd_blraw_m16+0x2>
    2216:	06 c0       	rjmp	.+12     	; 0x2224 <__eerd_blraw_m16+0x14>
    2218:	ff bb       	out	0x1f, r31	; 31
    221a:	ee bb       	out	0x1e, r30	; 30
    221c:	e0 9a       	sbi	0x1c, 0	; 28
    221e:	31 96       	adiw	r30, 0x01	; 1
    2220:	0d b2       	in	r0, 0x1d	; 29
    2222:	0d 92       	st	X+, r0
    2224:	41 50       	subi	r20, 0x01	; 1
    2226:	50 40       	sbci	r21, 0x00	; 0
    2228:	b8 f7       	brcc	.-18     	; 0x2218 <__eerd_blraw_m16+0x8>
    222a:	08 95       	ret

0000222c <__eewr_byte_m16>:
    222c:	26 2f       	mov	r18, r22

0000222e <__eewr_r18_m16>:
    222e:	e1 99       	sbic	0x1c, 1	; 28
    2230:	fe cf       	rjmp	.-4      	; 0x222e <__eewr_r18_m16>
    2232:	9f bb       	out	0x1f, r25	; 31
    2234:	8e bb       	out	0x1e, r24	; 30
    2236:	2d bb       	out	0x1d, r18	; 29
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	e2 9a       	sbi	0x1c, 2	; 28
    223e:	e1 9a       	sbi	0x1c, 1	; 28
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	08 95       	ret

00002246 <_exit>:
    2246:	f8 94       	cli

00002248 <__stop_program>:
    2248:	ff cf       	rjmp	.-2      	; 0x2248 <__stop_program>
