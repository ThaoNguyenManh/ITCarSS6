
Ver1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001c24  00001cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  00800062  00800062  00001cba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019a7  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000042a  00000000  00000000  00003799  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000754  00000000  00000000  00003bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00004318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b9  00000000  00000000  00004678  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000089c  00000000  00000000  00004c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000054cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__ctors_end>
       4:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__vector_1>
       8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
       c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      10:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      14:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      18:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      1c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      20:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      24:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      28:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      2c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      30:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      34:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      38:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      3c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      40:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      44:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      48:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      4c:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__vector_19>
      50:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      54:	39 07       	cpc	r19, r25
      56:	f1 07       	cpc	r31, r17
      58:	51 08       	sbc	r5, r1
      5a:	8d 0b       	sbc	r24, r29
      5c:	8d 0b       	sbc	r24, r29
      5e:	8d 0b       	sbc	r24, r29
      60:	8d 0b       	sbc	r24, r29
      62:	8d 0b       	sbc	r24, r29
      64:	8d 0b       	sbc	r24, r29
      66:	8d 0b       	sbc	r24, r29
      68:	8d 0b       	sbc	r24, r29
      6a:	ab 08       	sbc	r10, r11
      6c:	c5 08       	sbc	r12, r5
      6e:	23 09       	sbc	r18, r3
      70:	8d 0b       	sbc	r24, r29
      72:	8d 0b       	sbc	r24, r29
      74:	c6 09       	sbc	r28, r6
      76:	df 09       	sbc	r29, r15
      78:	8d 0b       	sbc	r24, r29
      7a:	8d 0b       	sbc	r24, r29
      7c:	8d 0b       	sbc	r24, r29
      7e:	f8 09       	sbc	r31, r8
      80:	0f 0a       	sbc	r0, r31
      82:	8d 0b       	sbc	r24, r29
      84:	8d 0b       	sbc	r24, r29
      86:	8d 0b       	sbc	r24, r29
      88:	8d 0b       	sbc	r24, r29
      8a:	8d 0b       	sbc	r24, r29
      8c:	8d 0b       	sbc	r24, r29
      8e:	8d 0b       	sbc	r24, r29
      90:	8d 0b       	sbc	r24, r29
      92:	1e 0a       	sbc	r1, r30
      94:	31 0a       	sbc	r3, r17
      96:	8d 0b       	sbc	r24, r29
      98:	8d 0b       	sbc	r24, r29
      9a:	8d 0b       	sbc	r24, r29
      9c:	8d 0b       	sbc	r24, r29
      9e:	8d 0b       	sbc	r24, r29
      a0:	8d 0b       	sbc	r24, r29
      a2:	8d 0b       	sbc	r24, r29
      a4:	8d 0b       	sbc	r24, r29
      a6:	40 0a       	sbc	r4, r16
      a8:	76 0a       	sbc	r7, r22
      aa:	8f 0a       	sbc	r8, r31
      ac:	8d 0b       	sbc	r24, r29
      ae:	8d 0b       	sbc	r24, r29
      b0:	8d 0b       	sbc	r24, r29
      b2:	8d 0b       	sbc	r24, r29
      b4:	8d 0b       	sbc	r24, r29
      b6:	8d 0b       	sbc	r24, r29
      b8:	8d 0b       	sbc	r24, r29
      ba:	c8 0a       	sbc	r12, r24
      bc:	fd 0a       	sbc	r15, r29
      be:	16 0b       	sbc	r17, r22
      c0:	8d 0b       	sbc	r24, r29
      c2:	8d 0b       	sbc	r24, r29
      c4:	8d 0b       	sbc	r24, r29
      c6:	8d 0b       	sbc	r24, r29
      c8:	8d 0b       	sbc	r24, r29
      ca:	8d 0b       	sbc	r24, r29
      cc:	8d 0b       	sbc	r24, r29
      ce:	8d 0b       	sbc	r24, r29
      d0:	8d 0b       	sbc	r24, r29
      d2:	4f 0b       	sbc	r20, r31
      d4:	a9 07       	cpc	r26, r25
      d6:	2c 07       	cpc	r18, r28
      d8:	93 07       	cpc	r25, r19
      da:	2c 07       	cpc	r18, r28
      dc:	9e 07       	cpc	r25, r30
      de:	2c 07       	cpc	r18, r28
      e0:	7d 07       	cpc	r23, r29
      e2:	2c 07       	cpc	r18, r28
      e4:	2c 07       	cpc	r18, r28
      e6:	2c 07       	cpc	r18, r28
      e8:	88 07       	cpc	r24, r24
      ea:	2c 07       	cpc	r18, r28
      ec:	93 07       	cpc	r25, r19
      ee:	2c 07       	cpc	r18, r28
      f0:	b7 07       	cpc	r27, r23
      f2:	2c 07       	cpc	r18, r28
      f4:	2c 07       	cpc	r18, r28
      f6:	2c 07       	cpc	r18, r28
      f8:	2c 07       	cpc	r18, r28
      fa:	2c 07       	cpc	r18, r28
      fc:	2c 07       	cpc	r18, r28
      fe:	2c 07       	cpc	r18, r28
     100:	72 07       	cpc	r23, r18
     102:	2c 07       	cpc	r18, r28
     104:	2c 07       	cpc	r18, r28
     106:	2c 07       	cpc	r18, r28
     108:	7d 07       	cpc	r23, r29
     10a:	2c 07       	cpc	r18, r28
     10c:	2c 07       	cpc	r18, r28
     10e:	2c 07       	cpc	r18, r28
     110:	cd 07       	cpc	r28, r29
     112:	2c 07       	cpc	r18, r28
     114:	2c 07       	cpc	r18, r28
     116:	2c 07       	cpc	r18, r28
     118:	2c 07       	cpc	r18, r28
     11a:	2c 07       	cpc	r18, r28
     11c:	2c 07       	cpc	r18, r28
     11e:	2c 07       	cpc	r18, r28
     120:	2c 07       	cpc	r18, r28
     122:	2c 07       	cpc	r18, r28
     124:	2c 07       	cpc	r18, r28
     126:	2c 07       	cpc	r18, r28
     128:	2c 07       	cpc	r18, r28
     12a:	2c 07       	cpc	r18, r28
     12c:	2c 07       	cpc	r18, r28
     12e:	2c 07       	cpc	r18, r28
     130:	c2 07       	cpc	r28, r18
     132:	2c 07       	cpc	r18, r28
     134:	2c 07       	cpc	r18, r28
     136:	2c 07       	cpc	r18, r28
     138:	2c 07       	cpc	r18, r28
     13a:	2c 07       	cpc	r18, r28
     13c:	2c 07       	cpc	r18, r28
     13e:	2c 07       	cpc	r18, r28
     140:	b7 07       	cpc	r27, r23
     142:	2c 07       	cpc	r18, r28
     144:	2c 07       	cpc	r18, r28
     146:	2c 07       	cpc	r18, r28
     148:	2c 07       	cpc	r18, r28
     14a:	2c 07       	cpc	r18, r28
     14c:	2c 07       	cpc	r18, r28
     14e:	2c 07       	cpc	r18, r28
     150:	e3 07       	cpc	r30, r19
     152:	2c 07       	cpc	r18, r28
     154:	2c 07       	cpc	r18, r28
     156:	2c 07       	cpc	r18, r28
     158:	2c 07       	cpc	r18, r28
     15a:	2c 07       	cpc	r18, r28
     15c:	2c 07       	cpc	r18, r28
     15e:	2c 07       	cpc	r18, r28
     160:	2c 07       	cpc	r18, r28
     162:	2c 07       	cpc	r18, r28
     164:	2c 07       	cpc	r18, r28
     166:	2c 07       	cpc	r18, r28
     168:	2c 07       	cpc	r18, r28
     16a:	2c 07       	cpc	r18, r28
     16c:	2c 07       	cpc	r18, r28
     16e:	2c 07       	cpc	r18, r28
     170:	2c 07       	cpc	r18, r28
     172:	2c 07       	cpc	r18, r28
     174:	2c 07       	cpc	r18, r28
     176:	2c 07       	cpc	r18, r28
     178:	2c 07       	cpc	r18, r28
     17a:	2c 07       	cpc	r18, r28
     17c:	2c 07       	cpc	r18, r28
     17e:	2c 07       	cpc	r18, r28
     180:	2c 07       	cpc	r18, r28
     182:	2c 07       	cpc	r18, r28
     184:	2c 07       	cpc	r18, r28
     186:	2c 07       	cpc	r18, r28
     188:	2c 07       	cpc	r18, r28
     18a:	2c 07       	cpc	r18, r28
     18c:	2c 07       	cpc	r18, r28
     18e:	2c 07       	cpc	r18, r28
     190:	d8 07       	cpc	r29, r24
     192:	2c 07       	cpc	r18, r28
     194:	2c 07       	cpc	r18, r28
     196:	2c 07       	cpc	r18, r28
     198:	2c 07       	cpc	r18, r28
     19a:	2c 07       	cpc	r18, r28
     19c:	2c 07       	cpc	r18, r28
     19e:	2c 07       	cpc	r18, r28
     1a0:	2c 07       	cpc	r18, r28
     1a2:	2c 07       	cpc	r18, r28
     1a4:	2c 07       	cpc	r18, r28
     1a6:	2c 07       	cpc	r18, r28
     1a8:	2c 07       	cpc	r18, r28
     1aa:	2c 07       	cpc	r18, r28
     1ac:	2c 07       	cpc	r18, r28
     1ae:	2c 07       	cpc	r18, r28
     1b0:	cd 07       	cpc	r28, r29
     1b2:	05 09       	sbc	r16, r5
     1b4:	2c 07       	cpc	r18, r28
     1b6:	fb 08       	sbc	r15, r11
     1b8:	2c 07       	cpc	r18, r28
     1ba:	00 09       	sbc	r16, r0
     1bc:	2c 07       	cpc	r18, r28
     1be:	f1 08       	sbc	r15, r1
     1c0:	2c 07       	cpc	r18, r28
     1c2:	2c 07       	cpc	r18, r28
     1c4:	2c 07       	cpc	r18, r28
     1c6:	f6 08       	sbc	r15, r6
     1c8:	2c 07       	cpc	r18, r28
     1ca:	fb 08       	sbc	r15, r11
     1cc:	2c 07       	cpc	r18, r28
     1ce:	0a 09       	sbc	r16, r10
     1d0:	2c 07       	cpc	r18, r28
     1d2:	2c 07       	cpc	r18, r28
     1d4:	2c 07       	cpc	r18, r28
     1d6:	2c 07       	cpc	r18, r28
     1d8:	2c 07       	cpc	r18, r28
     1da:	2c 07       	cpc	r18, r28
     1dc:	2c 07       	cpc	r18, r28
     1de:	ec 08       	sbc	r14, r12
     1e0:	2c 07       	cpc	r18, r28
     1e2:	2c 07       	cpc	r18, r28
     1e4:	2c 07       	cpc	r18, r28
     1e6:	f1 08       	sbc	r15, r1
     1e8:	2c 07       	cpc	r18, r28
     1ea:	2c 07       	cpc	r18, r28
     1ec:	2c 07       	cpc	r18, r28
     1ee:	14 09       	sbc	r17, r4
     1f0:	2c 07       	cpc	r18, r28
     1f2:	2c 07       	cpc	r18, r28
     1f4:	2c 07       	cpc	r18, r28
     1f6:	2c 07       	cpc	r18, r28
     1f8:	2c 07       	cpc	r18, r28
     1fa:	2c 07       	cpc	r18, r28
     1fc:	2c 07       	cpc	r18, r28
     1fe:	2c 07       	cpc	r18, r28
     200:	2c 07       	cpc	r18, r28
     202:	2c 07       	cpc	r18, r28
     204:	2c 07       	cpc	r18, r28
     206:	2c 07       	cpc	r18, r28
     208:	2c 07       	cpc	r18, r28
     20a:	2c 07       	cpc	r18, r28
     20c:	2c 07       	cpc	r18, r28
     20e:	0f 09       	sbc	r16, r15
     210:	2c 07       	cpc	r18, r28
     212:	2c 07       	cpc	r18, r28
     214:	2c 07       	cpc	r18, r28
     216:	2c 07       	cpc	r18, r28
     218:	2c 07       	cpc	r18, r28
     21a:	2c 07       	cpc	r18, r28
     21c:	2c 07       	cpc	r18, r28
     21e:	0a 09       	sbc	r16, r10
     220:	2c 07       	cpc	r18, r28
     222:	2c 07       	cpc	r18, r28
     224:	2c 07       	cpc	r18, r28
     226:	2c 07       	cpc	r18, r28
     228:	2c 07       	cpc	r18, r28
     22a:	2c 07       	cpc	r18, r28
     22c:	2c 07       	cpc	r18, r28
     22e:	1e 09       	sbc	r17, r14
     230:	2c 07       	cpc	r18, r28
     232:	2c 07       	cpc	r18, r28
     234:	2c 07       	cpc	r18, r28
     236:	2c 07       	cpc	r18, r28
     238:	2c 07       	cpc	r18, r28
     23a:	2c 07       	cpc	r18, r28
     23c:	2c 07       	cpc	r18, r28
     23e:	2c 07       	cpc	r18, r28
     240:	2c 07       	cpc	r18, r28
     242:	2c 07       	cpc	r18, r28
     244:	2c 07       	cpc	r18, r28
     246:	2c 07       	cpc	r18, r28
     248:	2c 07       	cpc	r18, r28
     24a:	2c 07       	cpc	r18, r28
     24c:	2c 07       	cpc	r18, r28
     24e:	2c 07       	cpc	r18, r28
     250:	2c 07       	cpc	r18, r28
     252:	2c 07       	cpc	r18, r28
     254:	2c 07       	cpc	r18, r28
     256:	2c 07       	cpc	r18, r28
     258:	2c 07       	cpc	r18, r28
     25a:	2c 07       	cpc	r18, r28
     25c:	2c 07       	cpc	r18, r28
     25e:	2c 07       	cpc	r18, r28
     260:	2c 07       	cpc	r18, r28
     262:	2c 07       	cpc	r18, r28
     264:	2c 07       	cpc	r18, r28
     266:	2c 07       	cpc	r18, r28
     268:	2c 07       	cpc	r18, r28
     26a:	2c 07       	cpc	r18, r28
     26c:	2c 07       	cpc	r18, r28
     26e:	19 09       	sbc	r17, r9
     270:	2c 07       	cpc	r18, r28
     272:	2c 07       	cpc	r18, r28
     274:	2c 07       	cpc	r18, r28
     276:	2c 07       	cpc	r18, r28
     278:	2c 07       	cpc	r18, r28
     27a:	2c 07       	cpc	r18, r28
     27c:	2c 07       	cpc	r18, r28
     27e:	2c 07       	cpc	r18, r28
     280:	2c 07       	cpc	r18, r28
     282:	2c 07       	cpc	r18, r28
     284:	2c 07       	cpc	r18, r28
     286:	2c 07       	cpc	r18, r28
     288:	2c 07       	cpc	r18, r28
     28a:	2c 07       	cpc	r18, r28
     28c:	2c 07       	cpc	r18, r28
     28e:	14 09       	sbc	r17, r4
     290:	a8 09       	sbc	r26, r8
     292:	2c 07       	cpc	r18, r28
     294:	9e 09       	sbc	r25, r14
     296:	2c 07       	cpc	r18, r28
     298:	a3 09       	sbc	r26, r3
     29a:	2c 07       	cpc	r18, r28
     29c:	94 09       	sbc	r25, r4
     29e:	2c 07       	cpc	r18, r28
     2a0:	2c 07       	cpc	r18, r28
     2a2:	2c 07       	cpc	r18, r28
     2a4:	99 09       	sbc	r25, r9
     2a6:	2c 07       	cpc	r18, r28
     2a8:	9e 09       	sbc	r25, r14
     2aa:	2c 07       	cpc	r18, r28
     2ac:	ad 09       	sbc	r26, r13
     2ae:	2c 07       	cpc	r18, r28
     2b0:	2c 07       	cpc	r18, r28
     2b2:	2c 07       	cpc	r18, r28
     2b4:	2c 07       	cpc	r18, r28
     2b6:	2c 07       	cpc	r18, r28
     2b8:	2c 07       	cpc	r18, r28
     2ba:	2c 07       	cpc	r18, r28
     2bc:	8f 09       	sbc	r24, r15
     2be:	2c 07       	cpc	r18, r28
     2c0:	2c 07       	cpc	r18, r28
     2c2:	2c 07       	cpc	r18, r28
     2c4:	94 09       	sbc	r25, r4
     2c6:	2c 07       	cpc	r18, r28
     2c8:	2c 07       	cpc	r18, r28
     2ca:	2c 07       	cpc	r18, r28
     2cc:	b7 09       	sbc	r27, r7
     2ce:	2c 07       	cpc	r18, r28
     2d0:	2c 07       	cpc	r18, r28
     2d2:	2c 07       	cpc	r18, r28
     2d4:	2c 07       	cpc	r18, r28
     2d6:	2c 07       	cpc	r18, r28
     2d8:	2c 07       	cpc	r18, r28
     2da:	2c 07       	cpc	r18, r28
     2dc:	2c 07       	cpc	r18, r28
     2de:	2c 07       	cpc	r18, r28
     2e0:	2c 07       	cpc	r18, r28
     2e2:	2c 07       	cpc	r18, r28
     2e4:	2c 07       	cpc	r18, r28
     2e6:	2c 07       	cpc	r18, r28
     2e8:	2c 07       	cpc	r18, r28
     2ea:	2c 07       	cpc	r18, r28
     2ec:	b2 09       	sbc	r27, r2
     2ee:	2c 07       	cpc	r18, r28
     2f0:	2c 07       	cpc	r18, r28
     2f2:	2c 07       	cpc	r18, r28
     2f4:	2c 07       	cpc	r18, r28
     2f6:	2c 07       	cpc	r18, r28
     2f8:	2c 07       	cpc	r18, r28
     2fa:	2c 07       	cpc	r18, r28
     2fc:	ad 09       	sbc	r26, r13
     2fe:	2c 07       	cpc	r18, r28
     300:	2c 07       	cpc	r18, r28
     302:	2c 07       	cpc	r18, r28
     304:	2c 07       	cpc	r18, r28
     306:	2c 07       	cpc	r18, r28
     308:	2c 07       	cpc	r18, r28
     30a:	2c 07       	cpc	r18, r28
     30c:	c1 09       	sbc	r28, r1
     30e:	2c 07       	cpc	r18, r28
     310:	2c 07       	cpc	r18, r28
     312:	2c 07       	cpc	r18, r28
     314:	2c 07       	cpc	r18, r28
     316:	2c 07       	cpc	r18, r28
     318:	2c 07       	cpc	r18, r28
     31a:	2c 07       	cpc	r18, r28
     31c:	2c 07       	cpc	r18, r28
     31e:	2c 07       	cpc	r18, r28
     320:	2c 07       	cpc	r18, r28
     322:	2c 07       	cpc	r18, r28
     324:	2c 07       	cpc	r18, r28
     326:	2c 07       	cpc	r18, r28
     328:	2c 07       	cpc	r18, r28
     32a:	2c 07       	cpc	r18, r28
     32c:	2c 07       	cpc	r18, r28
     32e:	2c 07       	cpc	r18, r28
     330:	2c 07       	cpc	r18, r28
     332:	2c 07       	cpc	r18, r28
     334:	2c 07       	cpc	r18, r28
     336:	2c 07       	cpc	r18, r28
     338:	2c 07       	cpc	r18, r28
     33a:	2c 07       	cpc	r18, r28
     33c:	2c 07       	cpc	r18, r28
     33e:	2c 07       	cpc	r18, r28
     340:	2c 07       	cpc	r18, r28
     342:	2c 07       	cpc	r18, r28
     344:	2c 07       	cpc	r18, r28
     346:	2c 07       	cpc	r18, r28
     348:	2c 07       	cpc	r18, r28
     34a:	2c 07       	cpc	r18, r28
     34c:	bc 09       	sbc	r27, r12
     34e:	2c 07       	cpc	r18, r28
     350:	2c 07       	cpc	r18, r28
     352:	2c 07       	cpc	r18, r28
     354:	2c 07       	cpc	r18, r28
     356:	2c 07       	cpc	r18, r28
     358:	2c 07       	cpc	r18, r28
     35a:	2c 07       	cpc	r18, r28
     35c:	2c 07       	cpc	r18, r28
     35e:	2c 07       	cpc	r18, r28
     360:	2c 07       	cpc	r18, r28
     362:	2c 07       	cpc	r18, r28
     364:	2c 07       	cpc	r18, r28
     366:	2c 07       	cpc	r18, r28
     368:	2c 07       	cpc	r18, r28
     36a:	2c 07       	cpc	r18, r28
     36c:	b7 09       	sbc	r27, r7

0000036e <__ctors_end>:
     36e:	11 24       	eor	r1, r1
     370:	1f be       	out	0x3f, r1	; 63
     372:	cf e5       	ldi	r28, 0x5F	; 95
     374:	d4 e0       	ldi	r29, 0x04	; 4
     376:	de bf       	out	0x3e, r29	; 62
     378:	cd bf       	out	0x3d, r28	; 61

0000037a <__do_copy_data>:
     37a:	10 e0       	ldi	r17, 0x00	; 0
     37c:	a0 e6       	ldi	r26, 0x60	; 96
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	e4 e2       	ldi	r30, 0x24	; 36
     382:	fc e1       	ldi	r31, 0x1C	; 28
     384:	02 c0       	rjmp	.+4      	; 0x38a <__do_copy_data+0x10>
     386:	05 90       	lpm	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	a2 36       	cpi	r26, 0x62	; 98
     38c:	b1 07       	cpc	r27, r17
     38e:	d9 f7       	brne	.-10     	; 0x386 <__do_copy_data+0xc>

00000390 <__do_clear_bss>:
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	a2 e6       	ldi	r26, 0x62	; 98
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	01 c0       	rjmp	.+2      	; 0x39a <.do_clear_bss_start>

00000398 <.do_clear_bss_loop>:
     398:	1d 92       	st	X+, r1

0000039a <.do_clear_bss_start>:
     39a:	a1 3b       	cpi	r26, 0xB1	; 177
     39c:	b2 07       	cpc	r27, r18
     39e:	e1 f7       	brne	.-8      	; 0x398 <.do_clear_bss_loop>
     3a0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <main>
     3a4:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <_exit>

000003a8 <__bad_interrupt>:
     3a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ac <_Z10get_buttonh>:
uint8_t cSpeed = 0xff, incCounter = 0;
int16_t cSpeedDiff = 0;

/* -------------------- BUTTON + SWITCH -------------------- */
uint8_t get_button(uint8_t keyid)
{
     3ac:	98 2f       	mov	r25, r24
	if ((PINB & 0x0e) != 0x0e)
     3ae:	86 b3       	in	r24, 0x16	; 22
     3b0:	8e 70       	andi	r24, 0x0E	; 14
     3b2:	8e 30       	cpi	r24, 0x0E	; 14
     3b4:	81 f0       	breq	.+32     	; 0x3d6 <_Z10get_buttonh+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b6:	2f ef       	ldi	r18, 0xFF	; 255
     3b8:	37 ee       	ldi	r19, 0xE7	; 231
     3ba:	83 e0       	ldi	r24, 0x03	; 3
     3bc:	21 50       	subi	r18, 0x01	; 1
     3be:	30 40       	sbci	r19, 0x00	; 0
     3c0:	80 40       	sbci	r24, 0x00	; 0
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <_Z10get_buttonh+0x10>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <_Z10get_buttonh+0x1a>
     3c6:	00 00       	nop
	{
		_delay_ms(80);
		if ((PINB|keyid) == keyid) return 1;
     3c8:	26 b3       	in	r18, 0x16	; 22
     3ca:	29 2b       	or	r18, r25
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	92 17       	cp	r25, r18
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <_Z10get_buttonh+0x2c>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	08 95       	ret
	}
	return 0;
     3d6:	80 e0       	ldi	r24, 0x00	; 0
}
     3d8:	08 95       	ret

000003da <_Z10get_switchv>:

uint8_t get_switch()
{
	uint8_t x=0;
	x = ~PINC;
     3da:	83 b3       	in	r24, 0x13	; 19
     3dc:	80 95       	com	r24
	x = x & 0x0f;
	return x;
}
     3de:	8f 70       	andi	r24, 0x0F	; 15
     3e0:	08 95       	ret

000003e2 <_Z9cal_ratiov>:
	velocity = veloc;
}

void cal_ratio( void )
{
	cnt_ratio++;
     3e2:	80 91 78 00 	lds	r24, 0x0078
     3e6:	8f 5f       	subi	r24, 0xFF	; 255
     3e8:	80 93 78 00 	sts	0x0078, r24
	if (cnt_ratio >= 20) /* 20ms */
     3ec:	84 31       	cpi	r24, 0x14	; 20
     3ee:	08 f4       	brcc	.+2      	; 0x3f2 <_Z9cal_ratiov+0x10>
     3f0:	d6 c0       	rjmp	.+428    	; 0x59e <__stack+0x13f>
	{
		if (velocity < 0)
     3f2:	80 91 79 00 	lds	r24, 0x0079
     3f6:	90 91 7a 00 	lds	r25, 0x007A
     3fa:	99 23       	and	r25, r25
     3fc:	8c f4       	brge	.+34     	; 0x420 <_Z9cal_ratiov+0x3e>
		{
			ratio = ratio_base;
     3fe:	80 91 72 00 	lds	r24, 0x0072
     402:	90 91 73 00 	lds	r25, 0x0073
     406:	a0 91 74 00 	lds	r26, 0x0074
     40a:	b0 91 75 00 	lds	r27, 0x0075
     40e:	80 93 6e 00 	sts	0x006E, r24
     412:	90 93 6f 00 	sts	0x006F, r25
     416:	a0 93 70 00 	sts	0x0070, r26
     41a:	b0 93 71 00 	sts	0x0071, r27
     41e:	9f c0       	rjmp	.+318    	; 0x55e <__stack+0xff>
		}
		else
		{
			if      (pulse_ratio < velocity / 2)    ratio = ratio_base + 0.3;
     420:	9c 01       	movw	r18, r24
     422:	99 23       	and	r25, r25
     424:	14 f4       	brge	.+4      	; 0x42a <_Z9cal_ratiov+0x48>
     426:	2f 5f       	subi	r18, 0xFF	; 255
     428:	3f 4f       	sbci	r19, 0xFF	; 255
     42a:	a9 01       	movw	r20, r18
     42c:	55 95       	asr	r21
     42e:	47 95       	ror	r20
     430:	20 91 76 00 	lds	r18, 0x0076
     434:	30 91 77 00 	lds	r19, 0x0077
     438:	24 17       	cp	r18, r20
     43a:	35 07       	cpc	r19, r21
     43c:	bc f4       	brge	.+46     	; 0x46c <__stack+0xd>
     43e:	2a e9       	ldi	r18, 0x9A	; 154
     440:	39 e9       	ldi	r19, 0x99	; 153
     442:	49 e9       	ldi	r20, 0x99	; 153
     444:	5e e3       	ldi	r21, 0x3E	; 62
     446:	60 91 72 00 	lds	r22, 0x0072
     44a:	70 91 73 00 	lds	r23, 0x0073
     44e:	80 91 74 00 	lds	r24, 0x0074
     452:	90 91 75 00 	lds	r25, 0x0075
     456:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
     45a:	60 93 6e 00 	sts	0x006E, r22
     45e:	70 93 6f 00 	sts	0x006F, r23
     462:	80 93 70 00 	sts	0x0070, r24
     466:	90 93 71 00 	sts	0x0071, r25
     46a:	5e c0       	rjmp	.+188    	; 0x528 <__stack+0xc9>
			else if (pulse_ratio < velocity)        ratio = ratio_base + 0.1;
     46c:	28 17       	cp	r18, r24
     46e:	39 07       	cpc	r19, r25
     470:	bc f4       	brge	.+46     	; 0x4a0 <__stack+0x41>
     472:	2d ec       	ldi	r18, 0xCD	; 205
     474:	3c ec       	ldi	r19, 0xCC	; 204
     476:	4c ec       	ldi	r20, 0xCC	; 204
     478:	5d e3       	ldi	r21, 0x3D	; 61
     47a:	60 91 72 00 	lds	r22, 0x0072
     47e:	70 91 73 00 	lds	r23, 0x0073
     482:	80 91 74 00 	lds	r24, 0x0074
     486:	90 91 75 00 	lds	r25, 0x0075
     48a:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
     48e:	60 93 6e 00 	sts	0x006E, r22
     492:	70 93 6f 00 	sts	0x006F, r23
     496:	80 93 70 00 	sts	0x0070, r24
     49a:	90 93 71 00 	sts	0x0071, r25
     49e:	44 c0       	rjmp	.+136    	; 0x528 <__stack+0xc9>
			else if (pulse_ratio > velocity)        ratio = ratio_base - 0.35;
     4a0:	82 17       	cp	r24, r18
     4a2:	93 07       	cpc	r25, r19
     4a4:	bc f4       	brge	.+46     	; 0x4d4 <__stack+0x75>
     4a6:	23 e3       	ldi	r18, 0x33	; 51
     4a8:	33 e3       	ldi	r19, 0x33	; 51
     4aa:	43 eb       	ldi	r20, 0xB3	; 179
     4ac:	5e e3       	ldi	r21, 0x3E	; 62
     4ae:	60 91 72 00 	lds	r22, 0x0072
     4b2:	70 91 73 00 	lds	r23, 0x0073
     4b6:	80 91 74 00 	lds	r24, 0x0074
     4ba:	90 91 75 00 	lds	r25, 0x0075
     4be:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     4c2:	60 93 6e 00 	sts	0x006E, r22
     4c6:	70 93 6f 00 	sts	0x006F, r23
     4ca:	80 93 70 00 	sts	0x0070, r24
     4ce:	90 93 71 00 	sts	0x0071, r25
     4d2:	2a c0       	rjmp	.+84     	; 0x528 <__stack+0xc9>
			else if (pulse_ratio > velocity / 2)    ratio = ratio_base - 0.25;
     4d4:	42 17       	cp	r20, r18
     4d6:	53 07       	cpc	r21, r19
     4d8:	bc f4       	brge	.+46     	; 0x508 <__stack+0xa9>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	40 e8       	ldi	r20, 0x80	; 128
     4e0:	5e e3       	ldi	r21, 0x3E	; 62
     4e2:	60 91 72 00 	lds	r22, 0x0072
     4e6:	70 91 73 00 	lds	r23, 0x0073
     4ea:	80 91 74 00 	lds	r24, 0x0074
     4ee:	90 91 75 00 	lds	r25, 0x0075
     4f2:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     4f6:	60 93 6e 00 	sts	0x006E, r22
     4fa:	70 93 6f 00 	sts	0x006F, r23
     4fe:	80 93 70 00 	sts	0x0070, r24
     502:	90 93 71 00 	sts	0x0071, r25
     506:	10 c0       	rjmp	.+32     	; 0x528 <__stack+0xc9>
			else ratio = ratio_base;
     508:	80 91 72 00 	lds	r24, 0x0072
     50c:	90 91 73 00 	lds	r25, 0x0073
     510:	a0 91 74 00 	lds	r26, 0x0074
     514:	b0 91 75 00 	lds	r27, 0x0075
     518:	80 93 6e 00 	sts	0x006E, r24
     51c:	90 93 6f 00 	sts	0x006F, r25
     520:	a0 93 70 00 	sts	0x0070, r26
     524:	b0 93 71 00 	sts	0x0071, r27
			
			if (ratio <= 0) ratio = 0.1;
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	a9 01       	movw	r20, r18
     52e:	60 91 6e 00 	lds	r22, 0x006E
     532:	70 91 6f 00 	lds	r23, 0x006F
     536:	80 91 70 00 	lds	r24, 0x0070
     53a:	90 91 71 00 	lds	r25, 0x0071
     53e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__cmpsf2>
     542:	18 16       	cp	r1, r24
     544:	64 f0       	brlt	.+24     	; 0x55e <__stack+0xff>
     546:	8d ec       	ldi	r24, 0xCD	; 205
     548:	9c ec       	ldi	r25, 0xCC	; 204
     54a:	ac ec       	ldi	r26, 0xCC	; 204
     54c:	bd e3       	ldi	r27, 0x3D	; 61
     54e:	80 93 6e 00 	sts	0x006E, r24
     552:	90 93 6f 00 	sts	0x006F, r25
     556:	a0 93 70 00 	sts	0x0070, r26
     55a:	b0 93 71 00 	sts	0x0071, r27
		}
		
		cSpeedDiff = pulse_ratio - cSpeed;
     55e:	80 91 76 00 	lds	r24, 0x0076
     562:	90 91 77 00 	lds	r25, 0x0077
     566:	20 91 61 00 	lds	r18, 0x0061
     56a:	ac 01       	movw	r20, r24
     56c:	42 1b       	sub	r20, r18
     56e:	51 09       	sbc	r21, r1
     570:	50 93 68 00 	sts	0x0068, r21
     574:	40 93 67 00 	sts	0x0067, r20
		if (cSpeedDiff > 0) incCounter++;
     578:	14 16       	cp	r1, r20
     57a:	15 06       	cpc	r1, r21
     57c:	34 f4       	brge	.+12     	; 0x58a <__stack+0x12b>
     57e:	20 91 69 00 	lds	r18, 0x0069
     582:	2f 5f       	subi	r18, 0xFF	; 255
     584:	20 93 69 00 	sts	0x0069, r18
     588:	02 c0       	rjmp	.+4      	; 0x58e <__stack+0x12f>
		else incCounter = 0;
     58a:	10 92 69 00 	sts	0x0069, r1
		cSpeed = pulse_ratio;
     58e:	80 93 61 00 	sts	0x0061, r24
		
		pulse_ratio = 0;
     592:	10 92 77 00 	sts	0x0077, r1
     596:	10 92 76 00 	sts	0x0076, r1
		cnt_ratio = 0;
     59a:	10 92 78 00 	sts	0x0078, r1
     59e:	08 95       	ret

000005a0 <_Z6handlei>:
	}
	return false;
}

void handle(int goc)
{
     5a0:	87 34       	cpi	r24, 0x47	; 71
     5a2:	2f ef       	ldi	r18, 0xFF	; 255
     5a4:	92 07       	cpc	r25, r18
     5a6:	14 f4       	brge	.+4      	; 0x5ac <_Z6handlei+0xc>
     5a8:	87 e4       	ldi	r24, 0x47	; 71
     5aa:	9f ef       	ldi	r25, 0xFF	; 255
     5ac:	8a 3b       	cpi	r24, 0xBA	; 186
     5ae:	91 05       	cpc	r25, r1
     5b0:	14 f0       	brlt	.+4      	; 0x5b6 <_Z6handlei+0x16>
     5b2:	89 eb       	ldi	r24, 0xB9	; 185
     5b4:	90 e0       	ldi	r25, 0x00	; 0
	if      (goc > SERVO_ANGLE_MAX)  goc =  SERVO_ANGLE_MAX;
	else if (goc < -SERVO_ANGLE_MAX) goc = -SERVO_ANGLE_MAX;
	
	OCR1A = SERVO_CENTER + (goc * STEP);
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	8a 5d       	subi	r24, 0xDA	; 218
     5c0:	93 4f       	sbci	r25, 0xF3	; 243
     5c2:	9b bd       	out	0x2b, r25	; 43
     5c4:	8a bd       	out	0x2a, r24	; 42
     5c6:	08 95       	ret

000005c8 <_Z5speedii>:
}

void speed(int left, int right)
{
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	8b 01       	movw	r16, r22
	left  = left  *  ratio;
     5e2:	80 90 6e 00 	lds	r8, 0x006E
     5e6:	90 90 6f 00 	lds	r9, 0x006F
     5ea:	a0 90 70 00 	lds	r10, 0x0070
     5ee:	b0 90 71 00 	lds	r11, 0x0071
     5f2:	bc 01       	movw	r22, r24
     5f4:	88 27       	eor	r24, r24
     5f6:	77 fd       	sbrc	r23, 7
     5f8:	80 95       	com	r24
     5fa:	98 2f       	mov	r25, r24
     5fc:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatsisf>
     600:	a5 01       	movw	r20, r10
     602:	94 01       	movw	r18, r8
     604:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     608:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__fixsfsi>
     60c:	6b 01       	movw	r12, r22
     60e:	7c 01       	movw	r14, r24
     610:	eb 01       	movw	r28, r22
	right = right *  ratio;
     612:	b8 01       	movw	r22, r16
     614:	88 27       	eor	r24, r24
     616:	77 fd       	sbrc	r23, 7
     618:	80 95       	com	r24
     61a:	98 2f       	mov	r25, r24
     61c:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatsisf>
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
     624:	c5 01       	movw	r24, r10
     626:	b4 01       	movw	r22, r8
     628:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     62c:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <__fixsfsi>
     630:	9b 01       	movw	r18, r22

	if (left >= 0)
     632:	dd 23       	and	r29, r29
     634:	5c f0       	brlt	.+22     	; 0x64c <_Z5speedii+0x84>
	{
		sbi(PORTD, DIR00);
     636:	90 9a       	sbi	0x12, 0	; 18
		cbi(PORTD, DIR01);
     638:	91 98       	cbi	0x12, 1	; 18
		OCR1B = left * 200;
     63a:	e8 ec       	ldi	r30, 0xC8	; 200
     63c:	ec 9d       	mul	r30, r12
     63e:	a0 01       	movw	r20, r0
     640:	ed 9d       	mul	r30, r13
     642:	50 0d       	add	r21, r0
     644:	11 24       	eor	r1, r1
     646:	59 bd       	out	0x29, r21	; 41
     648:	48 bd       	out	0x28, r20	; 40
     64a:	0b c0       	rjmp	.+22     	; 0x662 <_Z5speedii+0x9a>
	}
	else
	{
		cbi(PORTD, DIR00);
     64c:	90 98       	cbi	0x12, 0	; 18
		sbi(PORTD, DIR01);
     64e:	91 9a       	sbi	0x12, 1	; 18
		OCR1B = (-left) * 200;
     650:	e8 e3       	ldi	r30, 0x38	; 56
     652:	ec 9d       	mul	r30, r12
     654:	a0 01       	movw	r20, r0
     656:	ed 9d       	mul	r30, r13
     658:	50 0d       	add	r21, r0
     65a:	5c 19       	sub	r21, r12
     65c:	11 24       	eor	r1, r1
     65e:	59 bd       	out	0x29, r21	; 41
     660:	48 bd       	out	0x28, r20	; 40
	}
	
	if (right >= 0)
     662:	33 23       	and	r19, r19
     664:	7c f0       	brlt	.+30     	; 0x684 <_Z5speedii+0xbc>
	{
		sbi(PORTD, DIR10);
     666:	93 9a       	sbi	0x12, 3	; 18
		cbi(PORTD, DIR11);
     668:	96 98       	cbi	0x12, 6	; 18
		OCR2 = right * 255/100;
     66a:	4f ef       	ldi	r20, 0xFF	; 255
     66c:	46 9f       	mul	r20, r22
     66e:	90 01       	movw	r18, r0
     670:	47 9f       	mul	r20, r23
     672:	30 0d       	add	r19, r0
     674:	11 24       	eor	r1, r1
     676:	c9 01       	movw	r24, r18
     678:	64 e6       	ldi	r22, 0x64	; 100
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <__divmodhi4>
     680:	63 bd       	out	0x23, r22	; 35
     682:	0f c0       	rjmp	.+30     	; 0x6a2 <_Z5speedii+0xda>
	}
	else
	{
		cbi(PORTD, DIR10);
     684:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD, DIR11);
     686:	96 9a       	sbi	0x12, 6	; 18
		OCR2 = (-right) * 255/100;
     688:	41 e0       	ldi	r20, 0x01	; 1
     68a:	46 9f       	mul	r20, r22
     68c:	90 01       	movw	r18, r0
     68e:	47 9f       	mul	r20, r23
     690:	30 0d       	add	r19, r0
     692:	36 1b       	sub	r19, r22
     694:	11 24       	eor	r1, r1
     696:	c9 01       	movw	r24, r18
     698:	64 e6       	ldi	r22, 0x64	; 100
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <__divmodhi4>
     6a0:	63 bd       	out	0x23, r22	; 35
	}
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	9f 90       	pop	r9
     6b8:	8f 90       	pop	r8
     6ba:	08 95       	ret

000006bc <_Z3SPIh>:

/* -------------------- LED7 -------------------- */
void SPI(uint8_t data)
{
	SPDR = data;
     6bc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     6be:	77 9b       	sbis	0x0e, 7	; 14
     6c0:	fe cf       	rjmp	.-4      	; 0x6be <_Z3SPIh+0x2>
}
     6c2:	08 95       	ret

000006c4 <_Z4led7j>:

void led7(unsigned int num)
{
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	ac 01       	movw	r20, r24
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
     6ce:	9c 01       	movw	r18, r24
     6d0:	ad ec       	ldi	r26, 0xCD	; 205
     6d2:	bc ec       	ldi	r27, 0xCC	; 204
     6d4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__umulhisi3>
     6d8:	96 95       	lsr	r25
     6da:	87 95       	ror	r24
     6dc:	96 95       	lsr	r25
     6de:	87 95       	ror	r24
     6e0:	96 95       	lsr	r25
     6e2:	87 95       	ror	r24
     6e4:	9c 01       	movw	r18, r24
     6e6:	22 0f       	add	r18, r18
     6e8:	33 1f       	adc	r19, r19
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	82 0f       	add	r24, r18
     6f8:	93 1f       	adc	r25, r19
     6fa:	9a 01       	movw	r18, r20
     6fc:	28 1b       	sub	r18, r24
     6fe:	39 0b       	sbc	r19, r25
     700:	c9 01       	movw	r24, r18
     702:	80 68       	ori	r24, 0x80	; 128
     704:	80 93 7c 00 	sts	0x007C, r24
	led7_data.ten		 = (unsigned int)(num%100 / 10);
     708:	9a 01       	movw	r18, r20
     70a:	36 95       	lsr	r19
     70c:	27 95       	ror	r18
     70e:	36 95       	lsr	r19
     710:	27 95       	ror	r18
     712:	ab e7       	ldi	r26, 0x7B	; 123
     714:	b4 e1       	ldi	r27, 0x14	; 20
     716:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__umulhisi3>
     71a:	96 95       	lsr	r25
     71c:	87 95       	ror	r24
     71e:	64 e6       	ldi	r22, 0x64	; 100
     720:	68 9f       	mul	r22, r24
     722:	90 01       	movw	r18, r0
     724:	69 9f       	mul	r22, r25
     726:	30 0d       	add	r19, r0
     728:	11 24       	eor	r1, r1
     72a:	ca 01       	movw	r24, r20
     72c:	82 1b       	sub	r24, r18
     72e:	93 0b       	sbc	r25, r19
     730:	9c 01       	movw	r18, r24
     732:	ad ec       	ldi	r26, 0xCD	; 205
     734:	bc ec       	ldi	r27, 0xCC	; 204
     736:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__umulhisi3>
     73a:	fc 01       	movw	r30, r24
     73c:	f6 95       	lsr	r31
     73e:	e7 95       	ror	r30
     740:	f6 95       	lsr	r31
     742:	e7 95       	ror	r30
     744:	f6 95       	lsr	r31
     746:	e7 95       	ror	r30
     748:	1e 2f       	mov	r17, r30
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
     74a:	ea 01       	movw	r28, r20
     74c:	d6 95       	lsr	r29
     74e:	c7 95       	ror	r28
     750:	d6 95       	lsr	r29
     752:	c7 95       	ror	r28
     754:	d6 95       	lsr	r29
     756:	c7 95       	ror	r28
     758:	9e 01       	movw	r18, r28
     75a:	a5 ec       	ldi	r26, 0xC5	; 197
     75c:	b0 e2       	ldi	r27, 0x20	; 32
     75e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__umulhisi3>
     762:	92 95       	swap	r25
     764:	82 95       	swap	r24
     766:	8f 70       	andi	r24, 0x0F	; 15
     768:	89 27       	eor	r24, r25
     76a:	9f 70       	andi	r25, 0x0F	; 15
     76c:	89 27       	eor	r24, r25
     76e:	68 ee       	ldi	r22, 0xE8	; 232
     770:	73 e0       	ldi	r23, 0x03	; 3
     772:	86 9f       	mul	r24, r22
     774:	90 01       	movw	r18, r0
     776:	87 9f       	mul	r24, r23
     778:	30 0d       	add	r19, r0
     77a:	96 9f       	mul	r25, r22
     77c:	30 0d       	add	r19, r0
     77e:	11 24       	eor	r1, r1
     780:	42 1b       	sub	r20, r18
     782:	53 0b       	sbc	r21, r19
     784:	9a 01       	movw	r18, r20
     786:	36 95       	lsr	r19
     788:	27 95       	ror	r18
     78a:	36 95       	lsr	r19
     78c:	27 95       	ror	r18
     78e:	ab e7       	ldi	r26, 0x7B	; 123
     790:	b4 e1       	ldi	r27, 0x14	; 20
     792:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__umulhisi3>
     796:	ac 01       	movw	r20, r24
     798:	56 95       	lsr	r21
     79a:	47 95       	ror	r20
     79c:	04 2f       	mov	r16, r20
	led7_data.thousand	 = (unsigned int)(num/ 1000);
     79e:	9e 01       	movw	r18, r28
     7a0:	a5 ec       	ldi	r26, 0xC5	; 197
     7a2:	b0 e2       	ldi	r27, 0x20	; 32
     7a4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__umulhisi3>
     7a8:	92 95       	swap	r25
     7aa:	82 95       	swap	r24
     7ac:	8f 70       	andi	r24, 0x0F	; 15
     7ae:	89 27       	eor	r24, r25
     7b0:	9f 70       	andi	r25, 0x0F	; 15
     7b2:	89 27       	eor	r24, r25
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
     7b4:	88 23       	and	r24, r24
     7b6:	11 f0       	breq	.+4      	; 0x7bc <_Z4led7j+0xf8>
     7b8:	20 e1       	ldi	r18, 0x10	; 16
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <_Z4led7j+0xfa>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	82 2b       	or	r24, r18
     7c0:	80 93 7f 00 	sts	0x007F, r24
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     7c4:	81 11       	cpse	r24, r1
     7c6:	15 c0       	rjmp	.+42     	; 0x7f2 <_Z4led7j+0x12e>
     7c8:	01 11       	cpse	r16, r1
     7ca:	0c c0       	rjmp	.+24     	; 0x7e4 <_Z4led7j+0x120>
     7cc:	0c c0       	rjmp	.+24     	; 0x7e6 <_Z4led7j+0x122>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     7ce:	11 23       	and	r17, r17
     7d0:	11 f0       	breq	.+4      	; 0x7d6 <_Z4led7j+0x112>
     7d2:	80 e4       	ldi	r24, 0x40	; 64
     7d4:	03 c0       	rjmp	.+6      	; 0x7dc <_Z4led7j+0x118>
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <_Z4led7j+0x118>
     7da:	80 e4       	ldi	r24, 0x40	; 64
     7dc:	e8 2b       	or	r30, r24
     7de:	e0 93 7d 00 	sts	0x007D, r30
     7e2:	0c c0       	rjmp	.+24     	; 0x7fc <_Z4led7j+0x138>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     7e4:	80 e2       	ldi	r24, 0x20	; 32
     7e6:	48 2b       	or	r20, r24
     7e8:	40 93 7e 00 	sts	0x007E, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     7ec:	44 23       	and	r20, r20
     7ee:	79 f3       	breq	.-34     	; 0x7ce <_Z4led7j+0x10a>
     7f0:	f4 cf       	rjmp	.-24     	; 0x7da <_Z4led7j+0x116>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     7f2:	40 62       	ori	r20, 0x20	; 32
     7f4:	40 93 7e 00 	sts	0x007E, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     7f8:	80 e4       	ldi	r24, 0x40	; 64
     7fa:	f0 cf       	rjmp	.-32     	; 0x7dc <_Z4led7j+0x118>
}
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	08 95       	ret

00000806 <_Z5printv>:

void print( void )
{
     806:	cf 93       	push	r28
	uint8_t value=0;
	if(led7_data.i++ == 4) led7_data.i=0;
     808:	eb e7       	ldi	r30, 0x7B	; 123
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	90 81       	ld	r25, Z
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	89 0f       	add	r24, r25
     812:	80 83       	st	Z, r24
     814:	94 30       	cpi	r25, 0x04	; 4
     816:	19 f4       	brne	.+6      	; 0x81e <_Z5printv+0x18>
     818:	10 92 7b 00 	sts	0x007B, r1
     81c:	08 c0       	rjmp	.+16     	; 0x82e <_Z5printv+0x28>
	switch(led7_data.i)
     81e:	81 30       	cpi	r24, 0x01	; 1
     820:	49 f0       	breq	.+18     	; 0x834 <_Z5printv+0x2e>
     822:	28 f0       	brcs	.+10     	; 0x82e <_Z5printv+0x28>
     824:	82 30       	cpi	r24, 0x02	; 2
     826:	49 f0       	breq	.+18     	; 0x83a <_Z5printv+0x34>
     828:	83 30       	cpi	r24, 0x03	; 3
     82a:	51 f0       	breq	.+20     	; 0x840 <_Z5printv+0x3a>
     82c:	0c c0       	rjmp	.+24     	; 0x846 <_Z5printv+0x40>
	{
		case 0: value=led7_data.thousand;	break;
     82e:	c0 91 7f 00 	lds	r28, 0x007F
     832:	0a c0       	rjmp	.+20     	; 0x848 <_Z5printv+0x42>
		case 1: value=led7_data.hundred;	break;
     834:	c0 91 7e 00 	lds	r28, 0x007E
     838:	07 c0       	rjmp	.+14     	; 0x848 <_Z5printv+0x42>
		case 2: value=led7_data.ten;		break;
     83a:	c0 91 7d 00 	lds	r28, 0x007D
     83e:	04 c0       	rjmp	.+8      	; 0x848 <_Z5printv+0x42>
		case 3: value=led7_data.unit;		break;
     840:	c0 91 7c 00 	lds	r28, 0x007C
     844:	01 c0       	rjmp	.+2      	; 0x848 <_Z5printv+0x42>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
}

void print( void )
{
	uint8_t value=0;
     846:	c0 e0       	ldi	r28, 0x00	; 0
		case 1: value=led7_data.hundred;	break;
		case 2: value=led7_data.ten;		break;
		case 3: value=led7_data.unit;		break;
		default: break;
	}
	SPI(~led7_data.sensor_out);
     848:	80 91 80 00 	lds	r24, 0x0080
     84c:	80 95       	com	r24
     84e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_Z3SPIh>
	SPI(value);
     852:	8c 2f       	mov	r24, r28
     854:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_Z3SPIh>
	sbi(PORTB,LATCH);
     858:	c4 9a       	sbi	0x18, 4	; 24
	cbi(PORTB,LATCH);
     85a:	c4 98       	cbi	0x18, 4	; 24
}
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <_Z15read_adc_eepromv>:

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	0f 2e       	mov	r0, r31
     86e:	f1 e9       	ldi	r31, 0x91	; 145
     870:	ef 2e       	mov	r14, r31
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	ff 2e       	mov	r15, r31
     876:	f0 2d       	mov	r31, r0
     878:	01 e8       	ldi	r16, 0x81	; 129
     87a:	10 e0       	ldi	r17, 0x00	; 0
     87c:	c0 e0       	ldi	r28, 0x00	; 0
     87e:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     880:	e1 99       	sbic	0x1c, 1	; 28
     882:	fe cf       	rjmp	.-4      	; 0x880 <_Z15read_adc_eepromv+0x20>
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
     884:	ce 01       	movw	r24, r28
     886:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__eerd_word_m16>
     88a:	f7 01       	movw	r30, r14
     88c:	81 93       	st	Z+, r24
     88e:	91 93       	st	Z+, r25
     890:	7f 01       	movw	r14, r30
		while(!eeprom_is_ready());
     892:	e1 99       	sbic	0x1c, 1	; 28
     894:	fe cf       	rjmp	.-4      	; 0x892 <_Z15read_adc_eepromv+0x32>
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
     896:	ce 01       	movw	r24, r28
     898:	40 96       	adiw	r24, 0x10	; 16
     89a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__eerd_word_m16>
     89e:	f8 01       	movw	r30, r16
     8a0:	81 93       	st	Z+, r24
     8a2:	91 93       	st	Z+, r25
     8a4:	8f 01       	movw	r16, r30
     8a6:	22 96       	adiw	r28, 0x02	; 2
}

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     8a8:	c0 31       	cpi	r28, 0x10	; 16
     8aa:	d1 05       	cpc	r29, r1
     8ac:	49 f7       	brne	.-46     	; 0x880 <_Z15read_adc_eepromv+0x20>
     8ae:	c1 ea       	ldi	r28, 0xA1	; 161
     8b0:	d0 e0       	ldi	r29, 0x00	; 0
     8b2:	41 ea       	ldi	r20, 0xA1	; 161
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	a1 e8       	ldi	r26, 0x81	; 129
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e9       	ldi	r30, 0x91	; 145
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     8be:	81 91       	ld	r24, Z+
     8c0:	91 91       	ld	r25, Z+
     8c2:	2d 91       	ld	r18, X+
     8c4:	3d 91       	ld	r19, X+
     8c6:	82 0f       	add	r24, r18
     8c8:	93 1f       	adc	r25, r19
     8ca:	96 95       	lsr	r25
     8cc:	87 95       	ror	r24
     8ce:	89 93       	st	Y+, r24
     8d0:	99 93       	st	Y+, r25
		while(!eeprom_is_ready());
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
     8d2:	e4 17       	cp	r30, r20
     8d4:	f5 07       	cpc	r31, r21
     8d6:	99 f7       	brne	.-26     	; 0x8be <_Z15read_adc_eepromv+0x5e>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	08 95       	ret

000008e6 <_Z16write_adc_eepromv>:

void write_adc_eeprom( void )
{
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f1 e8       	ldi	r31, 0x81	; 129
     8f6:	ef 2e       	mov	r14, r31
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ff 2e       	mov	r15, r31
     8fc:	f0 2d       	mov	r31, r0
     8fe:	01 e9       	ldi	r16, 0x91	; 145
     900:	10 e0       	ldi	r17, 0x00	; 0
     902:	c0 e0       	ldi	r28, 0x00	; 0
     904:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     906:	e1 99       	sbic	0x1c, 1	; 28
     908:	fe cf       	rjmp	.-4      	; 0x906 <_Z16write_adc_eepromv+0x20>
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
     90a:	f8 01       	movw	r30, r16
     90c:	61 91       	ld	r22, Z+
     90e:	71 91       	ld	r23, Z+
     910:	8f 01       	movw	r16, r30
     912:	ce 01       	movw	r24, r28
     914:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__eewr_word_m16>
		while(!eeprom_is_ready());
     918:	e1 99       	sbic	0x1c, 1	; 28
     91a:	fe cf       	rjmp	.-4      	; 0x918 <_Z16write_adc_eepromv+0x32>
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
     91c:	f7 01       	movw	r30, r14
     91e:	61 91       	ld	r22, Z+
     920:	71 91       	ld	r23, Z+
     922:	7f 01       	movw	r14, r30
     924:	ce 01       	movw	r24, r28
     926:	40 96       	adiw	r24, 0x10	; 16
     928:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__eewr_word_m16>
     92c:	22 96       	adiw	r28, 0x02	; 2
	}
}

void write_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     92e:	c0 31       	cpi	r28, 0x10	; 16
     930:	d1 05       	cpc	r29, r1
     932:	49 f7       	brne	.-46     	; 0x906 <_Z16write_adc_eepromv+0x20>
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
	}
}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	08 95       	ret

00000942 <_Z8adc_readh>:

uint16_t adc_read( uint8_t ch )
{
	ADMUX = (1<< REFS0)|ch;
     942:	80 64       	ori	r24, 0x40	; 64
     944:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
     946:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
     948:	34 9b       	sbis	0x06, 4	; 6
     94a:	fe cf       	rjmp	.-4      	; 0x948 <_Z8adc_readh+0x6>
	return ADCW;
     94c:	84 b1       	in	r24, 0x04	; 4
     94e:	95 b1       	in	r25, 0x05	; 5
}
     950:	08 95       	ret

00000952 <_Z10sensor_cmpv>:

uint8_t sensor_cmp( void )
{
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	01 ea       	ldi	r16, 0xA1	; 161
     962:	10 e0       	ldi	r17, 0x00	; 0
     964:	c0 e0       	ldi	r28, 0x00	; 0
     966:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t ADC_value=0;
     968:	d1 2c       	mov	r13, r1
	for(uint8_t i=0; i<8; i++)
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
     96a:	ee 24       	eor	r14, r14
     96c:	e3 94       	inc	r14
     96e:	f1 2c       	mov	r15, r1
     970:	8c 2f       	mov	r24, r28
     972:	0e 94 a1 04 	call	0x942	; 0x942 <_Z8adc_readh>
     976:	f8 01       	movw	r30, r16
     978:	21 91       	ld	r18, Z+
     97a:	31 91       	ld	r19, Z+
     97c:	8f 01       	movw	r16, r30
     97e:	82 17       	cp	r24, r18
     980:	93 07       	cpc	r25, r19
     982:	40 f4       	brcc	.+16     	; 0x994 <_Z10sensor_cmpv+0x42>
     984:	97 01       	movw	r18, r14
     986:	0c 2e       	mov	r0, r28
     988:	02 c0       	rjmp	.+4      	; 0x98e <_Z10sensor_cmpv+0x3c>
     98a:	22 0f       	add	r18, r18
     98c:	33 1f       	adc	r19, r19
     98e:	0a 94       	dec	r0
     990:	e2 f7       	brpl	.-8      	; 0x98a <_Z10sensor_cmpv+0x38>
     992:	d2 2a       	or	r13, r18
     994:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t sensor_cmp( void )
{
	uint8_t ADC_value=0;
	for(uint8_t i=0; i<8; i++)
     996:	c8 30       	cpi	r28, 0x08	; 8
     998:	d1 05       	cpc	r29, r1
     99a:	51 f7       	brne	.-44     	; 0x970 <_Z10sensor_cmpv+0x1e>
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
	}
	led7_data.sensor_out=ADC_value;
     99c:	d0 92 80 00 	sts	0x0080, r13
	return (ADC_value);
}
     9a0:	8d 2d       	mov	r24, r13
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	08 95       	ret

000009b2 <_Z11learn_colorv>:

void learn_color( void )
{
     9b2:	8f 92       	push	r8
     9b4:	9f 92       	push	r9
     9b6:	af 92       	push	r10
     9b8:	bf 92       	push	r11
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	c1 e9       	ldi	r28, 0x91	; 145
     9cc:	d0 e0       	ldi	r29, 0x00	; 0
     9ce:	01 e8       	ldi	r16, 0x81	; 129
     9d0:	10 e0       	ldi	r17, 0x00	; 0
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f1 ea       	ldi	r31, 0xA1	; 161
     9d6:	ef 2e       	mov	r14, r31
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	ff 2e       	mov	r15, r31
     9dc:	f0 2d       	mov	r31, r0
     9de:	d8 01       	movw	r26, r16
     9e0:	fe 01       	movw	r30, r28
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
	{
		lineTrang[i] = 1024;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	94 e0       	ldi	r25, 0x04	; 4
     9e6:	81 93       	st	Z+, r24
     9e8:	91 93       	st	Z+, r25
		lineDen[i] = 0;
     9ea:	1d 92       	st	X+, r1
     9ec:	1d 92       	st	X+, r1

void learn_color( void )
{
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
     9ee:	ee 15       	cp	r30, r14
     9f0:	ff 05       	cpc	r31, r15
     9f2:	c9 f7       	brne	.-14     	; 0x9e6 <_Z11learn_colorv+0x34>
	{
		lineTrang[i] = 1024;
		lineDen[i] = 0;
	}
	
	led7(6969);
     9f4:	89 e3       	ldi	r24, 0x39	; 57
     9f6:	9b e1       	ldi	r25, 0x1B	; 27
     9f8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
	while (1)
	{
		if(get_button(BTN2)) break;
     9fc:	b0 2e       	mov	r11, r16
     9fe:	a1 2e       	mov	r10, r17
     a00:	9c 2e       	mov	r9, r28
     a02:	8d 2e       	mov	r8, r29
     a04:	c1 2c       	mov	r12, r1
     a06:	87 ef       	ldi	r24, 0xF7	; 247
     a08:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     a0c:	81 11       	cpse	r24, r1
     a0e:	1f c0       	rjmp	.+62     	; 0xa4e <_Z11learn_colorv+0x9c>
     a10:	0b 2d       	mov	r16, r11
     a12:	1a 2d       	mov	r17, r10
     a14:	c9 2d       	mov	r28, r9
     a16:	d8 2d       	mov	r29, r8
     a18:	dc 2c       	mov	r13, r12
		
		for (uint8_t i = 0; i < 8; i++)
		{
			ADC_temp = adc_read(i);
     a1a:	8d 2d       	mov	r24, r13
     a1c:	0e 94 a1 04 	call	0x942	; 0x942 <_Z8adc_readh>
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
     a20:	28 81       	ld	r18, Y
     a22:	39 81       	ldd	r19, Y+1	; 0x01
     a24:	82 17       	cp	r24, r18
     a26:	93 07       	cpc	r25, r19
     a28:	10 f4       	brcc	.+4      	; 0xa2e <_Z11learn_colorv+0x7c>
     a2a:	99 83       	std	Y+1, r25	; 0x01
     a2c:	88 83       	st	Y, r24
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
     a2e:	f8 01       	movw	r30, r16
     a30:	20 81       	ld	r18, Z
     a32:	31 81       	ldd	r19, Z+1	; 0x01
     a34:	28 17       	cp	r18, r24
     a36:	39 07       	cpc	r19, r25
     a38:	10 f4       	brcc	.+4      	; 0xa3e <_Z11learn_colorv+0x8c>
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	80 83       	st	Z, r24
	led7(6969);
	while (1)
	{
		if(get_button(BTN2)) break;
		
		for (uint8_t i = 0; i < 8; i++)
     a3e:	d3 94       	inc	r13
     a40:	22 96       	adiw	r28, 0x02	; 2
     a42:	0e 5f       	subi	r16, 0xFE	; 254
     a44:	1f 4f       	sbci	r17, 0xFF	; 255
     a46:	f8 e0       	ldi	r31, 0x08	; 8
     a48:	df 12       	cpse	r13, r31
     a4a:	e7 cf       	rjmp	.-50     	; 0xa1a <_Z11learn_colorv+0x68>
     a4c:	dc cf       	rjmp	.-72     	; 0xa06 <_Z11learn_colorv+0x54>
     a4e:	c1 ea       	ldi	r28, 0xA1	; 161
     a50:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	led7(6969);
	while (1)
	{
		if(get_button(BTN2)) break;
     a52:	a1 e8       	ldi	r26, 0x81	; 129
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	e1 e9       	ldi	r30, 0x91	; 145
     a58:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
	
	for (uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     a5a:	81 91       	ld	r24, Z+
     a5c:	91 91       	ld	r25, Z+
     a5e:	2d 91       	ld	r18, X+
     a60:	3d 91       	ld	r19, X+
     a62:	82 0f       	add	r24, r18
     a64:	93 1f       	adc	r25, r19
     a66:	96 95       	lsr	r25
     a68:	87 95       	ror	r24
     a6a:	89 93       	st	Y+, r24
     a6c:	99 93       	st	Y+, r25
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
		}
	}
	
	for (uint8_t i=0; i<8; i++)
     a6e:	ee 15       	cp	r30, r14
     a70:	ff 05       	cpc	r31, r15
     a72:	99 f7       	brne	.-26     	; 0xa5a <_Z11learn_colorv+0xa8>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
	
	write_adc_eeprom();
     a74:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_Z16write_adc_eepromv>
	return (ADC_value);
}

void learn_color( void )
{
	uint8_t sel = 0;
     a78:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1)
	{
		if(get_button(BTN0))
		{
			if (++sel > 7) sel = 0;
     a7a:	f1 2c       	mov	r15, r1
		{
			break;
		}
		
		led7(ADC_average[sel]);
		led7_data.sensor_out = (1 << sel);
     a7c:	c0 e8       	ldi	r28, 0x80	; 128
     a7e:	d0 e0       	ldi	r29, 0x00	; 0
     a80:	01 e0       	ldi	r16, 0x01	; 1
	
	write_adc_eeprom();
	
	while (1)
	{
		if(get_button(BTN0))
     a82:	8d ef       	ldi	r24, 0xFD	; 253
     a84:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     a88:	88 23       	and	r24, r24
     a8a:	21 f0       	breq	.+8      	; 0xa94 <_Z11learn_colorv+0xe2>
		{
			if (++sel > 7) sel = 0;
     a8c:	1f 5f       	subi	r17, 0xFF	; 255
     a8e:	18 30       	cpi	r17, 0x08	; 8
     a90:	08 f0       	brcs	.+2      	; 0xa94 <_Z11learn_colorv+0xe2>
     a92:	1f 2d       	mov	r17, r15
		}
		if (get_button(BTN1))
     a94:	8b ef       	ldi	r24, 0xFB	; 251
     a96:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     a9a:	81 11       	cpse	r24, r1
		{
			if (--sel < 0)  sel = 7;
     a9c:	11 50       	subi	r17, 0x01	; 1
		}
		if (get_button(BTN2))
     a9e:	87 ef       	ldi	r24, 0xF7	; 247
     aa0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     aa4:	81 11       	cpse	r24, r1
     aa6:	12 c0       	rjmp	.+36     	; 0xacc <_Z11learn_colorv+0x11a>
		{
			break;
		}
		
		led7(ADC_average[sel]);
     aa8:	e1 2f       	mov	r30, r17
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	ee 0f       	add	r30, r30
     aae:	ff 1f       	adc	r31, r31
     ab0:	ef 55       	subi	r30, 0x5F	; 95
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	80 81       	ld	r24, Z
     ab6:	91 81       	ldd	r25, Z+1	; 0x01
     ab8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
		led7_data.sensor_out = (1 << sel);
     abc:	80 2f       	mov	r24, r16
     abe:	01 2e       	mov	r0, r17
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <_Z11learn_colorv+0x112>
     ac2:	88 0f       	add	r24, r24
     ac4:	0a 94       	dec	r0
     ac6:	ea f7       	brpl	.-6      	; 0xac2 <_Z11learn_colorv+0x110>
     ac8:	88 83       	st	Y, r24
	}
     aca:	db cf       	rjmp	.-74     	; 0xa82 <_Z11learn_colorv+0xd0>
}
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	08 95       	ret

00000ae6 <_Z4INITv>:

/* -------------------- INITIAL -------------------- */
void INIT( void )
{
	/* ADC */
	ADMUX=(1<<REFS0);
     ae6:	80 e4       	ldi	r24, 0x40	; 64
     ae8:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN) | (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     aea:	87 e8       	ldi	r24, 0x87	; 135
     aec:	86 b9       	out	0x06, r24	; 6
	read_adc_eeprom();
     aee:	0e 94 30 04 	call	0x860	; 0x860 <_Z15read_adc_eepromv>
	
	/* PORT */
	DDRB  = 0b11110001;
     af2:	81 ef       	ldi	r24, 0xF1	; 241
     af4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111111;
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	88 bb       	out	0x18, r24	; 24
	
	DDRC  = 0b00000000;
     afa:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b11111111;
     afc:	85 bb       	out	0x15, r24	; 21
	
	DDRD  = 0b11111011;
     afe:	8b ef       	ldi	r24, 0xFB	; 251
     b00:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000;
     b02:	12 ba       	out	0x12, r1	; 18
	
	/* SPI */
	SPCR = (1<<SPE)|(1<<MSTR);
     b04:	80 e5       	ldi	r24, 0x50	; 80
     b06:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	8e b9       	out	0x0e, r24	; 14
	
	/* TIMER */
	TCCR0=(1<<WGM01) | (1<<CS02);
     b0c:	8c e0       	ldi	r24, 0x0C	; 12
     b0e:	83 bf       	out	0x33, r24	; 51
	OCR0=62;
     b10:	8e e3       	ldi	r24, 0x3E	; 62
     b12:	8c bf       	out	0x3c, r24	; 60
	TIMSK=(1<<OCIE0);
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
     b18:	82 ea       	ldi	r24, 0xA2	; 162
     b1a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS11);
     b1c:	8a e1       	ldi	r24, 0x1A	; 26
     b1e:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 20000;
     b20:	80 e2       	ldi	r24, 0x20	; 32
     b22:	9e e4       	ldi	r25, 0x4E	; 78
     b24:	97 bd       	out	0x27, r25	; 39
     b26:	86 bd       	out	0x26, r24	; 38
	OCR1B = 0;
     b28:	19 bc       	out	0x29, r1	; 41
     b2a:	18 bc       	out	0x28, r1	; 40
	
	TCCR2=(1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS22)|(1<<CS21)|(1<<CS20);
     b2c:	8f e6       	ldi	r24, 0x6F	; 111
     b2e:	85 bd       	out	0x25, r24	; 37
	OCR2=0;
     b30:	13 bc       	out	0x23, r1	; 35
	sei();
     b32:	78 94       	sei
	
	/* ENCODER */
	MCUCR |= (1<<ISC00)|(1<<ISC01);
     b34:	85 b7       	in	r24, 0x35	; 53
     b36:	83 60       	ori	r24, 0x03	; 3
     b38:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     b3a:	8b b7       	in	r24, 0x3b	; 59
     b3c:	80 64       	ori	r24, 0x40	; 64
     b3e:	8b bf       	out	0x3b, r24	; 59
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     b40:	83 e1       	ldi	r24, 0x13	; 19
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	90 93 7a 00 	sts	0x007A, r25
     b48:	80 93 79 00 	sts	0x0079, r24
     b4c:	08 95       	ret

00000b4e <_Z13test_hardwarev>:
	set_encoder(19);
}

void test_hardware( void )
{
	uint8_t _index=0;
     b4e:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     b50:	f1 2c       	mov	r15, r1
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
		led7_data.sensor_out = 0 | (1<<_index);
     b52:	c0 e8       	ldi	r28, 0x80	; 128
     b54:	d0 e0       	ldi	r29, 0x00	; 0
     b56:	01 e0       	ldi	r16, 0x01	; 1
void test_hardware( void )
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
     b58:	8d ef       	ldi	r24, 0xFD	; 253
     b5a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     b5e:	88 23       	and	r24, r24
     b60:	59 f0       	breq	.+22     	; 0xb78 <_Z13test_hardwarev+0x2a>
     b62:	6c e9       	ldi	r22, 0x9C	; 156
     b64:	7f ef       	ldi	r23, 0xFF	; 255
     b66:	84 e6       	ldi	r24, 0x64	; 100
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
     b6e:	87 e4       	ldi	r24, 0x47	; 71
     b70:	9f ef       	ldi	r25, 0xFF	; 255
     b72:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
     b76:	25 c0       	rjmp	.+74     	; 0xbc2 <_Z13test_hardwarev+0x74>
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     b78:	8b ef       	ldi	r24, 0xFB	; 251
     b7a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     b7e:	88 23       	and	r24, r24
     b80:	21 f0       	breq	.+8      	; 0xb8a <_Z13test_hardwarev+0x3c>
     b82:	1f 5f       	subi	r17, 0xFF	; 255
     b84:	18 30       	cpi	r17, 0x08	; 8
     b86:	e9 f4       	brne	.+58     	; 0xbc2 <_Z13test_hardwarev+0x74>
     b88:	1b c0       	rjmp	.+54     	; 0xbc0 <_Z13test_hardwarev+0x72>
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
     b8a:	87 ef       	ldi	r24, 0xF7	; 247
     b8c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     b90:	88 23       	and	r24, r24
     b92:	59 f0       	breq	.+22     	; 0xbaa <_Z13test_hardwarev+0x5c>
     b94:	64 e6       	ldi	r22, 0x64	; 100
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	8c e9       	ldi	r24, 0x9C	; 156
     b9a:	9f ef       	ldi	r25, 0xFF	; 255
     b9c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
     ba0:	89 eb       	ldi	r24, 0xB9	; 185
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
     ba8:	0c c0       	rjmp	.+24     	; 0xbc2 <_Z13test_hardwarev+0x74>
		else						{ speed(0,0);  handle(0);                 }
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <_Z13test_hardwarev+0x74>
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     bc0:	1f 2d       	mov	r17, r15
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
     bc2:	81 2f       	mov	r24, r17
     bc4:	0e 94 a1 04 	call	0x942	; 0x942 <_Z8adc_readh>
     bc8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
		led7_data.sensor_out = 0 | (1<<_index);
     bcc:	80 2f       	mov	r24, r16
     bce:	01 2e       	mov	r0, r17
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <_Z13test_hardwarev+0x86>
     bd2:	88 0f       	add	r24, r24
     bd4:	0a 94       	dec	r0
     bd6:	ea f7       	brpl	.-6      	; 0xbd2 <_Z13test_hardwarev+0x84>
     bd8:	88 83       	st	Y, r24
	}
     bda:	be cf       	rjmp	.-132    	; 0xb58 <_Z13test_hardwarev+0xa>

00000bdc <_Z8sel_modev>:
}

/* -------------------- START -------------------- */
void sel_mode()
{
	handle(0);
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
	speed(0,0);
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	90 93 7a 00 	sts	0x007A, r25
     bf8:	80 93 79 00 	sts	0x0079, r24
	speed(0,0);
	set_encoder(-1);
	
	while (true)
	{
		ratio_base = ratio_default + (get_switch() / 20.0);
     bfc:	0e 94 ed 01 	call	0x3da	; 0x3da <_Z10get_switchv>
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatsisf>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 ea       	ldi	r20, 0xA0	; 160
     c12:	51 e4       	ldi	r21, 0x41	; 65
     c14:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__divsf3>
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e8       	ldi	r20, 0x80	; 128
     c1e:	5e e3       	ldi	r21, 0x3E	; 62
     c20:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
     c24:	60 93 72 00 	sts	0x0072, r22
     c28:	70 93 73 00 	sts	0x0073, r23
     c2c:	80 93 74 00 	sts	0x0074, r24
     c30:	90 93 75 00 	sts	0x0075, r25
		ratio = ratio_base;
     c34:	60 93 6e 00 	sts	0x006E, r22
     c38:	70 93 6f 00 	sts	0x006F, r23
     c3c:	80 93 70 00 	sts	0x0070, r24
     c40:	90 93 71 00 	sts	0x0071, r25
		led7(ratio_base * 100);
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	48 ec       	ldi	r20, 0xC8	; 200
     c4a:	52 e4       	ldi	r21, 0x42	; 66
     c4c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     c50:	0e 94 66 0c 	call	0x18cc	; 0x18cc <__fixunssfsi>
     c54:	cb 01       	movw	r24, r22
     c56:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
		delay = (1.4 - 1.125 * ratio);
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e9       	ldi	r20, 0x90	; 144
     c60:	5f e3       	ldi	r21, 0x3F	; 63
     c62:	60 91 6e 00 	lds	r22, 0x006E
     c66:	70 91 6f 00 	lds	r23, 0x006F
     c6a:	80 91 70 00 	lds	r24, 0x0070
     c6e:	90 91 71 00 	lds	r25, 0x0071
     c72:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
     c76:	9b 01       	movw	r18, r22
     c78:	ac 01       	movw	r20, r24
     c7a:	63 e3       	ldi	r22, 0x33	; 51
     c7c:	73 e3       	ldi	r23, 0x33	; 51
     c7e:	83 eb       	ldi	r24, 0xB3	; 179
     c80:	9f e3       	ldi	r25, 0x3F	; 63
     c82:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     c86:	60 93 6a 00 	sts	0x006A, r22
     c8a:	70 93 6b 00 	sts	0x006B, r23
     c8e:	80 93 6c 00 	sts	0x006C, r24
     c92:	90 93 6d 00 	sts	0x006D, r25
		sensor_cmp();
     c96:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
		if(get_button(BTN0))		return;
     c9a:	8d ef       	ldi	r24, 0xFD	; 253
     c9c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     ca0:	81 11       	cpse	r24, r1
     ca2:	0f c0       	rjmp	.+30     	; 0xcc2 <_Z8sel_modev+0xe6>
		else if (get_button(BTN1))	test_hardware(); /*test_servo();*/
     ca4:	8b ef       	ldi	r24, 0xFB	; 251
     ca6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     caa:	81 11       	cpse	r24, r1
     cac:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_Z13test_hardwarev>
		else if (get_button(BTN2))	learn_color();
     cb0:	87 ef       	ldi	r24, 0xF7	; 247
     cb2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     cb6:	88 23       	and	r24, r24
     cb8:	09 f4       	brne	.+2      	; 0xcbc <_Z8sel_modev+0xe0>
     cba:	a0 cf       	rjmp	.-192    	; 0xbfc <_Z8sel_modev+0x20>
     cbc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11learn_colorv>
     cc0:	9d cf       	rjmp	.-198    	; 0xbfc <_Z8sel_modev+0x20>
     cc2:	08 95       	ret

00000cc4 <__vector_19>:
		}
    }
}

ISR(TIMER0_COMP_vect) /* 1ms */
{
     cc4:	1f 92       	push	r1
     cc6:	0f 92       	push	r0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
	print();
     ce6:	0e 94 03 04 	call	0x806	; 0x806 <_Z5printv>
	cal_ratio();
     cea:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_Z9cal_ratiov>
	timer_cnt++;
     cee:	80 91 64 00 	lds	r24, 0x0064
     cf2:	90 91 65 00 	lds	r25, 0x0065
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	90 93 65 00 	sts	0x0065, r25
     cfc:	80 93 64 00 	sts	0x0064, r24
}
     d00:	ff 91       	pop	r31
     d02:	ef 91       	pop	r30
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <__vector_1>:

ISR(INT0_vect) /* encoder */
{
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	8f 93       	push	r24
     d2e:	9f 93       	push	r25
	encoder_pulse++;
     d30:	80 91 62 00 	lds	r24, 0x0062
     d34:	90 91 63 00 	lds	r25, 0x0063
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	90 93 63 00 	sts	0x0063, r25
     d3e:	80 93 62 00 	sts	0x0062, r24
	pulse_ratio++;
     d42:	80 91 76 00 	lds	r24, 0x0076
     d46:	90 91 77 00 	lds	r25, 0x0077
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	90 93 77 00 	sts	0x0077, r25
     d50:	80 93 76 00 	sts	0x0076, r24
}
     d54:	9f 91       	pop	r25
     d56:	8f 91       	pop	r24
     d58:	0f 90       	pop	r0
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	0f 90       	pop	r0
     d5e:	1f 90       	pop	r1
     d60:	18 95       	reti

00000d62 <_Z15check_crosslinev>:

bool check_crossline( void )
{
	sensor = sensor_cmp();
     d62:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
     d66:	80 93 66 00 	sts	0x0066, r24
	return (((sensor & 0b11111111) == 0b11111111) || ((sensor & 0b01111110) == 0b01111110));
     d6a:	8f 3f       	cpi	r24, 0xFF	; 255
     d6c:	39 f0       	breq	.+14     	; 0xd7c <_Z15check_crosslinev+0x1a>
     d6e:	8e 77       	andi	r24, 0x7E	; 126
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	8e 37       	cpi	r24, 0x7E	; 126
     d74:	09 f0       	breq	.+2      	; 0xd78 <_Z15check_crosslinev+0x16>
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	89 2f       	mov	r24, r25
     d7a:	08 95       	ret
     d7c:	81 e0       	ldi	r24, 0x01	; 1
}
     d7e:	08 95       	ret

00000d80 <_Z15check_rightlinev>:
bool check_rightline( void )
{
	sensor = sensor_cmp();
     d80:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
     d84:	80 93 66 00 	sts	0x0066, r24
	return (((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111));
     d88:	98 2f       	mov	r25, r24
     d8a:	9f 70       	andi	r25, 0x0F	; 15
     d8c:	9f 30       	cpi	r25, 0x0F	; 15
     d8e:	39 f0       	breq	.+14     	; 0xd9e <_Z15check_rightlinev+0x1e>
     d90:	8f 71       	andi	r24, 0x1F	; 31
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	8f 31       	cpi	r24, 0x1F	; 31
     d96:	09 f0       	breq	.+2      	; 0xd9a <_Z15check_rightlinev+0x1a>
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	89 2f       	mov	r24, r25
     d9c:	08 95       	ret
     d9e:	81 e0       	ldi	r24, 0x01	; 1
}
     da0:	08 95       	ret

00000da2 <_Z14check_leftlinev>:
bool check_leftline( void )
{
	sensor = sensor_cmp();
     da2:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
     da6:	80 93 66 00 	sts	0x0066, r24
	return (((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000));
     daa:	98 2f       	mov	r25, r24
     dac:	90 7f       	andi	r25, 0xF0	; 240
     dae:	90 3f       	cpi	r25, 0xF0	; 240
     db0:	39 f0       	breq	.+14     	; 0xdc0 <_Z14check_leftlinev+0x1e>
     db2:	88 7f       	andi	r24, 0xF8	; 248
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	88 3f       	cpi	r24, 0xF8	; 248
     db8:	09 f0       	breq	.+2      	; 0xdbc <_Z14check_leftlinev+0x1a>
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	89 2f       	mov	r24, r25
     dbe:	08 95       	ret
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	08 95       	ret

00000dc4 <main>:

int16_t tmp = 0, tmp2;

int main(void)
{
	INIT();
     dc4:	0e 94 73 05 	call	0xae6	; 0xae6 <_Z4INITv>
	sel_mode();
     dc8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <_Z8sel_modev>
	
	while (true)
	{
		sensor_cmp();
     dcc:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
		led7(encoder_pulse);
     dd0:	80 91 62 00 	lds	r24, 0x0062
     dd4:	90 91 63 00 	lds	r25, 0x0063
     dd8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
		if (get_button(BTN0)) encoder_pulse = 0;
     ddc:	8d ef       	ldi	r24, 0xFD	; 253
     dde:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     de2:	88 23       	and	r24, r24
     de4:	21 f0       	breq	.+8      	; 0xdee <main+0x2a>
     de6:	10 92 63 00 	sts	0x0063, r1
     dea:	10 92 62 00 	sts	0x0062, r1
		if (get_button(BTN1)) break;
     dee:	8b ef       	ldi	r24, 0xFB	; 251
     df0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     df4:	88 23       	and	r24, r24
     df6:	51 f3       	breq	.-44     	; 0xdcc <main+0x8>
	}
	
	pattern = 10; /* Chay thang */
     df8:	8a e0       	ldi	r24, 0x0A	; 10
     dfa:	80 93 60 00 	sts	0x0060, r24
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	9f ef       	ldi	r25, 0xFF	; 255
     e02:	90 93 7a 00 	sts	0x007A, r25
     e06:	80 93 79 00 	sts	0x0079, r24
				set_encoder(-1);
			}
			break; /* case 73 */
			
			default:
				pattern = 10;
     e0a:	0f 2e       	mov	r0, r31
     e0c:	fa e0       	ldi	r31, 0x0A	; 10
     e0e:	bf 2e       	mov	r11, r31
     e10:	f0 2d       	mov	r31, r0
     e12:	cc e0       	ldi	r28, 0x0C	; 12
     e14:	d0 e0       	ldi	r29, 0x00	; 0
     e16:	0f ef       	ldi	r16, 0xFF	; 255
     e18:	1f ef       	ldi	r17, 0xFF	; 255
			case 62:
				led7(62);
				
				handle(50);
				speed( 100 ,80 );
				pattern = 63;
     e1a:	0f 2e       	mov	r0, r31
     e1c:	ff e3       	ldi	r31, 0x3F	; 63
     e1e:	6f 2e       	mov	r6, r31
     e20:	f0 2d       	mov	r31, r0
			case 61:
				led7(61);
				sensor = sensor_cmp();
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000))
				{
					pattern = 21 ;
     e22:	0f 2e       	mov	r0, r31
     e24:	f5 e1       	ldi	r31, 0x15	; 21
     e26:	af 2e       	mov	r10, r31
     e28:	f0 2d       	mov	r31, r0
				
				speed(100, 100);
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
				{
					pattern = 62;
     e2a:	0f 2e       	mov	r0, r31
     e2c:	fe e3       	ldi	r31, 0x3E	; 62
     e2e:	3f 2e       	mov	r3, r31
     e30:	f0 2d       	mov	r31, r0
			case 52:
				led7(52);
				
				handle(-50);
				speed( 80 ,100 );
				pattern = 53;
     e32:	0f 2e       	mov	r0, r31
     e34:	f5 e3       	ldi	r31, 0x35	; 53
     e36:	7f 2e       	mov	r7, r31
     e38:	f0 2d       	mov	r31, r0
			case 41:
				led7(41);
				
				if( timer_cnt > 200 ) /* 200ms */
				{
					pattern = 42;
     e3a:	0f 2e       	mov	r0, r31
     e3c:	fa e2       	ldi	r31, 0x2A	; 42
     e3e:	5f 2e       	mov	r5, r31
     e40:	f0 2d       	mov	r31, r0
			case 31:
				led7(31);
				
				if( timer_cnt > 200 ) /* 200ms */
				{
					pattern = 32;
     e42:	68 94       	set
     e44:	44 24       	eor	r4, r4
     e46:	45 f8       	bld	r4, 5
			case 27: /* phai */
				led7(27);
				
				handle(SERVO_ANGLE_MAX); /* 120 */
				speed( 80 , -100 );
				pattern = 41;
     e48:	0f 2e       	mov	r0, r31
     e4a:	f9 e2       	ldi	r31, 0x29	; 41
     e4c:	8f 2e       	mov	r8, r31
     e4e:	f0 2d       	mov	r31, r0
			case 26: /* trai */
				led7(26);
				
				handle(-SERVO_ANGLE_MAX); /* -120 */
				speed( -100 , 80 );
				pattern = 31;
     e50:	0f 2e       	mov	r0, r31
     e52:	ff e1       	ldi	r31, 0x1F	; 31
     e54:	9f 2e       	mov	r9, r31
     e56:	f0 2d       	mov	r31, r0
	pattern = 10; /* Chay thang */
	set_encoder(-1);
	
    while (true)
    {
        switch (pattern)
     e58:	80 91 60 00 	lds	r24, 0x0060
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	fc 01       	movw	r30, r24
     e60:	3a 97       	sbiw	r30, 0x0a	; 10
     e62:	e0 34       	cpi	r30, 0x40	; 64
     e64:	f1 05       	cpc	r31, r1
     e66:	08 f0       	brcs	.+2      	; 0xe6a <main+0xa6>
     e68:	58 c4       	rjmp	.+2224   	; 0x171a <main+0x956>
     e6a:	e6 5d       	subi	r30, 0xD6	; 214
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__tablejump2__>
		{
			/* Chay thang */
			case 10:
				led7(10);
     e72:	8a e0       	ldi	r24, 0x0A	; 10
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				if (check_crossline())     /* Cua vuong */
     e7a:	0e 94 b1 06 	call	0xd62	; 0xd62 <_Z15check_crosslinev>
     e7e:	88 23       	and	r24, r24
     e80:	19 f0       	breq	.+6      	; 0xe88 <main+0xc4>
				{
					pattern = 21;
     e82:	a0 92 60 00 	sts	0x0060, r10
					break;
     e86:	e8 cf       	rjmp	.-48     	; 0xe58 <main+0x94>
				}
				else if (check_leftline()) /* Chuyen lan trai */
     e88:	0e 94 d1 06 	call	0xda2	; 0xda2 <_Z14check_leftlinev>
     e8c:	88 23       	and	r24, r24
     e8e:	61 f0       	breq	.+24     	; 0xea8 <main+0xe4>
				{
					pattern = 51;
     e90:	83 e3       	ldi	r24, 0x33	; 51
     e92:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
     e96:	10 92 65 00 	sts	0x0065, r1
     e9a:	10 92 64 00 	sts	0x0064, r1
					encoder_pulse = 0;
     e9e:	10 92 63 00 	sts	0x0063, r1
     ea2:	10 92 62 00 	sts	0x0062, r1
					break;
     ea6:	d8 cf       	rjmp	.-80     	; 0xe58 <main+0x94>
				}
				else if (check_rightline()) /* Chuyen lan phai */
     ea8:	0e 94 c0 06 	call	0xd80	; 0xd80 <_Z15check_rightlinev>
     eac:	88 23       	and	r24, r24
     eae:	61 f0       	breq	.+24     	; 0xec8 <main+0x104>
				{
					pattern = 61;
     eb0:	8d e3       	ldi	r24, 0x3D	; 61
     eb2:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
     eb6:	10 92 65 00 	sts	0x0065, r1
     eba:	10 92 64 00 	sts	0x0064, r1
					encoder_pulse = 0;
     ebe:	10 92 63 00 	sts	0x0063, r1
     ec2:	10 92 62 00 	sts	0x0062, r1
					break;
     ec6:	c8 cf       	rjmp	.-112    	; 0xe58 <main+0x94>
				}
				
				switch (sensor_cmp() & 0b01111110)
     ec8:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
     ecc:	8e 77       	andi	r24, 0x7E	; 126
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	fc 01       	movw	r30, r24
     ed2:	32 97       	sbiw	r30, 0x02	; 2
     ed4:	ef 36       	cpi	r30, 0x6F	; 111
     ed6:	f1 05       	cpc	r31, r1
     ed8:	08 f0       	brcs	.+2      	; 0xedc <main+0x118>
     eda:	be cf       	rjmp	.-132    	; 0xe58 <main+0x94>
     edc:	e6 59       	subi	r30, 0x96	; 150
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
						handle(0);
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
						speed(100 ,100);
     eec:	64 e6       	ldi	r22, 0x64	; 100
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	84 e6       	ldi	r24, 0x64	; 100
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
					break;
     ef8:	af cf       	rjmp	.-162    	; 0xe58 <main+0x94>
					
					case 0b00011100:
					case 0b00001000:
						speed(100,100);
     efa:	64 e6       	ldi	r22, 0x64	; 100
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	84 e6       	ldi	r24, 0x64	; 100
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(9);
     f06:	89 e0       	ldi	r24, 0x09	; 9
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
     f0e:	a4 cf       	rjmp	.-184    	; 0xe58 <main+0x94>
					case 0b00001100:
						speed(100,100);
     f10:	64 e6       	ldi	r22, 0x64	; 100
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	84 e6       	ldi	r24, 0x64	; 100
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(17);
     f1c:	81 e1       	ldi	r24, 0x11	; 17
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
     f24:	99 cf       	rjmp	.-206    	; 0xe58 <main+0x94>
					case 0b00001110:
					case 0b00000100:
						speed(100,85);
     f26:	65 e5       	ldi	r22, 0x55	; 85
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	84 e6       	ldi	r24, 0x64	; 100
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(31);
     f32:	8f e1       	ldi	r24, 0x1F	; 31
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
     f3a:	8e cf       	rjmp	.-228    	; 0xe58 <main+0x94>
					case 0b00000110:
						speed(100,80);
     f3c:	60 e5       	ldi	r22, 0x50	; 80
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	84 e6       	ldi	r24, 0x64	; 100
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(50);
     f48:	82 e3       	ldi	r24, 0x32	; 50
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
     f50:	83 cf       	rjmp	.-250    	; 0xe58 <main+0x94>
					case 0b00000010:
						speed(100,70);
     f52:	66 e4       	ldi	r22, 0x46	; 70
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	84 e6       	ldi	r24, 0x64	; 100
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(75);
     f5e:	8b e4       	ldi	r24, 0x4B	; 75
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
						pattern=11;	/* Lech phai goc lon */
     f66:	8b e0       	ldi	r24, 0x0B	; 11
     f68:	80 93 60 00 	sts	0x0060, r24
					break;		
     f6c:	75 cf       	rjmp	.-278    	; 0xe58 <main+0x94>
					
					case 0b00111000:
					case 0b00010000:
						speed(100,100);
     f6e:	64 e6       	ldi	r22, 0x64	; 100
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	84 e6       	ldi	r24, 0x64	; 100
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(-9);
     f7a:	87 ef       	ldi	r24, 0xF7	; 247
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
     f82:	6a cf       	rjmp	.-300    	; 0xe58 <main+0x94>
					case 0b00110000:
						speed(100,100);
     f84:	64 e6       	ldi	r22, 0x64	; 100
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	84 e6       	ldi	r24, 0x64	; 100
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(-17);
     f90:	8f ee       	ldi	r24, 0xEF	; 239
     f92:	9f ef       	ldi	r25, 0xFF	; 255
     f94:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
     f98:	5f cf       	rjmp	.-322    	; 0xe58 <main+0x94>
					case 0b01110000:
					case 0b00100000:
						speed(85,100);
     f9a:	64 e6       	ldi	r22, 0x64	; 100
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	85 e5       	ldi	r24, 0x55	; 85
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(-31);
     fa6:	81 ee       	ldi	r24, 0xE1	; 225
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
     fae:	54 cf       	rjmp	.-344    	; 0xe58 <main+0x94>
					case 0b01100000:
						speed(80,100);
     fb0:	64 e6       	ldi	r22, 0x64	; 100
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	80 e5       	ldi	r24, 0x50	; 80
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(-50);
     fbc:	8e ec       	ldi	r24, 0xCE	; 206
     fbe:	9f ef       	ldi	r25, 0xFF	; 255
     fc0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
     fc4:	49 cf       	rjmp	.-366    	; 0xe58 <main+0x94>
					case 0b01000000:
						speed(70,100);
     fc6:	64 e6       	ldi	r22, 0x64	; 100
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	86 e4       	ldi	r24, 0x46	; 70
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(-75);
     fd2:	85 eb       	ldi	r24, 0xB5	; 181
     fd4:	9f ef       	ldi	r25, 0xFF	; 255
     fd6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
						pattern=12; /* Lech trai goc lon */
     fda:	8c e0       	ldi	r24, 0x0C	; 12
     fdc:	80 93 60 00 	sts	0x0060, r24
					break;
     fe0:	3b cf       	rjmp	.-394    	; 0xe58 <main+0x94>
				}
			break; /* case 10 */
			
			/* Lech phai goc lon */
			case 11:
				led7(11);
     fe2:	8b e0       	ldi	r24, 0x0B	; 11
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
     fea:	d0 93 7a 00 	sts	0x007A, r29
     fee:	c0 93 79 00 	sts	0x0079, r28
				set_encoder(12);
				switch (sensor_cmp() & 0b11001100)
     ff2:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
     ff6:	8c 7c       	andi	r24, 0xCC	; 204
     ff8:	8c 30       	cpi	r24, 0x0C	; 12
     ffa:	d1 f1       	breq	.+116    	; 0x1070 <main+0x2ac>
     ffc:	28 f4       	brcc	.+10     	; 0x1008 <main+0x244>
     ffe:	88 23       	and	r24, r24
    1000:	09 f1       	breq	.+66     	; 0x1044 <main+0x280>
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	51 f1       	breq	.+84     	; 0x105a <main+0x296>
    1006:	49 c0       	rjmp	.+146    	; 0x109a <main+0x2d6>
    1008:	80 38       	cpi	r24, 0x80	; 128
    100a:	89 f0       	breq	.+34     	; 0x102e <main+0x26a>
    100c:	80 3c       	cpi	r24, 0xC0	; 192
    100e:	21 f0       	breq	.+8      	; 0x1018 <main+0x254>
    1010:	80 36       	cpi	r24, 0x60	; 96
    1012:	09 f0       	breq	.+2      	; 0x1016 <main+0x252>
    1014:	42 c0       	rjmp	.+132    	; 0x109a <main+0x2d6>
    1016:	3d c0       	rjmp	.+122    	; 0x1092 <main+0x2ce>
				{
					case 0b11000000:
						speed(80, /*0*/-10);
    1018:	66 ef       	ldi	r22, 0xF6	; 246
    101a:	7f ef       	ldi	r23, 0xFF	; 255
    101c:	80 e5       	ldi	r24, 0x50	; 80
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(105);
    1024:	89 e6       	ldi	r24, 0x69	; 105
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    102c:	15 cf       	rjmp	.-470    	; 0xe58 <main+0x94>
					
					case 0b10000000:
						speed(80, /*15*/5);
    102e:	65 e0       	ldi	r22, 0x05	; 5
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	80 e5       	ldi	r24, 0x50	; 80
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(90);
    103a:	8a e5       	ldi	r24, 0x5A	; 90
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1042:	0a cf       	rjmp	.-492    	; 0xe58 <main+0x94>
					
					case 0b00000000:
						speed(80, /*20*/10);
    1044:	6a e0       	ldi	r22, 0x0A	; 10
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	80 e5       	ldi	r24, 0x50	; 80
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(78);
    1050:	8e e4       	ldi	r24, 0x4E	; 78
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1058:	ff ce       	rjmp	.-514    	; 0xe58 <main+0x94>
					
					case 0b00000100:
						speed(80, /*25*/15);
    105a:	6f e0       	ldi	r22, 0x0F	; 15
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e5       	ldi	r24, 0x50	; 80
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(60);
    1066:	8c e3       	ldi	r24, 0x3C	; 60
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    106e:	f4 ce       	rjmp	.-536    	; 0xe58 <main+0x94>
					
					case 0b00001100:
						speed(80, /*30*/20);
    1070:	64 e1       	ldi	r22, 0x14	; 20
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	80 e5       	ldi	r24, 0x50	; 80
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(52);
    107c:	84 e3       	ldi	r24, 0x34	; 52
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
						pattern = 10;
    1084:	b0 92 60 00 	sts	0x0060, r11
    1088:	10 93 7a 00 	sts	0x007A, r17
    108c:	00 93 79 00 	sts	0x0079, r16
    1090:	e3 ce       	rjmp	.-570    	; 0xe58 <main+0x94>
						set_encoder(-1);
					break;
					
					case 0b01100000:
					pattern=12;
    1092:	8c e0       	ldi	r24, 0x0C	; 12
    1094:	80 93 60 00 	sts	0x0060, r24
					break;
    1098:	df ce       	rjmp	.-578    	; 0xe58 <main+0x94>
					
					default:
						pattern=11;
    109a:	8b e0       	ldi	r24, 0x0B	; 11
    109c:	80 93 60 00 	sts	0x0060, r24
					break;
    10a0:	db ce       	rjmp	.-586    	; 0xe58 <main+0x94>
				}
			break; /* case 11 */
			
			/* Lech trai goc lon */
			case 12:
				led7(12);
    10a2:	ce 01       	movw	r24, r28
    10a4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
    10a8:	d0 93 7a 00 	sts	0x007A, r29
    10ac:	c0 93 79 00 	sts	0x0079, r28
				set_encoder(12);
				switch(sensor_cmp() & 0b00110011)
    10b0:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
    10b4:	83 73       	andi	r24, 0x33	; 51
    10b6:	83 30       	cpi	r24, 0x03	; 3
    10b8:	69 f0       	breq	.+26     	; 0x10d4 <main+0x310>
    10ba:	28 f4       	brcc	.+10     	; 0x10c6 <main+0x302>
    10bc:	88 23       	and	r24, r24
    10be:	01 f1       	breq	.+64     	; 0x1100 <main+0x33c>
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	99 f0       	breq	.+38     	; 0x10ea <main+0x326>
    10c4:	44 c0       	rjmp	.+136    	; 0x114e <main+0x38a>
    10c6:	80 32       	cpi	r24, 0x20	; 32
    10c8:	31 f1       	breq	.+76     	; 0x1116 <main+0x352>
    10ca:	80 33       	cpi	r24, 0x30	; 48
    10cc:	79 f1       	breq	.+94     	; 0x112c <main+0x368>
    10ce:	86 30       	cpi	r24, 0x06	; 6
    10d0:	f1 f5       	brne	.+124    	; 0x114e <main+0x38a>
    10d2:	39 c0       	rjmp	.+114    	; 0x1146 <main+0x382>
				{
					case 0b00000011:
						speed(-10,80);
    10d4:	60 e5       	ldi	r22, 0x50	; 80
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	86 ef       	ldi	r24, 0xF6	; 246
    10da:	9f ef       	ldi	r25, 0xFF	; 255
    10dc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(-105);
    10e0:	87 e9       	ldi	r24, 0x97	; 151
    10e2:	9f ef       	ldi	r25, 0xFF	; 255
    10e4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    10e8:	b7 ce       	rjmp	.-658    	; 0xe58 <main+0x94>
					
					case 0b00000001:
						speed(5,80);
    10ea:	60 e5       	ldi	r22, 0x50	; 80
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	85 e0       	ldi	r24, 0x05	; 5
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(-90);
    10f6:	86 ea       	ldi	r24, 0xA6	; 166
    10f8:	9f ef       	ldi	r25, 0xFF	; 255
    10fa:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    10fe:	ac ce       	rjmp	.-680    	; 0xe58 <main+0x94>
					
					case 0b00000000:
						speed(10,80);
    1100:	60 e5       	ldi	r22, 0x50	; 80
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	8a e0       	ldi	r24, 0x0A	; 10
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(-78);
    110c:	82 eb       	ldi	r24, 0xB2	; 178
    110e:	9f ef       	ldi	r25, 0xFF	; 255
    1110:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1114:	a1 ce       	rjmp	.-702    	; 0xe58 <main+0x94>
					
					case 0b00100000:
						speed(15,80);
    1116:	60 e5       	ldi	r22, 0x50	; 80
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	8f e0       	ldi	r24, 0x0F	; 15
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(-60);
    1122:	84 ec       	ldi	r24, 0xC4	; 196
    1124:	9f ef       	ldi	r25, 0xFF	; 255
    1126:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    112a:	96 ce       	rjmp	.-724    	; 0xe58 <main+0x94>
					
					case 0b00110000:
						speed(20,80);
    112c:	60 e5       	ldi	r22, 0x50	; 80
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	84 e1       	ldi	r24, 0x14	; 20
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
						handle(-52);
    1138:	8c ec       	ldi	r24, 0xCC	; 204
    113a:	9f ef       	ldi	r25, 0xFF	; 255
    113c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
						pattern = 10;
    1140:	b0 92 60 00 	sts	0x0060, r11
					break;
    1144:	89 ce       	rjmp	.-750    	; 0xe58 <main+0x94>
					
					case 0b00000110:
					pattern=11;
    1146:	8b e0       	ldi	r24, 0x0B	; 11
    1148:	80 93 60 00 	sts	0x0060, r24
					break;
    114c:	85 ce       	rjmp	.-758    	; 0xe58 <main+0x94>
					
					default:
						pattern=12;
    114e:	8c e0       	ldi	r24, 0x0C	; 12
    1150:	80 93 60 00 	sts	0x0060, r24
					break;
    1154:	81 ce       	rjmp	.-766    	; 0xe58 <main+0x94>
				}
			break; /* case 12 */
			
			/* Cua vuong */
			case 21:
				led7(21);
    1156:	85 e1       	ldi	r24, 0x15	; 21
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				handle(0);
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
				speed(-40,-40);
    1166:	68 ed       	ldi	r22, 0xD8	; 216
    1168:	7f ef       	ldi	r23, 0xFF	; 255
    116a:	88 ed       	ldi	r24, 0xD8	; 216
    116c:	9f ef       	ldi	r25, 0xFF	; 255
    116e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
				timer_cnt = 0;
    1172:	10 92 65 00 	sts	0x0065, r1
    1176:	10 92 64 00 	sts	0x0064, r1
				encoder_pulse = 0;
    117a:	10 92 63 00 	sts	0x0063, r1
    117e:	10 92 62 00 	sts	0x0062, r1
				pattern = 22;
    1182:	86 e1       	ldi	r24, 0x16	; 22
    1184:	80 93 60 00 	sts	0x0060, r24
			break; /* case 21 */
    1188:	67 ce       	rjmp	.-818    	; 0xe58 <main+0x94>
			
			case 22:
				led7(22);
    118a:	86 e1       	ldi	r24, 0x16	; 22
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				//if( timer_cnt > (285 - (delay * 200)) || encoder_pulse > 35 )
				if (speed_wait(2))
    1192:	80 91 61 00 	lds	r24, 0x0061
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	88 f4       	brcc	.+34     	; 0x11bc <main+0x3f8>
				{
					speed(50, 50);
    119a:	62 e3       	ldi	r22, 0x32	; 50
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	82 e3       	ldi	r24, 0x32	; 50
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
					pattern = 23;
    11a6:	87 e1       	ldi	r24, 0x17	; 23
    11a8:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    11ac:	10 92 65 00 	sts	0x0065, r1
    11b0:	10 92 64 00 	sts	0x0064, r1
					encoder_pulse = 0;
    11b4:	10 92 63 00 	sts	0x0063, r1
    11b8:	10 92 62 00 	sts	0x0062, r1
				}
				
				/* Nguoc lai thi chinh thang cho xe */
				switch (sensor_cmp() & 0b01111110)
    11bc:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
    11c0:	8e 77       	andi	r24, 0x7E	; 126
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	fc 01       	movw	r30, r24
    11c6:	32 97       	sbiw	r30, 0x02	; 2
    11c8:	ef 36       	cpi	r30, 0x6F	; 111
    11ca:	f1 05       	cpc	r31, r1
    11cc:	08 f0       	brcs	.+2      	; 0x11d0 <main+0x40c>
    11ce:	44 ce       	rjmp	.-888    	; 0xe58 <main+0x94>
    11d0:	e7 52       	subi	r30, 0x27	; 39
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle(0);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    11e0:	3b ce       	rjmp	.-906    	; 0xe58 <main+0x94>
					
					case 0b00011100:
					case 0b00001000:
					handle(9);
    11e2:	89 e0       	ldi	r24, 0x09	; 9
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    11ea:	36 ce       	rjmp	.-916    	; 0xe58 <main+0x94>
					
					case 0b00001100:
					handle(17);
    11ec:	81 e1       	ldi	r24, 0x11	; 17
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    11f4:	31 ce       	rjmp	.-926    	; 0xe58 <main+0x94>
					
					case 0b00001110:
					case 0b00000100:
					handle(31);
    11f6:	8f e1       	ldi	r24, 0x1F	; 31
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    11fe:	2c ce       	rjmp	.-936    	; 0xe58 <main+0x94>
					
					case 0b00000110:
					handle(50);
    1200:	82 e3       	ldi	r24, 0x32	; 50
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1208:	27 ce       	rjmp	.-946    	; 0xe58 <main+0x94>
					
					case 0b00000010:
					handle(75);
    120a:	8b e4       	ldi	r24, 0x4B	; 75
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1212:	22 ce       	rjmp	.-956    	; 0xe58 <main+0x94>
					
					case 0b00111000:
					case 0b00010000:
					handle(-9);
    1214:	87 ef       	ldi	r24, 0xF7	; 247
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    121c:	1d ce       	rjmp	.-966    	; 0xe58 <main+0x94>
					
					case 0b00110000:
					handle(-17);
    121e:	8f ee       	ldi	r24, 0xEF	; 239
    1220:	9f ef       	ldi	r25, 0xFF	; 255
    1222:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1226:	18 ce       	rjmp	.-976    	; 0xe58 <main+0x94>
					
					case 0b01110000:
					case 0b00100000:
					handle(-31);
    1228:	81 ee       	ldi	r24, 0xE1	; 225
    122a:	9f ef       	ldi	r25, 0xFF	; 255
    122c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1230:	13 ce       	rjmp	.-986    	; 0xe58 <main+0x94>
					
					case 0b01100000:
					handle(-50);
    1232:	8e ec       	ldi	r24, 0xCE	; 206
    1234:	9f ef       	ldi	r25, 0xFF	; 255
    1236:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    123a:	0e ce       	rjmp	.-996    	; 0xe58 <main+0x94>
					
					case 0b01000000:
					handle(-75);
    123c:	85 eb       	ldi	r24, 0xB5	; 181
    123e:	9f ef       	ldi	r25, 0xFF	; 255
    1240:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1244:	09 ce       	rjmp	.-1006   	; 0xe58 <main+0x94>
					break;
				}
			break; /* case 22 */
			
			case 23:
				led7(23);
    1246:	87 e1       	ldi	r24, 0x17	; 23
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				sensor = sensor_cmp();
    124e:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
    1252:	80 93 66 00 	sts	0x0066, r24
				/* Cua trai */
				if ((encoder_pulse > 12) && (((sensor & 0b11111000) == 0b11111000) || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11111100) == 0b11111100)))	/* Neu gap tin hieu nay la goc cua 90 trai thi be */
    1256:	20 91 62 00 	lds	r18, 0x0062
    125a:	30 91 63 00 	lds	r19, 0x0063
    125e:	2d 30       	cpi	r18, 0x0D	; 13
    1260:	31 05       	cpc	r19, r1
    1262:	c0 f1       	brcs	.+112    	; 0x12d4 <main+0x510>
    1264:	98 2f       	mov	r25, r24
    1266:	98 7f       	andi	r25, 0xF8	; 248
    1268:	98 3f       	cpi	r25, 0xF8	; 248
    126a:	61 f0       	breq	.+24     	; 0x1284 <main+0x4c0>
    126c:	98 2f       	mov	r25, r24
    126e:	90 7f       	andi	r25, 0xF0	; 240
    1270:	90 3f       	cpi	r25, 0xF0	; 240
    1272:	41 f0       	breq	.+16     	; 0x1284 <main+0x4c0>
    1274:	98 2f       	mov	r25, r24
    1276:	90 7e       	andi	r25, 0xE0	; 224
    1278:	90 3e       	cpi	r25, 0xE0	; 224
    127a:	21 f0       	breq	.+8      	; 0x1284 <main+0x4c0>
    127c:	98 2f       	mov	r25, r24
    127e:	9c 7f       	andi	r25, 0xFC	; 252
    1280:	9c 3f       	cpi	r25, 0xFC	; 252
    1282:	61 f4       	brne	.+24     	; 0x129c <main+0x4d8>
				{
					pattern = 26;
    1284:	8a e1       	ldi	r24, 0x1A	; 26
    1286:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    128a:	10 92 65 00 	sts	0x0065, r1
    128e:	10 92 64 00 	sts	0x0064, r1
					encoder_pulse = 0;
    1292:	10 92 63 00 	sts	0x0063, r1
    1296:	10 92 62 00 	sts	0x0062, r1
					break;
    129a:	de cd       	rjmp	.-1092   	; 0xe58 <main+0x94>
				}
				/* Cua phai */
				if ((encoder_pulse > 12) && (((sensor & 0b00011111) == 0b00011111 ) || ((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00111111) == 0b00111111))) /* Neu gap tin hieu nay la goc cua 90 phai thi be */
    129c:	98 2f       	mov	r25, r24
    129e:	9f 71       	andi	r25, 0x1F	; 31
    12a0:	9f 31       	cpi	r25, 0x1F	; 31
    12a2:	61 f0       	breq	.+24     	; 0x12bc <main+0x4f8>
    12a4:	98 2f       	mov	r25, r24
    12a6:	97 70       	andi	r25, 0x07	; 7
    12a8:	97 30       	cpi	r25, 0x07	; 7
    12aa:	41 f0       	breq	.+16     	; 0x12bc <main+0x4f8>
    12ac:	98 2f       	mov	r25, r24
    12ae:	9f 70       	andi	r25, 0x0F	; 15
    12b0:	9f 30       	cpi	r25, 0x0F	; 15
    12b2:	21 f0       	breq	.+8      	; 0x12bc <main+0x4f8>
    12b4:	98 2f       	mov	r25, r24
    12b6:	9f 73       	andi	r25, 0x3F	; 63
    12b8:	9f 33       	cpi	r25, 0x3F	; 63
    12ba:	61 f4       	brne	.+24     	; 0x12d4 <main+0x510>
				{
					pattern = 27;
    12bc:	8b e1       	ldi	r24, 0x1B	; 27
    12be:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    12c2:	10 92 65 00 	sts	0x0065, r1
    12c6:	10 92 64 00 	sts	0x0064, r1
					encoder_pulse = 0;
    12ca:	10 92 63 00 	sts	0x0063, r1
    12ce:	10 92 62 00 	sts	0x0062, r1
					break;
    12d2:	c2 cd       	rjmp	.-1148   	; 0xe58 <main+0x94>
				}
				/* No line */
				if ((sensor & 0b01111110) == 0x00)
    12d4:	8e 77       	andi	r24, 0x7E	; 126
    12d6:	a9 f4       	brne	.+42     	; 0x1302 <main+0x53e>
				{
					pattern = 73;
    12d8:	89 e4       	ldi	r24, 0x49	; 73
    12da:	80 93 60 00 	sts	0x0060, r24
					handle(0);
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					speed(100, 100);
    12e6:	64 e6       	ldi	r22, 0x64	; 100
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	84 e6       	ldi	r24, 0x64	; 100
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
					timer_cnt = 0;
    12f2:	10 92 65 00 	sts	0x0065, r1
    12f6:	10 92 64 00 	sts	0x0064, r1
					encoder_pulse = 0;
    12fa:	10 92 63 00 	sts	0x0063, r1
    12fe:	10 92 62 00 	sts	0x0062, r1
				}
				
				/* Nguoc lai thi chinh thang cho xe */
				switch (sensor_cmp() & 0b01111110)
    1302:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
    1306:	8e 77       	andi	r24, 0x7E	; 126
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	fc 01       	movw	r30, r24
    130c:	32 97       	sbiw	r30, 0x02	; 2
    130e:	ef 36       	cpi	r30, 0x6F	; 111
    1310:	f1 05       	cpc	r31, r1
    1312:	08 f0       	brcs	.+2      	; 0x1316 <main+0x552>
    1314:	a1 cd       	rjmp	.-1214   	; 0xe58 <main+0x94>
    1316:	e8 5b       	subi	r30, 0xB8	; 184
    1318:	fe 4f       	sbci	r31, 0xFE	; 254
    131a:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle(0);
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1326:	98 cd       	rjmp	.-1232   	; 0xe58 <main+0x94>
					
					case 0b00011100:
					case 0b00001000:
					handle(9);
    1328:	89 e0       	ldi	r24, 0x09	; 9
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1330:	93 cd       	rjmp	.-1242   	; 0xe58 <main+0x94>
					
					case 0b00001100:
					handle(17);
    1332:	81 e1       	ldi	r24, 0x11	; 17
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    133a:	8e cd       	rjmp	.-1252   	; 0xe58 <main+0x94>
					
					case 0b00001110:
					case 0b00000100:
					handle(31);
    133c:	8f e1       	ldi	r24, 0x1F	; 31
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1344:	89 cd       	rjmp	.-1262   	; 0xe58 <main+0x94>
					
					case 0b00000110:
					handle(50);
    1346:	82 e3       	ldi	r24, 0x32	; 50
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    134e:	84 cd       	rjmp	.-1272   	; 0xe58 <main+0x94>
					
					case 0b00000010:
					handle(75);
    1350:	8b e4       	ldi	r24, 0x4B	; 75
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1358:	7f cd       	rjmp	.-1282   	; 0xe58 <main+0x94>
					
					case 0b00111000:
					case 0b00010000:
					handle(-9);
    135a:	87 ef       	ldi	r24, 0xF7	; 247
    135c:	9f ef       	ldi	r25, 0xFF	; 255
    135e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1362:	7a cd       	rjmp	.-1292   	; 0xe58 <main+0x94>
					
					case 0b00110000:
					handle(-17);
    1364:	8f ee       	ldi	r24, 0xEF	; 239
    1366:	9f ef       	ldi	r25, 0xFF	; 255
    1368:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    136c:	75 cd       	rjmp	.-1302   	; 0xe58 <main+0x94>
					
					case 0b01110000:
					case 0b00100000:
					handle(-31);
    136e:	81 ee       	ldi	r24, 0xE1	; 225
    1370:	9f ef       	ldi	r25, 0xFF	; 255
    1372:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1376:	70 cd       	rjmp	.-1312   	; 0xe58 <main+0x94>
					
					case 0b01100000:
					handle(-50);
    1378:	8e ec       	ldi	r24, 0xCE	; 206
    137a:	9f ef       	ldi	r25, 0xFF	; 255
    137c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    1380:	6b cd       	rjmp	.-1322   	; 0xe58 <main+0x94>
					
					case 0b01000000:
					handle(-75);
    1382:	85 eb       	ldi	r24, 0xB5	; 181
    1384:	9f ef       	ldi	r25, 0xFF	; 255
    1386:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
					break;
    138a:	66 cd       	rjmp	.-1332   	; 0xe58 <main+0x94>
					break;
				}
			break; /* case 23 */
			
			case 26: /* trai */
				led7(26);
    138c:	8a e1       	ldi	r24, 0x1A	; 26
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				handle(-SERVO_ANGLE_MAX); /* -120 */
    1394:	87 e4       	ldi	r24, 0x47	; 71
    1396:	9f ef       	ldi	r25, 0xFF	; 255
    1398:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
				speed( -100 , 80 );
    139c:	60 e5       	ldi	r22, 0x50	; 80
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	8c e9       	ldi	r24, 0x9C	; 156
    13a2:	9f ef       	ldi	r25, 0xFF	; 255
    13a4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
				pattern = 31;
    13a8:	90 92 60 00 	sts	0x0060, r9
				timer_cnt = 0;
    13ac:	10 92 65 00 	sts	0x0065, r1
    13b0:	10 92 64 00 	sts	0x0064, r1
				encoder_pulse = 0;
    13b4:	10 92 63 00 	sts	0x0063, r1
    13b8:	10 92 62 00 	sts	0x0062, r1
			break; /* case 26 */
    13bc:	4d cd       	rjmp	.-1382   	; 0xe58 <main+0x94>
			
			case 27: /* phai */
				led7(27);
    13be:	8b e1       	ldi	r24, 0x1B	; 27
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				handle(SERVO_ANGLE_MAX); /* 120 */
    13c6:	89 eb       	ldi	r24, 0xB9	; 185
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
				speed( 80 , -100 );
    13ce:	6c e9       	ldi	r22, 0x9C	; 156
    13d0:	7f ef       	ldi	r23, 0xFF	; 255
    13d2:	80 e5       	ldi	r24, 0x50	; 80
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
				pattern = 41;
    13da:	80 92 60 00 	sts	0x0060, r8
				timer_cnt = 0;
    13de:	10 92 65 00 	sts	0x0065, r1
    13e2:	10 92 64 00 	sts	0x0064, r1
				encoder_pulse = 0;
    13e6:	10 92 63 00 	sts	0x0063, r1
    13ea:	10 92 62 00 	sts	0x0062, r1
			break; /* case 27 */
    13ee:	34 cd       	rjmp	.-1432   	; 0xe58 <main+0x94>
			
			case 31:
				led7(31);
    13f0:	8f e1       	ldi	r24, 0x1F	; 31
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				if( timer_cnt > 200 ) /* 200ms */
    13f8:	80 91 64 00 	lds	r24, 0x0064
    13fc:	90 91 65 00 	lds	r25, 0x0065
    1400:	89 3c       	cpi	r24, 0xC9	; 201
    1402:	91 05       	cpc	r25, r1
    1404:	08 f4       	brcc	.+2      	; 0x1408 <main+0x644>
    1406:	28 cd       	rjmp	.-1456   	; 0xe58 <main+0x94>
				{
					pattern = 32;
    1408:	40 92 60 00 	sts	0x0060, r4
					timer_cnt = 0;
    140c:	10 92 65 00 	sts	0x0065, r1
    1410:	10 92 64 00 	sts	0x0064, r1
					encoder_pulse = 0;
    1414:	10 92 63 00 	sts	0x0063, r1
    1418:	10 92 62 00 	sts	0x0062, r1
    141c:	1d cd       	rjmp	.-1478   	; 0xe58 <main+0x94>
				}
			break; /* case 31 */
			
			case 32:
				led7(32);
    141e:	80 e2       	ldi	r24, 0x20	; 32
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				sensor = sensor_cmp();
    1426:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
    142a:	80 93 66 00 	sts	0x0066, r24
				if((sensor & 0b11100111) == 0b00100000)
    142e:	87 7e       	andi	r24, 0xE7	; 231
    1430:	80 32       	cpi	r24, 0x20	; 32
    1432:	09 f0       	breq	.+2      	; 0x1436 <main+0x672>
    1434:	11 cd       	rjmp	.-1502   	; 0xe58 <main+0x94>
				{
					pattern = 10;
    1436:	b0 92 60 00 	sts	0x0060, r11
    143a:	0e cd       	rjmp	.-1508   	; 0xe58 <main+0x94>
				}
			break; /* case 32 */
			
			case 41:
				led7(41);
    143c:	89 e2       	ldi	r24, 0x29	; 41
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				if( timer_cnt > 200 ) /* 200ms */
    1444:	80 91 64 00 	lds	r24, 0x0064
    1448:	90 91 65 00 	lds	r25, 0x0065
    144c:	89 3c       	cpi	r24, 0xC9	; 201
    144e:	91 05       	cpc	r25, r1
    1450:	08 f4       	brcc	.+2      	; 0x1454 <main+0x690>
    1452:	02 cd       	rjmp	.-1532   	; 0xe58 <main+0x94>
				{
					pattern = 42;
    1454:	50 92 60 00 	sts	0x0060, r5
					timer_cnt = 0;
    1458:	10 92 65 00 	sts	0x0065, r1
    145c:	10 92 64 00 	sts	0x0064, r1
    1460:	fb cc       	rjmp	.-1546   	; 0xe58 <main+0x94>
				}
			break; /* case 41 */
			
			case 42:
				led7(42);
    1462:	8a e2       	ldi	r24, 0x2A	; 42
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				sensor = sensor_cmp();
    146a:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
    146e:	80 93 66 00 	sts	0x0066, r24
				if((sensor & 0b11100111) == 0b00000100) 
    1472:	87 7e       	andi	r24, 0xE7	; 231
    1474:	84 30       	cpi	r24, 0x04	; 4
    1476:	09 f0       	breq	.+2      	; 0x147a <main+0x6b6>
    1478:	ef cc       	rjmp	.-1570   	; 0xe58 <main+0x94>
				{
					pattern = 10;
    147a:	b0 92 60 00 	sts	0x0060, r11
    147e:	ec cc       	rjmp	.-1576   	; 0xe58 <main+0x94>
				}
			break; /* case 42 */
			
			/* Chuyen lan trai */
			case 51:
				led7(51);
    1480:	83 e3       	ldi	r24, 0x33	; 51
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				sensor = sensor_cmp();
    1488:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
    148c:	80 93 66 00 	sts	0x0066, r24
				if (((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111))
    1490:	98 2f       	mov	r25, r24
    1492:	97 70       	andi	r25, 0x07	; 7
    1494:	97 30       	cpi	r25, 0x07	; 7
    1496:	39 f0       	breq	.+14     	; 0x14a6 <main+0x6e2>
    1498:	98 2f       	mov	r25, r24
    149a:	9f 70       	andi	r25, 0x0F	; 15
    149c:	9f 30       	cpi	r25, 0x0F	; 15
    149e:	19 f0       	breq	.+6      	; 0x14a6 <main+0x6e2>
    14a0:	8f 71       	andi	r24, 0x1F	; 31
    14a2:	8f 31       	cpi	r24, 0x1F	; 31
    14a4:	19 f4       	brne	.+6      	; 0x14ac <main+0x6e8>
				{
					pattern = 21;
    14a6:	a0 92 60 00 	sts	0x0060, r10
					break;
    14aa:	d6 cc       	rjmp	.-1620   	; 0xe58 <main+0x94>
				}
				
				speed(100, 100);
    14ac:	64 e6       	ldi	r22, 0x64	; 100
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	84 e6       	ldi	r24, 0x64	; 100
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    14b8:	80 91 62 00 	lds	r24, 0x0062
    14bc:	90 91 63 00 	lds	r25, 0x0063
    14c0:	49 97       	sbiw	r24, 0x19	; 25
    14c2:	40 f4       	brcc	.+16     	; 0x14d4 <main+0x710>
    14c4:	80 91 64 00 	lds	r24, 0x0064
    14c8:	90 91 65 00 	lds	r25, 0x0065
    14cc:	88 37       	cpi	r24, 0x78	; 120
    14ce:	91 05       	cpc	r25, r1
    14d0:	08 f4       	brcc	.+2      	; 0x14d4 <main+0x710>
    14d2:	c2 cc       	rjmp	.-1660   	; 0xe58 <main+0x94>
				{
					pattern = 52;
    14d4:	84 e3       	ldi	r24, 0x34	; 52
    14d6:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    14da:	10 92 65 00 	sts	0x0065, r1
    14de:	10 92 64 00 	sts	0x0064, r1
					encoder_pulse=0;
    14e2:	10 92 63 00 	sts	0x0063, r1
    14e6:	10 92 62 00 	sts	0x0062, r1
    14ea:	b6 cc       	rjmp	.-1684   	; 0xe58 <main+0x94>
				}
			break; /* case 51 */
			
			case 52:
				led7(52);
    14ec:	84 e3       	ldi	r24, 0x34	; 52
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				handle(-50);
    14f4:	8e ec       	ldi	r24, 0xCE	; 206
    14f6:	9f ef       	ldi	r25, 0xFF	; 255
    14f8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
				speed( 80 ,100 );
    14fc:	64 e6       	ldi	r22, 0x64	; 100
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	80 e5       	ldi	r24, 0x50	; 80
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
				pattern = 53;
    1508:	70 92 60 00 	sts	0x0060, r7
				timer_cnt = 0;
    150c:	10 92 65 00 	sts	0x0065, r1
    1510:	10 92 64 00 	sts	0x0064, r1
				encoder_pulse = 0;
    1514:	10 92 63 00 	sts	0x0063, r1
    1518:	10 92 62 00 	sts	0x0062, r1
			break; /* case 52 */
    151c:	9d cc       	rjmp	.-1734   	; 0xe58 <main+0x94>
			
			case 53:
				led7(53);
    151e:	85 e3       	ldi	r24, 0x35	; 53
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				sensor = sensor_cmp();
    1526:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
    152a:	28 2e       	mov	r2, r24
    152c:	80 93 66 00 	sts	0x0066, r24
				if(((encoder_pulse > 100) || (timer_cnt > 200 * delay)) && ((sensor & 0b00110000 ) == 0b00110000))
    1530:	80 91 62 00 	lds	r24, 0x0062
    1534:	90 91 63 00 	lds	r25, 0x0063
    1538:	85 36       	cpi	r24, 0x65	; 101
    153a:	91 05       	cpc	r25, r1
    153c:	08 f5       	brcc	.+66     	; 0x1580 <main+0x7bc>
    153e:	60 91 64 00 	lds	r22, 0x0064
    1542:	70 91 65 00 	lds	r23, 0x0065
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 92 0c 	call	0x1924	; 0x1924 <__floatunsisf>
    154e:	6b 01       	movw	r12, r22
    1550:	7c 01       	movw	r14, r24
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	48 e4       	ldi	r20, 0x48	; 72
    1558:	53 e4       	ldi	r21, 0x43	; 67
    155a:	60 91 6a 00 	lds	r22, 0x006A
    155e:	70 91 6b 00 	lds	r23, 0x006B
    1562:	80 91 6c 00 	lds	r24, 0x006C
    1566:	90 91 6d 00 	lds	r25, 0x006D
    156a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    156e:	9b 01       	movw	r18, r22
    1570:	ac 01       	movw	r20, r24
    1572:	c7 01       	movw	r24, r14
    1574:	b6 01       	movw	r22, r12
    1576:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__gesf2>
    157a:	18 16       	cp	r1, r24
    157c:	0c f0       	brlt	.+2      	; 0x1580 <main+0x7bc>
    157e:	6c cc       	rjmp	.-1832   	; 0xe58 <main+0x94>
    1580:	82 2d       	mov	r24, r2
    1582:	80 73       	andi	r24, 0x30	; 48
    1584:	80 33       	cpi	r24, 0x30	; 48
    1586:	09 f0       	breq	.+2      	; 0x158a <main+0x7c6>
    1588:	67 cc       	rjmp	.-1842   	; 0xe58 <main+0x94>
				{
					pattern = 10;
    158a:	b0 92 60 00 	sts	0x0060, r11
    158e:	64 cc       	rjmp	.-1848   	; 0xe58 <main+0x94>
				}
			break; /* case 53 */
			
			/* Chuyen lan phai */
			case 61:
				led7(61);
    1590:	8d e3       	ldi	r24, 0x3D	; 61
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				sensor = sensor_cmp();
    1598:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
    159c:	80 93 66 00 	sts	0x0066, r24
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000))
    15a0:	98 2f       	mov	r25, r24
    15a2:	90 7e       	andi	r25, 0xE0	; 224
    15a4:	90 3e       	cpi	r25, 0xE0	; 224
    15a6:	39 f0       	breq	.+14     	; 0x15b6 <main+0x7f2>
    15a8:	98 2f       	mov	r25, r24
    15aa:	90 7f       	andi	r25, 0xF0	; 240
    15ac:	90 3f       	cpi	r25, 0xF0	; 240
    15ae:	19 f0       	breq	.+6      	; 0x15b6 <main+0x7f2>
    15b0:	88 7f       	andi	r24, 0xF8	; 248
    15b2:	88 3f       	cpi	r24, 0xF8	; 248
    15b4:	19 f4       	brne	.+6      	; 0x15bc <main+0x7f8>
				{
					pattern = 21 ;
    15b6:	a0 92 60 00 	sts	0x0060, r10
					break;
    15ba:	4e cc       	rjmp	.-1892   	; 0xe58 <main+0x94>
				}
				
				speed(100, 100);
    15bc:	64 e6       	ldi	r22, 0x64	; 100
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	84 e6       	ldi	r24, 0x64	; 100
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    15c8:	80 91 62 00 	lds	r24, 0x0062
    15cc:	90 91 63 00 	lds	r25, 0x0063
    15d0:	49 97       	sbiw	r24, 0x19	; 25
    15d2:	40 f4       	brcc	.+16     	; 0x15e4 <main+0x820>
    15d4:	80 91 64 00 	lds	r24, 0x0064
    15d8:	90 91 65 00 	lds	r25, 0x0065
    15dc:	88 37       	cpi	r24, 0x78	; 120
    15de:	91 05       	cpc	r25, r1
    15e0:	08 f4       	brcc	.+2      	; 0x15e4 <main+0x820>
    15e2:	3a cc       	rjmp	.-1932   	; 0xe58 <main+0x94>
				{
					pattern = 62;
    15e4:	30 92 60 00 	sts	0x0060, r3
					timer_cnt = 0;
    15e8:	10 92 65 00 	sts	0x0065, r1
    15ec:	10 92 64 00 	sts	0x0064, r1
					encoder_pulse=0;
    15f0:	10 92 63 00 	sts	0x0063, r1
    15f4:	10 92 62 00 	sts	0x0062, r1
    15f8:	2f cc       	rjmp	.-1954   	; 0xe58 <main+0x94>
				}
			break; /* case 61 */
			
			case 62:
				led7(62);
    15fa:	8e e3       	ldi	r24, 0x3E	; 62
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				handle(50);
    1602:	82 e3       	ldi	r24, 0x32	; 50
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
				speed( 100 ,80 );
    160a:	60 e5       	ldi	r22, 0x50	; 80
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	84 e6       	ldi	r24, 0x64	; 100
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
				pattern = 63;
    1616:	60 92 60 00 	sts	0x0060, r6
				timer_cnt = 0;
    161a:	10 92 65 00 	sts	0x0065, r1
    161e:	10 92 64 00 	sts	0x0064, r1
				encoder_pulse = 0;
    1622:	10 92 63 00 	sts	0x0063, r1
    1626:	10 92 62 00 	sts	0x0062, r1
			break; /* case 62 */
    162a:	16 cc       	rjmp	.-2004   	; 0xe58 <main+0x94>
			
			case 63:
				led7(63);
    162c:	8f e3       	ldi	r24, 0x3F	; 63
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
				
				sensor = sensor_cmp();
    1634:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
    1638:	28 2e       	mov	r2, r24
    163a:	80 93 66 00 	sts	0x0066, r24
				if(((encoder_pulse > 100) || (timer_cnt > 200 * delay)) && ((sensor & 0b00110000 ) == 0b00110000))
    163e:	80 91 62 00 	lds	r24, 0x0062
    1642:	90 91 63 00 	lds	r25, 0x0063
    1646:	85 36       	cpi	r24, 0x65	; 101
    1648:	91 05       	cpc	r25, r1
    164a:	08 f5       	brcc	.+66     	; 0x168e <main+0x8ca>
    164c:	60 91 64 00 	lds	r22, 0x0064
    1650:	70 91 65 00 	lds	r23, 0x0065
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 92 0c 	call	0x1924	; 0x1924 <__floatunsisf>
    165c:	6b 01       	movw	r12, r22
    165e:	7c 01       	movw	r14, r24
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	48 e4       	ldi	r20, 0x48	; 72
    1666:	53 e4       	ldi	r21, 0x43	; 67
    1668:	60 91 6a 00 	lds	r22, 0x006A
    166c:	70 91 6b 00 	lds	r23, 0x006B
    1670:	80 91 6c 00 	lds	r24, 0x006C
    1674:	90 91 6d 00 	lds	r25, 0x006D
    1678:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulsf3>
    167c:	9b 01       	movw	r18, r22
    167e:	ac 01       	movw	r20, r24
    1680:	c7 01       	movw	r24, r14
    1682:	b6 01       	movw	r22, r12
    1684:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__gesf2>
    1688:	18 16       	cp	r1, r24
    168a:	0c f0       	brlt	.+2      	; 0x168e <main+0x8ca>
    168c:	e5 cb       	rjmp	.-2102   	; 0xe58 <main+0x94>
    168e:	82 2d       	mov	r24, r2
    1690:	80 73       	andi	r24, 0x30	; 48
    1692:	80 33       	cpi	r24, 0x30	; 48
    1694:	09 f0       	breq	.+2      	; 0x1698 <main+0x8d4>
    1696:	e0 cb       	rjmp	.-2112   	; 0xe58 <main+0x94>
				{
					pattern = 10;
    1698:	b0 92 60 00 	sts	0x0060, r11
    169c:	dd cb       	rjmp	.-2118   	; 0xe58 <main+0x94>
				}
			break; /* case 63 */
			
			/* No line */
			case 73:
			led7(73);
    169e:	89 e4       	ldi	r24, 0x49	; 73
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_Z4led7j>
    16a6:	d0 93 7a 00 	sts	0x007A, r29
    16aa:	c0 93 79 00 	sts	0x0079, r28
			set_encoder(12);
			speed(60,60);
    16ae:	6c e3       	ldi	r22, 0x3C	; 60
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	8c e3       	ldi	r24, 0x3C	; 60
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z5speedii>
			sensor = sensor_cmp();
    16ba:	0e 94 a9 04 	call	0x952	; 0x952 <_Z10sensor_cmpv>
    16be:	80 93 66 00 	sts	0x0066, r24
			if ((sensor & 0b11000000) == 0b11000000) handle(40);
    16c2:	80 7c       	andi	r24, 0xC0	; 192
    16c4:	80 3c       	cpi	r24, 0xC0	; 192
    16c6:	21 f4       	brne	.+8      	; 0x16d0 <main+0x90c>
    16c8:	88 e2       	ldi	r24, 0x28	; 40
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
			if ((sensor & 0b10000000) == 0b10000000) handle(30);
    16d0:	80 91 66 00 	lds	r24, 0x0066
    16d4:	88 23       	and	r24, r24
    16d6:	24 f4       	brge	.+8      	; 0x16e0 <main+0x91c>
    16d8:	8e e1       	ldi	r24, 0x1E	; 30
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
			if ((sensor & 0b00000011) == 0b00000011) handle(-40);
    16e0:	80 91 66 00 	lds	r24, 0x0066
    16e4:	83 70       	andi	r24, 0x03	; 3
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	21 f4       	brne	.+8      	; 0x16f2 <main+0x92e>
    16ea:	88 ed       	ldi	r24, 0xD8	; 216
    16ec:	9f ef       	ldi	r25, 0xFF	; 255
    16ee:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
			if ((sensor & 0b00000001) == 0b00000001) handle(-30);
    16f2:	80 91 66 00 	lds	r24, 0x0066
    16f6:	80 ff       	sbrs	r24, 0
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <main+0x93e>
    16fa:	82 ee       	ldi	r24, 0xE2	; 226
    16fc:	9f ef       	ldi	r25, 0xFF	; 255
    16fe:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z6handlei>
			if ((sensor & 0b00111100) != 0)
    1702:	80 91 66 00 	lds	r24, 0x0066
    1706:	8c 73       	andi	r24, 0x3C	; 60
    1708:	09 f4       	brne	.+2      	; 0x170c <main+0x948>
    170a:	a6 cb       	rjmp	.-2228   	; 0xe58 <main+0x94>
			{
				pattern = 10;
    170c:	b0 92 60 00 	sts	0x0060, r11
    1710:	10 93 7a 00 	sts	0x007A, r17
    1714:	00 93 79 00 	sts	0x0079, r16
    1718:	9f cb       	rjmp	.-2242   	; 0xe58 <main+0x94>
				set_encoder(-1);
			}
			break; /* case 73 */
			
			default:
				pattern = 10;
    171a:	b0 92 60 00 	sts	0x0060, r11
			break; /* default */
    171e:	9c cb       	rjmp	.-2248   	; 0xe58 <main+0x94>

00001720 <__subsf3>:
    1720:	50 58       	subi	r21, 0x80	; 128

00001722 <__addsf3>:
    1722:	bb 27       	eor	r27, r27
    1724:	aa 27       	eor	r26, r26
    1726:	0e d0       	rcall	.+28     	; 0x1744 <__addsf3x>
    1728:	75 c1       	rjmp	.+746    	; 0x1a14 <__fp_round>
    172a:	66 d1       	rcall	.+716    	; 0x19f8 <__fp_pscA>
    172c:	30 f0       	brcs	.+12     	; 0x173a <__addsf3+0x18>
    172e:	6b d1       	rcall	.+726    	; 0x1a06 <__fp_pscB>
    1730:	20 f0       	brcs	.+8      	; 0x173a <__addsf3+0x18>
    1732:	31 f4       	brne	.+12     	; 0x1740 <__addsf3+0x1e>
    1734:	9f 3f       	cpi	r25, 0xFF	; 255
    1736:	11 f4       	brne	.+4      	; 0x173c <__addsf3+0x1a>
    1738:	1e f4       	brtc	.+6      	; 0x1740 <__addsf3+0x1e>
    173a:	5b c1       	rjmp	.+694    	; 0x19f2 <__fp_nan>
    173c:	0e f4       	brtc	.+2      	; 0x1740 <__addsf3+0x1e>
    173e:	e0 95       	com	r30
    1740:	e7 fb       	bst	r30, 7
    1742:	51 c1       	rjmp	.+674    	; 0x19e6 <__fp_inf>

00001744 <__addsf3x>:
    1744:	e9 2f       	mov	r30, r25
    1746:	77 d1       	rcall	.+750    	; 0x1a36 <__fp_split3>
    1748:	80 f3       	brcs	.-32     	; 0x172a <__addsf3+0x8>
    174a:	ba 17       	cp	r27, r26
    174c:	62 07       	cpc	r22, r18
    174e:	73 07       	cpc	r23, r19
    1750:	84 07       	cpc	r24, r20
    1752:	95 07       	cpc	r25, r21
    1754:	18 f0       	brcs	.+6      	; 0x175c <__addsf3x+0x18>
    1756:	71 f4       	brne	.+28     	; 0x1774 <__addsf3x+0x30>
    1758:	9e f5       	brtc	.+102    	; 0x17c0 <__addsf3x+0x7c>
    175a:	8f c1       	rjmp	.+798    	; 0x1a7a <__fp_zero>
    175c:	0e f4       	brtc	.+2      	; 0x1760 <__addsf3x+0x1c>
    175e:	e0 95       	com	r30
    1760:	0b 2e       	mov	r0, r27
    1762:	ba 2f       	mov	r27, r26
    1764:	a0 2d       	mov	r26, r0
    1766:	0b 01       	movw	r0, r22
    1768:	b9 01       	movw	r22, r18
    176a:	90 01       	movw	r18, r0
    176c:	0c 01       	movw	r0, r24
    176e:	ca 01       	movw	r24, r20
    1770:	a0 01       	movw	r20, r0
    1772:	11 24       	eor	r1, r1
    1774:	ff 27       	eor	r31, r31
    1776:	59 1b       	sub	r21, r25
    1778:	99 f0       	breq	.+38     	; 0x17a0 <__addsf3x+0x5c>
    177a:	59 3f       	cpi	r21, 0xF9	; 249
    177c:	50 f4       	brcc	.+20     	; 0x1792 <__addsf3x+0x4e>
    177e:	50 3e       	cpi	r21, 0xE0	; 224
    1780:	68 f1       	brcs	.+90     	; 0x17dc <__addsf3x+0x98>
    1782:	1a 16       	cp	r1, r26
    1784:	f0 40       	sbci	r31, 0x00	; 0
    1786:	a2 2f       	mov	r26, r18
    1788:	23 2f       	mov	r18, r19
    178a:	34 2f       	mov	r19, r20
    178c:	44 27       	eor	r20, r20
    178e:	58 5f       	subi	r21, 0xF8	; 248
    1790:	f3 cf       	rjmp	.-26     	; 0x1778 <__addsf3x+0x34>
    1792:	46 95       	lsr	r20
    1794:	37 95       	ror	r19
    1796:	27 95       	ror	r18
    1798:	a7 95       	ror	r26
    179a:	f0 40       	sbci	r31, 0x00	; 0
    179c:	53 95       	inc	r21
    179e:	c9 f7       	brne	.-14     	; 0x1792 <__addsf3x+0x4e>
    17a0:	7e f4       	brtc	.+30     	; 0x17c0 <__addsf3x+0x7c>
    17a2:	1f 16       	cp	r1, r31
    17a4:	ba 0b       	sbc	r27, r26
    17a6:	62 0b       	sbc	r22, r18
    17a8:	73 0b       	sbc	r23, r19
    17aa:	84 0b       	sbc	r24, r20
    17ac:	ba f0       	brmi	.+46     	; 0x17dc <__addsf3x+0x98>
    17ae:	91 50       	subi	r25, 0x01	; 1
    17b0:	a1 f0       	breq	.+40     	; 0x17da <__addsf3x+0x96>
    17b2:	ff 0f       	add	r31, r31
    17b4:	bb 1f       	adc	r27, r27
    17b6:	66 1f       	adc	r22, r22
    17b8:	77 1f       	adc	r23, r23
    17ba:	88 1f       	adc	r24, r24
    17bc:	c2 f7       	brpl	.-16     	; 0x17ae <__addsf3x+0x6a>
    17be:	0e c0       	rjmp	.+28     	; 0x17dc <__addsf3x+0x98>
    17c0:	ba 0f       	add	r27, r26
    17c2:	62 1f       	adc	r22, r18
    17c4:	73 1f       	adc	r23, r19
    17c6:	84 1f       	adc	r24, r20
    17c8:	48 f4       	brcc	.+18     	; 0x17dc <__addsf3x+0x98>
    17ca:	87 95       	ror	r24
    17cc:	77 95       	ror	r23
    17ce:	67 95       	ror	r22
    17d0:	b7 95       	ror	r27
    17d2:	f7 95       	ror	r31
    17d4:	9e 3f       	cpi	r25, 0xFE	; 254
    17d6:	08 f0       	brcs	.+2      	; 0x17da <__addsf3x+0x96>
    17d8:	b3 cf       	rjmp	.-154    	; 0x1740 <__addsf3+0x1e>
    17da:	93 95       	inc	r25
    17dc:	88 0f       	add	r24, r24
    17de:	08 f0       	brcs	.+2      	; 0x17e2 <__addsf3x+0x9e>
    17e0:	99 27       	eor	r25, r25
    17e2:	ee 0f       	add	r30, r30
    17e4:	97 95       	ror	r25
    17e6:	87 95       	ror	r24
    17e8:	08 95       	ret

000017ea <__cmpsf2>:
    17ea:	d9 d0       	rcall	.+434    	; 0x199e <__fp_cmp>
    17ec:	08 f4       	brcc	.+2      	; 0x17f0 <__cmpsf2+0x6>
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	08 95       	ret

000017f2 <__divsf3>:
    17f2:	0c d0       	rcall	.+24     	; 0x180c <__divsf3x>
    17f4:	0f c1       	rjmp	.+542    	; 0x1a14 <__fp_round>
    17f6:	07 d1       	rcall	.+526    	; 0x1a06 <__fp_pscB>
    17f8:	40 f0       	brcs	.+16     	; 0x180a <__divsf3+0x18>
    17fa:	fe d0       	rcall	.+508    	; 0x19f8 <__fp_pscA>
    17fc:	30 f0       	brcs	.+12     	; 0x180a <__divsf3+0x18>
    17fe:	21 f4       	brne	.+8      	; 0x1808 <__divsf3+0x16>
    1800:	5f 3f       	cpi	r21, 0xFF	; 255
    1802:	19 f0       	breq	.+6      	; 0x180a <__divsf3+0x18>
    1804:	f0 c0       	rjmp	.+480    	; 0x19e6 <__fp_inf>
    1806:	51 11       	cpse	r21, r1
    1808:	39 c1       	rjmp	.+626    	; 0x1a7c <__fp_szero>
    180a:	f3 c0       	rjmp	.+486    	; 0x19f2 <__fp_nan>

0000180c <__divsf3x>:
    180c:	14 d1       	rcall	.+552    	; 0x1a36 <__fp_split3>
    180e:	98 f3       	brcs	.-26     	; 0x17f6 <__divsf3+0x4>

00001810 <__divsf3_pse>:
    1810:	99 23       	and	r25, r25
    1812:	c9 f3       	breq	.-14     	; 0x1806 <__divsf3+0x14>
    1814:	55 23       	and	r21, r21
    1816:	b1 f3       	breq	.-20     	; 0x1804 <__divsf3+0x12>
    1818:	95 1b       	sub	r25, r21
    181a:	55 0b       	sbc	r21, r21
    181c:	bb 27       	eor	r27, r27
    181e:	aa 27       	eor	r26, r26
    1820:	62 17       	cp	r22, r18
    1822:	73 07       	cpc	r23, r19
    1824:	84 07       	cpc	r24, r20
    1826:	38 f0       	brcs	.+14     	; 0x1836 <__divsf3_pse+0x26>
    1828:	9f 5f       	subi	r25, 0xFF	; 255
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	44 1f       	adc	r20, r20
    1832:	aa 1f       	adc	r26, r26
    1834:	a9 f3       	breq	.-22     	; 0x1820 <__divsf3_pse+0x10>
    1836:	33 d0       	rcall	.+102    	; 0x189e <__divsf3_pse+0x8e>
    1838:	0e 2e       	mov	r0, r30
    183a:	3a f0       	brmi	.+14     	; 0x184a <__divsf3_pse+0x3a>
    183c:	e0 e8       	ldi	r30, 0x80	; 128
    183e:	30 d0       	rcall	.+96     	; 0x18a0 <__divsf3_pse+0x90>
    1840:	91 50       	subi	r25, 0x01	; 1
    1842:	50 40       	sbci	r21, 0x00	; 0
    1844:	e6 95       	lsr	r30
    1846:	00 1c       	adc	r0, r0
    1848:	ca f7       	brpl	.-14     	; 0x183c <__divsf3_pse+0x2c>
    184a:	29 d0       	rcall	.+82     	; 0x189e <__divsf3_pse+0x8e>
    184c:	fe 2f       	mov	r31, r30
    184e:	27 d0       	rcall	.+78     	; 0x189e <__divsf3_pse+0x8e>
    1850:	66 0f       	add	r22, r22
    1852:	77 1f       	adc	r23, r23
    1854:	88 1f       	adc	r24, r24
    1856:	bb 1f       	adc	r27, r27
    1858:	26 17       	cp	r18, r22
    185a:	37 07       	cpc	r19, r23
    185c:	48 07       	cpc	r20, r24
    185e:	ab 07       	cpc	r26, r27
    1860:	b0 e8       	ldi	r27, 0x80	; 128
    1862:	09 f0       	breq	.+2      	; 0x1866 <__divsf3_pse+0x56>
    1864:	bb 0b       	sbc	r27, r27
    1866:	80 2d       	mov	r24, r0
    1868:	bf 01       	movw	r22, r30
    186a:	ff 27       	eor	r31, r31
    186c:	93 58       	subi	r25, 0x83	; 131
    186e:	5f 4f       	sbci	r21, 0xFF	; 255
    1870:	2a f0       	brmi	.+10     	; 0x187c <__divsf3_pse+0x6c>
    1872:	9e 3f       	cpi	r25, 0xFE	; 254
    1874:	51 05       	cpc	r21, r1
    1876:	68 f0       	brcs	.+26     	; 0x1892 <__divsf3_pse+0x82>
    1878:	b6 c0       	rjmp	.+364    	; 0x19e6 <__fp_inf>
    187a:	00 c1       	rjmp	.+512    	; 0x1a7c <__fp_szero>
    187c:	5f 3f       	cpi	r21, 0xFF	; 255
    187e:	ec f3       	brlt	.-6      	; 0x187a <__divsf3_pse+0x6a>
    1880:	98 3e       	cpi	r25, 0xE8	; 232
    1882:	dc f3       	brlt	.-10     	; 0x187a <__divsf3_pse+0x6a>
    1884:	86 95       	lsr	r24
    1886:	77 95       	ror	r23
    1888:	67 95       	ror	r22
    188a:	b7 95       	ror	r27
    188c:	f7 95       	ror	r31
    188e:	9f 5f       	subi	r25, 0xFF	; 255
    1890:	c9 f7       	brne	.-14     	; 0x1884 <__divsf3_pse+0x74>
    1892:	88 0f       	add	r24, r24
    1894:	91 1d       	adc	r25, r1
    1896:	96 95       	lsr	r25
    1898:	87 95       	ror	r24
    189a:	97 f9       	bld	r25, 7
    189c:	08 95       	ret
    189e:	e1 e0       	ldi	r30, 0x01	; 1
    18a0:	66 0f       	add	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	88 1f       	adc	r24, r24
    18a6:	bb 1f       	adc	r27, r27
    18a8:	62 17       	cp	r22, r18
    18aa:	73 07       	cpc	r23, r19
    18ac:	84 07       	cpc	r24, r20
    18ae:	ba 07       	cpc	r27, r26
    18b0:	20 f0       	brcs	.+8      	; 0x18ba <__divsf3_pse+0xaa>
    18b2:	62 1b       	sub	r22, r18
    18b4:	73 0b       	sbc	r23, r19
    18b6:	84 0b       	sbc	r24, r20
    18b8:	ba 0b       	sbc	r27, r26
    18ba:	ee 1f       	adc	r30, r30
    18bc:	88 f7       	brcc	.-30     	; 0x18a0 <__divsf3_pse+0x90>
    18be:	e0 95       	com	r30
    18c0:	08 95       	ret

000018c2 <__fixsfsi>:
    18c2:	04 d0       	rcall	.+8      	; 0x18cc <__fixunssfsi>
    18c4:	68 94       	set
    18c6:	b1 11       	cpse	r27, r1
    18c8:	d9 c0       	rjmp	.+434    	; 0x1a7c <__fp_szero>
    18ca:	08 95       	ret

000018cc <__fixunssfsi>:
    18cc:	bc d0       	rcall	.+376    	; 0x1a46 <__fp_splitA>
    18ce:	88 f0       	brcs	.+34     	; 0x18f2 <__fixunssfsi+0x26>
    18d0:	9f 57       	subi	r25, 0x7F	; 127
    18d2:	90 f0       	brcs	.+36     	; 0x18f8 <__fixunssfsi+0x2c>
    18d4:	b9 2f       	mov	r27, r25
    18d6:	99 27       	eor	r25, r25
    18d8:	b7 51       	subi	r27, 0x17	; 23
    18da:	a0 f0       	brcs	.+40     	; 0x1904 <__fixunssfsi+0x38>
    18dc:	d1 f0       	breq	.+52     	; 0x1912 <__fixunssfsi+0x46>
    18de:	66 0f       	add	r22, r22
    18e0:	77 1f       	adc	r23, r23
    18e2:	88 1f       	adc	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	1a f0       	brmi	.+6      	; 0x18ee <__fixunssfsi+0x22>
    18e8:	ba 95       	dec	r27
    18ea:	c9 f7       	brne	.-14     	; 0x18de <__fixunssfsi+0x12>
    18ec:	12 c0       	rjmp	.+36     	; 0x1912 <__fixunssfsi+0x46>
    18ee:	b1 30       	cpi	r27, 0x01	; 1
    18f0:	81 f0       	breq	.+32     	; 0x1912 <__fixunssfsi+0x46>
    18f2:	c3 d0       	rcall	.+390    	; 0x1a7a <__fp_zero>
    18f4:	b1 e0       	ldi	r27, 0x01	; 1
    18f6:	08 95       	ret
    18f8:	c0 c0       	rjmp	.+384    	; 0x1a7a <__fp_zero>
    18fa:	67 2f       	mov	r22, r23
    18fc:	78 2f       	mov	r23, r24
    18fe:	88 27       	eor	r24, r24
    1900:	b8 5f       	subi	r27, 0xF8	; 248
    1902:	39 f0       	breq	.+14     	; 0x1912 <__fixunssfsi+0x46>
    1904:	b9 3f       	cpi	r27, 0xF9	; 249
    1906:	cc f3       	brlt	.-14     	; 0x18fa <__fixunssfsi+0x2e>
    1908:	86 95       	lsr	r24
    190a:	77 95       	ror	r23
    190c:	67 95       	ror	r22
    190e:	b3 95       	inc	r27
    1910:	d9 f7       	brne	.-10     	; 0x1908 <__fixunssfsi+0x3c>
    1912:	3e f4       	brtc	.+14     	; 0x1922 <__fixunssfsi+0x56>
    1914:	90 95       	com	r25
    1916:	80 95       	com	r24
    1918:	70 95       	com	r23
    191a:	61 95       	neg	r22
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	8f 4f       	sbci	r24, 0xFF	; 255
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	08 95       	ret

00001924 <__floatunsisf>:
    1924:	e8 94       	clt
    1926:	09 c0       	rjmp	.+18     	; 0x193a <__floatsisf+0x12>

00001928 <__floatsisf>:
    1928:	97 fb       	bst	r25, 7
    192a:	3e f4       	brtc	.+14     	; 0x193a <__floatsisf+0x12>
    192c:	90 95       	com	r25
    192e:	80 95       	com	r24
    1930:	70 95       	com	r23
    1932:	61 95       	neg	r22
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	8f 4f       	sbci	r24, 0xFF	; 255
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	99 23       	and	r25, r25
    193c:	a9 f0       	breq	.+42     	; 0x1968 <__floatsisf+0x40>
    193e:	f9 2f       	mov	r31, r25
    1940:	96 e9       	ldi	r25, 0x96	; 150
    1942:	bb 27       	eor	r27, r27
    1944:	93 95       	inc	r25
    1946:	f6 95       	lsr	r31
    1948:	87 95       	ror	r24
    194a:	77 95       	ror	r23
    194c:	67 95       	ror	r22
    194e:	b7 95       	ror	r27
    1950:	f1 11       	cpse	r31, r1
    1952:	f8 cf       	rjmp	.-16     	; 0x1944 <__floatsisf+0x1c>
    1954:	fa f4       	brpl	.+62     	; 0x1994 <__floatsisf+0x6c>
    1956:	bb 0f       	add	r27, r27
    1958:	11 f4       	brne	.+4      	; 0x195e <__floatsisf+0x36>
    195a:	60 ff       	sbrs	r22, 0
    195c:	1b c0       	rjmp	.+54     	; 0x1994 <__floatsisf+0x6c>
    195e:	6f 5f       	subi	r22, 0xFF	; 255
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	8f 4f       	sbci	r24, 0xFF	; 255
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	16 c0       	rjmp	.+44     	; 0x1994 <__floatsisf+0x6c>
    1968:	88 23       	and	r24, r24
    196a:	11 f0       	breq	.+4      	; 0x1970 <__floatsisf+0x48>
    196c:	96 e9       	ldi	r25, 0x96	; 150
    196e:	11 c0       	rjmp	.+34     	; 0x1992 <__floatsisf+0x6a>
    1970:	77 23       	and	r23, r23
    1972:	21 f0       	breq	.+8      	; 0x197c <__floatsisf+0x54>
    1974:	9e e8       	ldi	r25, 0x8E	; 142
    1976:	87 2f       	mov	r24, r23
    1978:	76 2f       	mov	r23, r22
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <__floatsisf+0x5e>
    197c:	66 23       	and	r22, r22
    197e:	71 f0       	breq	.+28     	; 0x199c <__floatsisf+0x74>
    1980:	96 e8       	ldi	r25, 0x86	; 134
    1982:	86 2f       	mov	r24, r22
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	2a f0       	brmi	.+10     	; 0x1994 <__floatsisf+0x6c>
    198a:	9a 95       	dec	r25
    198c:	66 0f       	add	r22, r22
    198e:	77 1f       	adc	r23, r23
    1990:	88 1f       	adc	r24, r24
    1992:	da f7       	brpl	.-10     	; 0x198a <__floatsisf+0x62>
    1994:	88 0f       	add	r24, r24
    1996:	96 95       	lsr	r25
    1998:	87 95       	ror	r24
    199a:	97 f9       	bld	r25, 7
    199c:	08 95       	ret

0000199e <__fp_cmp>:
    199e:	99 0f       	add	r25, r25
    19a0:	00 08       	sbc	r0, r0
    19a2:	55 0f       	add	r21, r21
    19a4:	aa 0b       	sbc	r26, r26
    19a6:	e0 e8       	ldi	r30, 0x80	; 128
    19a8:	fe ef       	ldi	r31, 0xFE	; 254
    19aa:	16 16       	cp	r1, r22
    19ac:	17 06       	cpc	r1, r23
    19ae:	e8 07       	cpc	r30, r24
    19b0:	f9 07       	cpc	r31, r25
    19b2:	c0 f0       	brcs	.+48     	; 0x19e4 <__fp_cmp+0x46>
    19b4:	12 16       	cp	r1, r18
    19b6:	13 06       	cpc	r1, r19
    19b8:	e4 07       	cpc	r30, r20
    19ba:	f5 07       	cpc	r31, r21
    19bc:	98 f0       	brcs	.+38     	; 0x19e4 <__fp_cmp+0x46>
    19be:	62 1b       	sub	r22, r18
    19c0:	73 0b       	sbc	r23, r19
    19c2:	84 0b       	sbc	r24, r20
    19c4:	95 0b       	sbc	r25, r21
    19c6:	39 f4       	brne	.+14     	; 0x19d6 <__fp_cmp+0x38>
    19c8:	0a 26       	eor	r0, r26
    19ca:	61 f0       	breq	.+24     	; 0x19e4 <__fp_cmp+0x46>
    19cc:	23 2b       	or	r18, r19
    19ce:	24 2b       	or	r18, r20
    19d0:	25 2b       	or	r18, r21
    19d2:	21 f4       	brne	.+8      	; 0x19dc <__fp_cmp+0x3e>
    19d4:	08 95       	ret
    19d6:	0a 26       	eor	r0, r26
    19d8:	09 f4       	brne	.+2      	; 0x19dc <__fp_cmp+0x3e>
    19da:	a1 40       	sbci	r26, 0x01	; 1
    19dc:	a6 95       	lsr	r26
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	81 1d       	adc	r24, r1
    19e2:	81 1d       	adc	r24, r1
    19e4:	08 95       	ret

000019e6 <__fp_inf>:
    19e6:	97 f9       	bld	r25, 7
    19e8:	9f 67       	ori	r25, 0x7F	; 127
    19ea:	80 e8       	ldi	r24, 0x80	; 128
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	08 95       	ret

000019f2 <__fp_nan>:
    19f2:	9f ef       	ldi	r25, 0xFF	; 255
    19f4:	80 ec       	ldi	r24, 0xC0	; 192
    19f6:	08 95       	ret

000019f8 <__fp_pscA>:
    19f8:	00 24       	eor	r0, r0
    19fa:	0a 94       	dec	r0
    19fc:	16 16       	cp	r1, r22
    19fe:	17 06       	cpc	r1, r23
    1a00:	18 06       	cpc	r1, r24
    1a02:	09 06       	cpc	r0, r25
    1a04:	08 95       	ret

00001a06 <__fp_pscB>:
    1a06:	00 24       	eor	r0, r0
    1a08:	0a 94       	dec	r0
    1a0a:	12 16       	cp	r1, r18
    1a0c:	13 06       	cpc	r1, r19
    1a0e:	14 06       	cpc	r1, r20
    1a10:	05 06       	cpc	r0, r21
    1a12:	08 95       	ret

00001a14 <__fp_round>:
    1a14:	09 2e       	mov	r0, r25
    1a16:	03 94       	inc	r0
    1a18:	00 0c       	add	r0, r0
    1a1a:	11 f4       	brne	.+4      	; 0x1a20 <__fp_round+0xc>
    1a1c:	88 23       	and	r24, r24
    1a1e:	52 f0       	brmi	.+20     	; 0x1a34 <__fp_round+0x20>
    1a20:	bb 0f       	add	r27, r27
    1a22:	40 f4       	brcc	.+16     	; 0x1a34 <__fp_round+0x20>
    1a24:	bf 2b       	or	r27, r31
    1a26:	11 f4       	brne	.+4      	; 0x1a2c <__fp_round+0x18>
    1a28:	60 ff       	sbrs	r22, 0
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <__fp_round+0x20>
    1a2c:	6f 5f       	subi	r22, 0xFF	; 255
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	08 95       	ret

00001a36 <__fp_split3>:
    1a36:	57 fd       	sbrc	r21, 7
    1a38:	90 58       	subi	r25, 0x80	; 128
    1a3a:	44 0f       	add	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	59 f0       	breq	.+22     	; 0x1a56 <__fp_splitA+0x10>
    1a40:	5f 3f       	cpi	r21, 0xFF	; 255
    1a42:	71 f0       	breq	.+28     	; 0x1a60 <__fp_splitA+0x1a>
    1a44:	47 95       	ror	r20

00001a46 <__fp_splitA>:
    1a46:	88 0f       	add	r24, r24
    1a48:	97 fb       	bst	r25, 7
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	61 f0       	breq	.+24     	; 0x1a66 <__fp_splitA+0x20>
    1a4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a50:	79 f0       	breq	.+30     	; 0x1a70 <__fp_splitA+0x2a>
    1a52:	87 95       	ror	r24
    1a54:	08 95       	ret
    1a56:	12 16       	cp	r1, r18
    1a58:	13 06       	cpc	r1, r19
    1a5a:	14 06       	cpc	r1, r20
    1a5c:	55 1f       	adc	r21, r21
    1a5e:	f2 cf       	rjmp	.-28     	; 0x1a44 <__fp_split3+0xe>
    1a60:	46 95       	lsr	r20
    1a62:	f1 df       	rcall	.-30     	; 0x1a46 <__fp_splitA>
    1a64:	08 c0       	rjmp	.+16     	; 0x1a76 <__fp_splitA+0x30>
    1a66:	16 16       	cp	r1, r22
    1a68:	17 06       	cpc	r1, r23
    1a6a:	18 06       	cpc	r1, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	f1 cf       	rjmp	.-30     	; 0x1a52 <__fp_splitA+0xc>
    1a70:	86 95       	lsr	r24
    1a72:	71 05       	cpc	r23, r1
    1a74:	61 05       	cpc	r22, r1
    1a76:	08 94       	sec
    1a78:	08 95       	ret

00001a7a <__fp_zero>:
    1a7a:	e8 94       	clt

00001a7c <__fp_szero>:
    1a7c:	bb 27       	eor	r27, r27
    1a7e:	66 27       	eor	r22, r22
    1a80:	77 27       	eor	r23, r23
    1a82:	cb 01       	movw	r24, r22
    1a84:	97 f9       	bld	r25, 7
    1a86:	08 95       	ret

00001a88 <__gesf2>:
    1a88:	8a df       	rcall	.-236    	; 0x199e <__fp_cmp>
    1a8a:	08 f4       	brcc	.+2      	; 0x1a8e <__gesf2+0x6>
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	08 95       	ret

00001a90 <__mulsf3>:
    1a90:	0b d0       	rcall	.+22     	; 0x1aa8 <__mulsf3x>
    1a92:	c0 cf       	rjmp	.-128    	; 0x1a14 <__fp_round>
    1a94:	b1 df       	rcall	.-158    	; 0x19f8 <__fp_pscA>
    1a96:	28 f0       	brcs	.+10     	; 0x1aa2 <__mulsf3+0x12>
    1a98:	b6 df       	rcall	.-148    	; 0x1a06 <__fp_pscB>
    1a9a:	18 f0       	brcs	.+6      	; 0x1aa2 <__mulsf3+0x12>
    1a9c:	95 23       	and	r25, r21
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <__mulsf3+0x12>
    1aa0:	a2 cf       	rjmp	.-188    	; 0x19e6 <__fp_inf>
    1aa2:	a7 cf       	rjmp	.-178    	; 0x19f2 <__fp_nan>
    1aa4:	11 24       	eor	r1, r1
    1aa6:	ea cf       	rjmp	.-44     	; 0x1a7c <__fp_szero>

00001aa8 <__mulsf3x>:
    1aa8:	c6 df       	rcall	.-116    	; 0x1a36 <__fp_split3>
    1aaa:	a0 f3       	brcs	.-24     	; 0x1a94 <__mulsf3+0x4>

00001aac <__mulsf3_pse>:
    1aac:	95 9f       	mul	r25, r21
    1aae:	d1 f3       	breq	.-12     	; 0x1aa4 <__mulsf3+0x14>
    1ab0:	95 0f       	add	r25, r21
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	55 1f       	adc	r21, r21
    1ab6:	62 9f       	mul	r22, r18
    1ab8:	f0 01       	movw	r30, r0
    1aba:	72 9f       	mul	r23, r18
    1abc:	bb 27       	eor	r27, r27
    1abe:	f0 0d       	add	r31, r0
    1ac0:	b1 1d       	adc	r27, r1
    1ac2:	63 9f       	mul	r22, r19
    1ac4:	aa 27       	eor	r26, r26
    1ac6:	f0 0d       	add	r31, r0
    1ac8:	b1 1d       	adc	r27, r1
    1aca:	aa 1f       	adc	r26, r26
    1acc:	64 9f       	mul	r22, r20
    1ace:	66 27       	eor	r22, r22
    1ad0:	b0 0d       	add	r27, r0
    1ad2:	a1 1d       	adc	r26, r1
    1ad4:	66 1f       	adc	r22, r22
    1ad6:	82 9f       	mul	r24, r18
    1ad8:	22 27       	eor	r18, r18
    1ada:	b0 0d       	add	r27, r0
    1adc:	a1 1d       	adc	r26, r1
    1ade:	62 1f       	adc	r22, r18
    1ae0:	73 9f       	mul	r23, r19
    1ae2:	b0 0d       	add	r27, r0
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	62 1f       	adc	r22, r18
    1ae8:	83 9f       	mul	r24, r19
    1aea:	a0 0d       	add	r26, r0
    1aec:	61 1d       	adc	r22, r1
    1aee:	22 1f       	adc	r18, r18
    1af0:	74 9f       	mul	r23, r20
    1af2:	33 27       	eor	r19, r19
    1af4:	a0 0d       	add	r26, r0
    1af6:	61 1d       	adc	r22, r1
    1af8:	23 1f       	adc	r18, r19
    1afa:	84 9f       	mul	r24, r20
    1afc:	60 0d       	add	r22, r0
    1afe:	21 1d       	adc	r18, r1
    1b00:	82 2f       	mov	r24, r18
    1b02:	76 2f       	mov	r23, r22
    1b04:	6a 2f       	mov	r22, r26
    1b06:	11 24       	eor	r1, r1
    1b08:	9f 57       	subi	r25, 0x7F	; 127
    1b0a:	50 40       	sbci	r21, 0x00	; 0
    1b0c:	8a f0       	brmi	.+34     	; 0x1b30 <__mulsf3_pse+0x84>
    1b0e:	e1 f0       	breq	.+56     	; 0x1b48 <__mulsf3_pse+0x9c>
    1b10:	88 23       	and	r24, r24
    1b12:	4a f0       	brmi	.+18     	; 0x1b26 <__mulsf3_pse+0x7a>
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	bb 1f       	adc	r27, r27
    1b1a:	66 1f       	adc	r22, r22
    1b1c:	77 1f       	adc	r23, r23
    1b1e:	88 1f       	adc	r24, r24
    1b20:	91 50       	subi	r25, 0x01	; 1
    1b22:	50 40       	sbci	r21, 0x00	; 0
    1b24:	a9 f7       	brne	.-22     	; 0x1b10 <__mulsf3_pse+0x64>
    1b26:	9e 3f       	cpi	r25, 0xFE	; 254
    1b28:	51 05       	cpc	r21, r1
    1b2a:	70 f0       	brcs	.+28     	; 0x1b48 <__mulsf3_pse+0x9c>
    1b2c:	5c cf       	rjmp	.-328    	; 0x19e6 <__fp_inf>
    1b2e:	a6 cf       	rjmp	.-180    	; 0x1a7c <__fp_szero>
    1b30:	5f 3f       	cpi	r21, 0xFF	; 255
    1b32:	ec f3       	brlt	.-6      	; 0x1b2e <__mulsf3_pse+0x82>
    1b34:	98 3e       	cpi	r25, 0xE8	; 232
    1b36:	dc f3       	brlt	.-10     	; 0x1b2e <__mulsf3_pse+0x82>
    1b38:	86 95       	lsr	r24
    1b3a:	77 95       	ror	r23
    1b3c:	67 95       	ror	r22
    1b3e:	b7 95       	ror	r27
    1b40:	f7 95       	ror	r31
    1b42:	e7 95       	ror	r30
    1b44:	9f 5f       	subi	r25, 0xFF	; 255
    1b46:	c1 f7       	brne	.-16     	; 0x1b38 <__mulsf3_pse+0x8c>
    1b48:	fe 2b       	or	r31, r30
    1b4a:	88 0f       	add	r24, r24
    1b4c:	91 1d       	adc	r25, r1
    1b4e:	96 95       	lsr	r25
    1b50:	87 95       	ror	r24
    1b52:	97 f9       	bld	r25, 7
    1b54:	08 95       	ret

00001b56 <__divmodhi4>:
    1b56:	97 fb       	bst	r25, 7
    1b58:	07 2e       	mov	r0, r23
    1b5a:	16 f4       	brtc	.+4      	; 0x1b60 <__divmodhi4+0xa>
    1b5c:	00 94       	com	r0
    1b5e:	07 d0       	rcall	.+14     	; 0x1b6e <__divmodhi4_neg1>
    1b60:	77 fd       	sbrc	r23, 7
    1b62:	09 d0       	rcall	.+18     	; 0x1b76 <__divmodhi4_neg2>
    1b64:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__udivmodhi4>
    1b68:	07 fc       	sbrc	r0, 7
    1b6a:	05 d0       	rcall	.+10     	; 0x1b76 <__divmodhi4_neg2>
    1b6c:	3e f4       	brtc	.+14     	; 0x1b7c <__divmodhi4_exit>

00001b6e <__divmodhi4_neg1>:
    1b6e:	90 95       	com	r25
    1b70:	81 95       	neg	r24
    1b72:	9f 4f       	sbci	r25, 0xFF	; 255
    1b74:	08 95       	ret

00001b76 <__divmodhi4_neg2>:
    1b76:	70 95       	com	r23
    1b78:	61 95       	neg	r22
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255

00001b7c <__divmodhi4_exit>:
    1b7c:	08 95       	ret

00001b7e <__tablejump2__>:
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31

00001b82 <__tablejump__>:
    1b82:	05 90       	lpm	r0, Z+
    1b84:	f4 91       	lpm	r31, Z
    1b86:	e0 2d       	mov	r30, r0
    1b88:	09 94       	ijmp

00001b8a <__umulhisi3>:
    1b8a:	a2 9f       	mul	r26, r18
    1b8c:	b0 01       	movw	r22, r0
    1b8e:	b3 9f       	mul	r27, r19
    1b90:	c0 01       	movw	r24, r0
    1b92:	a3 9f       	mul	r26, r19
    1b94:	70 0d       	add	r23, r0
    1b96:	81 1d       	adc	r24, r1
    1b98:	11 24       	eor	r1, r1
    1b9a:	91 1d       	adc	r25, r1
    1b9c:	b2 9f       	mul	r27, r18
    1b9e:	70 0d       	add	r23, r0
    1ba0:	81 1d       	adc	r24, r1
    1ba2:	11 24       	eor	r1, r1
    1ba4:	91 1d       	adc	r25, r1
    1ba6:	08 95       	ret

00001ba8 <__udivmodhi4>:
    1ba8:	aa 1b       	sub	r26, r26
    1baa:	bb 1b       	sub	r27, r27
    1bac:	51 e1       	ldi	r21, 0x11	; 17
    1bae:	07 c0       	rjmp	.+14     	; 0x1bbe <__udivmodhi4_ep>

00001bb0 <__udivmodhi4_loop>:
    1bb0:	aa 1f       	adc	r26, r26
    1bb2:	bb 1f       	adc	r27, r27
    1bb4:	a6 17       	cp	r26, r22
    1bb6:	b7 07       	cpc	r27, r23
    1bb8:	10 f0       	brcs	.+4      	; 0x1bbe <__udivmodhi4_ep>
    1bba:	a6 1b       	sub	r26, r22
    1bbc:	b7 0b       	sbc	r27, r23

00001bbe <__udivmodhi4_ep>:
    1bbe:	88 1f       	adc	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	5a 95       	dec	r21
    1bc4:	a9 f7       	brne	.-22     	; 0x1bb0 <__udivmodhi4_loop>
    1bc6:	80 95       	com	r24
    1bc8:	90 95       	com	r25
    1bca:	bc 01       	movw	r22, r24
    1bcc:	cd 01       	movw	r24, r26
    1bce:	08 95       	ret

00001bd0 <__eerd_word_m16>:
    1bd0:	a8 e1       	ldi	r26, 0x18	; 24
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	42 e0       	ldi	r20, 0x02	; 2
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__eerd_blraw_m16>

00001bdc <__eewr_word_m16>:
    1bdc:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__eewr_byte_m16>
    1be0:	27 2f       	mov	r18, r23
    1be2:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__eewr_r18_m16>

00001be6 <__eerd_block_m16>:
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22

00001bea <__eerd_blraw_m16>:
    1bea:	fc 01       	movw	r30, r24
    1bec:	e1 99       	sbic	0x1c, 1	; 28
    1bee:	fe cf       	rjmp	.-4      	; 0x1bec <__eerd_blraw_m16+0x2>
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <__eerd_blraw_m16+0x14>
    1bf2:	ff bb       	out	0x1f, r31	; 31
    1bf4:	ee bb       	out	0x1e, r30	; 30
    1bf6:	e0 9a       	sbi	0x1c, 0	; 28
    1bf8:	31 96       	adiw	r30, 0x01	; 1
    1bfa:	0d b2       	in	r0, 0x1d	; 29
    1bfc:	0d 92       	st	X+, r0
    1bfe:	41 50       	subi	r20, 0x01	; 1
    1c00:	50 40       	sbci	r21, 0x00	; 0
    1c02:	b8 f7       	brcc	.-18     	; 0x1bf2 <__eerd_blraw_m16+0x8>
    1c04:	08 95       	ret

00001c06 <__eewr_byte_m16>:
    1c06:	26 2f       	mov	r18, r22

00001c08 <__eewr_r18_m16>:
    1c08:	e1 99       	sbic	0x1c, 1	; 28
    1c0a:	fe cf       	rjmp	.-4      	; 0x1c08 <__eewr_r18_m16>
    1c0c:	9f bb       	out	0x1f, r25	; 31
    1c0e:	8e bb       	out	0x1e, r24	; 30
    1c10:	2d bb       	out	0x1d, r18	; 29
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	e2 9a       	sbi	0x1c, 2	; 28
    1c18:	e1 9a       	sbi	0x1c, 1	; 28
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	08 95       	ret

00001c20 <_exit>:
    1c20:	f8 94       	cli

00001c22 <__stop_program>:
    1c22:	ff cf       	rjmp	.-2      	; 0x1c22 <__stop_program>
