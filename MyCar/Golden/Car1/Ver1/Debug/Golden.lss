
Golden.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001d36  00001dca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  00800064  00800064  00001dce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00001dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001caa  00000000  00000000  00001f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000040c  00000000  00000000  00003bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000082b  00000000  00000000  00003fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  000047f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005fb  00000000  00000000  00004b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a12  00000000  00000000  00005173  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00005b85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__ctors_end>
       4:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__vector_1>
       8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
       c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      10:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      14:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      18:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      1c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      20:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      24:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      28:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      2c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      30:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      34:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      38:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      3c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      40:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      44:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      48:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      4c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__vector_19>
      50:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      54:	79 07       	cpc	r23, r25
      56:	34 08       	sbc	r3, r4
      58:	a6 08       	sbc	r10, r6
      5a:	16 0c       	add	r1, r6
      5c:	16 0c       	add	r1, r6
      5e:	16 0c       	add	r1, r6
      60:	16 0c       	add	r1, r6
      62:	16 0c       	add	r1, r6
      64:	16 0c       	add	r1, r6
      66:	16 0c       	add	r1, r6
      68:	16 0c       	add	r1, r6
      6a:	0e 09       	sbc	r16, r14
      6c:	28 09       	sbc	r18, r8
      6e:	8a 09       	sbc	r24, r10
      70:	16 0c       	add	r1, r6
      72:	16 0c       	add	r1, r6
      74:	25 0a       	sbc	r2, r21
      76:	3f 0a       	sbc	r3, r31
      78:	16 0c       	add	r1, r6
      7a:	16 0c       	add	r1, r6
      7c:	16 0c       	add	r1, r6
      7e:	59 0a       	sbc	r5, r25
      80:	70 0a       	sbc	r7, r16
      82:	16 0c       	add	r1, r6
      84:	16 0c       	add	r1, r6
      86:	16 0c       	add	r1, r6
      88:	16 0c       	add	r1, r6
      8a:	16 0c       	add	r1, r6
      8c:	16 0c       	add	r1, r6
      8e:	16 0c       	add	r1, r6
      90:	16 0c       	add	r1, r6
      92:	7f 0a       	sbc	r7, r31
      94:	92 0a       	sbc	r9, r18
      96:	16 0c       	add	r1, r6
      98:	16 0c       	add	r1, r6
      9a:	16 0c       	add	r1, r6
      9c:	16 0c       	add	r1, r6
      9e:	16 0c       	add	r1, r6
      a0:	16 0c       	add	r1, r6
      a2:	16 0c       	add	r1, r6
      a4:	16 0c       	add	r1, r6
      a6:	a1 0a       	sbc	r10, r17
      a8:	df 0a       	sbc	r13, r31
      aa:	f8 0a       	sbc	r15, r24
      ac:	16 0c       	add	r1, r6
      ae:	16 0c       	add	r1, r6
      b0:	16 0c       	add	r1, r6
      b2:	16 0c       	add	r1, r6
      b4:	16 0c       	add	r1, r6
      b6:	16 0c       	add	r1, r6
      b8:	16 0c       	add	r1, r6
      ba:	3f 0b       	sbc	r19, r31
      bc:	78 0b       	sbc	r23, r24
      be:	91 0b       	sbc	r25, r17
      c0:	16 0c       	add	r1, r6
      c2:	16 0c       	add	r1, r6
      c4:	16 0c       	add	r1, r6
      c6:	16 0c       	add	r1, r6
      c8:	16 0c       	add	r1, r6
      ca:	16 0c       	add	r1, r6
      cc:	16 0c       	add	r1, r6
      ce:	16 0c       	add	r1, r6
      d0:	16 0c       	add	r1, r6
      d2:	d8 0b       	sbc	r29, r24
      d4:	ec 07       	cpc	r30, r28
      d6:	6c 07       	cpc	r22, r28
      d8:	d6 07       	cpc	r29, r22
      da:	6c 07       	cpc	r22, r28
      dc:	e1 07       	cpc	r30, r17
      de:	6c 07       	cpc	r22, r28
      e0:	c0 07       	cpc	r28, r16
      e2:	6c 07       	cpc	r22, r28
      e4:	6c 07       	cpc	r22, r28
      e6:	6c 07       	cpc	r22, r28
      e8:	cb 07       	cpc	r28, r27
      ea:	6c 07       	cpc	r22, r28
      ec:	d6 07       	cpc	r29, r22
      ee:	6c 07       	cpc	r22, r28
      f0:	fa 07       	cpc	r31, r26
      f2:	6c 07       	cpc	r22, r28
      f4:	6c 07       	cpc	r22, r28
      f6:	6c 07       	cpc	r22, r28
      f8:	6c 07       	cpc	r22, r28
      fa:	6c 07       	cpc	r22, r28
      fc:	6c 07       	cpc	r22, r28
      fe:	6c 07       	cpc	r22, r28
     100:	b5 07       	cpc	r27, r21
     102:	6c 07       	cpc	r22, r28
     104:	6c 07       	cpc	r22, r28
     106:	6c 07       	cpc	r22, r28
     108:	c0 07       	cpc	r28, r16
     10a:	6c 07       	cpc	r22, r28
     10c:	6c 07       	cpc	r22, r28
     10e:	6c 07       	cpc	r22, r28
     110:	10 08       	sbc	r1, r0
     112:	6c 07       	cpc	r22, r28
     114:	6c 07       	cpc	r22, r28
     116:	6c 07       	cpc	r22, r28
     118:	6c 07       	cpc	r22, r28
     11a:	6c 07       	cpc	r22, r28
     11c:	6c 07       	cpc	r22, r28
     11e:	6c 07       	cpc	r22, r28
     120:	6c 07       	cpc	r22, r28
     122:	6c 07       	cpc	r22, r28
     124:	6c 07       	cpc	r22, r28
     126:	6c 07       	cpc	r22, r28
     128:	6c 07       	cpc	r22, r28
     12a:	6c 07       	cpc	r22, r28
     12c:	6c 07       	cpc	r22, r28
     12e:	6c 07       	cpc	r22, r28
     130:	05 08       	sbc	r0, r5
     132:	6c 07       	cpc	r22, r28
     134:	6c 07       	cpc	r22, r28
     136:	6c 07       	cpc	r22, r28
     138:	6c 07       	cpc	r22, r28
     13a:	6c 07       	cpc	r22, r28
     13c:	6c 07       	cpc	r22, r28
     13e:	6c 07       	cpc	r22, r28
     140:	fa 07       	cpc	r31, r26
     142:	6c 07       	cpc	r22, r28
     144:	6c 07       	cpc	r22, r28
     146:	6c 07       	cpc	r22, r28
     148:	6c 07       	cpc	r22, r28
     14a:	6c 07       	cpc	r22, r28
     14c:	6c 07       	cpc	r22, r28
     14e:	6c 07       	cpc	r22, r28
     150:	26 08       	sbc	r2, r6
     152:	6c 07       	cpc	r22, r28
     154:	6c 07       	cpc	r22, r28
     156:	6c 07       	cpc	r22, r28
     158:	6c 07       	cpc	r22, r28
     15a:	6c 07       	cpc	r22, r28
     15c:	6c 07       	cpc	r22, r28
     15e:	6c 07       	cpc	r22, r28
     160:	6c 07       	cpc	r22, r28
     162:	6c 07       	cpc	r22, r28
     164:	6c 07       	cpc	r22, r28
     166:	6c 07       	cpc	r22, r28
     168:	6c 07       	cpc	r22, r28
     16a:	6c 07       	cpc	r22, r28
     16c:	6c 07       	cpc	r22, r28
     16e:	6c 07       	cpc	r22, r28
     170:	6c 07       	cpc	r22, r28
     172:	6c 07       	cpc	r22, r28
     174:	6c 07       	cpc	r22, r28
     176:	6c 07       	cpc	r22, r28
     178:	6c 07       	cpc	r22, r28
     17a:	6c 07       	cpc	r22, r28
     17c:	6c 07       	cpc	r22, r28
     17e:	6c 07       	cpc	r22, r28
     180:	6c 07       	cpc	r22, r28
     182:	6c 07       	cpc	r22, r28
     184:	6c 07       	cpc	r22, r28
     186:	6c 07       	cpc	r22, r28
     188:	6c 07       	cpc	r22, r28
     18a:	6c 07       	cpc	r22, r28
     18c:	6c 07       	cpc	r22, r28
     18e:	6c 07       	cpc	r22, r28
     190:	1b 08       	sbc	r1, r11
     192:	6c 07       	cpc	r22, r28
     194:	6c 07       	cpc	r22, r28
     196:	6c 07       	cpc	r22, r28
     198:	6c 07       	cpc	r22, r28
     19a:	6c 07       	cpc	r22, r28
     19c:	6c 07       	cpc	r22, r28
     19e:	6c 07       	cpc	r22, r28
     1a0:	6c 07       	cpc	r22, r28
     1a2:	6c 07       	cpc	r22, r28
     1a4:	6c 07       	cpc	r22, r28
     1a6:	6c 07       	cpc	r22, r28
     1a8:	6c 07       	cpc	r22, r28
     1aa:	6c 07       	cpc	r22, r28
     1ac:	6c 07       	cpc	r22, r28
     1ae:	6c 07       	cpc	r22, r28
     1b0:	10 08       	sbc	r1, r0
     1b2:	6c 09       	sbc	r22, r12
     1b4:	6c 07       	cpc	r22, r28
     1b6:	62 09       	sbc	r22, r2
     1b8:	6c 07       	cpc	r22, r28
     1ba:	67 09       	sbc	r22, r7
     1bc:	6c 07       	cpc	r22, r28
     1be:	58 09       	sbc	r21, r8
     1c0:	6c 07       	cpc	r22, r28
     1c2:	6c 07       	cpc	r22, r28
     1c4:	6c 07       	cpc	r22, r28
     1c6:	5d 09       	sbc	r21, r13
     1c8:	6c 07       	cpc	r22, r28
     1ca:	62 09       	sbc	r22, r2
     1cc:	6c 07       	cpc	r22, r28
     1ce:	71 09       	sbc	r23, r1
     1d0:	6c 07       	cpc	r22, r28
     1d2:	6c 07       	cpc	r22, r28
     1d4:	6c 07       	cpc	r22, r28
     1d6:	6c 07       	cpc	r22, r28
     1d8:	6c 07       	cpc	r22, r28
     1da:	6c 07       	cpc	r22, r28
     1dc:	6c 07       	cpc	r22, r28
     1de:	53 09       	sbc	r21, r3
     1e0:	6c 07       	cpc	r22, r28
     1e2:	6c 07       	cpc	r22, r28
     1e4:	6c 07       	cpc	r22, r28
     1e6:	58 09       	sbc	r21, r8
     1e8:	6c 07       	cpc	r22, r28
     1ea:	6c 07       	cpc	r22, r28
     1ec:	6c 07       	cpc	r22, r28
     1ee:	7b 09       	sbc	r23, r11
     1f0:	6c 07       	cpc	r22, r28
     1f2:	6c 07       	cpc	r22, r28
     1f4:	6c 07       	cpc	r22, r28
     1f6:	6c 07       	cpc	r22, r28
     1f8:	6c 07       	cpc	r22, r28
     1fa:	6c 07       	cpc	r22, r28
     1fc:	6c 07       	cpc	r22, r28
     1fe:	6c 07       	cpc	r22, r28
     200:	6c 07       	cpc	r22, r28
     202:	6c 07       	cpc	r22, r28
     204:	6c 07       	cpc	r22, r28
     206:	6c 07       	cpc	r22, r28
     208:	6c 07       	cpc	r22, r28
     20a:	6c 07       	cpc	r22, r28
     20c:	6c 07       	cpc	r22, r28
     20e:	76 09       	sbc	r23, r6
     210:	6c 07       	cpc	r22, r28
     212:	6c 07       	cpc	r22, r28
     214:	6c 07       	cpc	r22, r28
     216:	6c 07       	cpc	r22, r28
     218:	6c 07       	cpc	r22, r28
     21a:	6c 07       	cpc	r22, r28
     21c:	6c 07       	cpc	r22, r28
     21e:	71 09       	sbc	r23, r1
     220:	6c 07       	cpc	r22, r28
     222:	6c 07       	cpc	r22, r28
     224:	6c 07       	cpc	r22, r28
     226:	6c 07       	cpc	r22, r28
     228:	6c 07       	cpc	r22, r28
     22a:	6c 07       	cpc	r22, r28
     22c:	6c 07       	cpc	r22, r28
     22e:	85 09       	sbc	r24, r5
     230:	6c 07       	cpc	r22, r28
     232:	6c 07       	cpc	r22, r28
     234:	6c 07       	cpc	r22, r28
     236:	6c 07       	cpc	r22, r28
     238:	6c 07       	cpc	r22, r28
     23a:	6c 07       	cpc	r22, r28
     23c:	6c 07       	cpc	r22, r28
     23e:	6c 07       	cpc	r22, r28
     240:	6c 07       	cpc	r22, r28
     242:	6c 07       	cpc	r22, r28
     244:	6c 07       	cpc	r22, r28
     246:	6c 07       	cpc	r22, r28
     248:	6c 07       	cpc	r22, r28
     24a:	6c 07       	cpc	r22, r28
     24c:	6c 07       	cpc	r22, r28
     24e:	6c 07       	cpc	r22, r28
     250:	6c 07       	cpc	r22, r28
     252:	6c 07       	cpc	r22, r28
     254:	6c 07       	cpc	r22, r28
     256:	6c 07       	cpc	r22, r28
     258:	6c 07       	cpc	r22, r28
     25a:	6c 07       	cpc	r22, r28
     25c:	6c 07       	cpc	r22, r28
     25e:	6c 07       	cpc	r22, r28
     260:	6c 07       	cpc	r22, r28
     262:	6c 07       	cpc	r22, r28
     264:	6c 07       	cpc	r22, r28
     266:	6c 07       	cpc	r22, r28
     268:	6c 07       	cpc	r22, r28
     26a:	6c 07       	cpc	r22, r28
     26c:	6c 07       	cpc	r22, r28
     26e:	80 09       	sbc	r24, r0
     270:	6c 07       	cpc	r22, r28
     272:	6c 07       	cpc	r22, r28
     274:	6c 07       	cpc	r22, r28
     276:	6c 07       	cpc	r22, r28
     278:	6c 07       	cpc	r22, r28
     27a:	6c 07       	cpc	r22, r28
     27c:	6c 07       	cpc	r22, r28
     27e:	6c 07       	cpc	r22, r28
     280:	6c 07       	cpc	r22, r28
     282:	6c 07       	cpc	r22, r28
     284:	6c 07       	cpc	r22, r28
     286:	6c 07       	cpc	r22, r28
     288:	6c 07       	cpc	r22, r28
     28a:	6c 07       	cpc	r22, r28
     28c:	6c 07       	cpc	r22, r28
     28e:	7b 09       	sbc	r23, r11
     290:	07 0a       	sbc	r0, r23
     292:	6c 07       	cpc	r22, r28
     294:	fd 09       	sbc	r31, r13
     296:	6c 07       	cpc	r22, r28
     298:	02 0a       	sbc	r0, r18
     29a:	6c 07       	cpc	r22, r28
     29c:	f3 09       	sbc	r31, r3
     29e:	6c 07       	cpc	r22, r28
     2a0:	6c 07       	cpc	r22, r28
     2a2:	6c 07       	cpc	r22, r28
     2a4:	f8 09       	sbc	r31, r8
     2a6:	6c 07       	cpc	r22, r28
     2a8:	fd 09       	sbc	r31, r13
     2aa:	6c 07       	cpc	r22, r28
     2ac:	0c 0a       	sbc	r0, r28
     2ae:	6c 07       	cpc	r22, r28
     2b0:	6c 07       	cpc	r22, r28
     2b2:	6c 07       	cpc	r22, r28
     2b4:	6c 07       	cpc	r22, r28
     2b6:	6c 07       	cpc	r22, r28
     2b8:	6c 07       	cpc	r22, r28
     2ba:	6c 07       	cpc	r22, r28
     2bc:	ee 09       	sbc	r30, r14
     2be:	6c 07       	cpc	r22, r28
     2c0:	6c 07       	cpc	r22, r28
     2c2:	6c 07       	cpc	r22, r28
     2c4:	f3 09       	sbc	r31, r3
     2c6:	6c 07       	cpc	r22, r28
     2c8:	6c 07       	cpc	r22, r28
     2ca:	6c 07       	cpc	r22, r28
     2cc:	16 0a       	sbc	r1, r22
     2ce:	6c 07       	cpc	r22, r28
     2d0:	6c 07       	cpc	r22, r28
     2d2:	6c 07       	cpc	r22, r28
     2d4:	6c 07       	cpc	r22, r28
     2d6:	6c 07       	cpc	r22, r28
     2d8:	6c 07       	cpc	r22, r28
     2da:	6c 07       	cpc	r22, r28
     2dc:	6c 07       	cpc	r22, r28
     2de:	6c 07       	cpc	r22, r28
     2e0:	6c 07       	cpc	r22, r28
     2e2:	6c 07       	cpc	r22, r28
     2e4:	6c 07       	cpc	r22, r28
     2e6:	6c 07       	cpc	r22, r28
     2e8:	6c 07       	cpc	r22, r28
     2ea:	6c 07       	cpc	r22, r28
     2ec:	11 0a       	sbc	r1, r17
     2ee:	6c 07       	cpc	r22, r28
     2f0:	6c 07       	cpc	r22, r28
     2f2:	6c 07       	cpc	r22, r28
     2f4:	6c 07       	cpc	r22, r28
     2f6:	6c 07       	cpc	r22, r28
     2f8:	6c 07       	cpc	r22, r28
     2fa:	6c 07       	cpc	r22, r28
     2fc:	0c 0a       	sbc	r0, r28
     2fe:	6c 07       	cpc	r22, r28
     300:	6c 07       	cpc	r22, r28
     302:	6c 07       	cpc	r22, r28
     304:	6c 07       	cpc	r22, r28
     306:	6c 07       	cpc	r22, r28
     308:	6c 07       	cpc	r22, r28
     30a:	6c 07       	cpc	r22, r28
     30c:	20 0a       	sbc	r2, r16
     30e:	6c 07       	cpc	r22, r28
     310:	6c 07       	cpc	r22, r28
     312:	6c 07       	cpc	r22, r28
     314:	6c 07       	cpc	r22, r28
     316:	6c 07       	cpc	r22, r28
     318:	6c 07       	cpc	r22, r28
     31a:	6c 07       	cpc	r22, r28
     31c:	6c 07       	cpc	r22, r28
     31e:	6c 07       	cpc	r22, r28
     320:	6c 07       	cpc	r22, r28
     322:	6c 07       	cpc	r22, r28
     324:	6c 07       	cpc	r22, r28
     326:	6c 07       	cpc	r22, r28
     328:	6c 07       	cpc	r22, r28
     32a:	6c 07       	cpc	r22, r28
     32c:	6c 07       	cpc	r22, r28
     32e:	6c 07       	cpc	r22, r28
     330:	6c 07       	cpc	r22, r28
     332:	6c 07       	cpc	r22, r28
     334:	6c 07       	cpc	r22, r28
     336:	6c 07       	cpc	r22, r28
     338:	6c 07       	cpc	r22, r28
     33a:	6c 07       	cpc	r22, r28
     33c:	6c 07       	cpc	r22, r28
     33e:	6c 07       	cpc	r22, r28
     340:	6c 07       	cpc	r22, r28
     342:	6c 07       	cpc	r22, r28
     344:	6c 07       	cpc	r22, r28
     346:	6c 07       	cpc	r22, r28
     348:	6c 07       	cpc	r22, r28
     34a:	6c 07       	cpc	r22, r28
     34c:	1b 0a       	sbc	r1, r27
     34e:	6c 07       	cpc	r22, r28
     350:	6c 07       	cpc	r22, r28
     352:	6c 07       	cpc	r22, r28
     354:	6c 07       	cpc	r22, r28
     356:	6c 07       	cpc	r22, r28
     358:	6c 07       	cpc	r22, r28
     35a:	6c 07       	cpc	r22, r28
     35c:	6c 07       	cpc	r22, r28
     35e:	6c 07       	cpc	r22, r28
     360:	6c 07       	cpc	r22, r28
     362:	6c 07       	cpc	r22, r28
     364:	6c 07       	cpc	r22, r28
     366:	6c 07       	cpc	r22, r28
     368:	6c 07       	cpc	r22, r28
     36a:	6c 07       	cpc	r22, r28
     36c:	16 0a       	sbc	r1, r22

0000036e <__ctors_end>:
     36e:	11 24       	eor	r1, r1
     370:	1f be       	out	0x3f, r1	; 63
     372:	cf e5       	ldi	r28, 0x5F	; 95
     374:	d4 e0       	ldi	r29, 0x04	; 4
     376:	de bf       	out	0x3e, r29	; 62
     378:	cd bf       	out	0x3d, r28	; 61

0000037a <__do_copy_data>:
     37a:	10 e0       	ldi	r17, 0x00	; 0
     37c:	a0 e6       	ldi	r26, 0x60	; 96
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	e6 e3       	ldi	r30, 0x36	; 54
     382:	fd e1       	ldi	r31, 0x1D	; 29
     384:	02 c0       	rjmp	.+4      	; 0x38a <__do_copy_data+0x10>
     386:	05 90       	lpm	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	a4 36       	cpi	r26, 0x64	; 100
     38c:	b1 07       	cpc	r27, r17
     38e:	d9 f7       	brne	.-10     	; 0x386 <__do_copy_data+0xc>

00000390 <__do_clear_bss>:
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	a4 e6       	ldi	r26, 0x64	; 100
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	01 c0       	rjmp	.+2      	; 0x39a <.do_clear_bss_start>

00000398 <.do_clear_bss_loop>:
     398:	1d 92       	st	X+, r1

0000039a <.do_clear_bss_start>:
     39a:	a3 3b       	cpi	r26, 0xB3	; 179
     39c:	b2 07       	cpc	r27, r18
     39e:	e1 f7       	brne	.-8      	; 0x398 <.do_clear_bss_loop>
     3a0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <main>
     3a4:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <_exit>

000003a8 <__bad_interrupt>:
     3a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ac <_Z10get_buttonh>:
uint8_t cSpeed = 0xff, incCounter = 0;
int16_t cSpeedDiff = 0;

/* -------------------- BUTTON + SWITCH -------------------- */
uint8_t get_button(uint8_t keyid)
{
     3ac:	98 2f       	mov	r25, r24
	if ((PINB & 0x0e) != 0x0e)
     3ae:	86 b3       	in	r24, 0x16	; 22
     3b0:	8e 70       	andi	r24, 0x0E	; 14
     3b2:	8e 30       	cpi	r24, 0x0E	; 14
     3b4:	81 f0       	breq	.+32     	; 0x3d6 <_Z10get_buttonh+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b6:	2f ef       	ldi	r18, 0xFF	; 255
     3b8:	37 ee       	ldi	r19, 0xE7	; 231
     3ba:	83 e0       	ldi	r24, 0x03	; 3
     3bc:	21 50       	subi	r18, 0x01	; 1
     3be:	30 40       	sbci	r19, 0x00	; 0
     3c0:	80 40       	sbci	r24, 0x00	; 0
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <_Z10get_buttonh+0x10>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <_Z10get_buttonh+0x1a>
     3c6:	00 00       	nop
	{
		_delay_ms(80);
		if ((PINB|keyid) == keyid) return 1;
     3c8:	26 b3       	in	r18, 0x16	; 22
     3ca:	29 2b       	or	r18, r25
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	92 17       	cp	r25, r18
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <_Z10get_buttonh+0x2c>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	08 95       	ret
	}
	return 0;
     3d6:	80 e0       	ldi	r24, 0x00	; 0
}
     3d8:	08 95       	ret

000003da <_Z10get_switchv>:

uint8_t get_switch()
{
	uint8_t x=0;
	x = ~PINC;
     3da:	83 b3       	in	r24, 0x13	; 19
     3dc:	80 95       	com	r24
	x = x & 0x07;
	return x;
}
     3de:	87 70       	andi	r24, 0x07	; 7
     3e0:	08 95       	ret

000003e2 <_Z11get_switch2v>:

uint8_t get_switch2()
{
	uint8_t x=0;
	x = ~PINC;
     3e2:	83 b3       	in	r24, 0x13	; 19
     3e4:	80 95       	com	r24
	x = x & 0x08;
	return x;
}
     3e6:	88 70       	andi	r24, 0x08	; 8
     3e8:	08 95       	ret

000003ea <_Z9cal_ratiov>:
	velocity = veloc;
}

void cal_ratio( void )
{
	cnt_ratio++;
     3ea:	80 91 7a 00 	lds	r24, 0x007A
     3ee:	8f 5f       	subi	r24, 0xFF	; 255
     3f0:	80 93 7a 00 	sts	0x007A, r24
	if (cnt_ratio >= 20) /* 20ms */
     3f4:	84 31       	cpi	r24, 0x14	; 20
     3f6:	08 f4       	brcc	.+2      	; 0x3fa <_Z9cal_ratiov+0x10>
     3f8:	d6 c0       	rjmp	.+428    	; 0x5a6 <__stack+0x147>
	{
		if (velocity < 0)
     3fa:	80 91 7b 00 	lds	r24, 0x007B
     3fe:	90 91 7c 00 	lds	r25, 0x007C
     402:	99 23       	and	r25, r25
     404:	8c f4       	brge	.+34     	; 0x428 <_Z9cal_ratiov+0x3e>
		{
			ratio = ratio_base;
     406:	80 91 74 00 	lds	r24, 0x0074
     40a:	90 91 75 00 	lds	r25, 0x0075
     40e:	a0 91 76 00 	lds	r26, 0x0076
     412:	b0 91 77 00 	lds	r27, 0x0077
     416:	80 93 70 00 	sts	0x0070, r24
     41a:	90 93 71 00 	sts	0x0071, r25
     41e:	a0 93 72 00 	sts	0x0072, r26
     422:	b0 93 73 00 	sts	0x0073, r27
     426:	9f c0       	rjmp	.+318    	; 0x566 <__stack+0x107>
		}
		else
		{
			if      (pulse_ratio < velocity / 2)    ratio = ratio_base + 0.3;
     428:	9c 01       	movw	r18, r24
     42a:	99 23       	and	r25, r25
     42c:	14 f4       	brge	.+4      	; 0x432 <_Z9cal_ratiov+0x48>
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	a9 01       	movw	r20, r18
     434:	55 95       	asr	r21
     436:	47 95       	ror	r20
     438:	20 91 78 00 	lds	r18, 0x0078
     43c:	30 91 79 00 	lds	r19, 0x0079
     440:	24 17       	cp	r18, r20
     442:	35 07       	cpc	r19, r21
     444:	bc f4       	brge	.+46     	; 0x474 <__stack+0x15>
     446:	2a e9       	ldi	r18, 0x9A	; 154
     448:	39 e9       	ldi	r19, 0x99	; 153
     44a:	49 e9       	ldi	r20, 0x99	; 153
     44c:	5e e3       	ldi	r21, 0x3E	; 62
     44e:	60 91 74 00 	lds	r22, 0x0074
     452:	70 91 75 00 	lds	r23, 0x0075
     456:	80 91 76 00 	lds	r24, 0x0076
     45a:	90 91 77 00 	lds	r25, 0x0077
     45e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__addsf3>
     462:	60 93 70 00 	sts	0x0070, r22
     466:	70 93 71 00 	sts	0x0071, r23
     46a:	80 93 72 00 	sts	0x0072, r24
     46e:	90 93 73 00 	sts	0x0073, r25
     472:	5e c0       	rjmp	.+188    	; 0x530 <__stack+0xd1>
			else if (pulse_ratio < velocity)        ratio = ratio_base + 0.1;
     474:	28 17       	cp	r18, r24
     476:	39 07       	cpc	r19, r25
     478:	bc f4       	brge	.+46     	; 0x4a8 <__stack+0x49>
     47a:	2d ec       	ldi	r18, 0xCD	; 205
     47c:	3c ec       	ldi	r19, 0xCC	; 204
     47e:	4c ec       	ldi	r20, 0xCC	; 204
     480:	5d e3       	ldi	r21, 0x3D	; 61
     482:	60 91 74 00 	lds	r22, 0x0074
     486:	70 91 75 00 	lds	r23, 0x0075
     48a:	80 91 76 00 	lds	r24, 0x0076
     48e:	90 91 77 00 	lds	r25, 0x0077
     492:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__addsf3>
     496:	60 93 70 00 	sts	0x0070, r22
     49a:	70 93 71 00 	sts	0x0071, r23
     49e:	80 93 72 00 	sts	0x0072, r24
     4a2:	90 93 73 00 	sts	0x0073, r25
     4a6:	44 c0       	rjmp	.+136    	; 0x530 <__stack+0xd1>
			else if (pulse_ratio > velocity)        ratio = ratio_base - 0.35;
     4a8:	82 17       	cp	r24, r18
     4aa:	93 07       	cpc	r25, r19
     4ac:	bc f4       	brge	.+46     	; 0x4dc <__stack+0x7d>
     4ae:	23 e3       	ldi	r18, 0x33	; 51
     4b0:	33 e3       	ldi	r19, 0x33	; 51
     4b2:	43 eb       	ldi	r20, 0xB3	; 179
     4b4:	5e e3       	ldi	r21, 0x3E	; 62
     4b6:	60 91 74 00 	lds	r22, 0x0074
     4ba:	70 91 75 00 	lds	r23, 0x0075
     4be:	80 91 76 00 	lds	r24, 0x0076
     4c2:	90 91 77 00 	lds	r25, 0x0077
     4c6:	0e 94 19 0c 	call	0x1832	; 0x1832 <__subsf3>
     4ca:	60 93 70 00 	sts	0x0070, r22
     4ce:	70 93 71 00 	sts	0x0071, r23
     4d2:	80 93 72 00 	sts	0x0072, r24
     4d6:	90 93 73 00 	sts	0x0073, r25
     4da:	2a c0       	rjmp	.+84     	; 0x530 <__stack+0xd1>
			else if (pulse_ratio > velocity / 2)    ratio = ratio_base - 0.25;
     4dc:	42 17       	cp	r20, r18
     4de:	53 07       	cpc	r21, r19
     4e0:	bc f4       	brge	.+46     	; 0x510 <__stack+0xb1>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e8       	ldi	r20, 0x80	; 128
     4e8:	5e e3       	ldi	r21, 0x3E	; 62
     4ea:	60 91 74 00 	lds	r22, 0x0074
     4ee:	70 91 75 00 	lds	r23, 0x0075
     4f2:	80 91 76 00 	lds	r24, 0x0076
     4f6:	90 91 77 00 	lds	r25, 0x0077
     4fa:	0e 94 19 0c 	call	0x1832	; 0x1832 <__subsf3>
     4fe:	60 93 70 00 	sts	0x0070, r22
     502:	70 93 71 00 	sts	0x0071, r23
     506:	80 93 72 00 	sts	0x0072, r24
     50a:	90 93 73 00 	sts	0x0073, r25
     50e:	10 c0       	rjmp	.+32     	; 0x530 <__stack+0xd1>
			else ratio = ratio_base;
     510:	80 91 74 00 	lds	r24, 0x0074
     514:	90 91 75 00 	lds	r25, 0x0075
     518:	a0 91 76 00 	lds	r26, 0x0076
     51c:	b0 91 77 00 	lds	r27, 0x0077
     520:	80 93 70 00 	sts	0x0070, r24
     524:	90 93 71 00 	sts	0x0071, r25
     528:	a0 93 72 00 	sts	0x0072, r26
     52c:	b0 93 73 00 	sts	0x0073, r27
			
			if (ratio <= 0) ratio = 0.1;
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	a9 01       	movw	r20, r18
     536:	60 91 70 00 	lds	r22, 0x0070
     53a:	70 91 71 00 	lds	r23, 0x0071
     53e:	80 91 72 00 	lds	r24, 0x0072
     542:	90 91 73 00 	lds	r25, 0x0073
     546:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__cmpsf2>
     54a:	18 16       	cp	r1, r24
     54c:	64 f0       	brlt	.+24     	; 0x566 <__stack+0x107>
     54e:	8d ec       	ldi	r24, 0xCD	; 205
     550:	9c ec       	ldi	r25, 0xCC	; 204
     552:	ac ec       	ldi	r26, 0xCC	; 204
     554:	bd e3       	ldi	r27, 0x3D	; 61
     556:	80 93 70 00 	sts	0x0070, r24
     55a:	90 93 71 00 	sts	0x0071, r25
     55e:	a0 93 72 00 	sts	0x0072, r26
     562:	b0 93 73 00 	sts	0x0073, r27
		}
		
		cSpeedDiff = pulse_ratio - cSpeed;
     566:	80 91 78 00 	lds	r24, 0x0078
     56a:	90 91 79 00 	lds	r25, 0x0079
     56e:	20 91 61 00 	lds	r18, 0x0061
     572:	ac 01       	movw	r20, r24
     574:	42 1b       	sub	r20, r18
     576:	51 09       	sbc	r21, r1
     578:	50 93 6a 00 	sts	0x006A, r21
     57c:	40 93 69 00 	sts	0x0069, r20
		if (cSpeedDiff > 0) incCounter++;
     580:	14 16       	cp	r1, r20
     582:	15 06       	cpc	r1, r21
     584:	34 f4       	brge	.+12     	; 0x592 <__stack+0x133>
     586:	20 91 6b 00 	lds	r18, 0x006B
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	20 93 6b 00 	sts	0x006B, r18
     590:	02 c0       	rjmp	.+4      	; 0x596 <__stack+0x137>
		else incCounter = 0;
     592:	10 92 6b 00 	sts	0x006B, r1
		cSpeed = pulse_ratio;
     596:	80 93 61 00 	sts	0x0061, r24
		
		pulse_ratio = 0;
     59a:	10 92 79 00 	sts	0x0079, r1
     59e:	10 92 78 00 	sts	0x0078, r1
		cnt_ratio = 0;
     5a2:	10 92 7a 00 	sts	0x007A, r1
     5a6:	08 95       	ret

000005a8 <_Z6handlei>:
	}
	return false;
}

void handle(int goc)
{
     5a8:	83 38       	cpi	r24, 0x83	; 131
     5aa:	2f ef       	ldi	r18, 0xFF	; 255
     5ac:	92 07       	cpc	r25, r18
     5ae:	14 f4       	brge	.+4      	; 0x5b4 <_Z6handlei+0xc>
     5b0:	83 e8       	ldi	r24, 0x83	; 131
     5b2:	9f ef       	ldi	r25, 0xFF	; 255
     5b4:	8e 37       	cpi	r24, 0x7E	; 126
     5b6:	91 05       	cpc	r25, r1
     5b8:	14 f0       	brlt	.+4      	; 0x5be <_Z6handlei+0x16>
     5ba:	8d e7       	ldi	r24, 0x7D	; 125
     5bc:	90 e0       	ldi	r25, 0x00	; 0
	if      (goc > SERVO_ANGLE_MAX)  goc =  SERVO_ANGLE_MAX;
	else if (goc < -SERVO_ANGLE_MAX) goc = -SERVO_ANGLE_MAX;
	
	OCR1A = SERVO_CENTER + (goc * STEP);
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	20 91 62 00 	lds	r18, 0x0062
     5ca:	30 91 63 00 	lds	r19, 0x0063
     5ce:	82 0f       	add	r24, r18
     5d0:	93 1f       	adc	r25, r19
     5d2:	9b bd       	out	0x2b, r25	; 43
     5d4:	8a bd       	out	0x2a, r24	; 42
     5d6:	08 95       	ret

000005d8 <_Z5speedii>:
}

void speed(int left, int right)
{
     5d8:	8f 92       	push	r8
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	8b 01       	movw	r16, r22
	left  = left  *  ratio;
     5f2:	80 90 70 00 	lds	r8, 0x0070
     5f6:	90 90 71 00 	lds	r9, 0x0071
     5fa:	a0 90 72 00 	lds	r10, 0x0072
     5fe:	b0 90 73 00 	lds	r11, 0x0073
     602:	bc 01       	movw	r22, r24
     604:	88 27       	eor	r24, r24
     606:	77 fd       	sbrc	r23, 7
     608:	80 95       	com	r24
     60a:	98 2f       	mov	r25, r24
     60c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__floatsisf>
     610:	a5 01       	movw	r20, r10
     612:	94 01       	movw	r18, r8
     614:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3>
     618:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__fixsfsi>
     61c:	6b 01       	movw	r12, r22
     61e:	7c 01       	movw	r14, r24
     620:	eb 01       	movw	r28, r22
	right = right *  ratio;
     622:	b8 01       	movw	r22, r16
     624:	88 27       	eor	r24, r24
     626:	77 fd       	sbrc	r23, 7
     628:	80 95       	com	r24
     62a:	98 2f       	mov	r25, r24
     62c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__floatsisf>
     630:	9b 01       	movw	r18, r22
     632:	ac 01       	movw	r20, r24
     634:	c5 01       	movw	r24, r10
     636:	b4 01       	movw	r22, r8
     638:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3>
     63c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__fixsfsi>
     640:	9b 01       	movw	r18, r22
	
	if (left >= 0)
     642:	dd 23       	and	r29, r29
     644:	5c f0       	brlt	.+22     	; 0x65c <_Z5speedii+0x84>
	{
		sbi(PORTD, DIR00);
     646:	90 9a       	sbi	0x12, 0	; 18
		cbi(PORTD, DIR01);
     648:	91 98       	cbi	0x12, 1	; 18
		OCR1B = left * 200;
     64a:	e8 ec       	ldi	r30, 0xC8	; 200
     64c:	ec 9d       	mul	r30, r12
     64e:	a0 01       	movw	r20, r0
     650:	ed 9d       	mul	r30, r13
     652:	50 0d       	add	r21, r0
     654:	11 24       	eor	r1, r1
     656:	59 bd       	out	0x29, r21	; 41
     658:	48 bd       	out	0x28, r20	; 40
     65a:	0b c0       	rjmp	.+22     	; 0x672 <_Z5speedii+0x9a>
	}
	else
	{
		cbi(PORTD, DIR00);
     65c:	90 98       	cbi	0x12, 0	; 18
		sbi(PORTD, DIR01);
     65e:	91 9a       	sbi	0x12, 1	; 18
		OCR1B = (-left) * 200;
     660:	e8 e3       	ldi	r30, 0x38	; 56
     662:	ec 9d       	mul	r30, r12
     664:	a0 01       	movw	r20, r0
     666:	ed 9d       	mul	r30, r13
     668:	50 0d       	add	r21, r0
     66a:	5c 19       	sub	r21, r12
     66c:	11 24       	eor	r1, r1
     66e:	59 bd       	out	0x29, r21	; 41
     670:	48 bd       	out	0x28, r20	; 40
	}
	
	if (right >= 0)
     672:	33 23       	and	r19, r19
     674:	7c f0       	brlt	.+30     	; 0x694 <_Z5speedii+0xbc>
	{
		sbi(PORTD, DIR10);
     676:	93 9a       	sbi	0x12, 3	; 18
		cbi(PORTD, DIR11);
     678:	96 98       	cbi	0x12, 6	; 18
		OCR2 = right * 255/100;
     67a:	4f ef       	ldi	r20, 0xFF	; 255
     67c:	46 9f       	mul	r20, r22
     67e:	90 01       	movw	r18, r0
     680:	47 9f       	mul	r20, r23
     682:	30 0d       	add	r19, r0
     684:	11 24       	eor	r1, r1
     686:	c9 01       	movw	r24, r18
     688:	64 e6       	ldi	r22, 0x64	; 100
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__divmodhi4>
     690:	63 bd       	out	0x23, r22	; 35
     692:	0f c0       	rjmp	.+30     	; 0x6b2 <_Z5speedii+0xda>
	}
	else
	{
		cbi(PORTD, DIR10);
     694:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD, DIR11);
     696:	96 9a       	sbi	0x12, 6	; 18
		OCR2 = (-right) * 255/100;
     698:	41 e0       	ldi	r20, 0x01	; 1
     69a:	46 9f       	mul	r20, r22
     69c:	90 01       	movw	r18, r0
     69e:	47 9f       	mul	r20, r23
     6a0:	30 0d       	add	r19, r0
     6a2:	36 1b       	sub	r19, r22
     6a4:	11 24       	eor	r1, r1
     6a6:	c9 01       	movw	r24, r18
     6a8:	64 e6       	ldi	r22, 0x64	; 100
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__divmodhi4>
     6b0:	63 bd       	out	0x23, r22	; 35
	}
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	9f 90       	pop	r9
     6c8:	8f 90       	pop	r8
     6ca:	08 95       	ret

000006cc <_Z3SPIh>:
}

/* -------------------- LED7 -------------------- */
void SPI(uint8_t data)
{
	SPDR = data;
     6cc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     6ce:	77 9b       	sbis	0x0e, 7	; 14
     6d0:	fe cf       	rjmp	.-4      	; 0x6ce <_Z3SPIh+0x2>
}
     6d2:	08 95       	ret

000006d4 <_Z4led7j>:

void led7(unsigned int num)
{
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	ac 01       	movw	r20, r24
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
     6de:	9c 01       	movw	r18, r24
     6e0:	ad ec       	ldi	r26, 0xCD	; 205
     6e2:	bc ec       	ldi	r27, 0xCC	; 204
     6e4:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__umulhisi3>
     6e8:	96 95       	lsr	r25
     6ea:	87 95       	ror	r24
     6ec:	96 95       	lsr	r25
     6ee:	87 95       	ror	r24
     6f0:	96 95       	lsr	r25
     6f2:	87 95       	ror	r24
     6f4:	9c 01       	movw	r18, r24
     6f6:	22 0f       	add	r18, r18
     6f8:	33 1f       	adc	r19, r19
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	82 0f       	add	r24, r18
     708:	93 1f       	adc	r25, r19
     70a:	9a 01       	movw	r18, r20
     70c:	28 1b       	sub	r18, r24
     70e:	39 0b       	sbc	r19, r25
     710:	c9 01       	movw	r24, r18
     712:	80 68       	ori	r24, 0x80	; 128
     714:	80 93 7e 00 	sts	0x007E, r24
	led7_data.ten		 = (unsigned int)(num%100 / 10);
     718:	9a 01       	movw	r18, r20
     71a:	36 95       	lsr	r19
     71c:	27 95       	ror	r18
     71e:	36 95       	lsr	r19
     720:	27 95       	ror	r18
     722:	ab e7       	ldi	r26, 0x7B	; 123
     724:	b4 e1       	ldi	r27, 0x14	; 20
     726:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__umulhisi3>
     72a:	96 95       	lsr	r25
     72c:	87 95       	ror	r24
     72e:	64 e6       	ldi	r22, 0x64	; 100
     730:	68 9f       	mul	r22, r24
     732:	90 01       	movw	r18, r0
     734:	69 9f       	mul	r22, r25
     736:	30 0d       	add	r19, r0
     738:	11 24       	eor	r1, r1
     73a:	ca 01       	movw	r24, r20
     73c:	82 1b       	sub	r24, r18
     73e:	93 0b       	sbc	r25, r19
     740:	9c 01       	movw	r18, r24
     742:	ad ec       	ldi	r26, 0xCD	; 205
     744:	bc ec       	ldi	r27, 0xCC	; 204
     746:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__umulhisi3>
     74a:	fc 01       	movw	r30, r24
     74c:	f6 95       	lsr	r31
     74e:	e7 95       	ror	r30
     750:	f6 95       	lsr	r31
     752:	e7 95       	ror	r30
     754:	f6 95       	lsr	r31
     756:	e7 95       	ror	r30
     758:	1e 2f       	mov	r17, r30
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
     75a:	ea 01       	movw	r28, r20
     75c:	d6 95       	lsr	r29
     75e:	c7 95       	ror	r28
     760:	d6 95       	lsr	r29
     762:	c7 95       	ror	r28
     764:	d6 95       	lsr	r29
     766:	c7 95       	ror	r28
     768:	9e 01       	movw	r18, r28
     76a:	a5 ec       	ldi	r26, 0xC5	; 197
     76c:	b0 e2       	ldi	r27, 0x20	; 32
     76e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__umulhisi3>
     772:	92 95       	swap	r25
     774:	82 95       	swap	r24
     776:	8f 70       	andi	r24, 0x0F	; 15
     778:	89 27       	eor	r24, r25
     77a:	9f 70       	andi	r25, 0x0F	; 15
     77c:	89 27       	eor	r24, r25
     77e:	68 ee       	ldi	r22, 0xE8	; 232
     780:	73 e0       	ldi	r23, 0x03	; 3
     782:	86 9f       	mul	r24, r22
     784:	90 01       	movw	r18, r0
     786:	87 9f       	mul	r24, r23
     788:	30 0d       	add	r19, r0
     78a:	96 9f       	mul	r25, r22
     78c:	30 0d       	add	r19, r0
     78e:	11 24       	eor	r1, r1
     790:	42 1b       	sub	r20, r18
     792:	53 0b       	sbc	r21, r19
     794:	9a 01       	movw	r18, r20
     796:	36 95       	lsr	r19
     798:	27 95       	ror	r18
     79a:	36 95       	lsr	r19
     79c:	27 95       	ror	r18
     79e:	ab e7       	ldi	r26, 0x7B	; 123
     7a0:	b4 e1       	ldi	r27, 0x14	; 20
     7a2:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__umulhisi3>
     7a6:	ac 01       	movw	r20, r24
     7a8:	56 95       	lsr	r21
     7aa:	47 95       	ror	r20
     7ac:	04 2f       	mov	r16, r20
	led7_data.thousand	 = (unsigned int)(num/ 1000);
     7ae:	9e 01       	movw	r18, r28
     7b0:	a5 ec       	ldi	r26, 0xC5	; 197
     7b2:	b0 e2       	ldi	r27, 0x20	; 32
     7b4:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__umulhisi3>
     7b8:	92 95       	swap	r25
     7ba:	82 95       	swap	r24
     7bc:	8f 70       	andi	r24, 0x0F	; 15
     7be:	89 27       	eor	r24, r25
     7c0:	9f 70       	andi	r25, 0x0F	; 15
     7c2:	89 27       	eor	r24, r25
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
     7c4:	88 23       	and	r24, r24
     7c6:	11 f0       	breq	.+4      	; 0x7cc <_Z4led7j+0xf8>
     7c8:	20 e1       	ldi	r18, 0x10	; 16
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <_Z4led7j+0xfa>
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	82 2b       	or	r24, r18
     7d0:	80 93 81 00 	sts	0x0081, r24
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     7d4:	81 11       	cpse	r24, r1
     7d6:	15 c0       	rjmp	.+42     	; 0x802 <_Z4led7j+0x12e>
     7d8:	01 11       	cpse	r16, r1
     7da:	0c c0       	rjmp	.+24     	; 0x7f4 <_Z4led7j+0x120>
     7dc:	0c c0       	rjmp	.+24     	; 0x7f6 <_Z4led7j+0x122>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     7de:	11 23       	and	r17, r17
     7e0:	11 f0       	breq	.+4      	; 0x7e6 <_Z4led7j+0x112>
     7e2:	80 e4       	ldi	r24, 0x40	; 64
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <_Z4led7j+0x118>
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	01 c0       	rjmp	.+2      	; 0x7ec <_Z4led7j+0x118>
     7ea:	80 e4       	ldi	r24, 0x40	; 64
     7ec:	e8 2b       	or	r30, r24
     7ee:	e0 93 7f 00 	sts	0x007F, r30
     7f2:	0c c0       	rjmp	.+24     	; 0x80c <_Z4led7j+0x138>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     7f4:	80 e2       	ldi	r24, 0x20	; 32
     7f6:	48 2b       	or	r20, r24
     7f8:	40 93 80 00 	sts	0x0080, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     7fc:	44 23       	and	r20, r20
     7fe:	79 f3       	breq	.-34     	; 0x7de <_Z4led7j+0x10a>
     800:	f4 cf       	rjmp	.-24     	; 0x7ea <_Z4led7j+0x116>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     802:	40 62       	ori	r20, 0x20	; 32
     804:	40 93 80 00 	sts	0x0080, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     808:	80 e4       	ldi	r24, 0x40	; 64
     80a:	f0 cf       	rjmp	.-32     	; 0x7ec <_Z4led7j+0x118>
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	08 95       	ret

00000816 <_Z5printv>:

void print( void )
{
     816:	cf 93       	push	r28
	uint8_t value=0;
	if(led7_data.i++ == 4) led7_data.i=0;
     818:	ed e7       	ldi	r30, 0x7D	; 125
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	90 81       	ld	r25, Z
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	89 0f       	add	r24, r25
     822:	80 83       	st	Z, r24
     824:	94 30       	cpi	r25, 0x04	; 4
     826:	19 f4       	brne	.+6      	; 0x82e <_Z5printv+0x18>
     828:	10 92 7d 00 	sts	0x007D, r1
     82c:	08 c0       	rjmp	.+16     	; 0x83e <_Z5printv+0x28>
	switch(led7_data.i)
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	49 f0       	breq	.+18     	; 0x844 <_Z5printv+0x2e>
     832:	28 f0       	brcs	.+10     	; 0x83e <_Z5printv+0x28>
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	49 f0       	breq	.+18     	; 0x84a <_Z5printv+0x34>
     838:	83 30       	cpi	r24, 0x03	; 3
     83a:	51 f0       	breq	.+20     	; 0x850 <_Z5printv+0x3a>
     83c:	0c c0       	rjmp	.+24     	; 0x856 <_Z5printv+0x40>
	{
		case 0: value=led7_data.thousand;	break;
     83e:	c0 91 81 00 	lds	r28, 0x0081
     842:	0a c0       	rjmp	.+20     	; 0x858 <_Z5printv+0x42>
		case 1: value=led7_data.hundred;	break;
     844:	c0 91 80 00 	lds	r28, 0x0080
     848:	07 c0       	rjmp	.+14     	; 0x858 <_Z5printv+0x42>
		case 2: value=led7_data.ten;		break;
     84a:	c0 91 7f 00 	lds	r28, 0x007F
     84e:	04 c0       	rjmp	.+8      	; 0x858 <_Z5printv+0x42>
		case 3: value=led7_data.unit;		break;
     850:	c0 91 7e 00 	lds	r28, 0x007E
     854:	01 c0       	rjmp	.+2      	; 0x858 <_Z5printv+0x42>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
}

void print( void )
{
	uint8_t value=0;
     856:	c0 e0       	ldi	r28, 0x00	; 0
		case 1: value=led7_data.hundred;	break;
		case 2: value=led7_data.ten;		break;
		case 3: value=led7_data.unit;		break;
		default: break;
	}
	SPI(~led7_data.sensor_out);
     858:	80 91 82 00 	lds	r24, 0x0082
     85c:	80 95       	com	r24
     85e:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z3SPIh>
	SPI(value);
     862:	8c 2f       	mov	r24, r28
     864:	0e 94 66 03 	call	0x6cc	; 0x6cc <_Z3SPIh>
	sbi(PORTB,LATCH);
     868:	c4 9a       	sbi	0x18, 4	; 24
	cbi(PORTB,LATCH);
     86a:	c4 98       	cbi	0x18, 4	; 24
}
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <_Z15read_adc_eepromv>:

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	0f 2e       	mov	r0, r31
     87e:	f3 e9       	ldi	r31, 0x93	; 147
     880:	ef 2e       	mov	r14, r31
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	ff 2e       	mov	r15, r31
     886:	f0 2d       	mov	r31, r0
     888:	03 e8       	ldi	r16, 0x83	; 131
     88a:	10 e0       	ldi	r17, 0x00	; 0
     88c:	c0 e0       	ldi	r28, 0x00	; 0
     88e:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     890:	e1 99       	sbic	0x1c, 1	; 28
     892:	fe cf       	rjmp	.-4      	; 0x890 <_Z15read_adc_eepromv+0x20>
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
     894:	ce 01       	movw	r24, r28
     896:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__eerd_word_m16>
     89a:	f7 01       	movw	r30, r14
     89c:	81 93       	st	Z+, r24
     89e:	91 93       	st	Z+, r25
     8a0:	7f 01       	movw	r14, r30
		while(!eeprom_is_ready());
     8a2:	e1 99       	sbic	0x1c, 1	; 28
     8a4:	fe cf       	rjmp	.-4      	; 0x8a2 <_Z15read_adc_eepromv+0x32>
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
     8a6:	ce 01       	movw	r24, r28
     8a8:	40 96       	adiw	r24, 0x10	; 16
     8aa:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__eerd_word_m16>
     8ae:	f8 01       	movw	r30, r16
     8b0:	81 93       	st	Z+, r24
     8b2:	91 93       	st	Z+, r25
     8b4:	8f 01       	movw	r16, r30
     8b6:	22 96       	adiw	r28, 0x02	; 2
}

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     8b8:	c0 31       	cpi	r28, 0x10	; 16
     8ba:	d1 05       	cpc	r29, r1
     8bc:	49 f7       	brne	.-46     	; 0x890 <_Z15read_adc_eepromv+0x20>
     8be:	c3 ea       	ldi	r28, 0xA3	; 163
     8c0:	d0 e0       	ldi	r29, 0x00	; 0
     8c2:	43 ea       	ldi	r20, 0xA3	; 163
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	a3 e8       	ldi	r26, 0x83	; 131
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	e3 e9       	ldi	r30, 0x93	; 147
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     8ce:	81 91       	ld	r24, Z+
     8d0:	91 91       	ld	r25, Z+
     8d2:	2d 91       	ld	r18, X+
     8d4:	3d 91       	ld	r19, X+
     8d6:	82 0f       	add	r24, r18
     8d8:	93 1f       	adc	r25, r19
     8da:	96 95       	lsr	r25
     8dc:	87 95       	ror	r24
     8de:	89 93       	st	Y+, r24
     8e0:	99 93       	st	Y+, r25
		while(!eeprom_is_ready());
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
     8e2:	e4 17       	cp	r30, r20
     8e4:	f5 07       	cpc	r31, r21
     8e6:	99 f7       	brne	.-26     	; 0x8ce <_Z15read_adc_eepromv+0x5e>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	08 95       	ret

000008f6 <_Z16write_adc_eepromv>:

void write_adc_eeprom( void )
{
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	0f 2e       	mov	r0, r31
     904:	f3 e8       	ldi	r31, 0x83	; 131
     906:	ef 2e       	mov	r14, r31
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	ff 2e       	mov	r15, r31
     90c:	f0 2d       	mov	r31, r0
     90e:	03 e9       	ldi	r16, 0x93	; 147
     910:	10 e0       	ldi	r17, 0x00	; 0
     912:	c0 e0       	ldi	r28, 0x00	; 0
     914:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     916:	e1 99       	sbic	0x1c, 1	; 28
     918:	fe cf       	rjmp	.-4      	; 0x916 <_Z16write_adc_eepromv+0x20>
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
     91a:	f8 01       	movw	r30, r16
     91c:	61 91       	ld	r22, Z+
     91e:	71 91       	ld	r23, Z+
     920:	8f 01       	movw	r16, r30
     922:	ce 01       	movw	r24, r28
     924:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__eewr_word_m16>
		while(!eeprom_is_ready());
     928:	e1 99       	sbic	0x1c, 1	; 28
     92a:	fe cf       	rjmp	.-4      	; 0x928 <_Z16write_adc_eepromv+0x32>
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
     92c:	f7 01       	movw	r30, r14
     92e:	61 91       	ld	r22, Z+
     930:	71 91       	ld	r23, Z+
     932:	7f 01       	movw	r14, r30
     934:	ce 01       	movw	r24, r28
     936:	40 96       	adiw	r24, 0x10	; 16
     938:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__eewr_word_m16>
     93c:	22 96       	adiw	r28, 0x02	; 2
	}
}

void write_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     93e:	c0 31       	cpi	r28, 0x10	; 16
     940:	d1 05       	cpc	r29, r1
     942:	49 f7       	brne	.-46     	; 0x916 <_Z16write_adc_eepromv+0x20>
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
	}
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	08 95       	ret

00000952 <_Z8adc_readh>:

uint16_t adc_read( uint8_t ch )
{
	ADMUX = (1<< REFS0)|ch;
     952:	80 64       	ori	r24, 0x40	; 64
     954:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
     956:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
     958:	34 9b       	sbis	0x06, 4	; 6
     95a:	fe cf       	rjmp	.-4      	; 0x958 <_Z8adc_readh+0x6>
	return ADCW;
     95c:	84 b1       	in	r24, 0x04	; 4
     95e:	95 b1       	in	r25, 0x05	; 5
}
     960:	08 95       	ret

00000962 <_Z10sensor_cmpv>:

uint8_t sensor_cmp( void )
{
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	03 ea       	ldi	r16, 0xA3	; 163
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	c0 e0       	ldi	r28, 0x00	; 0
     976:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t ADC_value=0;
     978:	d1 2c       	mov	r13, r1
	for(uint8_t i=0; i<8; i++)
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
     97a:	ee 24       	eor	r14, r14
     97c:	e3 94       	inc	r14
     97e:	f1 2c       	mov	r15, r1
     980:	8c 2f       	mov	r24, r28
     982:	0e 94 a9 04 	call	0x952	; 0x952 <_Z8adc_readh>
     986:	f8 01       	movw	r30, r16
     988:	21 91       	ld	r18, Z+
     98a:	31 91       	ld	r19, Z+
     98c:	8f 01       	movw	r16, r30
     98e:	82 17       	cp	r24, r18
     990:	93 07       	cpc	r25, r19
     992:	40 f4       	brcc	.+16     	; 0x9a4 <_Z10sensor_cmpv+0x42>
     994:	97 01       	movw	r18, r14
     996:	0c 2e       	mov	r0, r28
     998:	02 c0       	rjmp	.+4      	; 0x99e <_Z10sensor_cmpv+0x3c>
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	0a 94       	dec	r0
     9a0:	e2 f7       	brpl	.-8      	; 0x99a <_Z10sensor_cmpv+0x38>
     9a2:	d2 2a       	or	r13, r18
     9a4:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t sensor_cmp( void )
{
	uint8_t ADC_value=0;
	for(uint8_t i=0; i<8; i++)
     9a6:	c8 30       	cpi	r28, 0x08	; 8
     9a8:	d1 05       	cpc	r29, r1
     9aa:	51 f7       	brne	.-44     	; 0x980 <_Z10sensor_cmpv+0x1e>
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
	}
	led7_data.sensor_out=ADC_value;
     9ac:	d0 92 82 00 	sts	0x0082, r13
	return (ADC_value);
}
     9b0:	8d 2d       	mov	r24, r13
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	df 90       	pop	r13
     9c0:	08 95       	ret

000009c2 <_Z11learn_colorv>:

void learn_color( void )
{
     9c2:	8f 92       	push	r8
     9c4:	9f 92       	push	r9
     9c6:	af 92       	push	r10
     9c8:	bf 92       	push	r11
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	c3 e9       	ldi	r28, 0x93	; 147
     9dc:	d0 e0       	ldi	r29, 0x00	; 0
     9de:	03 e8       	ldi	r16, 0x83	; 131
     9e0:	10 e0       	ldi	r17, 0x00	; 0
     9e2:	0f 2e       	mov	r0, r31
     9e4:	f3 ea       	ldi	r31, 0xA3	; 163
     9e6:	ef 2e       	mov	r14, r31
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	ff 2e       	mov	r15, r31
     9ec:	f0 2d       	mov	r31, r0
     9ee:	d8 01       	movw	r26, r16
     9f0:	fe 01       	movw	r30, r28
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
	{
		lineTrang[i] = 1024;
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	94 e0       	ldi	r25, 0x04	; 4
     9f6:	81 93       	st	Z+, r24
     9f8:	91 93       	st	Z+, r25
		lineDen[i] = 0;
     9fa:	1d 92       	st	X+, r1
     9fc:	1d 92       	st	X+, r1

void learn_color( void )
{
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
     9fe:	ee 15       	cp	r30, r14
     a00:	ff 05       	cpc	r31, r15
     a02:	c9 f7       	brne	.-14     	; 0x9f6 <_Z11learn_colorv+0x34>
	{
		lineTrang[i] = 1024;
		lineDen[i] = 0;
	}
	
	led7(6014);
     a04:	8e e7       	ldi	r24, 0x7E	; 126
     a06:	97 e1       	ldi	r25, 0x17	; 23
     a08:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
	while (1)
	{
		if(get_button(BTN2)) break;
     a0c:	b0 2e       	mov	r11, r16
     a0e:	a1 2e       	mov	r10, r17
     a10:	9c 2e       	mov	r9, r28
     a12:	8d 2e       	mov	r8, r29
     a14:	c1 2c       	mov	r12, r1
     a16:	87 ef       	ldi	r24, 0xF7	; 247
     a18:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     a1c:	81 11       	cpse	r24, r1
     a1e:	1f c0       	rjmp	.+62     	; 0xa5e <_Z11learn_colorv+0x9c>
     a20:	0b 2d       	mov	r16, r11
     a22:	1a 2d       	mov	r17, r10
     a24:	c9 2d       	mov	r28, r9
     a26:	d8 2d       	mov	r29, r8
     a28:	dc 2c       	mov	r13, r12
		
		for (uint8_t i = 0; i < 8; i++)
		{
			ADC_temp = adc_read(i);
     a2a:	8d 2d       	mov	r24, r13
     a2c:	0e 94 a9 04 	call	0x952	; 0x952 <_Z8adc_readh>
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
     a30:	28 81       	ld	r18, Y
     a32:	39 81       	ldd	r19, Y+1	; 0x01
     a34:	82 17       	cp	r24, r18
     a36:	93 07       	cpc	r25, r19
     a38:	10 f4       	brcc	.+4      	; 0xa3e <_Z11learn_colorv+0x7c>
     a3a:	99 83       	std	Y+1, r25	; 0x01
     a3c:	88 83       	st	Y, r24
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
     a3e:	f8 01       	movw	r30, r16
     a40:	20 81       	ld	r18, Z
     a42:	31 81       	ldd	r19, Z+1	; 0x01
     a44:	28 17       	cp	r18, r24
     a46:	39 07       	cpc	r19, r25
     a48:	10 f4       	brcc	.+4      	; 0xa4e <_Z11learn_colorv+0x8c>
     a4a:	91 83       	std	Z+1, r25	; 0x01
     a4c:	80 83       	st	Z, r24
	led7(6014);
	while (1)
	{
		if(get_button(BTN2)) break;
		
		for (uint8_t i = 0; i < 8; i++)
     a4e:	d3 94       	inc	r13
     a50:	22 96       	adiw	r28, 0x02	; 2
     a52:	0e 5f       	subi	r16, 0xFE	; 254
     a54:	1f 4f       	sbci	r17, 0xFF	; 255
     a56:	f8 e0       	ldi	r31, 0x08	; 8
     a58:	df 12       	cpse	r13, r31
     a5a:	e7 cf       	rjmp	.-50     	; 0xa2a <_Z11learn_colorv+0x68>
     a5c:	dc cf       	rjmp	.-72     	; 0xa16 <_Z11learn_colorv+0x54>
     a5e:	c3 ea       	ldi	r28, 0xA3	; 163
     a60:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	led7(6014);
	while (1)
	{
		if(get_button(BTN2)) break;
     a62:	a3 e8       	ldi	r26, 0x83	; 131
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e3 e9       	ldi	r30, 0x93	; 147
     a68:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
	
	for (uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     a6a:	81 91       	ld	r24, Z+
     a6c:	91 91       	ld	r25, Z+
     a6e:	2d 91       	ld	r18, X+
     a70:	3d 91       	ld	r19, X+
     a72:	82 0f       	add	r24, r18
     a74:	93 1f       	adc	r25, r19
     a76:	96 95       	lsr	r25
     a78:	87 95       	ror	r24
     a7a:	89 93       	st	Y+, r24
     a7c:	99 93       	st	Y+, r25
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
		}
	}
	
	for (uint8_t i=0; i<8; i++)
     a7e:	ee 15       	cp	r30, r14
     a80:	ff 05       	cpc	r31, r15
     a82:	99 f7       	brne	.-26     	; 0xa6a <_Z11learn_colorv+0xa8>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
	
	write_adc_eeprom();
     a84:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_Z16write_adc_eepromv>
	return (ADC_value);
}

void learn_color( void )
{
	uint8_t sel = 0;
     a88:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1)
	{
		if(get_button(BTN0))
		{
			if (++sel > 7) sel = 0;
     a8a:	f1 2c       	mov	r15, r1
		{
			break;
		}
		
		led7(ADC_average[sel]);
		led7_data.sensor_out = (1 << sel);
     a8c:	c2 e8       	ldi	r28, 0x82	; 130
     a8e:	d0 e0       	ldi	r29, 0x00	; 0
     a90:	01 e0       	ldi	r16, 0x01	; 1
	
	write_adc_eeprom();
	
	while (1)
	{
		if(get_button(BTN0))
     a92:	8d ef       	ldi	r24, 0xFD	; 253
     a94:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     a98:	88 23       	and	r24, r24
     a9a:	21 f0       	breq	.+8      	; 0xaa4 <_Z11learn_colorv+0xe2>
		{
			if (++sel > 7) sel = 0;
     a9c:	1f 5f       	subi	r17, 0xFF	; 255
     a9e:	18 30       	cpi	r17, 0x08	; 8
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <_Z11learn_colorv+0xe2>
     aa2:	1f 2d       	mov	r17, r15
		}
		if (get_button(BTN1))
     aa4:	8b ef       	ldi	r24, 0xFB	; 251
     aa6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     aaa:	81 11       	cpse	r24, r1
		{
			if (--sel < 0)  sel = 7;
     aac:	11 50       	subi	r17, 0x01	; 1
		}
		if (get_button(BTN2))
     aae:	87 ef       	ldi	r24, 0xF7	; 247
     ab0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     ab4:	81 11       	cpse	r24, r1
     ab6:	12 c0       	rjmp	.+36     	; 0xadc <_Z11learn_colorv+0x11a>
		{
			break;
		}
		
		led7(ADC_average[sel]);
     ab8:	e1 2f       	mov	r30, r17
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	ee 0f       	add	r30, r30
     abe:	ff 1f       	adc	r31, r31
     ac0:	ed 55       	subi	r30, 0x5D	; 93
     ac2:	ff 4f       	sbci	r31, 0xFF	; 255
     ac4:	80 81       	ld	r24, Z
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
		led7_data.sensor_out = (1 << sel);
     acc:	80 2f       	mov	r24, r16
     ace:	01 2e       	mov	r0, r17
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <_Z11learn_colorv+0x112>
     ad2:	88 0f       	add	r24, r24
     ad4:	0a 94       	dec	r0
     ad6:	ea f7       	brpl	.-6      	; 0xad2 <_Z11learn_colorv+0x110>
     ad8:	88 83       	st	Y, r24
	}
     ada:	db cf       	rjmp	.-74     	; 0xa92 <_Z11learn_colorv+0xd0>
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	af 90       	pop	r10
     af0:	9f 90       	pop	r9
     af2:	8f 90       	pop	r8
     af4:	08 95       	ret

00000af6 <_Z4INITv>:

/* -------------------- INITIAL -------------------- */
void INIT( void )
{
	/* ADC */
	ADMUX=(1<<REFS0);
     af6:	80 e4       	ldi	r24, 0x40	; 64
     af8:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN) | (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     afa:	87 e8       	ldi	r24, 0x87	; 135
     afc:	86 b9       	out	0x06, r24	; 6
	read_adc_eeprom();
     afe:	0e 94 38 04 	call	0x870	; 0x870 <_Z15read_adc_eepromv>
	
	/* PORT */
	DDRB  = 0b11110001;
     b02:	81 ef       	ldi	r24, 0xF1	; 241
     b04:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111111;
     b06:	8f ef       	ldi	r24, 0xFF	; 255
     b08:	88 bb       	out	0x18, r24	; 24
	
	DDRC  = 0b00000000;
     b0a:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b11111111;
     b0c:	85 bb       	out	0x15, r24	; 21
	
	DDRD  = 0b11111011;
     b0e:	8b ef       	ldi	r24, 0xFB	; 251
     b10:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000;
     b12:	12 ba       	out	0x12, r1	; 18
	
	/* SPI */
	SPCR = (1<<SPE)|(1<<MSTR);
     b14:	80 e5       	ldi	r24, 0x50	; 80
     b16:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	8e b9       	out	0x0e, r24	; 14
	
	/* TIMER */
	TCCR0=(1<<WGM01) | (1<<CS02);
     b1c:	8c e0       	ldi	r24, 0x0C	; 12
     b1e:	83 bf       	out	0x33, r24	; 51
	OCR0=62;
     b20:	8e e3       	ldi	r24, 0x3E	; 62
     b22:	8c bf       	out	0x3c, r24	; 60
	TIMSK=(1<<OCIE0);
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
     b28:	82 ea       	ldi	r24, 0xA2	; 162
     b2a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS11);
     b2c:	8a e1       	ldi	r24, 0x1A	; 26
     b2e:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 20000;
     b30:	80 e2       	ldi	r24, 0x20	; 32
     b32:	9e e4       	ldi	r25, 0x4E	; 78
     b34:	97 bd       	out	0x27, r25	; 39
     b36:	86 bd       	out	0x26, r24	; 38
	OCR1B = 0;
     b38:	19 bc       	out	0x29, r1	; 41
     b3a:	18 bc       	out	0x28, r1	; 40
	
	TCCR2=(1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS22)|(1<<CS21)|(1<<CS20);
     b3c:	8f e6       	ldi	r24, 0x6F	; 111
     b3e:	85 bd       	out	0x25, r24	; 37
	OCR2=0;
     b40:	13 bc       	out	0x23, r1	; 35
	sei();
     b42:	78 94       	sei
	
	/* ENCODER */
	MCUCR |= (1<<ISC00)|(1<<ISC01);
     b44:	85 b7       	in	r24, 0x35	; 53
     b46:	83 60       	ori	r24, 0x03	; 3
     b48:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     b4a:	8b b7       	in	r24, 0x3b	; 59
     b4c:	80 64       	ori	r24, 0x40	; 64
     b4e:	8b bf       	out	0x3b, r24	; 59
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     b50:	83 e1       	ldi	r24, 0x13	; 19
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	90 93 7c 00 	sts	0x007C, r25
     b58:	80 93 7b 00 	sts	0x007B, r24
     b5c:	08 95       	ret

00000b5e <_Z13test_hardwarev>:
	set_encoder(19);
}

void test_hardware( void )
{
	uint8_t _index=0;
     b5e:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     b60:	f1 2c       	mov	r15, r1
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
		led7_data.sensor_out = 0 | (1<<_index);
     b62:	c2 e8       	ldi	r28, 0x82	; 130
     b64:	d0 e0       	ldi	r29, 0x00	; 0
     b66:	01 e0       	ldi	r16, 0x01	; 1
void test_hardware( void )
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
     b68:	8d ef       	ldi	r24, 0xFD	; 253
     b6a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     b6e:	88 23       	and	r24, r24
     b70:	59 f0       	breq	.+22     	; 0xb88 <_Z13test_hardwarev+0x2a>
     b72:	6c e9       	ldi	r22, 0x9C	; 156
     b74:	7f ef       	ldi	r23, 0xFF	; 255
     b76:	84 e6       	ldi	r24, 0x64	; 100
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
     b7e:	83 e8       	ldi	r24, 0x83	; 131
     b80:	9f ef       	ldi	r25, 0xFF	; 255
     b82:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
     b86:	25 c0       	rjmp	.+74     	; 0xbd2 <_Z13test_hardwarev+0x74>
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     b88:	8b ef       	ldi	r24, 0xFB	; 251
     b8a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     b8e:	88 23       	and	r24, r24
     b90:	21 f0       	breq	.+8      	; 0xb9a <_Z13test_hardwarev+0x3c>
     b92:	1f 5f       	subi	r17, 0xFF	; 255
     b94:	18 30       	cpi	r17, 0x08	; 8
     b96:	e9 f4       	brne	.+58     	; 0xbd2 <_Z13test_hardwarev+0x74>
     b98:	1b c0       	rjmp	.+54     	; 0xbd0 <_Z13test_hardwarev+0x72>
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
     b9a:	87 ef       	ldi	r24, 0xF7	; 247
     b9c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     ba0:	88 23       	and	r24, r24
     ba2:	59 f0       	breq	.+22     	; 0xbba <_Z13test_hardwarev+0x5c>
     ba4:	64 e6       	ldi	r22, 0x64	; 100
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	8c e9       	ldi	r24, 0x9C	; 156
     baa:	9f ef       	ldi	r25, 0xFF	; 255
     bac:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
     bb0:	8d e7       	ldi	r24, 0x7D	; 125
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
     bb8:	0c c0       	rjmp	.+24     	; 0xbd2 <_Z13test_hardwarev+0x74>
		else						{ speed(0,0);  handle(0);                 }
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <_Z13test_hardwarev+0x74>
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     bd0:	1f 2d       	mov	r17, r15
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
     bd2:	81 2f       	mov	r24, r17
     bd4:	0e 94 a9 04 	call	0x952	; 0x952 <_Z8adc_readh>
     bd8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
		led7_data.sensor_out = 0 | (1<<_index);
     bdc:	80 2f       	mov	r24, r16
     bde:	01 2e       	mov	r0, r17
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <_Z13test_hardwarev+0x86>
     be2:	88 0f       	add	r24, r24
     be4:	0a 94       	dec	r0
     be6:	ea f7       	brpl	.-6      	; 0xbe2 <_Z13test_hardwarev+0x84>
     be8:	88 83       	st	Y, r24
	}
     bea:	be cf       	rjmp	.-132    	; 0xb68 <_Z13test_hardwarev+0xa>

00000bec <_Z15servo_calibratev>:
		if (get_button(BTN2)) angle++;
	}
}

void servo_calibrate( void )
{
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
	int16_t angle = 0;
     bf0:	c0 e0       	ldi	r28, 0x00	; 0
     bf2:	d0 e0       	ldi	r29, 0x00	; 0
	while (true)
	{
		led7((angle>=0)?angle:(-angle));
     bf4:	ce 01       	movw	r24, r28
     bf6:	dd 23       	and	r29, r29
     bf8:	24 f4       	brge	.+8      	; 0xc02 <_Z15servo_calibratev+0x16>
     bfa:	88 27       	eor	r24, r24
     bfc:	99 27       	eor	r25, r25
     bfe:	8c 1b       	sub	r24, r28
     c00:	9d 0b       	sbc	r25, r29
     c02:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
		sensor_cmp();
     c06:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
		handle(angle);
     c0a:	ce 01       	movw	r24, r28
     c0c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
		if (get_button(BTN0)) angle--;
     c10:	8d ef       	ldi	r24, 0xFD	; 253
     c12:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     c16:	81 11       	cpse	r24, r1
     c18:	21 97       	sbiw	r28, 0x01	; 1
		if (get_button(BTN1)) break;;
     c1a:	8b ef       	ldi	r24, 0xFB	; 251
     c1c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     c20:	81 11       	cpse	r24, r1
     c22:	07 c0       	rjmp	.+14     	; 0xc32 <_Z15servo_calibratev+0x46>
		if (get_button(BTN2)) angle++;
     c24:	87 ef       	ldi	r24, 0xF7	; 247
     c26:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     c2a:	88 23       	and	r24, r24
     c2c:	19 f3       	breq	.-58     	; 0xbf4 <_Z15servo_calibratev+0x8>
     c2e:	21 96       	adiw	r28, 0x01	; 1
     c30:	e1 cf       	rjmp	.-62     	; 0xbf4 <_Z15servo_calibratev+0x8>
	}
	
	SERVO_CENTER = SERVO_CENTER + (angle * STEP);
     c32:	cc 0f       	add	r28, r28
     c34:	dd 1f       	adc	r29, r29
     c36:	cc 0f       	add	r28, r28
     c38:	dd 1f       	adc	r29, r29
     c3a:	80 91 62 00 	lds	r24, 0x0062
     c3e:	90 91 63 00 	lds	r25, 0x0063
     c42:	c8 0f       	add	r28, r24
     c44:	d9 1f       	adc	r29, r25
     c46:	d0 93 63 00 	sts	0x0063, r29
     c4a:	c0 93 62 00 	sts	0x0062, r28
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <_Z8sel_modev>:

/* -------------------- START -------------------- */
void sel_mode()
{
	handle(0);
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
	speed(0,0);
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	9f ef       	ldi	r25, 0xFF	; 255
     c6c:	90 93 7c 00 	sts	0x007C, r25
     c70:	80 93 7b 00 	sts	0x007B, r24
	speed(0,0);
	set_encoder(-1);
	
	while(1)
	{
		ratio_base = ratio_default + (get_switch() / 20.0);
     c74:	0e 94 ed 01 	call	0x3da	; 0x3da <_Z10get_switchv>
     c78:	68 2f       	mov	r22, r24
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__floatsisf>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 ea       	ldi	r20, 0xA0	; 160
     c8a:	51 e4       	ldi	r21, 0x41	; 65
     c8c:	0e 94 82 0c 	call	0x1904	; 0x1904 <__divsf3>
     c90:	2a e9       	ldi	r18, 0x9A	; 154
     c92:	39 e9       	ldi	r19, 0x99	; 153
     c94:	49 e9       	ldi	r20, 0x99	; 153
     c96:	5e e3       	ldi	r21, 0x3E	; 62
     c98:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__addsf3>
     c9c:	60 93 74 00 	sts	0x0074, r22
     ca0:	70 93 75 00 	sts	0x0075, r23
     ca4:	80 93 76 00 	sts	0x0076, r24
     ca8:	90 93 77 00 	sts	0x0077, r25
		ratio = ratio_base;
     cac:	60 93 70 00 	sts	0x0070, r22
     cb0:	70 93 71 00 	sts	0x0071, r23
     cb4:	80 93 72 00 	sts	0x0072, r24
     cb8:	90 93 73 00 	sts	0x0073, r25
		led7(ratio_base * 100);
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	48 ec       	ldi	r20, 0xC8	; 200
     cc2:	52 e4       	ldi	r21, 0x42	; 66
     cc4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3>
     cc8:	0e 94 ef 0c 	call	0x19de	; 0x19de <__fixunssfsi>
     ccc:	cb 01       	movw	r24, r22
     cce:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
		delay = (1.4 - 1.125 * ratio);
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e9       	ldi	r20, 0x90	; 144
     cd8:	5f e3       	ldi	r21, 0x3F	; 63
     cda:	60 91 70 00 	lds	r22, 0x0070
     cde:	70 91 71 00 	lds	r23, 0x0071
     ce2:	80 91 72 00 	lds	r24, 0x0072
     ce6:	90 91 73 00 	lds	r25, 0x0073
     cea:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3>
     cee:	9b 01       	movw	r18, r22
     cf0:	ac 01       	movw	r20, r24
     cf2:	63 e3       	ldi	r22, 0x33	; 51
     cf4:	73 e3       	ldi	r23, 0x33	; 51
     cf6:	83 eb       	ldi	r24, 0xB3	; 179
     cf8:	9f e3       	ldi	r25, 0x3F	; 63
     cfa:	0e 94 19 0c 	call	0x1832	; 0x1832 <__subsf3>
     cfe:	60 93 6c 00 	sts	0x006C, r22
     d02:	70 93 6d 00 	sts	0x006D, r23
     d06:	80 93 6e 00 	sts	0x006E, r24
     d0a:	90 93 6f 00 	sts	0x006F, r25
		sensor_cmp();
     d0e:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
		if(get_button(BTN0))		return;
     d12:	8d ef       	ldi	r24, 0xFD	; 253
     d14:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     d18:	81 11       	cpse	r24, r1
     d1a:	0f c0       	rjmp	.+30     	; 0xd3a <_Z8sel_modev+0xe6>
		else if (get_button(BTN1))	test_hardware(); /*test_servo();*/
     d1c:	8b ef       	ldi	r24, 0xFB	; 251
     d1e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     d22:	81 11       	cpse	r24, r1
     d24:	0e 94 af 05 	call	0xb5e	; 0xb5e <_Z13test_hardwarev>
		else if (get_button(BTN2))	learn_color();
     d28:	87 ef       	ldi	r24, 0xF7	; 247
     d2a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     d2e:	88 23       	and	r24, r24
     d30:	09 f4       	brne	.+2      	; 0xd34 <_Z8sel_modev+0xe0>
     d32:	a0 cf       	rjmp	.-192    	; 0xc74 <_Z8sel_modev+0x20>
     d34:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_Z11learn_colorv>
     d38:	9d cf       	rjmp	.-198    	; 0xc74 <_Z8sel_modev+0x20>
     d3a:	08 95       	ret

00000d3c <__vector_19>:
		}
    }
}

ISR(TIMER0_COMP_vect) /* 1ms */
{
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	2f 93       	push	r18
     d48:	3f 93       	push	r19
     d4a:	4f 93       	push	r20
     d4c:	5f 93       	push	r21
     d4e:	6f 93       	push	r22
     d50:	7f 93       	push	r23
     d52:	8f 93       	push	r24
     d54:	9f 93       	push	r25
     d56:	af 93       	push	r26
     d58:	bf 93       	push	r27
     d5a:	ef 93       	push	r30
     d5c:	ff 93       	push	r31
	print();
     d5e:	0e 94 0b 04 	call	0x816	; 0x816 <_Z5printv>
	cal_ratio();
     d62:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z9cal_ratiov>
	timer_cnt++;
     d66:	80 91 66 00 	lds	r24, 0x0066
     d6a:	90 91 67 00 	lds	r25, 0x0067
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	90 93 67 00 	sts	0x0067, r25
     d74:	80 93 66 00 	sts	0x0066, r24
}
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	bf 91       	pop	r27
     d7e:	af 91       	pop	r26
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	7f 91       	pop	r23
     d86:	6f 91       	pop	r22
     d88:	5f 91       	pop	r21
     d8a:	4f 91       	pop	r20
     d8c:	3f 91       	pop	r19
     d8e:	2f 91       	pop	r18
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	0f 90       	pop	r0
     d96:	1f 90       	pop	r1
     d98:	18 95       	reti

00000d9a <__vector_1>:

ISR(INT0_vect)
{
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
	encoder_pulse++;
     da8:	80 91 64 00 	lds	r24, 0x0064
     dac:	90 91 65 00 	lds	r25, 0x0065
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	90 93 65 00 	sts	0x0065, r25
     db6:	80 93 64 00 	sts	0x0064, r24
	pulse_ratio++;
     dba:	80 91 78 00 	lds	r24, 0x0078
     dbe:	90 91 79 00 	lds	r25, 0x0079
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	90 93 79 00 	sts	0x0079, r25
     dc8:	80 93 78 00 	sts	0x0078, r24
}
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <_Z15check_crosslinev>:

bool check_crossline( void )
{
	sensor = sensor_cmp();
     dda:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
     dde:	80 93 68 00 	sts	0x0068, r24
	return (((sensor & 0b11111111) == 0b11111111) || ((sensor & 0b01111110) == 0b01111110));
     de2:	8f 3f       	cpi	r24, 0xFF	; 255
     de4:	39 f0       	breq	.+14     	; 0xdf4 <_Z15check_crosslinev+0x1a>
     de6:	8e 77       	andi	r24, 0x7E	; 126
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	8e 37       	cpi	r24, 0x7E	; 126
     dec:	09 f0       	breq	.+2      	; 0xdf0 <_Z15check_crosslinev+0x16>
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	89 2f       	mov	r24, r25
     df2:	08 95       	ret
     df4:	81 e0       	ldi	r24, 0x01	; 1
}
     df6:	08 95       	ret

00000df8 <_Z15check_rightlinev>:
bool check_rightline( void )
{
	sensor = sensor_cmp();
     df8:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
     dfc:	80 93 68 00 	sts	0x0068, r24
	return (((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111));
     e00:	98 2f       	mov	r25, r24
     e02:	9f 70       	andi	r25, 0x0F	; 15
     e04:	9f 30       	cpi	r25, 0x0F	; 15
     e06:	39 f0       	breq	.+14     	; 0xe16 <_Z15check_rightlinev+0x1e>
     e08:	8f 71       	andi	r24, 0x1F	; 31
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	8f 31       	cpi	r24, 0x1F	; 31
     e0e:	09 f0       	breq	.+2      	; 0xe12 <_Z15check_rightlinev+0x1a>
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	89 2f       	mov	r24, r25
     e14:	08 95       	ret
     e16:	81 e0       	ldi	r24, 0x01	; 1
}
     e18:	08 95       	ret

00000e1a <_Z14check_leftlinev>:
bool check_leftline( void )
{
	sensor = sensor_cmp();
     e1a:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
     e1e:	80 93 68 00 	sts	0x0068, r24
	return (((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000));
     e22:	98 2f       	mov	r25, r24
     e24:	90 7f       	andi	r25, 0xF0	; 240
     e26:	90 3f       	cpi	r25, 0xF0	; 240
     e28:	39 f0       	breq	.+14     	; 0xe38 <_Z14check_leftlinev+0x1e>
     e2a:	88 7f       	andi	r24, 0xF8	; 248
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	88 3f       	cpi	r24, 0xF8	; 248
     e30:	09 f0       	breq	.+2      	; 0xe34 <_Z14check_leftlinev+0x1a>
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	89 2f       	mov	r24, r25
     e36:	08 95       	ret
     e38:	81 e0       	ldi	r24, 0x01	; 1
}
     e3a:	08 95       	ret

00000e3c <main>:
uint8_t sensor = 0x00;
uint16_t timer_cnt, encoder_pulse;

int main(void)
{
	INIT();
     e3c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_Z4INITv>
	sel_mode();
     e40:	0e 94 2a 06 	call	0xc54	; 0xc54 <_Z8sel_modev>
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     e44:	8f e0       	ldi	r24, 0x0F	; 15
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	90 93 7c 00 	sts	0x007C, r25
     e4c:	80 93 7b 00 	sts	0x007B, r24
	set_encoder(15);
	if (get_switch2())
     e50:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_Z11get_switch2v>
     e54:	88 23       	and	r24, r24
     e56:	19 f0       	breq	.+6      	; 0xe5e <main+0x22>
	{
		servo_calibrate();
     e58:	0e 94 f6 05 	call	0xbec	; 0xbec <_Z15servo_calibratev>
     e5c:	16 c0       	rjmp	.+44     	; 0xe8a <main+0x4e>
	}
	else
	{
		while (true)
		{
			sensor_cmp();
     e5e:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
			led7(encoder_pulse);
     e62:	80 91 64 00 	lds	r24, 0x0064
     e66:	90 91 65 00 	lds	r25, 0x0065
     e6a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
			if (get_button(BTN0)) encoder_pulse = 0;
     e6e:	8d ef       	ldi	r24, 0xFD	; 253
     e70:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     e74:	88 23       	and	r24, r24
     e76:	21 f0       	breq	.+8      	; 0xe80 <main+0x44>
     e78:	10 92 65 00 	sts	0x0065, r1
     e7c:	10 92 64 00 	sts	0x0064, r1
			if (get_button(BTN1)) break;
     e80:	8b ef       	ldi	r24, 0xFB	; 251
     e82:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z10get_buttonh>
     e86:	88 23       	and	r24, r24
     e88:	51 f3       	breq	.-44     	; 0xe5e <main+0x22>
		}
	}
	
	pattern = 10; /* Chay thang */
     e8a:	8a e0       	ldi	r24, 0x0A	; 10
     e8c:	80 93 60 00 	sts	0x0060, r24
				set_encoder(-1);
			}
			break; /* case 73 */
			
			default:
				pattern = 10;
     e90:	0f 2e       	mov	r0, r31
     e92:	fa e0       	ldi	r31, 0x0A	; 10
     e94:	9f 2e       	mov	r9, r31
     e96:	f0 2d       	mov	r31, r0
     e98:	0f 2e       	mov	r0, r31
     e9a:	fc e0       	ldi	r31, 0x0C	; 12
     e9c:	af 2e       	mov	r10, r31
     e9e:	b1 2c       	mov	r11, r1
     ea0:	f0 2d       	mov	r31, r0
     ea2:	0f ef       	ldi	r16, 0xFF	; 255
     ea4:	1f ef       	ldi	r17, 0xFF	; 255
			case 62:
				led7(62);
				
				handle(35);
				speed(50 ,35);
				pattern = 63;
     ea6:	0f 2e       	mov	r0, r31
     ea8:	ff e3       	ldi	r31, 0x3F	; 63
     eaa:	6f 2e       	mov	r6, r31
     eac:	f0 2d       	mov	r31, r0
     eae:	ca e0       	ldi	r28, 0x0A	; 10
     eb0:	d0 e0       	ldi	r29, 0x00	; 0
				led7(61);
				set_encoder(10);
				sensor = sensor_cmp();
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11111000) == 0b11111000))
				{
					pattern = 21;
     eb2:	0f 2e       	mov	r0, r31
     eb4:	f5 e1       	ldi	r31, 0x15	; 21
     eb6:	8f 2e       	mov	r8, r31
     eb8:	f0 2d       	mov	r31, r0
				
				speed(50, 50);
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
				{
					pattern = 62;
     eba:	0f 2e       	mov	r0, r31
     ebc:	fe e3       	ldi	r31, 0x3E	; 62
     ebe:	3f 2e       	mov	r3, r31
     ec0:	f0 2d       	mov	r31, r0
			case 52:
				led7(52);
				
				handle(-30);
				speed( 35 ,50 );
				pattern = 53;
     ec2:	0f 2e       	mov	r0, r31
     ec4:	f5 e3       	ldi	r31, 0x35	; 53
     ec6:	7f 2e       	mov	r7, r31
     ec8:	f0 2d       	mov	r31, r0
			case 41:
				led7(41);
				
				if( timer_cnt > 200 )
				{
					pattern = 42;
     eca:	0f 2e       	mov	r0, r31
     ecc:	fa e2       	ldi	r31, 0x2A	; 42
     ece:	5f 2e       	mov	r5, r31
     ed0:	f0 2d       	mov	r31, r0
			case 31:
				led7(31);
				
				if( timer_cnt > 200 )
				{
					pattern = 32;
     ed2:	68 94       	set
     ed4:	44 24       	eor	r4, r4
     ed6:	45 f8       	bld	r4, 5
	
	pattern = 10; /* Chay thang */
	
    while (true)
    {
        switch (pattern)
     ed8:	80 91 60 00 	lds	r24, 0x0060
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	fc 01       	movw	r30, r24
     ee0:	3a 97       	sbiw	r30, 0x0a	; 10
     ee2:	e0 34       	cpi	r30, 0x40	; 64
     ee4:	f1 05       	cpc	r31, r1
     ee6:	08 f0       	brcs	.+2      	; 0xeea <main+0xae>
     ee8:	a1 c4       	rjmp	.+2370   	; 0x182c <main+0x9f0>
     eea:	e6 5d       	subi	r30, 0xD6	; 214
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__tablejump2__>
		{
			/* Chay thang */
			case 10:
				led7(10);
     ef2:	ce 01       	movw	r24, r28
     ef4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
     ef8:	10 93 7c 00 	sts	0x007C, r17
     efc:	00 93 7b 00 	sts	0x007B, r16
				set_encoder(-1);
				if (check_crossline())     /* Cua vuong */
     f00:	0e 94 ed 06 	call	0xdda	; 0xdda <_Z15check_crosslinev>
     f04:	88 23       	and	r24, r24
     f06:	19 f0       	breq	.+6      	; 0xf0e <main+0xd2>
				{
					pattern = 21;
     f08:	80 92 60 00 	sts	0x0060, r8
					break;
     f0c:	e5 cf       	rjmp	.-54     	; 0xed8 <main+0x9c>
				}
				else if (check_leftline()) /* Chuyen lan trai */
     f0e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_Z14check_leftlinev>
     f12:	88 23       	and	r24, r24
     f14:	61 f0       	breq	.+24     	; 0xf2e <main+0xf2>
				{
					pattern = 51;
     f16:	83 e3       	ldi	r24, 0x33	; 51
     f18:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
     f1c:	10 92 67 00 	sts	0x0067, r1
     f20:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
     f24:	10 92 65 00 	sts	0x0065, r1
     f28:	10 92 64 00 	sts	0x0064, r1
					break;
     f2c:	d5 cf       	rjmp	.-86     	; 0xed8 <main+0x9c>
				}
				else if (check_rightline()) /* Chuyen lan phai */
     f2e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_Z15check_rightlinev>
     f32:	88 23       	and	r24, r24
     f34:	61 f0       	breq	.+24     	; 0xf4e <main+0x112>
				{
					pattern = 61;
     f36:	8d e3       	ldi	r24, 0x3D	; 61
     f38:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
     f3c:	10 92 67 00 	sts	0x0067, r1
     f40:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
     f44:	10 92 65 00 	sts	0x0065, r1
     f48:	10 92 64 00 	sts	0x0064, r1
					break;
     f4c:	c5 cf       	rjmp	.-118    	; 0xed8 <main+0x9c>
				}
				
				switch (sensor_cmp() & 0b01111110)
     f4e:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
     f52:	8e 77       	andi	r24, 0x7E	; 126
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	fc 01       	movw	r30, r24
     f58:	32 97       	sbiw	r30, 0x02	; 2
     f5a:	ef 36       	cpi	r30, 0x6F	; 111
     f5c:	f1 05       	cpc	r31, r1
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <main+0x126>
     f60:	bb cf       	rjmp	.-138    	; 0xed8 <main+0x9c>
     f62:	e6 59       	subi	r30, 0x96	; 150
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
						handle(0);
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
						speed( 100 ,100 );
     f72:	64 e6       	ldi	r22, 0x64	; 100
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	84 e6       	ldi	r24, 0x64	; 100
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
					break;
     f7e:	ac cf       	rjmp	.-168    	; 0xed8 <main+0x9c>
					
					case 0b00011100:
					case 0b00001000:
						speed(100,100);
     f80:	64 e6       	ldi	r22, 0x64	; 100
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	84 e6       	ldi	r24, 0x64	; 100
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(9 + addition_handle);
     f8c:	8e e0       	ldi	r24, 0x0E	; 14
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
     f94:	a1 cf       	rjmp	.-190    	; 0xed8 <main+0x9c>
					case 0b00001100:
						speed(100,100);
     f96:	64 e6       	ldi	r22, 0x64	; 100
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	84 e6       	ldi	r24, 0x64	; 100
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(20 + addition_handle);
     fa2:	89 e1       	ldi	r24, 0x19	; 25
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
     faa:	96 cf       	rjmp	.-212    	; 0xed8 <main+0x9c>
					case 0b00001110:
					case 0b00000100:
						speed(100,85);
     fac:	65 e5       	ldi	r22, 0x55	; 85
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	84 e6       	ldi	r24, 0x64	; 100
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(31 + addition_handle);
     fb8:	84 e2       	ldi	r24, 0x24	; 36
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
     fc0:	8b cf       	rjmp	.-234    	; 0xed8 <main+0x9c>
					case 0b00000110:
						speed(100,80);
     fc2:	60 e5       	ldi	r22, 0x50	; 80
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	84 e6       	ldi	r24, 0x64	; 100
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(50 + addition_handle);
     fce:	87 e3       	ldi	r24, 0x37	; 55
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
     fd6:	80 cf       	rjmp	.-256    	; 0xed8 <main+0x9c>
					case 0b00000010:
						speed(100,70);
     fd8:	66 e4       	ldi	r22, 0x46	; 70
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	84 e6       	ldi	r24, 0x64	; 100
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(75 + addition_handle);
     fe4:	80 e5       	ldi	r24, 0x50	; 80
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
						pattern=11;	/* Lech phai goc lon */ /*Moi sua*/
     fec:	8b e0       	ldi	r24, 0x0B	; 11
     fee:	80 93 60 00 	sts	0x0060, r24
					break;		
     ff2:	72 cf       	rjmp	.-284    	; 0xed8 <main+0x9c>
					
					case 0b00111000:
					case 0b00010000:
						speed(100,100);
     ff4:	64 e6       	ldi	r22, 0x64	; 100
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	84 e6       	ldi	r24, 0x64	; 100
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(-9 - addition_handle);
    1000:	82 ef       	ldi	r24, 0xF2	; 242
    1002:	9f ef       	ldi	r25, 0xFF	; 255
    1004:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1008:	67 cf       	rjmp	.-306    	; 0xed8 <main+0x9c>
					case 0b00110000:
						speed(100,100);
    100a:	64 e6       	ldi	r22, 0x64	; 100
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	84 e6       	ldi	r24, 0x64	; 100
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(-20- addition_handle);
    1016:	87 ee       	ldi	r24, 0xE7	; 231
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    101e:	5c cf       	rjmp	.-328    	; 0xed8 <main+0x9c>
					case 0b01110000:
					case 0b00100000:
						speed(85,100);
    1020:	64 e6       	ldi	r22, 0x64	; 100
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	85 e5       	ldi	r24, 0x55	; 85
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(-31 - addition_handle);
    102c:	8c ed       	ldi	r24, 0xDC	; 220
    102e:	9f ef       	ldi	r25, 0xFF	; 255
    1030:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1034:	51 cf       	rjmp	.-350    	; 0xed8 <main+0x9c>
					case 0b01100000:
						speed(80,100);
    1036:	64 e6       	ldi	r22, 0x64	; 100
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	80 e5       	ldi	r24, 0x50	; 80
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(-50 - addition_handle);
    1042:	89 ec       	ldi	r24, 0xC9	; 201
    1044:	9f ef       	ldi	r25, 0xFF	; 255
    1046:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    104a:	46 cf       	rjmp	.-372    	; 0xed8 <main+0x9c>
					case 0b01000000:
						speed(70,100);
    104c:	64 e6       	ldi	r22, 0x64	; 100
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	86 e4       	ldi	r24, 0x46	; 70
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(-75 - addition_handle);
    1058:	80 eb       	ldi	r24, 0xB0	; 176
    105a:	9f ef       	ldi	r25, 0xFF	; 255
    105c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
						pattern=12; /* Lech trai goc lon */ /*Moi sua*/
    1060:	8c e0       	ldi	r24, 0x0C	; 12
    1062:	80 93 60 00 	sts	0x0060, r24
					break;
    1066:	38 cf       	rjmp	.-400    	; 0xed8 <main+0x9c>
				}
			break; /* case 10 */
			
			/* Lech phai goc lon */
			case 11:
				led7(11);
    1068:	8b e0       	ldi	r24, 0x0B	; 11
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				switch (sensor_cmp() & 0b11001100)
    1070:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
    1074:	8c 7c       	andi	r24, 0xCC	; 204
    1076:	8c 30       	cpi	r24, 0x0C	; 12
    1078:	09 f4       	brne	.+2      	; 0x107c <main+0x240>
    107a:	4f c0       	rjmp	.+158    	; 0x111a <main+0x2de>
    107c:	28 f4       	brcc	.+10     	; 0x1088 <main+0x24c>
    107e:	88 23       	and	r24, r24
    1080:	69 f1       	breq	.+90     	; 0x10dc <main+0x2a0>
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	d9 f1       	breq	.+118    	; 0x10fc <main+0x2c0>
    1086:	5e c0       	rjmp	.+188    	; 0x1144 <main+0x308>
    1088:	80 38       	cpi	r24, 0x80	; 128
    108a:	b9 f0       	breq	.+46     	; 0x10ba <main+0x27e>
    108c:	80 3c       	cpi	r24, 0xC0	; 192
    108e:	21 f0       	breq	.+8      	; 0x1098 <main+0x25c>
    1090:	80 36       	cpi	r24, 0x60	; 96
    1092:	09 f0       	breq	.+2      	; 0x1096 <main+0x25a>
    1094:	57 c0       	rjmp	.+174    	; 0x1144 <main+0x308>
    1096:	52 c0       	rjmp	.+164    	; 0x113c <main+0x300>
    1098:	86 e0       	ldi	r24, 0x06	; 6
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	90 93 7c 00 	sts	0x007C, r25
    10a0:	80 93 7b 00 	sts	0x007B, r24
				{
					case 0b11000000:
						set_encoder(6/*5*/);
						speed(80, /*0*/-10);
    10a4:	66 ef       	ldi	r22, 0xF6	; 246
    10a6:	7f ef       	ldi	r23, 0xFF	; 255
    10a8:	80 e5       	ldi	r24, 0x50	; 80
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(115/*95*/ + addition_handle);/* sua 95 */
    10b0:	88 e7       	ldi	r24, 0x78	; 120
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    10b8:	0f cf       	rjmp	.-482    	; 0xed8 <main+0x9c>
    10ba:	86 e0       	ldi	r24, 0x06	; 6
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	90 93 7c 00 	sts	0x007C, r25
    10c2:	80 93 7b 00 	sts	0x007B, r24
					
					case 0b10000000:
						set_encoder(6/*5*/);
						speed(80, /*15*/5);
    10c6:	65 e0       	ldi	r22, 0x05	; 5
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	80 e5       	ldi	r24, 0x50	; 80
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(100/*80*/ + addition_handle);/* sua 80*/
    10d2:	89 e6       	ldi	r24, 0x69	; 105
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    10da:	fe ce       	rjmp	.-516    	; 0xed8 <main+0x9c>
    10dc:	88 e0       	ldi	r24, 0x08	; 8
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	90 93 7c 00 	sts	0x007C, r25
    10e4:	80 93 7b 00 	sts	0x007B, r24
					
					case 0b00000000:
						set_encoder(8/*7*/);
						speed(80, /*20*/10);
    10e8:	be 01       	movw	r22, r28
    10ea:	80 e5       	ldi	r24, 0x50	; 80
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(78/*68*/ + addition_handle);
    10f2:	83 e5       	ldi	r24, 0x53	; 83
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    10fa:	ee ce       	rjmp	.-548    	; 0xed8 <main+0x9c>
    10fc:	d0 93 7c 00 	sts	0x007C, r29
    1100:	c0 93 7b 00 	sts	0x007B, r28
					
					case 0b00000100:
						set_encoder(10/*9*/);
						speed(80, /*25*/15);
    1104:	6f e0       	ldi	r22, 0x0F	; 15
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	80 e5       	ldi	r24, 0x50	; 80
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(60/*50*/ + addition_handle);
    1110:	81 e4       	ldi	r24, 0x41	; 65
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1118:	df ce       	rjmp	.-578    	; 0xed8 <main+0x9c>
					
					case 0b00001100:
						speed(80, /*30*/20);
    111a:	64 e1       	ldi	r22, 0x14	; 20
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 e5       	ldi	r24, 0x50	; 80
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(50/*42*/ + addition_handle);
    1126:	87 e3       	ldi	r24, 0x37	; 55
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
						pattern = 10;
    112e:	90 92 60 00 	sts	0x0060, r9
    1132:	10 93 7c 00 	sts	0x007C, r17
    1136:	00 93 7b 00 	sts	0x007B, r16
    113a:	ce ce       	rjmp	.-612    	; 0xed8 <main+0x9c>
						set_encoder(-1);
					break;
					
					case 0b01100000:
						pattern=12;
    113c:	8c e0       	ldi	r24, 0x0C	; 12
    113e:	80 93 60 00 	sts	0x0060, r24
					break;
    1142:	ca ce       	rjmp	.-620    	; 0xed8 <main+0x9c>
					
					default:
						pattern=11;
    1144:	8b e0       	ldi	r24, 0x0B	; 11
    1146:	80 93 60 00 	sts	0x0060, r24
					break;
    114a:	c6 ce       	rjmp	.-628    	; 0xed8 <main+0x9c>
				}
			break; /* case 11 */
			
			/* Lech trai goc lon */
			case 12:
				led7(12);
    114c:	c5 01       	movw	r24, r10
    114e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
    1152:	d0 93 7c 00 	sts	0x007C, r29
    1156:	c0 93 7b 00 	sts	0x007B, r28
				set_encoder(10);
				switch(sensor_cmp() & 0b00110011)
    115a:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
    115e:	83 73       	andi	r24, 0x33	; 51
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	71 f0       	breq	.+28     	; 0x1180 <main+0x344>
    1164:	28 f4       	brcc	.+10     	; 0x1170 <main+0x334>
    1166:	88 23       	and	r24, r24
    1168:	09 f1       	breq	.+66     	; 0x11ac <main+0x370>
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	a1 f0       	breq	.+40     	; 0x1196 <main+0x35a>
    116e:	52 c0       	rjmp	.+164    	; 0x1214 <main+0x3d8>
    1170:	80 32       	cpi	r24, 0x20	; 32
    1172:	61 f1       	breq	.+88     	; 0x11cc <main+0x390>
    1174:	80 33       	cpi	r24, 0x30	; 48
    1176:	c9 f1       	breq	.+114    	; 0x11ea <main+0x3ae>
    1178:	86 30       	cpi	r24, 0x06	; 6
    117a:	09 f0       	breq	.+2      	; 0x117e <main+0x342>
    117c:	4b c0       	rjmp	.+150    	; 0x1214 <main+0x3d8>
    117e:	46 c0       	rjmp	.+140    	; 0x120c <main+0x3d0>
				{
					case 0b00000011:
						speed_wait(5);
						speed(/*0*/-10,80);
    1180:	60 e5       	ldi	r22, 0x50	; 80
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	86 ef       	ldi	r24, 0xF6	; 246
    1186:	9f ef       	ldi	r25, 0xFF	; 255
    1188:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(-115/*-95*/ - addition_handle);/*sua -95*/
    118c:	88 e8       	ldi	r24, 0x88	; 136
    118e:	9f ef       	ldi	r25, 0xFF	; 255
    1190:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1194:	a1 ce       	rjmp	.-702    	; 0xed8 <main+0x9c>
					
					case 0b00000001:
						speed_wait(5);
						speed(/*15*/5,80);
    1196:	60 e5       	ldi	r22, 0x50	; 80
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	85 e0       	ldi	r24, 0x05	; 5
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(/*-80*/-100 - addition_handle);/*sua -80*/
    11a2:	87 e9       	ldi	r24, 0x97	; 151
    11a4:	9f ef       	ldi	r25, 0xFF	; 255
    11a6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    11aa:	96 ce       	rjmp	.-724    	; 0xed8 <main+0x9c>
    11ac:	88 e0       	ldi	r24, 0x08	; 8
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	90 93 7c 00 	sts	0x007C, r25
    11b4:	80 93 7b 00 	sts	0x007B, r24
					
					case 0b00000000:
						set_encoder(8/*7*/);
						speed(/*20*/10,80);
    11b8:	60 e5       	ldi	r22, 0x50	; 80
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	ce 01       	movw	r24, r28
    11be:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(/*-68*/-78 - addition_handle);
    11c2:	8d ea       	ldi	r24, 0xAD	; 173
    11c4:	9f ef       	ldi	r25, 0xFF	; 255
    11c6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    11ca:	86 ce       	rjmp	.-756    	; 0xed8 <main+0x9c>
    11cc:	d0 93 7c 00 	sts	0x007C, r29
    11d0:	c0 93 7b 00 	sts	0x007B, r28
					
					case 0b00100000:
						set_encoder(10/*9*/);
						speed(/*25*/15,80);
    11d4:	60 e5       	ldi	r22, 0x50	; 80
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	8f e0       	ldi	r24, 0x0F	; 15
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(/*-50*/-60 - addition_handle);
    11e0:	8f eb       	ldi	r24, 0xBF	; 191
    11e2:	9f ef       	ldi	r25, 0xFF	; 255
    11e4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    11e8:	77 ce       	rjmp	.-786    	; 0xed8 <main+0x9c>
					
					case 0b00110000:
						speed(/*30*/20,80);
    11ea:	60 e5       	ldi	r22, 0x50	; 80
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	84 e1       	ldi	r24, 0x14	; 20
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
						handle(/*-42*/ - addition_handle);
    11f6:	8b ef       	ldi	r24, 0xFB	; 251
    11f8:	9f ef       	ldi	r25, 0xFF	; 255
    11fa:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
						pattern = 10;
    11fe:	90 92 60 00 	sts	0x0060, r9
    1202:	10 93 7c 00 	sts	0x007C, r17
    1206:	00 93 7b 00 	sts	0x007B, r16
    120a:	66 ce       	rjmp	.-820    	; 0xed8 <main+0x9c>
						set_encoder(-1);
					break;
					
					case 0b00000110:
						pattern=11;
    120c:	8b e0       	ldi	r24, 0x0B	; 11
    120e:	80 93 60 00 	sts	0x0060, r24
					break;
    1212:	62 ce       	rjmp	.-828    	; 0xed8 <main+0x9c>
					
					default:
						pattern=12;
    1214:	8c e0       	ldi	r24, 0x0C	; 12
    1216:	80 93 60 00 	sts	0x0060, r24
					break;
    121a:	5e ce       	rjmp	.-836    	; 0xed8 <main+0x9c>
				}
			break; /* case 12 */
			
			/* Cua vuong */
			case 21:
				led7(21);
    121c:	85 e1       	ldi	r24, 0x15	; 21
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				
				handle(0);
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
				speed(-40,-40);
    122c:	68 ed       	ldi	r22, 0xD8	; 216
    122e:	7f ef       	ldi	r23, 0xFF	; 255
    1230:	88 ed       	ldi	r24, 0xD8	; 216
    1232:	9f ef       	ldi	r25, 0xFF	; 255
    1234:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
				timer_cnt = 0;
    1238:	10 92 67 00 	sts	0x0067, r1
    123c:	10 92 66 00 	sts	0x0066, r1
				encoder_pulse = 0;
    1240:	10 92 65 00 	sts	0x0065, r1
    1244:	10 92 64 00 	sts	0x0064, r1
				pattern = 22;
    1248:	86 e1       	ldi	r24, 0x16	; 22
    124a:	80 93 60 00 	sts	0x0060, r24
			break; /* case 21 */
    124e:	44 ce       	rjmp	.-888    	; 0xed8 <main+0x9c>
			
			case 22:
				led7(22);
    1250:	86 e1       	ldi	r24, 0x16	; 22
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				
				//if( timer_cnt > (300 - (delay * 200)) || encoder_pulse > 20 )
				if (speed_wait(3)) /*important*/
    1258:	80 91 61 00 	lds	r24, 0x0061
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	a8 f4       	brcc	.+42     	; 0x128a <main+0x44e>
    1260:	d0 93 7c 00 	sts	0x007C, r29
    1264:	c0 93 7b 00 	sts	0x007B, r28
				{
					set_encoder(10);
					speed(70, 70);
    1268:	66 e4       	ldi	r22, 0x46	; 70
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	86 e4       	ldi	r24, 0x46	; 70
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
					pattern = 23;
    1274:	87 e1       	ldi	r24, 0x17	; 23
    1276:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    127a:	10 92 67 00 	sts	0x0067, r1
    127e:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
    1282:	10 92 65 00 	sts	0x0065, r1
    1286:	10 92 64 00 	sts	0x0064, r1
				}
				
				switch (sensor_cmp() & 0b01111110)
    128a:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
    128e:	8e 77       	andi	r24, 0x7E	; 126
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	fc 01       	movw	r30, r24
    1294:	32 97       	sbiw	r30, 0x02	; 2
    1296:	ef 36       	cpi	r30, 0x6F	; 111
    1298:	f1 05       	cpc	r31, r1
    129a:	08 f0       	brcs	.+2      	; 0x129e <main+0x462>
    129c:	1d ce       	rjmp	.-966    	; 0xed8 <main+0x9c>
    129e:	e7 52       	subi	r30, 0x27	; 39
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle( 0 );
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12ae:	14 ce       	rjmp	.-984    	; 0xed8 <main+0x9c>
					
					case 0b00011100:
					case 0b00001000:
					handle(9 + addition_handle);
    12b0:	8e e0       	ldi	r24, 0x0E	; 14
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12b8:	0f ce       	rjmp	.-994    	; 0xed8 <main+0x9c>
					case 0b00001100:
					handle(17 + addition_handle);
    12ba:	86 e1       	ldi	r24, 0x16	; 22
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12c2:	0a ce       	rjmp	.-1004   	; 0xed8 <main+0x9c>
					case 0b00001110:
					case 0b00000100:
					handle(31 + addition_handle);
    12c4:	84 e2       	ldi	r24, 0x24	; 36
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12cc:	05 ce       	rjmp	.-1014   	; 0xed8 <main+0x9c>
					case 0b00000110:
					handle(50 + addition_handle);
    12ce:	87 e3       	ldi	r24, 0x37	; 55
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12d6:	00 ce       	rjmp	.-1024   	; 0xed8 <main+0x9c>
					case 0b00000010:
					handle(75 + addition_handle);
    12d8:	80 e5       	ldi	r24, 0x50	; 80
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12e0:	fb cd       	rjmp	.-1034   	; 0xed8 <main+0x9c>
					
					case 0b00111000:
					case 0b00010000:
					handle(-9 - addition_handle);
    12e2:	82 ef       	ldi	r24, 0xF2	; 242
    12e4:	9f ef       	ldi	r25, 0xFF	; 255
    12e6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12ea:	f6 cd       	rjmp	.-1044   	; 0xed8 <main+0x9c>
					case 0b00110000:
					handle(-17 - addition_handle);
    12ec:	8a ee       	ldi	r24, 0xEA	; 234
    12ee:	9f ef       	ldi	r25, 0xFF	; 255
    12f0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12f4:	f1 cd       	rjmp	.-1054   	; 0xed8 <main+0x9c>
					case 0b01110000:
					case 0b00100000:
					handle(-31 - addition_handle);
    12f6:	8c ed       	ldi	r24, 0xDC	; 220
    12f8:	9f ef       	ldi	r25, 0xFF	; 255
    12fa:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    12fe:	ec cd       	rjmp	.-1064   	; 0xed8 <main+0x9c>
					case 0b01100000:
					handle(-50 - addition_handle);
    1300:	89 ec       	ldi	r24, 0xC9	; 201
    1302:	9f ef       	ldi	r25, 0xFF	; 255
    1304:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1308:	e7 cd       	rjmp	.-1074   	; 0xed8 <main+0x9c>
					case 0b01000000:
					handle(-75 - addition_handle);
    130a:	80 eb       	ldi	r24, 0xB0	; 176
    130c:	9f ef       	ldi	r25, 0xFF	; 255
    130e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1312:	e2 cd       	rjmp	.-1084   	; 0xed8 <main+0x9c>
					break;
				}
			break; /* case 22 */
			
			case 23:
				led7(23);
    1314:	87 e1       	ldi	r24, 0x17	; 23
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				
				sensor = sensor_cmp();
    131c:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
    1320:	80 93 68 00 	sts	0x0068, r24
				/* Cua trai */
				if(((encoder_pulse > 5) /*|| (timer_cnt > 150)*/) &&(((sensor & 0b11111000) == 0b11111000)  || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11100000) == 0b11100000)))	/* Neu gap tin hieu nay la goc cua 90 trai thi be */
    1324:	20 91 64 00 	lds	r18, 0x0064
    1328:	30 91 65 00 	lds	r19, 0x0065
    132c:	26 30       	cpi	r18, 0x06	; 6
    132e:	31 05       	cpc	r19, r1
    1330:	80 f1       	brcs	.+96     	; 0x1392 <main+0x556>
    1332:	98 2f       	mov	r25, r24
    1334:	98 7f       	andi	r25, 0xF8	; 248
    1336:	98 3f       	cpi	r25, 0xF8	; 248
    1338:	41 f0       	breq	.+16     	; 0x134a <main+0x50e>
    133a:	98 2f       	mov	r25, r24
    133c:	90 7f       	andi	r25, 0xF0	; 240
    133e:	90 3f       	cpi	r25, 0xF0	; 240
    1340:	21 f0       	breq	.+8      	; 0x134a <main+0x50e>
    1342:	98 2f       	mov	r25, r24
    1344:	90 7e       	andi	r25, 0xE0	; 224
    1346:	90 3e       	cpi	r25, 0xE0	; 224
    1348:	61 f4       	brne	.+24     	; 0x1362 <main+0x526>
    134a:	10 93 7c 00 	sts	0x007C, r17
    134e:	00 93 7b 00 	sts	0x007B, r16
				{
					set_encoder(-1);
					pattern = 26;
    1352:	8a e1       	ldi	r24, 0x1A	; 26
    1354:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    1358:	10 92 67 00 	sts	0x0067, r1
    135c:	10 92 66 00 	sts	0x0066, r1
					break;
    1360:	bb cd       	rjmp	.-1162   	; 0xed8 <main+0x9c>
				}
				/* Cua phai */
				if(((encoder_pulse > 5) /*|| (timer_cnt > 150)*/) && (((sensor & 0b00011111) == 0b00011111 ) ||((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111))) /* Neu gap tin hieu nay la goc cua 90 phai thi be */
    1362:	98 2f       	mov	r25, r24
    1364:	9f 71       	andi	r25, 0x1F	; 31
    1366:	9f 31       	cpi	r25, 0x1F	; 31
    1368:	41 f0       	breq	.+16     	; 0x137a <main+0x53e>
    136a:	98 2f       	mov	r25, r24
    136c:	97 70       	andi	r25, 0x07	; 7
    136e:	97 30       	cpi	r25, 0x07	; 7
    1370:	21 f0       	breq	.+8      	; 0x137a <main+0x53e>
    1372:	98 2f       	mov	r25, r24
    1374:	9f 70       	andi	r25, 0x0F	; 15
    1376:	9f 30       	cpi	r25, 0x0F	; 15
    1378:	61 f4       	brne	.+24     	; 0x1392 <main+0x556>
    137a:	10 93 7c 00 	sts	0x007C, r17
    137e:	00 93 7b 00 	sts	0x007B, r16
				{
					set_encoder(-1);
					pattern = 27;
    1382:	8b e1       	ldi	r24, 0x1B	; 27
    1384:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    1388:	10 92 67 00 	sts	0x0067, r1
    138c:	10 92 66 00 	sts	0x0066, r1
					break;
    1390:	a3 cd       	rjmp	.-1210   	; 0xed8 <main+0x9c>
				}
				/* No line */
				if ((sensor & 0b01111110) == 0x00)
    1392:	8e 77       	andi	r24, 0x7E	; 126
    1394:	a9 f4       	brne	.+42     	; 0x13c0 <main+0x584>
				{ 
					pattern = 73;
    1396:	89 e4       	ldi	r24, 0x49	; 73
    1398:	80 93 60 00 	sts	0x0060, r24
					handle(0);
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					speed(100, 100);
    13a4:	64 e6       	ldi	r22, 0x64	; 100
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	84 e6       	ldi	r24, 0x64	; 100
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
					timer_cnt = 0;
    13b0:	10 92 67 00 	sts	0x0067, r1
    13b4:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
    13b8:	10 92 65 00 	sts	0x0065, r1
    13bc:	10 92 64 00 	sts	0x0064, r1
				}
				
				/* Nguoc lai thi chinh thang cho xe */
				switch (sensor & 0b01111110)
    13c0:	80 91 68 00 	lds	r24, 0x0068
    13c4:	8e 77       	andi	r24, 0x7E	; 126
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	fc 01       	movw	r30, r24
    13ca:	32 97       	sbiw	r30, 0x02	; 2
    13cc:	ef 36       	cpi	r30, 0x6F	; 111
    13ce:	f1 05       	cpc	r31, r1
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <main+0x598>
    13d2:	82 cd       	rjmp	.-1276   	; 0xed8 <main+0x9c>
    13d4:	e8 5b       	subi	r30, 0xB8	; 184
    13d6:	fe 4f       	sbci	r31, 0xFE	; 254
    13d8:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle( 0 );
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					//speed( 100 ,100 );
					break;
    13e4:	79 cd       	rjmp	.-1294   	; 0xed8 <main+0x9c>
					
					case 0b00011100:
					case 0b00001000:
					//speed(100,100);
					handle(9 + addition_handle);
    13e6:	8e e0       	ldi	r24, 0x0E	; 14
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    13ee:	74 cd       	rjmp	.-1304   	; 0xed8 <main+0x9c>
					case 0b00001100:
					//speed(100,100);
					handle(17 + addition_handle);
    13f0:	86 e1       	ldi	r24, 0x16	; 22
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    13f8:	6f cd       	rjmp	.-1314   	; 0xed8 <main+0x9c>
					case 0b00001110:
					case 0b00000100:
					//speed(100,85);
					handle(31 + addition_handle);
    13fa:	84 e2       	ldi	r24, 0x24	; 36
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1402:	6a cd       	rjmp	.-1324   	; 0xed8 <main+0x9c>
					case 0b00000110:
					//speed(100,80);
					handle(50 + addition_handle);
    1404:	87 e3       	ldi	r24, 0x37	; 55
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    140c:	65 cd       	rjmp	.-1334   	; 0xed8 <main+0x9c>
					case 0b00000010:
					//speed(100,70);
					handle(75 + addition_handle);
    140e:	80 e5       	ldi	r24, 0x50	; 80
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1416:	60 cd       	rjmp	.-1344   	; 0xed8 <main+0x9c>
					
					case 0b00111000:
					case 0b00010000:
					//speed(100,100);
					handle(-9 - addition_handle);
    1418:	82 ef       	ldi	r24, 0xF2	; 242
    141a:	9f ef       	ldi	r25, 0xFF	; 255
    141c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1420:	5b cd       	rjmp	.-1354   	; 0xed8 <main+0x9c>
					case 0b00110000:
					//speed(100,100);
					handle(-17 - addition_handle);
    1422:	8a ee       	ldi	r24, 0xEA	; 234
    1424:	9f ef       	ldi	r25, 0xFF	; 255
    1426:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    142a:	56 cd       	rjmp	.-1364   	; 0xed8 <main+0x9c>
					case 0b01110000:
					case 0b00100000:
					//speed(85,100);
					handle(-31 - addition_handle);
    142c:	8c ed       	ldi	r24, 0xDC	; 220
    142e:	9f ef       	ldi	r25, 0xFF	; 255
    1430:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1434:	51 cd       	rjmp	.-1374   	; 0xed8 <main+0x9c>
					case 0b01100000:
					//speed(80,100);
					handle(-50 - addition_handle);
    1436:	89 ec       	ldi	r24, 0xC9	; 201
    1438:	9f ef       	ldi	r25, 0xFF	; 255
    143a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    143e:	4c cd       	rjmp	.-1384   	; 0xed8 <main+0x9c>
					case 0b01000000:
					//speed(70,100);
					handle(-75 - addition_handle);
    1440:	80 eb       	ldi	r24, 0xB0	; 176
    1442:	9f ef       	ldi	r25, 0xFF	; 255
    1444:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					break;
    1448:	47 cd       	rjmp	.-1394   	; 0xed8 <main+0x9c>
					break;
				}
			break; /* case 23 */
			
			case 26: /* trai */
				led7(26);
    144a:	8a e1       	ldi	r24, 0x1A	; 26
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				
				handle( -150  - addition_handle); /* -120 */
    1452:	85 e6       	ldi	r24, 0x65	; 101
    1454:	9f ef       	ldi	r25, 0xFF	; 255
    1456:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
				speed( -80 , 80 );
    145a:	60 e5       	ldi	r22, 0x50	; 80
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	80 eb       	ldi	r24, 0xB0	; 176
    1460:	9f ef       	ldi	r25, 0xFF	; 255
    1462:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
				pattern = 31;
    1466:	8f e1       	ldi	r24, 0x1F	; 31
    1468:	80 93 60 00 	sts	0x0060, r24
				timer_cnt = 0;
    146c:	10 92 67 00 	sts	0x0067, r1
    1470:	10 92 66 00 	sts	0x0066, r1
				encoder_pulse = 0;
    1474:	10 92 65 00 	sts	0x0065, r1
    1478:	10 92 64 00 	sts	0x0064, r1
			break; /* case 26 */
    147c:	2d cd       	rjmp	.-1446   	; 0xed8 <main+0x9c>
			
			case 27: /* phai */
				led7(27);
    147e:	8b e1       	ldi	r24, 0x1B	; 27
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				
				handle( 150  + addition_handle); /* 120 */
    1486:	8b e9       	ldi	r24, 0x9B	; 155
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
				speed( 80 , -80 );
    148e:	60 eb       	ldi	r22, 0xB0	; 176
    1490:	7f ef       	ldi	r23, 0xFF	; 255
    1492:	80 e5       	ldi	r24, 0x50	; 80
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
				pattern = 41;
    149a:	89 e2       	ldi	r24, 0x29	; 41
    149c:	80 93 60 00 	sts	0x0060, r24
				timer_cnt = 0;
    14a0:	10 92 67 00 	sts	0x0067, r1
    14a4:	10 92 66 00 	sts	0x0066, r1
				encoder_pulse = 0;
    14a8:	10 92 65 00 	sts	0x0065, r1
    14ac:	10 92 64 00 	sts	0x0064, r1
			break; /* case 27 */
    14b0:	13 cd       	rjmp	.-1498   	; 0xed8 <main+0x9c>
			
			case 31:
				led7(31);
    14b2:	8f e1       	ldi	r24, 0x1F	; 31
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				
				if( timer_cnt > 200 )
    14ba:	80 91 66 00 	lds	r24, 0x0066
    14be:	90 91 67 00 	lds	r25, 0x0067
    14c2:	89 3c       	cpi	r24, 0xC9	; 201
    14c4:	91 05       	cpc	r25, r1
    14c6:	08 f4       	brcc	.+2      	; 0x14ca <main+0x68e>
    14c8:	07 cd       	rjmp	.-1522   	; 0xed8 <main+0x9c>
				{
					pattern = 32;
    14ca:	40 92 60 00 	sts	0x0060, r4
					timer_cnt = 0;
    14ce:	10 92 67 00 	sts	0x0067, r1
    14d2:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse = 0;
    14d6:	10 92 65 00 	sts	0x0065, r1
    14da:	10 92 64 00 	sts	0x0064, r1
    14de:	fc cc       	rjmp	.-1544   	; 0xed8 <main+0x9c>
				}
			break; /* case 31 */
			
			case 32:
				led7(32);
    14e0:	80 e2       	ldi	r24, 0x20	; 32
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				sensor = sensor_cmp();
    14e8:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
    14ec:	80 93 68 00 	sts	0x0068, r24
				if((sensor & 0b11100111) == 0b00100000)
    14f0:	87 7e       	andi	r24, 0xE7	; 231
    14f2:	80 32       	cpi	r24, 0x20	; 32
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <main+0x6bc>
    14f6:	f0 cc       	rjmp	.-1568   	; 0xed8 <main+0x9c>
				{
					pattern = 10;
    14f8:	90 92 60 00 	sts	0x0060, r9
    14fc:	ed cc       	rjmp	.-1574   	; 0xed8 <main+0x9c>
				}
			break; /* case 32 */
			
			case 41:
				led7(41);
    14fe:	89 e2       	ldi	r24, 0x29	; 41
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				
				if( timer_cnt > 200 )
    1506:	80 91 66 00 	lds	r24, 0x0066
    150a:	90 91 67 00 	lds	r25, 0x0067
    150e:	89 3c       	cpi	r24, 0xC9	; 201
    1510:	91 05       	cpc	r25, r1
    1512:	08 f4       	brcc	.+2      	; 0x1516 <main+0x6da>
    1514:	e1 cc       	rjmp	.-1598   	; 0xed8 <main+0x9c>
				{
					pattern = 42;
    1516:	50 92 60 00 	sts	0x0060, r5
					timer_cnt = 0;
    151a:	10 92 67 00 	sts	0x0067, r1
    151e:	10 92 66 00 	sts	0x0066, r1
    1522:	da cc       	rjmp	.-1612   	; 0xed8 <main+0x9c>
				}
			break; /* case 41 */
			
			case 42:
				led7(42);
    1524:	8a e2       	ldi	r24, 0x2A	; 42
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				sensor = sensor_cmp();
    152c:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
    1530:	80 93 68 00 	sts	0x0068, r24
				if((sensor & 0b11100111) == 0b00000100) 
    1534:	87 7e       	andi	r24, 0xE7	; 231
    1536:	84 30       	cpi	r24, 0x04	; 4
    1538:	09 f0       	breq	.+2      	; 0x153c <main+0x700>
    153a:	ce cc       	rjmp	.-1636   	; 0xed8 <main+0x9c>
				{
					pattern = 10;
    153c:	90 92 60 00 	sts	0x0060, r9
    1540:	cb cc       	rjmp	.-1642   	; 0xed8 <main+0x9c>
				}
			break; /* case 42 */
			
			/* Chuyen lan trai */
			case 51:
				led7(51);
    1542:	83 e3       	ldi	r24, 0x33	; 51
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
    154a:	d0 93 7c 00 	sts	0x007C, r29
    154e:	c0 93 7b 00 	sts	0x007B, r28
				set_encoder(10);
				sensor = sensor_cmp();
    1552:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
    1556:	80 93 68 00 	sts	0x0068, r24
				if (((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111))
    155a:	98 2f       	mov	r25, r24
    155c:	97 70       	andi	r25, 0x07	; 7
    155e:	97 30       	cpi	r25, 0x07	; 7
    1560:	39 f0       	breq	.+14     	; 0x1570 <main+0x734>
    1562:	98 2f       	mov	r25, r24
    1564:	9f 70       	andi	r25, 0x0F	; 15
    1566:	9f 30       	cpi	r25, 0x0F	; 15
    1568:	19 f0       	breq	.+6      	; 0x1570 <main+0x734>
    156a:	8f 71       	andi	r24, 0x1F	; 31
    156c:	8f 31       	cpi	r24, 0x1F	; 31
    156e:	39 f4       	brne	.+14     	; 0x157e <main+0x742>
				{
					pattern = 21;
    1570:	80 92 60 00 	sts	0x0060, r8
    1574:	10 93 7c 00 	sts	0x007C, r17
    1578:	00 93 7b 00 	sts	0x007B, r16
    157c:	ad cc       	rjmp	.-1702   	; 0xed8 <main+0x9c>
					set_encoder(-1);
					break;
				}
				
				speed(50, 50);
    157e:	62 e3       	ldi	r22, 0x32	; 50
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	82 e3       	ldi	r24, 0x32	; 50
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    158a:	80 91 64 00 	lds	r24, 0x0064
    158e:	90 91 65 00 	lds	r25, 0x0065
    1592:	49 97       	sbiw	r24, 0x19	; 25
    1594:	40 f4       	brcc	.+16     	; 0x15a6 <main+0x76a>
    1596:	80 91 66 00 	lds	r24, 0x0066
    159a:	90 91 67 00 	lds	r25, 0x0067
    159e:	88 37       	cpi	r24, 0x78	; 120
    15a0:	91 05       	cpc	r25, r1
    15a2:	08 f4       	brcc	.+2      	; 0x15a6 <main+0x76a>
    15a4:	99 cc       	rjmp	.-1742   	; 0xed8 <main+0x9c>
				{
					pattern = 52;
    15a6:	94 e3       	ldi	r25, 0x34	; 52
    15a8:	90 93 60 00 	sts	0x0060, r25
					timer_cnt = 0;
    15ac:	10 92 67 00 	sts	0x0067, r1
    15b0:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse=0;
    15b4:	10 92 65 00 	sts	0x0065, r1
    15b8:	10 92 64 00 	sts	0x0064, r1
    15bc:	8d cc       	rjmp	.-1766   	; 0xed8 <main+0x9c>
				}
			break; /* case 51 */
			
			case 52:
				led7(52);
    15be:	84 e3       	ldi	r24, 0x34	; 52
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				
				handle(-30);
    15c6:	82 ee       	ldi	r24, 0xE2	; 226
    15c8:	9f ef       	ldi	r25, 0xFF	; 255
    15ca:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
				speed( 35 ,50 );
    15ce:	62 e3       	ldi	r22, 0x32	; 50
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	83 e2       	ldi	r24, 0x23	; 35
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
				pattern = 53;
    15da:	70 92 60 00 	sts	0x0060, r7
				timer_cnt = 0;
    15de:	10 92 67 00 	sts	0x0067, r1
    15e2:	10 92 66 00 	sts	0x0066, r1
				encoder_pulse = 0;
    15e6:	10 92 65 00 	sts	0x0065, r1
    15ea:	10 92 64 00 	sts	0x0064, r1
			break; /* case 52 */
    15ee:	74 cc       	rjmp	.-1816   	; 0xed8 <main+0x9c>
			
			case 53:
				led7(53);
    15f0:	85 e3       	ldi	r24, 0x35	; 53
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				
				sensor = sensor_cmp();
    15f8:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
    15fc:	28 2e       	mov	r2, r24
    15fe:	80 93 68 00 	sts	0x0068, r24
				if(((encoder_pulse > 100) || (timer_cnt > 200 * delay)) && ((sensor & 0b00110000 ) == 0b00110000))
    1602:	80 91 64 00 	lds	r24, 0x0064
    1606:	90 91 65 00 	lds	r25, 0x0065
    160a:	85 36       	cpi	r24, 0x65	; 101
    160c:	91 05       	cpc	r25, r1
    160e:	08 f5       	brcc	.+66     	; 0x1652 <main+0x816>
    1610:	60 91 66 00 	lds	r22, 0x0066
    1614:	70 91 67 00 	lds	r23, 0x0067
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__floatunsisf>
    1620:	6b 01       	movw	r12, r22
    1622:	7c 01       	movw	r14, r24
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	48 e4       	ldi	r20, 0x48	; 72
    162a:	53 e4       	ldi	r21, 0x43	; 67
    162c:	60 91 6c 00 	lds	r22, 0x006C
    1630:	70 91 6d 00 	lds	r23, 0x006D
    1634:	80 91 6e 00 	lds	r24, 0x006E
    1638:	90 91 6f 00 	lds	r25, 0x006F
    163c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3>
    1640:	9b 01       	movw	r18, r22
    1642:	ac 01       	movw	r20, r24
    1644:	c7 01       	movw	r24, r14
    1646:	b6 01       	movw	r22, r12
    1648:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__gesf2>
    164c:	18 16       	cp	r1, r24
    164e:	0c f0       	brlt	.+2      	; 0x1652 <main+0x816>
    1650:	43 cc       	rjmp	.-1914   	; 0xed8 <main+0x9c>
    1652:	82 2d       	mov	r24, r2
    1654:	80 73       	andi	r24, 0x30	; 48
    1656:	80 33       	cpi	r24, 0x30	; 48
    1658:	09 f0       	breq	.+2      	; 0x165c <main+0x820>
    165a:	3e cc       	rjmp	.-1924   	; 0xed8 <main+0x9c>
				{
					pattern = 10;
    165c:	90 92 60 00 	sts	0x0060, r9
    1660:	10 93 7c 00 	sts	0x007C, r17
    1664:	00 93 7b 00 	sts	0x007B, r16
					set_encoder(-1);
					
					handle(40);
    1668:	88 e2       	ldi	r24, 0x28	; 40
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					speed(100, 70);
    1670:	66 e4       	ldi	r22, 0x46	; 70
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	84 e6       	ldi	r24, 0x64	; 100
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
    167c:	2d cc       	rjmp	.-1958   	; 0xed8 <main+0x9c>
				}
			break; /* case 53 */
			
			/* Chuyen lan phai */
			case 61:
				led7(61);
    167e:	8d e3       	ldi	r24, 0x3D	; 61
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
    1686:	d0 93 7c 00 	sts	0x007C, r29
    168a:	c0 93 7b 00 	sts	0x007B, r28
				set_encoder(10);
				sensor = sensor_cmp();
    168e:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
    1692:	80 93 68 00 	sts	0x0068, r24
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11111000) == 0b11111000))
    1696:	98 2f       	mov	r25, r24
    1698:	90 7e       	andi	r25, 0xE0	; 224
    169a:	90 3e       	cpi	r25, 0xE0	; 224
    169c:	19 f0       	breq	.+6      	; 0x16a4 <main+0x868>
    169e:	88 7f       	andi	r24, 0xF8	; 248
    16a0:	88 3f       	cpi	r24, 0xF8	; 248
    16a2:	39 f4       	brne	.+14     	; 0x16b2 <main+0x876>
				{
					pattern = 21;
    16a4:	80 92 60 00 	sts	0x0060, r8
    16a8:	10 93 7c 00 	sts	0x007C, r17
    16ac:	00 93 7b 00 	sts	0x007B, r16
    16b0:	13 cc       	rjmp	.-2010   	; 0xed8 <main+0x9c>
					set_encoder(-1);
					break;
				}
				
				speed(50, 50);
    16b2:	62 e3       	ldi	r22, 0x32	; 50
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	82 e3       	ldi	r24, 0x32	; 50
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    16be:	80 91 64 00 	lds	r24, 0x0064
    16c2:	90 91 65 00 	lds	r25, 0x0065
    16c6:	49 97       	sbiw	r24, 0x19	; 25
    16c8:	40 f4       	brcc	.+16     	; 0x16da <main+0x89e>
    16ca:	80 91 66 00 	lds	r24, 0x0066
    16ce:	90 91 67 00 	lds	r25, 0x0067
    16d2:	88 37       	cpi	r24, 0x78	; 120
    16d4:	91 05       	cpc	r25, r1
    16d6:	08 f4       	brcc	.+2      	; 0x16da <main+0x89e>
    16d8:	ff cb       	rjmp	.-2050   	; 0xed8 <main+0x9c>
				{
					pattern = 62;
    16da:	30 92 60 00 	sts	0x0060, r3
					timer_cnt = 0;
    16de:	10 92 67 00 	sts	0x0067, r1
    16e2:	10 92 66 00 	sts	0x0066, r1
					encoder_pulse=0;
    16e6:	10 92 65 00 	sts	0x0065, r1
    16ea:	10 92 64 00 	sts	0x0064, r1
    16ee:	f4 cb       	rjmp	.-2072   	; 0xed8 <main+0x9c>
				}
			break; /* case 61 */
			
			case 62:
				led7(62);
    16f0:	8e e3       	ldi	r24, 0x3E	; 62
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				
				handle(35);
    16f8:	83 e2       	ldi	r24, 0x23	; 35
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
				speed(50 ,35);
    1700:	63 e2       	ldi	r22, 0x23	; 35
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	82 e3       	ldi	r24, 0x32	; 50
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
				pattern = 63;
    170c:	60 92 60 00 	sts	0x0060, r6
				timer_cnt = 0;
    1710:	10 92 67 00 	sts	0x0067, r1
    1714:	10 92 66 00 	sts	0x0066, r1
				encoder_pulse = 0;
    1718:	10 92 65 00 	sts	0x0065, r1
    171c:	10 92 64 00 	sts	0x0064, r1
			break; /* case 62 */
    1720:	db cb       	rjmp	.-2122   	; 0xed8 <main+0x9c>
			
			case 63:
				led7(63);
    1722:	8f e3       	ldi	r24, 0x3F	; 63
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
				
				sensor = sensor_cmp();
    172a:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
    172e:	28 2e       	mov	r2, r24
    1730:	80 93 68 00 	sts	0x0068, r24
				if(((encoder_pulse > 100) || (timer_cnt > 200 * delay)) && ((sensor & 0b00110000 ) == 0b00110000))
    1734:	80 91 64 00 	lds	r24, 0x0064
    1738:	90 91 65 00 	lds	r25, 0x0065
    173c:	85 36       	cpi	r24, 0x65	; 101
    173e:	91 05       	cpc	r25, r1
    1740:	08 f5       	brcc	.+66     	; 0x1784 <main+0x948>
    1742:	60 91 66 00 	lds	r22, 0x0066
    1746:	70 91 67 00 	lds	r23, 0x0067
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__floatunsisf>
    1752:	6b 01       	movw	r12, r22
    1754:	7c 01       	movw	r14, r24
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	48 e4       	ldi	r20, 0x48	; 72
    175c:	53 e4       	ldi	r21, 0x43	; 67
    175e:	60 91 6c 00 	lds	r22, 0x006C
    1762:	70 91 6d 00 	lds	r23, 0x006D
    1766:	80 91 6e 00 	lds	r24, 0x006E
    176a:	90 91 6f 00 	lds	r25, 0x006F
    176e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__mulsf3>
    1772:	9b 01       	movw	r18, r22
    1774:	ac 01       	movw	r20, r24
    1776:	c7 01       	movw	r24, r14
    1778:	b6 01       	movw	r22, r12
    177a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__gesf2>
    177e:	18 16       	cp	r1, r24
    1780:	0c f0       	brlt	.+2      	; 0x1784 <main+0x948>
    1782:	aa cb       	rjmp	.-2220   	; 0xed8 <main+0x9c>
    1784:	82 2d       	mov	r24, r2
    1786:	80 73       	andi	r24, 0x30	; 48
    1788:	80 33       	cpi	r24, 0x30	; 48
    178a:	09 f0       	breq	.+2      	; 0x178e <main+0x952>
    178c:	a5 cb       	rjmp	.-2230   	; 0xed8 <main+0x9c>
				{
					pattern = 10;
    178e:	90 92 60 00 	sts	0x0060, r9
    1792:	10 93 7c 00 	sts	0x007C, r17
    1796:	00 93 7b 00 	sts	0x007B, r16
					set_encoder(-1);
					
					handle(-40);
    179a:	88 ed       	ldi	r24, 0xD8	; 216
    179c:	9f ef       	ldi	r25, 0xFF	; 255
    179e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
					speed(70, 100);
    17a2:	64 e6       	ldi	r22, 0x64	; 100
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	86 e4       	ldi	r24, 0x46	; 70
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
    17ae:	94 cb       	rjmp	.-2264   	; 0xed8 <main+0x9c>
				}
			break; /* case 63 */
			
			/* No line */
			case 73:
			led7(73);
    17b0:	89 e4       	ldi	r24, 0x49	; 73
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z4led7j>
    17b8:	b0 92 7c 00 	sts	0x007C, r11
    17bc:	a0 92 7b 00 	sts	0x007B, r10
			
			set_encoder(12);
			speed(60,60);
    17c0:	6c e3       	ldi	r22, 0x3C	; 60
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	8c e3       	ldi	r24, 0x3C	; 60
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z5speedii>
			sensor = sensor_cmp();
    17cc:	0e 94 b1 04 	call	0x962	; 0x962 <_Z10sensor_cmpv>
    17d0:	80 93 68 00 	sts	0x0068, r24
			if ((sensor & 0b11000000) == 0b11000000) handle(40 /*+ addition_handle*/);
    17d4:	80 7c       	andi	r24, 0xC0	; 192
    17d6:	80 3c       	cpi	r24, 0xC0	; 192
    17d8:	21 f4       	brne	.+8      	; 0x17e2 <main+0x9a6>
    17da:	88 e2       	ldi	r24, 0x28	; 40
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
			if ((sensor & 0b10000000) == 0b10000000) handle(30 /*+ addition_handle*/);
    17e2:	80 91 68 00 	lds	r24, 0x0068
    17e6:	88 23       	and	r24, r24
    17e8:	24 f4       	brge	.+8      	; 0x17f2 <main+0x9b6>
    17ea:	8e e1       	ldi	r24, 0x1E	; 30
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
			if ((sensor & 0b00000011) == 0b00000011) handle(-40 /*- addition_handle*/);
    17f2:	80 91 68 00 	lds	r24, 0x0068
    17f6:	83 70       	andi	r24, 0x03	; 3
    17f8:	83 30       	cpi	r24, 0x03	; 3
    17fa:	21 f4       	brne	.+8      	; 0x1804 <main+0x9c8>
    17fc:	88 ed       	ldi	r24, 0xD8	; 216
    17fe:	9f ef       	ldi	r25, 0xFF	; 255
    1800:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
			if ((sensor & 0b00000001) == 0b00000001) handle(-30 /*- addition_handle*/);
    1804:	80 91 68 00 	lds	r24, 0x0068
    1808:	80 ff       	sbrs	r24, 0
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <main+0x9d8>
    180c:	82 ee       	ldi	r24, 0xE2	; 226
    180e:	9f ef       	ldi	r25, 0xFF	; 255
    1810:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z6handlei>
			if ((sensor & 0b00111100) != 0)
    1814:	80 91 68 00 	lds	r24, 0x0068
    1818:	8c 73       	andi	r24, 0x3C	; 60
    181a:	09 f4       	brne	.+2      	; 0x181e <main+0x9e2>
    181c:	5d cb       	rjmp	.-2374   	; 0xed8 <main+0x9c>
			{
				pattern = 10;
    181e:	90 92 60 00 	sts	0x0060, r9
    1822:	10 93 7c 00 	sts	0x007C, r17
    1826:	00 93 7b 00 	sts	0x007B, r16
    182a:	56 cb       	rjmp	.-2388   	; 0xed8 <main+0x9c>
				set_encoder(-1);
			}
			break; /* case 73 */
			
			default:
				pattern = 10;
    182c:	90 92 60 00 	sts	0x0060, r9
			break; /* default */
    1830:	53 cb       	rjmp	.-2394   	; 0xed8 <main+0x9c>

00001832 <__subsf3>:
    1832:	50 58       	subi	r21, 0x80	; 128

00001834 <__addsf3>:
    1834:	bb 27       	eor	r27, r27
    1836:	aa 27       	eor	r26, r26
    1838:	0e d0       	rcall	.+28     	; 0x1856 <__addsf3x>
    183a:	75 c1       	rjmp	.+746    	; 0x1b26 <__fp_round>
    183c:	66 d1       	rcall	.+716    	; 0x1b0a <__fp_pscA>
    183e:	30 f0       	brcs	.+12     	; 0x184c <__addsf3+0x18>
    1840:	6b d1       	rcall	.+726    	; 0x1b18 <__fp_pscB>
    1842:	20 f0       	brcs	.+8      	; 0x184c <__addsf3+0x18>
    1844:	31 f4       	brne	.+12     	; 0x1852 <__addsf3+0x1e>
    1846:	9f 3f       	cpi	r25, 0xFF	; 255
    1848:	11 f4       	brne	.+4      	; 0x184e <__addsf3+0x1a>
    184a:	1e f4       	brtc	.+6      	; 0x1852 <__addsf3+0x1e>
    184c:	5b c1       	rjmp	.+694    	; 0x1b04 <__fp_nan>
    184e:	0e f4       	brtc	.+2      	; 0x1852 <__addsf3+0x1e>
    1850:	e0 95       	com	r30
    1852:	e7 fb       	bst	r30, 7
    1854:	51 c1       	rjmp	.+674    	; 0x1af8 <__fp_inf>

00001856 <__addsf3x>:
    1856:	e9 2f       	mov	r30, r25
    1858:	77 d1       	rcall	.+750    	; 0x1b48 <__fp_split3>
    185a:	80 f3       	brcs	.-32     	; 0x183c <__addsf3+0x8>
    185c:	ba 17       	cp	r27, r26
    185e:	62 07       	cpc	r22, r18
    1860:	73 07       	cpc	r23, r19
    1862:	84 07       	cpc	r24, r20
    1864:	95 07       	cpc	r25, r21
    1866:	18 f0       	brcs	.+6      	; 0x186e <__addsf3x+0x18>
    1868:	71 f4       	brne	.+28     	; 0x1886 <__addsf3x+0x30>
    186a:	9e f5       	brtc	.+102    	; 0x18d2 <__addsf3x+0x7c>
    186c:	8f c1       	rjmp	.+798    	; 0x1b8c <__fp_zero>
    186e:	0e f4       	brtc	.+2      	; 0x1872 <__addsf3x+0x1c>
    1870:	e0 95       	com	r30
    1872:	0b 2e       	mov	r0, r27
    1874:	ba 2f       	mov	r27, r26
    1876:	a0 2d       	mov	r26, r0
    1878:	0b 01       	movw	r0, r22
    187a:	b9 01       	movw	r22, r18
    187c:	90 01       	movw	r18, r0
    187e:	0c 01       	movw	r0, r24
    1880:	ca 01       	movw	r24, r20
    1882:	a0 01       	movw	r20, r0
    1884:	11 24       	eor	r1, r1
    1886:	ff 27       	eor	r31, r31
    1888:	59 1b       	sub	r21, r25
    188a:	99 f0       	breq	.+38     	; 0x18b2 <__addsf3x+0x5c>
    188c:	59 3f       	cpi	r21, 0xF9	; 249
    188e:	50 f4       	brcc	.+20     	; 0x18a4 <__addsf3x+0x4e>
    1890:	50 3e       	cpi	r21, 0xE0	; 224
    1892:	68 f1       	brcs	.+90     	; 0x18ee <__addsf3x+0x98>
    1894:	1a 16       	cp	r1, r26
    1896:	f0 40       	sbci	r31, 0x00	; 0
    1898:	a2 2f       	mov	r26, r18
    189a:	23 2f       	mov	r18, r19
    189c:	34 2f       	mov	r19, r20
    189e:	44 27       	eor	r20, r20
    18a0:	58 5f       	subi	r21, 0xF8	; 248
    18a2:	f3 cf       	rjmp	.-26     	; 0x188a <__addsf3x+0x34>
    18a4:	46 95       	lsr	r20
    18a6:	37 95       	ror	r19
    18a8:	27 95       	ror	r18
    18aa:	a7 95       	ror	r26
    18ac:	f0 40       	sbci	r31, 0x00	; 0
    18ae:	53 95       	inc	r21
    18b0:	c9 f7       	brne	.-14     	; 0x18a4 <__addsf3x+0x4e>
    18b2:	7e f4       	brtc	.+30     	; 0x18d2 <__addsf3x+0x7c>
    18b4:	1f 16       	cp	r1, r31
    18b6:	ba 0b       	sbc	r27, r26
    18b8:	62 0b       	sbc	r22, r18
    18ba:	73 0b       	sbc	r23, r19
    18bc:	84 0b       	sbc	r24, r20
    18be:	ba f0       	brmi	.+46     	; 0x18ee <__addsf3x+0x98>
    18c0:	91 50       	subi	r25, 0x01	; 1
    18c2:	a1 f0       	breq	.+40     	; 0x18ec <__addsf3x+0x96>
    18c4:	ff 0f       	add	r31, r31
    18c6:	bb 1f       	adc	r27, r27
    18c8:	66 1f       	adc	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	c2 f7       	brpl	.-16     	; 0x18c0 <__addsf3x+0x6a>
    18d0:	0e c0       	rjmp	.+28     	; 0x18ee <__addsf3x+0x98>
    18d2:	ba 0f       	add	r27, r26
    18d4:	62 1f       	adc	r22, r18
    18d6:	73 1f       	adc	r23, r19
    18d8:	84 1f       	adc	r24, r20
    18da:	48 f4       	brcc	.+18     	; 0x18ee <__addsf3x+0x98>
    18dc:	87 95       	ror	r24
    18de:	77 95       	ror	r23
    18e0:	67 95       	ror	r22
    18e2:	b7 95       	ror	r27
    18e4:	f7 95       	ror	r31
    18e6:	9e 3f       	cpi	r25, 0xFE	; 254
    18e8:	08 f0       	brcs	.+2      	; 0x18ec <__addsf3x+0x96>
    18ea:	b3 cf       	rjmp	.-154    	; 0x1852 <__addsf3+0x1e>
    18ec:	93 95       	inc	r25
    18ee:	88 0f       	add	r24, r24
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <__addsf3x+0x9e>
    18f2:	99 27       	eor	r25, r25
    18f4:	ee 0f       	add	r30, r30
    18f6:	97 95       	ror	r25
    18f8:	87 95       	ror	r24
    18fa:	08 95       	ret

000018fc <__cmpsf2>:
    18fc:	d9 d0       	rcall	.+434    	; 0x1ab0 <__fp_cmp>
    18fe:	08 f4       	brcc	.+2      	; 0x1902 <__cmpsf2+0x6>
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	08 95       	ret

00001904 <__divsf3>:
    1904:	0c d0       	rcall	.+24     	; 0x191e <__divsf3x>
    1906:	0f c1       	rjmp	.+542    	; 0x1b26 <__fp_round>
    1908:	07 d1       	rcall	.+526    	; 0x1b18 <__fp_pscB>
    190a:	40 f0       	brcs	.+16     	; 0x191c <__divsf3+0x18>
    190c:	fe d0       	rcall	.+508    	; 0x1b0a <__fp_pscA>
    190e:	30 f0       	brcs	.+12     	; 0x191c <__divsf3+0x18>
    1910:	21 f4       	brne	.+8      	; 0x191a <__divsf3+0x16>
    1912:	5f 3f       	cpi	r21, 0xFF	; 255
    1914:	19 f0       	breq	.+6      	; 0x191c <__divsf3+0x18>
    1916:	f0 c0       	rjmp	.+480    	; 0x1af8 <__fp_inf>
    1918:	51 11       	cpse	r21, r1
    191a:	39 c1       	rjmp	.+626    	; 0x1b8e <__fp_szero>
    191c:	f3 c0       	rjmp	.+486    	; 0x1b04 <__fp_nan>

0000191e <__divsf3x>:
    191e:	14 d1       	rcall	.+552    	; 0x1b48 <__fp_split3>
    1920:	98 f3       	brcs	.-26     	; 0x1908 <__divsf3+0x4>

00001922 <__divsf3_pse>:
    1922:	99 23       	and	r25, r25
    1924:	c9 f3       	breq	.-14     	; 0x1918 <__divsf3+0x14>
    1926:	55 23       	and	r21, r21
    1928:	b1 f3       	breq	.-20     	; 0x1916 <__divsf3+0x12>
    192a:	95 1b       	sub	r25, r21
    192c:	55 0b       	sbc	r21, r21
    192e:	bb 27       	eor	r27, r27
    1930:	aa 27       	eor	r26, r26
    1932:	62 17       	cp	r22, r18
    1934:	73 07       	cpc	r23, r19
    1936:	84 07       	cpc	r24, r20
    1938:	38 f0       	brcs	.+14     	; 0x1948 <__divsf3_pse+0x26>
    193a:	9f 5f       	subi	r25, 0xFF	; 255
    193c:	5f 4f       	sbci	r21, 0xFF	; 255
    193e:	22 0f       	add	r18, r18
    1940:	33 1f       	adc	r19, r19
    1942:	44 1f       	adc	r20, r20
    1944:	aa 1f       	adc	r26, r26
    1946:	a9 f3       	breq	.-22     	; 0x1932 <__divsf3_pse+0x10>
    1948:	33 d0       	rcall	.+102    	; 0x19b0 <__divsf3_pse+0x8e>
    194a:	0e 2e       	mov	r0, r30
    194c:	3a f0       	brmi	.+14     	; 0x195c <__divsf3_pse+0x3a>
    194e:	e0 e8       	ldi	r30, 0x80	; 128
    1950:	30 d0       	rcall	.+96     	; 0x19b2 <__divsf3_pse+0x90>
    1952:	91 50       	subi	r25, 0x01	; 1
    1954:	50 40       	sbci	r21, 0x00	; 0
    1956:	e6 95       	lsr	r30
    1958:	00 1c       	adc	r0, r0
    195a:	ca f7       	brpl	.-14     	; 0x194e <__divsf3_pse+0x2c>
    195c:	29 d0       	rcall	.+82     	; 0x19b0 <__divsf3_pse+0x8e>
    195e:	fe 2f       	mov	r31, r30
    1960:	27 d0       	rcall	.+78     	; 0x19b0 <__divsf3_pse+0x8e>
    1962:	66 0f       	add	r22, r22
    1964:	77 1f       	adc	r23, r23
    1966:	88 1f       	adc	r24, r24
    1968:	bb 1f       	adc	r27, r27
    196a:	26 17       	cp	r18, r22
    196c:	37 07       	cpc	r19, r23
    196e:	48 07       	cpc	r20, r24
    1970:	ab 07       	cpc	r26, r27
    1972:	b0 e8       	ldi	r27, 0x80	; 128
    1974:	09 f0       	breq	.+2      	; 0x1978 <__divsf3_pse+0x56>
    1976:	bb 0b       	sbc	r27, r27
    1978:	80 2d       	mov	r24, r0
    197a:	bf 01       	movw	r22, r30
    197c:	ff 27       	eor	r31, r31
    197e:	93 58       	subi	r25, 0x83	; 131
    1980:	5f 4f       	sbci	r21, 0xFF	; 255
    1982:	2a f0       	brmi	.+10     	; 0x198e <__divsf3_pse+0x6c>
    1984:	9e 3f       	cpi	r25, 0xFE	; 254
    1986:	51 05       	cpc	r21, r1
    1988:	68 f0       	brcs	.+26     	; 0x19a4 <__divsf3_pse+0x82>
    198a:	b6 c0       	rjmp	.+364    	; 0x1af8 <__fp_inf>
    198c:	00 c1       	rjmp	.+512    	; 0x1b8e <__fp_szero>
    198e:	5f 3f       	cpi	r21, 0xFF	; 255
    1990:	ec f3       	brlt	.-6      	; 0x198c <__divsf3_pse+0x6a>
    1992:	98 3e       	cpi	r25, 0xE8	; 232
    1994:	dc f3       	brlt	.-10     	; 0x198c <__divsf3_pse+0x6a>
    1996:	86 95       	lsr	r24
    1998:	77 95       	ror	r23
    199a:	67 95       	ror	r22
    199c:	b7 95       	ror	r27
    199e:	f7 95       	ror	r31
    19a0:	9f 5f       	subi	r25, 0xFF	; 255
    19a2:	c9 f7       	brne	.-14     	; 0x1996 <__divsf3_pse+0x74>
    19a4:	88 0f       	add	r24, r24
    19a6:	91 1d       	adc	r25, r1
    19a8:	96 95       	lsr	r25
    19aa:	87 95       	ror	r24
    19ac:	97 f9       	bld	r25, 7
    19ae:	08 95       	ret
    19b0:	e1 e0       	ldi	r30, 0x01	; 1
    19b2:	66 0f       	add	r22, r22
    19b4:	77 1f       	adc	r23, r23
    19b6:	88 1f       	adc	r24, r24
    19b8:	bb 1f       	adc	r27, r27
    19ba:	62 17       	cp	r22, r18
    19bc:	73 07       	cpc	r23, r19
    19be:	84 07       	cpc	r24, r20
    19c0:	ba 07       	cpc	r27, r26
    19c2:	20 f0       	brcs	.+8      	; 0x19cc <__divsf3_pse+0xaa>
    19c4:	62 1b       	sub	r22, r18
    19c6:	73 0b       	sbc	r23, r19
    19c8:	84 0b       	sbc	r24, r20
    19ca:	ba 0b       	sbc	r27, r26
    19cc:	ee 1f       	adc	r30, r30
    19ce:	88 f7       	brcc	.-30     	; 0x19b2 <__divsf3_pse+0x90>
    19d0:	e0 95       	com	r30
    19d2:	08 95       	ret

000019d4 <__fixsfsi>:
    19d4:	04 d0       	rcall	.+8      	; 0x19de <__fixunssfsi>
    19d6:	68 94       	set
    19d8:	b1 11       	cpse	r27, r1
    19da:	d9 c0       	rjmp	.+434    	; 0x1b8e <__fp_szero>
    19dc:	08 95       	ret

000019de <__fixunssfsi>:
    19de:	bc d0       	rcall	.+376    	; 0x1b58 <__fp_splitA>
    19e0:	88 f0       	brcs	.+34     	; 0x1a04 <__fixunssfsi+0x26>
    19e2:	9f 57       	subi	r25, 0x7F	; 127
    19e4:	90 f0       	brcs	.+36     	; 0x1a0a <__fixunssfsi+0x2c>
    19e6:	b9 2f       	mov	r27, r25
    19e8:	99 27       	eor	r25, r25
    19ea:	b7 51       	subi	r27, 0x17	; 23
    19ec:	a0 f0       	brcs	.+40     	; 0x1a16 <__fixunssfsi+0x38>
    19ee:	d1 f0       	breq	.+52     	; 0x1a24 <__fixunssfsi+0x46>
    19f0:	66 0f       	add	r22, r22
    19f2:	77 1f       	adc	r23, r23
    19f4:	88 1f       	adc	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	1a f0       	brmi	.+6      	; 0x1a00 <__fixunssfsi+0x22>
    19fa:	ba 95       	dec	r27
    19fc:	c9 f7       	brne	.-14     	; 0x19f0 <__fixunssfsi+0x12>
    19fe:	12 c0       	rjmp	.+36     	; 0x1a24 <__fixunssfsi+0x46>
    1a00:	b1 30       	cpi	r27, 0x01	; 1
    1a02:	81 f0       	breq	.+32     	; 0x1a24 <__fixunssfsi+0x46>
    1a04:	c3 d0       	rcall	.+390    	; 0x1b8c <__fp_zero>
    1a06:	b1 e0       	ldi	r27, 0x01	; 1
    1a08:	08 95       	ret
    1a0a:	c0 c0       	rjmp	.+384    	; 0x1b8c <__fp_zero>
    1a0c:	67 2f       	mov	r22, r23
    1a0e:	78 2f       	mov	r23, r24
    1a10:	88 27       	eor	r24, r24
    1a12:	b8 5f       	subi	r27, 0xF8	; 248
    1a14:	39 f0       	breq	.+14     	; 0x1a24 <__fixunssfsi+0x46>
    1a16:	b9 3f       	cpi	r27, 0xF9	; 249
    1a18:	cc f3       	brlt	.-14     	; 0x1a0c <__fixunssfsi+0x2e>
    1a1a:	86 95       	lsr	r24
    1a1c:	77 95       	ror	r23
    1a1e:	67 95       	ror	r22
    1a20:	b3 95       	inc	r27
    1a22:	d9 f7       	brne	.-10     	; 0x1a1a <__fixunssfsi+0x3c>
    1a24:	3e f4       	brtc	.+14     	; 0x1a34 <__fixunssfsi+0x56>
    1a26:	90 95       	com	r25
    1a28:	80 95       	com	r24
    1a2a:	70 95       	com	r23
    1a2c:	61 95       	neg	r22
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	08 95       	ret

00001a36 <__floatunsisf>:
    1a36:	e8 94       	clt
    1a38:	09 c0       	rjmp	.+18     	; 0x1a4c <__floatsisf+0x12>

00001a3a <__floatsisf>:
    1a3a:	97 fb       	bst	r25, 7
    1a3c:	3e f4       	brtc	.+14     	; 0x1a4c <__floatsisf+0x12>
    1a3e:	90 95       	com	r25
    1a40:	80 95       	com	r24
    1a42:	70 95       	com	r23
    1a44:	61 95       	neg	r22
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	8f 4f       	sbci	r24, 0xFF	; 255
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	99 23       	and	r25, r25
    1a4e:	a9 f0       	breq	.+42     	; 0x1a7a <__floatsisf+0x40>
    1a50:	f9 2f       	mov	r31, r25
    1a52:	96 e9       	ldi	r25, 0x96	; 150
    1a54:	bb 27       	eor	r27, r27
    1a56:	93 95       	inc	r25
    1a58:	f6 95       	lsr	r31
    1a5a:	87 95       	ror	r24
    1a5c:	77 95       	ror	r23
    1a5e:	67 95       	ror	r22
    1a60:	b7 95       	ror	r27
    1a62:	f1 11       	cpse	r31, r1
    1a64:	f8 cf       	rjmp	.-16     	; 0x1a56 <__floatsisf+0x1c>
    1a66:	fa f4       	brpl	.+62     	; 0x1aa6 <__floatsisf+0x6c>
    1a68:	bb 0f       	add	r27, r27
    1a6a:	11 f4       	brne	.+4      	; 0x1a70 <__floatsisf+0x36>
    1a6c:	60 ff       	sbrs	r22, 0
    1a6e:	1b c0       	rjmp	.+54     	; 0x1aa6 <__floatsisf+0x6c>
    1a70:	6f 5f       	subi	r22, 0xFF	; 255
    1a72:	7f 4f       	sbci	r23, 0xFF	; 255
    1a74:	8f 4f       	sbci	r24, 0xFF	; 255
    1a76:	9f 4f       	sbci	r25, 0xFF	; 255
    1a78:	16 c0       	rjmp	.+44     	; 0x1aa6 <__floatsisf+0x6c>
    1a7a:	88 23       	and	r24, r24
    1a7c:	11 f0       	breq	.+4      	; 0x1a82 <__floatsisf+0x48>
    1a7e:	96 e9       	ldi	r25, 0x96	; 150
    1a80:	11 c0       	rjmp	.+34     	; 0x1aa4 <__floatsisf+0x6a>
    1a82:	77 23       	and	r23, r23
    1a84:	21 f0       	breq	.+8      	; 0x1a8e <__floatsisf+0x54>
    1a86:	9e e8       	ldi	r25, 0x8E	; 142
    1a88:	87 2f       	mov	r24, r23
    1a8a:	76 2f       	mov	r23, r22
    1a8c:	05 c0       	rjmp	.+10     	; 0x1a98 <__floatsisf+0x5e>
    1a8e:	66 23       	and	r22, r22
    1a90:	71 f0       	breq	.+28     	; 0x1aae <__floatsisf+0x74>
    1a92:	96 e8       	ldi	r25, 0x86	; 134
    1a94:	86 2f       	mov	r24, r22
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	2a f0       	brmi	.+10     	; 0x1aa6 <__floatsisf+0x6c>
    1a9c:	9a 95       	dec	r25
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	da f7       	brpl	.-10     	; 0x1a9c <__floatsisf+0x62>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	96 95       	lsr	r25
    1aaa:	87 95       	ror	r24
    1aac:	97 f9       	bld	r25, 7
    1aae:	08 95       	ret

00001ab0 <__fp_cmp>:
    1ab0:	99 0f       	add	r25, r25
    1ab2:	00 08       	sbc	r0, r0
    1ab4:	55 0f       	add	r21, r21
    1ab6:	aa 0b       	sbc	r26, r26
    1ab8:	e0 e8       	ldi	r30, 0x80	; 128
    1aba:	fe ef       	ldi	r31, 0xFE	; 254
    1abc:	16 16       	cp	r1, r22
    1abe:	17 06       	cpc	r1, r23
    1ac0:	e8 07       	cpc	r30, r24
    1ac2:	f9 07       	cpc	r31, r25
    1ac4:	c0 f0       	brcs	.+48     	; 0x1af6 <__fp_cmp+0x46>
    1ac6:	12 16       	cp	r1, r18
    1ac8:	13 06       	cpc	r1, r19
    1aca:	e4 07       	cpc	r30, r20
    1acc:	f5 07       	cpc	r31, r21
    1ace:	98 f0       	brcs	.+38     	; 0x1af6 <__fp_cmp+0x46>
    1ad0:	62 1b       	sub	r22, r18
    1ad2:	73 0b       	sbc	r23, r19
    1ad4:	84 0b       	sbc	r24, r20
    1ad6:	95 0b       	sbc	r25, r21
    1ad8:	39 f4       	brne	.+14     	; 0x1ae8 <__fp_cmp+0x38>
    1ada:	0a 26       	eor	r0, r26
    1adc:	61 f0       	breq	.+24     	; 0x1af6 <__fp_cmp+0x46>
    1ade:	23 2b       	or	r18, r19
    1ae0:	24 2b       	or	r18, r20
    1ae2:	25 2b       	or	r18, r21
    1ae4:	21 f4       	brne	.+8      	; 0x1aee <__fp_cmp+0x3e>
    1ae6:	08 95       	ret
    1ae8:	0a 26       	eor	r0, r26
    1aea:	09 f4       	brne	.+2      	; 0x1aee <__fp_cmp+0x3e>
    1aec:	a1 40       	sbci	r26, 0x01	; 1
    1aee:	a6 95       	lsr	r26
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	81 1d       	adc	r24, r1
    1af4:	81 1d       	adc	r24, r1
    1af6:	08 95       	ret

00001af8 <__fp_inf>:
    1af8:	97 f9       	bld	r25, 7
    1afa:	9f 67       	ori	r25, 0x7F	; 127
    1afc:	80 e8       	ldi	r24, 0x80	; 128
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	08 95       	ret

00001b04 <__fp_nan>:
    1b04:	9f ef       	ldi	r25, 0xFF	; 255
    1b06:	80 ec       	ldi	r24, 0xC0	; 192
    1b08:	08 95       	ret

00001b0a <__fp_pscA>:
    1b0a:	00 24       	eor	r0, r0
    1b0c:	0a 94       	dec	r0
    1b0e:	16 16       	cp	r1, r22
    1b10:	17 06       	cpc	r1, r23
    1b12:	18 06       	cpc	r1, r24
    1b14:	09 06       	cpc	r0, r25
    1b16:	08 95       	ret

00001b18 <__fp_pscB>:
    1b18:	00 24       	eor	r0, r0
    1b1a:	0a 94       	dec	r0
    1b1c:	12 16       	cp	r1, r18
    1b1e:	13 06       	cpc	r1, r19
    1b20:	14 06       	cpc	r1, r20
    1b22:	05 06       	cpc	r0, r21
    1b24:	08 95       	ret

00001b26 <__fp_round>:
    1b26:	09 2e       	mov	r0, r25
    1b28:	03 94       	inc	r0
    1b2a:	00 0c       	add	r0, r0
    1b2c:	11 f4       	brne	.+4      	; 0x1b32 <__fp_round+0xc>
    1b2e:	88 23       	and	r24, r24
    1b30:	52 f0       	brmi	.+20     	; 0x1b46 <__fp_round+0x20>
    1b32:	bb 0f       	add	r27, r27
    1b34:	40 f4       	brcc	.+16     	; 0x1b46 <__fp_round+0x20>
    1b36:	bf 2b       	or	r27, r31
    1b38:	11 f4       	brne	.+4      	; 0x1b3e <__fp_round+0x18>
    1b3a:	60 ff       	sbrs	r22, 0
    1b3c:	04 c0       	rjmp	.+8      	; 0x1b46 <__fp_round+0x20>
    1b3e:	6f 5f       	subi	r22, 0xFF	; 255
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	8f 4f       	sbci	r24, 0xFF	; 255
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255
    1b46:	08 95       	ret

00001b48 <__fp_split3>:
    1b48:	57 fd       	sbrc	r21, 7
    1b4a:	90 58       	subi	r25, 0x80	; 128
    1b4c:	44 0f       	add	r20, r20
    1b4e:	55 1f       	adc	r21, r21
    1b50:	59 f0       	breq	.+22     	; 0x1b68 <__fp_splitA+0x10>
    1b52:	5f 3f       	cpi	r21, 0xFF	; 255
    1b54:	71 f0       	breq	.+28     	; 0x1b72 <__fp_splitA+0x1a>
    1b56:	47 95       	ror	r20

00001b58 <__fp_splitA>:
    1b58:	88 0f       	add	r24, r24
    1b5a:	97 fb       	bst	r25, 7
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	61 f0       	breq	.+24     	; 0x1b78 <__fp_splitA+0x20>
    1b60:	9f 3f       	cpi	r25, 0xFF	; 255
    1b62:	79 f0       	breq	.+30     	; 0x1b82 <__fp_splitA+0x2a>
    1b64:	87 95       	ror	r24
    1b66:	08 95       	ret
    1b68:	12 16       	cp	r1, r18
    1b6a:	13 06       	cpc	r1, r19
    1b6c:	14 06       	cpc	r1, r20
    1b6e:	55 1f       	adc	r21, r21
    1b70:	f2 cf       	rjmp	.-28     	; 0x1b56 <__fp_split3+0xe>
    1b72:	46 95       	lsr	r20
    1b74:	f1 df       	rcall	.-30     	; 0x1b58 <__fp_splitA>
    1b76:	08 c0       	rjmp	.+16     	; 0x1b88 <__fp_splitA+0x30>
    1b78:	16 16       	cp	r1, r22
    1b7a:	17 06       	cpc	r1, r23
    1b7c:	18 06       	cpc	r1, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	f1 cf       	rjmp	.-30     	; 0x1b64 <__fp_splitA+0xc>
    1b82:	86 95       	lsr	r24
    1b84:	71 05       	cpc	r23, r1
    1b86:	61 05       	cpc	r22, r1
    1b88:	08 94       	sec
    1b8a:	08 95       	ret

00001b8c <__fp_zero>:
    1b8c:	e8 94       	clt

00001b8e <__fp_szero>:
    1b8e:	bb 27       	eor	r27, r27
    1b90:	66 27       	eor	r22, r22
    1b92:	77 27       	eor	r23, r23
    1b94:	cb 01       	movw	r24, r22
    1b96:	97 f9       	bld	r25, 7
    1b98:	08 95       	ret

00001b9a <__gesf2>:
    1b9a:	8a df       	rcall	.-236    	; 0x1ab0 <__fp_cmp>
    1b9c:	08 f4       	brcc	.+2      	; 0x1ba0 <__gesf2+0x6>
    1b9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ba0:	08 95       	ret

00001ba2 <__mulsf3>:
    1ba2:	0b d0       	rcall	.+22     	; 0x1bba <__mulsf3x>
    1ba4:	c0 cf       	rjmp	.-128    	; 0x1b26 <__fp_round>
    1ba6:	b1 df       	rcall	.-158    	; 0x1b0a <__fp_pscA>
    1ba8:	28 f0       	brcs	.+10     	; 0x1bb4 <__mulsf3+0x12>
    1baa:	b6 df       	rcall	.-148    	; 0x1b18 <__fp_pscB>
    1bac:	18 f0       	brcs	.+6      	; 0x1bb4 <__mulsf3+0x12>
    1bae:	95 23       	and	r25, r21
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <__mulsf3+0x12>
    1bb2:	a2 cf       	rjmp	.-188    	; 0x1af8 <__fp_inf>
    1bb4:	a7 cf       	rjmp	.-178    	; 0x1b04 <__fp_nan>
    1bb6:	11 24       	eor	r1, r1
    1bb8:	ea cf       	rjmp	.-44     	; 0x1b8e <__fp_szero>

00001bba <__mulsf3x>:
    1bba:	c6 df       	rcall	.-116    	; 0x1b48 <__fp_split3>
    1bbc:	a0 f3       	brcs	.-24     	; 0x1ba6 <__mulsf3+0x4>

00001bbe <__mulsf3_pse>:
    1bbe:	95 9f       	mul	r25, r21
    1bc0:	d1 f3       	breq	.-12     	; 0x1bb6 <__mulsf3+0x14>
    1bc2:	95 0f       	add	r25, r21
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	62 9f       	mul	r22, r18
    1bca:	f0 01       	movw	r30, r0
    1bcc:	72 9f       	mul	r23, r18
    1bce:	bb 27       	eor	r27, r27
    1bd0:	f0 0d       	add	r31, r0
    1bd2:	b1 1d       	adc	r27, r1
    1bd4:	63 9f       	mul	r22, r19
    1bd6:	aa 27       	eor	r26, r26
    1bd8:	f0 0d       	add	r31, r0
    1bda:	b1 1d       	adc	r27, r1
    1bdc:	aa 1f       	adc	r26, r26
    1bde:	64 9f       	mul	r22, r20
    1be0:	66 27       	eor	r22, r22
    1be2:	b0 0d       	add	r27, r0
    1be4:	a1 1d       	adc	r26, r1
    1be6:	66 1f       	adc	r22, r22
    1be8:	82 9f       	mul	r24, r18
    1bea:	22 27       	eor	r18, r18
    1bec:	b0 0d       	add	r27, r0
    1bee:	a1 1d       	adc	r26, r1
    1bf0:	62 1f       	adc	r22, r18
    1bf2:	73 9f       	mul	r23, r19
    1bf4:	b0 0d       	add	r27, r0
    1bf6:	a1 1d       	adc	r26, r1
    1bf8:	62 1f       	adc	r22, r18
    1bfa:	83 9f       	mul	r24, r19
    1bfc:	a0 0d       	add	r26, r0
    1bfe:	61 1d       	adc	r22, r1
    1c00:	22 1f       	adc	r18, r18
    1c02:	74 9f       	mul	r23, r20
    1c04:	33 27       	eor	r19, r19
    1c06:	a0 0d       	add	r26, r0
    1c08:	61 1d       	adc	r22, r1
    1c0a:	23 1f       	adc	r18, r19
    1c0c:	84 9f       	mul	r24, r20
    1c0e:	60 0d       	add	r22, r0
    1c10:	21 1d       	adc	r18, r1
    1c12:	82 2f       	mov	r24, r18
    1c14:	76 2f       	mov	r23, r22
    1c16:	6a 2f       	mov	r22, r26
    1c18:	11 24       	eor	r1, r1
    1c1a:	9f 57       	subi	r25, 0x7F	; 127
    1c1c:	50 40       	sbci	r21, 0x00	; 0
    1c1e:	8a f0       	brmi	.+34     	; 0x1c42 <__mulsf3_pse+0x84>
    1c20:	e1 f0       	breq	.+56     	; 0x1c5a <__mulsf3_pse+0x9c>
    1c22:	88 23       	and	r24, r24
    1c24:	4a f0       	brmi	.+18     	; 0x1c38 <__mulsf3_pse+0x7a>
    1c26:	ee 0f       	add	r30, r30
    1c28:	ff 1f       	adc	r31, r31
    1c2a:	bb 1f       	adc	r27, r27
    1c2c:	66 1f       	adc	r22, r22
    1c2e:	77 1f       	adc	r23, r23
    1c30:	88 1f       	adc	r24, r24
    1c32:	91 50       	subi	r25, 0x01	; 1
    1c34:	50 40       	sbci	r21, 0x00	; 0
    1c36:	a9 f7       	brne	.-22     	; 0x1c22 <__mulsf3_pse+0x64>
    1c38:	9e 3f       	cpi	r25, 0xFE	; 254
    1c3a:	51 05       	cpc	r21, r1
    1c3c:	70 f0       	brcs	.+28     	; 0x1c5a <__mulsf3_pse+0x9c>
    1c3e:	5c cf       	rjmp	.-328    	; 0x1af8 <__fp_inf>
    1c40:	a6 cf       	rjmp	.-180    	; 0x1b8e <__fp_szero>
    1c42:	5f 3f       	cpi	r21, 0xFF	; 255
    1c44:	ec f3       	brlt	.-6      	; 0x1c40 <__mulsf3_pse+0x82>
    1c46:	98 3e       	cpi	r25, 0xE8	; 232
    1c48:	dc f3       	brlt	.-10     	; 0x1c40 <__mulsf3_pse+0x82>
    1c4a:	86 95       	lsr	r24
    1c4c:	77 95       	ror	r23
    1c4e:	67 95       	ror	r22
    1c50:	b7 95       	ror	r27
    1c52:	f7 95       	ror	r31
    1c54:	e7 95       	ror	r30
    1c56:	9f 5f       	subi	r25, 0xFF	; 255
    1c58:	c1 f7       	brne	.-16     	; 0x1c4a <__mulsf3_pse+0x8c>
    1c5a:	fe 2b       	or	r31, r30
    1c5c:	88 0f       	add	r24, r24
    1c5e:	91 1d       	adc	r25, r1
    1c60:	96 95       	lsr	r25
    1c62:	87 95       	ror	r24
    1c64:	97 f9       	bld	r25, 7
    1c66:	08 95       	ret

00001c68 <__divmodhi4>:
    1c68:	97 fb       	bst	r25, 7
    1c6a:	07 2e       	mov	r0, r23
    1c6c:	16 f4       	brtc	.+4      	; 0x1c72 <__divmodhi4+0xa>
    1c6e:	00 94       	com	r0
    1c70:	07 d0       	rcall	.+14     	; 0x1c80 <__divmodhi4_neg1>
    1c72:	77 fd       	sbrc	r23, 7
    1c74:	09 d0       	rcall	.+18     	; 0x1c88 <__divmodhi4_neg2>
    1c76:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__udivmodhi4>
    1c7a:	07 fc       	sbrc	r0, 7
    1c7c:	05 d0       	rcall	.+10     	; 0x1c88 <__divmodhi4_neg2>
    1c7e:	3e f4       	brtc	.+14     	; 0x1c8e <__divmodhi4_exit>

00001c80 <__divmodhi4_neg1>:
    1c80:	90 95       	com	r25
    1c82:	81 95       	neg	r24
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	08 95       	ret

00001c88 <__divmodhi4_neg2>:
    1c88:	70 95       	com	r23
    1c8a:	61 95       	neg	r22
    1c8c:	7f 4f       	sbci	r23, 0xFF	; 255

00001c8e <__divmodhi4_exit>:
    1c8e:	08 95       	ret

00001c90 <__tablejump2__>:
    1c90:	ee 0f       	add	r30, r30
    1c92:	ff 1f       	adc	r31, r31

00001c94 <__tablejump__>:
    1c94:	05 90       	lpm	r0, Z+
    1c96:	f4 91       	lpm	r31, Z
    1c98:	e0 2d       	mov	r30, r0
    1c9a:	09 94       	ijmp

00001c9c <__umulhisi3>:
    1c9c:	a2 9f       	mul	r26, r18
    1c9e:	b0 01       	movw	r22, r0
    1ca0:	b3 9f       	mul	r27, r19
    1ca2:	c0 01       	movw	r24, r0
    1ca4:	a3 9f       	mul	r26, r19
    1ca6:	70 0d       	add	r23, r0
    1ca8:	81 1d       	adc	r24, r1
    1caa:	11 24       	eor	r1, r1
    1cac:	91 1d       	adc	r25, r1
    1cae:	b2 9f       	mul	r27, r18
    1cb0:	70 0d       	add	r23, r0
    1cb2:	81 1d       	adc	r24, r1
    1cb4:	11 24       	eor	r1, r1
    1cb6:	91 1d       	adc	r25, r1
    1cb8:	08 95       	ret

00001cba <__udivmodhi4>:
    1cba:	aa 1b       	sub	r26, r26
    1cbc:	bb 1b       	sub	r27, r27
    1cbe:	51 e1       	ldi	r21, 0x11	; 17
    1cc0:	07 c0       	rjmp	.+14     	; 0x1cd0 <__udivmodhi4_ep>

00001cc2 <__udivmodhi4_loop>:
    1cc2:	aa 1f       	adc	r26, r26
    1cc4:	bb 1f       	adc	r27, r27
    1cc6:	a6 17       	cp	r26, r22
    1cc8:	b7 07       	cpc	r27, r23
    1cca:	10 f0       	brcs	.+4      	; 0x1cd0 <__udivmodhi4_ep>
    1ccc:	a6 1b       	sub	r26, r22
    1cce:	b7 0b       	sbc	r27, r23

00001cd0 <__udivmodhi4_ep>:
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	5a 95       	dec	r21
    1cd6:	a9 f7       	brne	.-22     	; 0x1cc2 <__udivmodhi4_loop>
    1cd8:	80 95       	com	r24
    1cda:	90 95       	com	r25
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	08 95       	ret

00001ce2 <__eerd_word_m16>:
    1ce2:	a8 e1       	ldi	r26, 0x18	; 24
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	42 e0       	ldi	r20, 0x02	; 2
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__eerd_blraw_m16>

00001cee <__eewr_word_m16>:
    1cee:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__eewr_byte_m16>
    1cf2:	27 2f       	mov	r18, r23
    1cf4:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__eewr_r18_m16>

00001cf8 <__eerd_block_m16>:
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22

00001cfc <__eerd_blraw_m16>:
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	e1 99       	sbic	0x1c, 1	; 28
    1d00:	fe cf       	rjmp	.-4      	; 0x1cfe <__eerd_blraw_m16+0x2>
    1d02:	06 c0       	rjmp	.+12     	; 0x1d10 <__eerd_blraw_m16+0x14>
    1d04:	ff bb       	out	0x1f, r31	; 31
    1d06:	ee bb       	out	0x1e, r30	; 30
    1d08:	e0 9a       	sbi	0x1c, 0	; 28
    1d0a:	31 96       	adiw	r30, 0x01	; 1
    1d0c:	0d b2       	in	r0, 0x1d	; 29
    1d0e:	0d 92       	st	X+, r0
    1d10:	41 50       	subi	r20, 0x01	; 1
    1d12:	50 40       	sbci	r21, 0x00	; 0
    1d14:	b8 f7       	brcc	.-18     	; 0x1d04 <__eerd_blraw_m16+0x8>
    1d16:	08 95       	ret

00001d18 <__eewr_byte_m16>:
    1d18:	26 2f       	mov	r18, r22

00001d1a <__eewr_r18_m16>:
    1d1a:	e1 99       	sbic	0x1c, 1	; 28
    1d1c:	fe cf       	rjmp	.-4      	; 0x1d1a <__eewr_r18_m16>
    1d1e:	9f bb       	out	0x1f, r25	; 31
    1d20:	8e bb       	out	0x1e, r24	; 30
    1d22:	2d bb       	out	0x1d, r18	; 29
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	e2 9a       	sbi	0x1c, 2	; 28
    1d2a:	e1 9a       	sbi	0x1c, 1	; 28
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	08 95       	ret

00001d32 <_exit>:
    1d32:	f8 94       	cli

00001d34 <__stop_program>:
    1d34:	ff cf       	rjmp	.-2      	; 0x1d34 <__stop_program>
