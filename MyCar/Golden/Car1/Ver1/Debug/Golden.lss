
Golden.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001da4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001da4  00001e38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  00800064  00800064  00001e3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cfe  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043d  00000000  00000000  00003c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000836  00000000  00000000  000040bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  000048f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000609  00000000  00000000  00004c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a11  00000000  00000000  00005281  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00005c92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__ctors_end>
       4:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__vector_1>
       8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      10:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      14:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      18:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      1c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      20:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      24:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      28:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      2c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      30:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      34:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      38:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      3c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      40:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      44:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      48:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      4c:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__vector_19>
      50:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      54:	98 07       	cpc	r25, r24
      56:	5a 08       	sbc	r5, r10
      58:	cc 08       	sbc	r12, r12
      5a:	4d 0c       	add	r4, r13
      5c:	4d 0c       	add	r4, r13
      5e:	4d 0c       	add	r4, r13
      60:	4d 0c       	add	r4, r13
      62:	4d 0c       	add	r4, r13
      64:	4d 0c       	add	r4, r13
      66:	4d 0c       	add	r4, r13
      68:	4d 0c       	add	r4, r13
      6a:	34 09       	sbc	r19, r4
      6c:	4e 09       	sbc	r20, r14
      6e:	b0 09       	sbc	r27, r0
      70:	4d 0c       	add	r4, r13
      72:	4d 0c       	add	r4, r13
      74:	4b 0a       	sbc	r4, r27
      76:	65 0a       	sbc	r6, r21
      78:	4d 0c       	add	r4, r13
      7a:	4d 0c       	add	r4, r13
      7c:	4d 0c       	add	r4, r13
      7e:	7f 0a       	sbc	r7, r31
      80:	96 0a       	sbc	r9, r22
      82:	4d 0c       	add	r4, r13
      84:	4d 0c       	add	r4, r13
      86:	4d 0c       	add	r4, r13
      88:	4d 0c       	add	r4, r13
      8a:	4d 0c       	add	r4, r13
      8c:	4d 0c       	add	r4, r13
      8e:	4d 0c       	add	r4, r13
      90:	4d 0c       	add	r4, r13
      92:	a5 0a       	sbc	r10, r21
      94:	b8 0a       	sbc	r11, r24
      96:	4d 0c       	add	r4, r13
      98:	4d 0c       	add	r4, r13
      9a:	4d 0c       	add	r4, r13
      9c:	4d 0c       	add	r4, r13
      9e:	4d 0c       	add	r4, r13
      a0:	4d 0c       	add	r4, r13
      a2:	4d 0c       	add	r4, r13
      a4:	4d 0c       	add	r4, r13
      a6:	c7 0a       	sbc	r12, r23
      a8:	05 0b       	sbc	r16, r21
      aa:	1e 0b       	sbc	r17, r30
      ac:	4d 0c       	add	r4, r13
      ae:	4d 0c       	add	r4, r13
      b0:	4d 0c       	add	r4, r13
      b2:	4d 0c       	add	r4, r13
      b4:	4d 0c       	add	r4, r13
      b6:	4d 0c       	add	r4, r13
      b8:	4d 0c       	add	r4, r13
      ba:	65 0b       	sbc	r22, r21
      bc:	9e 0b       	sbc	r25, r30
      be:	b7 0b       	sbc	r27, r23
      c0:	4d 0c       	add	r4, r13
      c2:	4d 0c       	add	r4, r13
      c4:	4d 0c       	add	r4, r13
      c6:	4d 0c       	add	r4, r13
      c8:	4d 0c       	add	r4, r13
      ca:	4d 0c       	add	r4, r13
      cc:	4d 0c       	add	r4, r13
      ce:	4d 0c       	add	r4, r13
      d0:	4d 0c       	add	r4, r13
      d2:	fe 0b       	sbc	r31, r30
      d4:	4d 0c       	add	r4, r13
      d6:	4d 0c       	add	r4, r13
      d8:	4d 0c       	add	r4, r13
      da:	4d 0c       	add	r4, r13
      dc:	4d 0c       	add	r4, r13
      de:	4d 0c       	add	r4, r13
      e0:	4d 0c       	add	r4, r13
      e2:	4d 0c       	add	r4, r13
      e4:	4d 0c       	add	r4, r13
      e6:	4d 0c       	add	r4, r13
      e8:	4d 0c       	add	r4, r13
      ea:	4d 0c       	add	r4, r13
      ec:	4d 0c       	add	r4, r13
      ee:	4d 0c       	add	r4, r13
      f0:	4d 0c       	add	r4, r13
      f2:	4d 0c       	add	r4, r13
      f4:	4d 0c       	add	r4, r13
      f6:	4d 0c       	add	r4, r13
      f8:	4d 0c       	add	r4, r13
      fa:	4d 0c       	add	r4, r13
      fc:	4d 0c       	add	r4, r13
      fe:	4d 0c       	add	r4, r13
     100:	4d 0c       	add	r4, r13
     102:	4d 0c       	add	r4, r13
     104:	4d 0c       	add	r4, r13
     106:	3c 0c       	add	r3, r12
     108:	12 08       	sbc	r1, r2
     10a:	8b 07       	cpc	r24, r27
     10c:	fc 07       	cpc	r31, r28
     10e:	8b 07       	cpc	r24, r27
     110:	07 08       	sbc	r0, r7
     112:	8b 07       	cpc	r24, r27
     114:	e6 07       	cpc	r30, r22
     116:	8b 07       	cpc	r24, r27
     118:	8b 07       	cpc	r24, r27
     11a:	8b 07       	cpc	r24, r27
     11c:	f1 07       	cpc	r31, r17
     11e:	8b 07       	cpc	r24, r27
     120:	fc 07       	cpc	r31, r28
     122:	8b 07       	cpc	r24, r27
     124:	20 08       	sbc	r2, r0
     126:	8b 07       	cpc	r24, r27
     128:	8b 07       	cpc	r24, r27
     12a:	8b 07       	cpc	r24, r27
     12c:	8b 07       	cpc	r24, r27
     12e:	8b 07       	cpc	r24, r27
     130:	8b 07       	cpc	r24, r27
     132:	8b 07       	cpc	r24, r27
     134:	db 07       	cpc	r29, r27
     136:	8b 07       	cpc	r24, r27
     138:	8b 07       	cpc	r24, r27
     13a:	8b 07       	cpc	r24, r27
     13c:	e6 07       	cpc	r30, r22
     13e:	8b 07       	cpc	r24, r27
     140:	8b 07       	cpc	r24, r27
     142:	8b 07       	cpc	r24, r27
     144:	36 08       	sbc	r3, r6
     146:	8b 07       	cpc	r24, r27
     148:	8b 07       	cpc	r24, r27
     14a:	8b 07       	cpc	r24, r27
     14c:	8b 07       	cpc	r24, r27
     14e:	8b 07       	cpc	r24, r27
     150:	8b 07       	cpc	r24, r27
     152:	8b 07       	cpc	r24, r27
     154:	8b 07       	cpc	r24, r27
     156:	8b 07       	cpc	r24, r27
     158:	8b 07       	cpc	r24, r27
     15a:	8b 07       	cpc	r24, r27
     15c:	8b 07       	cpc	r24, r27
     15e:	8b 07       	cpc	r24, r27
     160:	8b 07       	cpc	r24, r27
     162:	8b 07       	cpc	r24, r27
     164:	2b 08       	sbc	r2, r11
     166:	8b 07       	cpc	r24, r27
     168:	8b 07       	cpc	r24, r27
     16a:	8b 07       	cpc	r24, r27
     16c:	8b 07       	cpc	r24, r27
     16e:	8b 07       	cpc	r24, r27
     170:	8b 07       	cpc	r24, r27
     172:	8b 07       	cpc	r24, r27
     174:	20 08       	sbc	r2, r0
     176:	8b 07       	cpc	r24, r27
     178:	8b 07       	cpc	r24, r27
     17a:	8b 07       	cpc	r24, r27
     17c:	8b 07       	cpc	r24, r27
     17e:	8b 07       	cpc	r24, r27
     180:	8b 07       	cpc	r24, r27
     182:	8b 07       	cpc	r24, r27
     184:	4c 08       	sbc	r4, r12
     186:	8b 07       	cpc	r24, r27
     188:	8b 07       	cpc	r24, r27
     18a:	8b 07       	cpc	r24, r27
     18c:	8b 07       	cpc	r24, r27
     18e:	8b 07       	cpc	r24, r27
     190:	8b 07       	cpc	r24, r27
     192:	8b 07       	cpc	r24, r27
     194:	8b 07       	cpc	r24, r27
     196:	8b 07       	cpc	r24, r27
     198:	8b 07       	cpc	r24, r27
     19a:	8b 07       	cpc	r24, r27
     19c:	8b 07       	cpc	r24, r27
     19e:	8b 07       	cpc	r24, r27
     1a0:	8b 07       	cpc	r24, r27
     1a2:	8b 07       	cpc	r24, r27
     1a4:	8b 07       	cpc	r24, r27
     1a6:	8b 07       	cpc	r24, r27
     1a8:	8b 07       	cpc	r24, r27
     1aa:	8b 07       	cpc	r24, r27
     1ac:	8b 07       	cpc	r24, r27
     1ae:	8b 07       	cpc	r24, r27
     1b0:	8b 07       	cpc	r24, r27
     1b2:	8b 07       	cpc	r24, r27
     1b4:	8b 07       	cpc	r24, r27
     1b6:	8b 07       	cpc	r24, r27
     1b8:	8b 07       	cpc	r24, r27
     1ba:	8b 07       	cpc	r24, r27
     1bc:	8b 07       	cpc	r24, r27
     1be:	8b 07       	cpc	r24, r27
     1c0:	8b 07       	cpc	r24, r27
     1c2:	8b 07       	cpc	r24, r27
     1c4:	41 08       	sbc	r4, r1
     1c6:	8b 07       	cpc	r24, r27
     1c8:	8b 07       	cpc	r24, r27
     1ca:	8b 07       	cpc	r24, r27
     1cc:	8b 07       	cpc	r24, r27
     1ce:	8b 07       	cpc	r24, r27
     1d0:	8b 07       	cpc	r24, r27
     1d2:	8b 07       	cpc	r24, r27
     1d4:	8b 07       	cpc	r24, r27
     1d6:	8b 07       	cpc	r24, r27
     1d8:	8b 07       	cpc	r24, r27
     1da:	8b 07       	cpc	r24, r27
     1dc:	8b 07       	cpc	r24, r27
     1de:	8b 07       	cpc	r24, r27
     1e0:	8b 07       	cpc	r24, r27
     1e2:	8b 07       	cpc	r24, r27
     1e4:	36 08       	sbc	r3, r6
     1e6:	92 09       	sbc	r25, r2
     1e8:	8b 07       	cpc	r24, r27
     1ea:	88 09       	sbc	r24, r8
     1ec:	8b 07       	cpc	r24, r27
     1ee:	8d 09       	sbc	r24, r13
     1f0:	8b 07       	cpc	r24, r27
     1f2:	7e 09       	sbc	r23, r14
     1f4:	8b 07       	cpc	r24, r27
     1f6:	8b 07       	cpc	r24, r27
     1f8:	8b 07       	cpc	r24, r27
     1fa:	83 09       	sbc	r24, r3
     1fc:	8b 07       	cpc	r24, r27
     1fe:	88 09       	sbc	r24, r8
     200:	8b 07       	cpc	r24, r27
     202:	97 09       	sbc	r25, r7
     204:	8b 07       	cpc	r24, r27
     206:	8b 07       	cpc	r24, r27
     208:	8b 07       	cpc	r24, r27
     20a:	8b 07       	cpc	r24, r27
     20c:	8b 07       	cpc	r24, r27
     20e:	8b 07       	cpc	r24, r27
     210:	8b 07       	cpc	r24, r27
     212:	79 09       	sbc	r23, r9
     214:	8b 07       	cpc	r24, r27
     216:	8b 07       	cpc	r24, r27
     218:	8b 07       	cpc	r24, r27
     21a:	7e 09       	sbc	r23, r14
     21c:	8b 07       	cpc	r24, r27
     21e:	8b 07       	cpc	r24, r27
     220:	8b 07       	cpc	r24, r27
     222:	a1 09       	sbc	r26, r1
     224:	8b 07       	cpc	r24, r27
     226:	8b 07       	cpc	r24, r27
     228:	8b 07       	cpc	r24, r27
     22a:	8b 07       	cpc	r24, r27
     22c:	8b 07       	cpc	r24, r27
     22e:	8b 07       	cpc	r24, r27
     230:	8b 07       	cpc	r24, r27
     232:	8b 07       	cpc	r24, r27
     234:	8b 07       	cpc	r24, r27
     236:	8b 07       	cpc	r24, r27
     238:	8b 07       	cpc	r24, r27
     23a:	8b 07       	cpc	r24, r27
     23c:	8b 07       	cpc	r24, r27
     23e:	8b 07       	cpc	r24, r27
     240:	8b 07       	cpc	r24, r27
     242:	9c 09       	sbc	r25, r12
     244:	8b 07       	cpc	r24, r27
     246:	8b 07       	cpc	r24, r27
     248:	8b 07       	cpc	r24, r27
     24a:	8b 07       	cpc	r24, r27
     24c:	8b 07       	cpc	r24, r27
     24e:	8b 07       	cpc	r24, r27
     250:	8b 07       	cpc	r24, r27
     252:	97 09       	sbc	r25, r7
     254:	8b 07       	cpc	r24, r27
     256:	8b 07       	cpc	r24, r27
     258:	8b 07       	cpc	r24, r27
     25a:	8b 07       	cpc	r24, r27
     25c:	8b 07       	cpc	r24, r27
     25e:	8b 07       	cpc	r24, r27
     260:	8b 07       	cpc	r24, r27
     262:	ab 09       	sbc	r26, r11
     264:	8b 07       	cpc	r24, r27
     266:	8b 07       	cpc	r24, r27
     268:	8b 07       	cpc	r24, r27
     26a:	8b 07       	cpc	r24, r27
     26c:	8b 07       	cpc	r24, r27
     26e:	8b 07       	cpc	r24, r27
     270:	8b 07       	cpc	r24, r27
     272:	8b 07       	cpc	r24, r27
     274:	8b 07       	cpc	r24, r27
     276:	8b 07       	cpc	r24, r27
     278:	8b 07       	cpc	r24, r27
     27a:	8b 07       	cpc	r24, r27
     27c:	8b 07       	cpc	r24, r27
     27e:	8b 07       	cpc	r24, r27
     280:	8b 07       	cpc	r24, r27
     282:	8b 07       	cpc	r24, r27
     284:	8b 07       	cpc	r24, r27
     286:	8b 07       	cpc	r24, r27
     288:	8b 07       	cpc	r24, r27
     28a:	8b 07       	cpc	r24, r27
     28c:	8b 07       	cpc	r24, r27
     28e:	8b 07       	cpc	r24, r27
     290:	8b 07       	cpc	r24, r27
     292:	8b 07       	cpc	r24, r27
     294:	8b 07       	cpc	r24, r27
     296:	8b 07       	cpc	r24, r27
     298:	8b 07       	cpc	r24, r27
     29a:	8b 07       	cpc	r24, r27
     29c:	8b 07       	cpc	r24, r27
     29e:	8b 07       	cpc	r24, r27
     2a0:	8b 07       	cpc	r24, r27
     2a2:	a6 09       	sbc	r26, r6
     2a4:	8b 07       	cpc	r24, r27
     2a6:	8b 07       	cpc	r24, r27
     2a8:	8b 07       	cpc	r24, r27
     2aa:	8b 07       	cpc	r24, r27
     2ac:	8b 07       	cpc	r24, r27
     2ae:	8b 07       	cpc	r24, r27
     2b0:	8b 07       	cpc	r24, r27
     2b2:	8b 07       	cpc	r24, r27
     2b4:	8b 07       	cpc	r24, r27
     2b6:	8b 07       	cpc	r24, r27
     2b8:	8b 07       	cpc	r24, r27
     2ba:	8b 07       	cpc	r24, r27
     2bc:	8b 07       	cpc	r24, r27
     2be:	8b 07       	cpc	r24, r27
     2c0:	8b 07       	cpc	r24, r27
     2c2:	a1 09       	sbc	r26, r1
     2c4:	2d 0a       	sbc	r2, r29
     2c6:	8b 07       	cpc	r24, r27
     2c8:	23 0a       	sbc	r2, r19
     2ca:	8b 07       	cpc	r24, r27
     2cc:	28 0a       	sbc	r2, r24
     2ce:	8b 07       	cpc	r24, r27
     2d0:	19 0a       	sbc	r1, r25
     2d2:	8b 07       	cpc	r24, r27
     2d4:	8b 07       	cpc	r24, r27
     2d6:	8b 07       	cpc	r24, r27
     2d8:	1e 0a       	sbc	r1, r30
     2da:	8b 07       	cpc	r24, r27
     2dc:	23 0a       	sbc	r2, r19
     2de:	8b 07       	cpc	r24, r27
     2e0:	32 0a       	sbc	r3, r18
     2e2:	8b 07       	cpc	r24, r27
     2e4:	8b 07       	cpc	r24, r27
     2e6:	8b 07       	cpc	r24, r27
     2e8:	8b 07       	cpc	r24, r27
     2ea:	8b 07       	cpc	r24, r27
     2ec:	8b 07       	cpc	r24, r27
     2ee:	8b 07       	cpc	r24, r27
     2f0:	14 0a       	sbc	r1, r20
     2f2:	8b 07       	cpc	r24, r27
     2f4:	8b 07       	cpc	r24, r27
     2f6:	8b 07       	cpc	r24, r27
     2f8:	19 0a       	sbc	r1, r25
     2fa:	8b 07       	cpc	r24, r27
     2fc:	8b 07       	cpc	r24, r27
     2fe:	8b 07       	cpc	r24, r27
     300:	3c 0a       	sbc	r3, r28
     302:	8b 07       	cpc	r24, r27
     304:	8b 07       	cpc	r24, r27
     306:	8b 07       	cpc	r24, r27
     308:	8b 07       	cpc	r24, r27
     30a:	8b 07       	cpc	r24, r27
     30c:	8b 07       	cpc	r24, r27
     30e:	8b 07       	cpc	r24, r27
     310:	8b 07       	cpc	r24, r27
     312:	8b 07       	cpc	r24, r27
     314:	8b 07       	cpc	r24, r27
     316:	8b 07       	cpc	r24, r27
     318:	8b 07       	cpc	r24, r27
     31a:	8b 07       	cpc	r24, r27
     31c:	8b 07       	cpc	r24, r27
     31e:	8b 07       	cpc	r24, r27
     320:	37 0a       	sbc	r3, r23
     322:	8b 07       	cpc	r24, r27
     324:	8b 07       	cpc	r24, r27
     326:	8b 07       	cpc	r24, r27
     328:	8b 07       	cpc	r24, r27
     32a:	8b 07       	cpc	r24, r27
     32c:	8b 07       	cpc	r24, r27
     32e:	8b 07       	cpc	r24, r27
     330:	32 0a       	sbc	r3, r18
     332:	8b 07       	cpc	r24, r27
     334:	8b 07       	cpc	r24, r27
     336:	8b 07       	cpc	r24, r27
     338:	8b 07       	cpc	r24, r27
     33a:	8b 07       	cpc	r24, r27
     33c:	8b 07       	cpc	r24, r27
     33e:	8b 07       	cpc	r24, r27
     340:	46 0a       	sbc	r4, r22
     342:	8b 07       	cpc	r24, r27
     344:	8b 07       	cpc	r24, r27
     346:	8b 07       	cpc	r24, r27
     348:	8b 07       	cpc	r24, r27
     34a:	8b 07       	cpc	r24, r27
     34c:	8b 07       	cpc	r24, r27
     34e:	8b 07       	cpc	r24, r27
     350:	8b 07       	cpc	r24, r27
     352:	8b 07       	cpc	r24, r27
     354:	8b 07       	cpc	r24, r27
     356:	8b 07       	cpc	r24, r27
     358:	8b 07       	cpc	r24, r27
     35a:	8b 07       	cpc	r24, r27
     35c:	8b 07       	cpc	r24, r27
     35e:	8b 07       	cpc	r24, r27
     360:	8b 07       	cpc	r24, r27
     362:	8b 07       	cpc	r24, r27
     364:	8b 07       	cpc	r24, r27
     366:	8b 07       	cpc	r24, r27
     368:	8b 07       	cpc	r24, r27
     36a:	8b 07       	cpc	r24, r27
     36c:	8b 07       	cpc	r24, r27
     36e:	8b 07       	cpc	r24, r27
     370:	8b 07       	cpc	r24, r27
     372:	8b 07       	cpc	r24, r27
     374:	8b 07       	cpc	r24, r27
     376:	8b 07       	cpc	r24, r27
     378:	8b 07       	cpc	r24, r27
     37a:	8b 07       	cpc	r24, r27
     37c:	8b 07       	cpc	r24, r27
     37e:	8b 07       	cpc	r24, r27
     380:	41 0a       	sbc	r4, r17
     382:	8b 07       	cpc	r24, r27
     384:	8b 07       	cpc	r24, r27
     386:	8b 07       	cpc	r24, r27
     388:	8b 07       	cpc	r24, r27
     38a:	8b 07       	cpc	r24, r27
     38c:	8b 07       	cpc	r24, r27
     38e:	8b 07       	cpc	r24, r27
     390:	8b 07       	cpc	r24, r27
     392:	8b 07       	cpc	r24, r27
     394:	8b 07       	cpc	r24, r27
     396:	8b 07       	cpc	r24, r27
     398:	8b 07       	cpc	r24, r27
     39a:	8b 07       	cpc	r24, r27
     39c:	8b 07       	cpc	r24, r27
     39e:	8b 07       	cpc	r24, r27
     3a0:	3c 0a       	sbc	r3, r28

000003a2 <__ctors_end>:
     3a2:	11 24       	eor	r1, r1
     3a4:	1f be       	out	0x3f, r1	; 63
     3a6:	cf e5       	ldi	r28, 0x5F	; 95
     3a8:	d4 e0       	ldi	r29, 0x04	; 4
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	cd bf       	out	0x3d, r28	; 61

000003ae <__do_copy_data>:
     3ae:	10 e0       	ldi	r17, 0x00	; 0
     3b0:	a0 e6       	ldi	r26, 0x60	; 96
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	e4 ea       	ldi	r30, 0xA4	; 164
     3b6:	fd e1       	ldi	r31, 0x1D	; 29
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <__do_copy_data+0x10>
     3ba:	05 90       	lpm	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	a4 36       	cpi	r26, 0x64	; 100
     3c0:	b1 07       	cpc	r27, r17
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <__do_copy_data+0xc>

000003c4 <__do_clear_bss>:
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	a4 e6       	ldi	r26, 0x64	; 100
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <.do_clear_bss_start>

000003cc <.do_clear_bss_loop>:
     3cc:	1d 92       	st	X+, r1

000003ce <.do_clear_bss_start>:
     3ce:	a4 3b       	cpi	r26, 0xB4	; 180
     3d0:	b2 07       	cpc	r27, r18
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <.do_clear_bss_loop>
     3d4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <main>
     3d8:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <_exit>

000003dc <__bad_interrupt>:
     3dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e0 <_Z10get_buttonh>:
uint8_t cSpeed = 0xff, incCounter = 0;
int16_t cSpeedDiff = 0;

/* -------------------- BUTTON + SWITCH -------------------- */
uint8_t get_button(uint8_t keyid)
{
     3e0:	98 2f       	mov	r25, r24
	if ((PINB & 0x0e) != 0x0e)
     3e2:	86 b3       	in	r24, 0x16	; 22
     3e4:	8e 70       	andi	r24, 0x0E	; 14
     3e6:	8e 30       	cpi	r24, 0x0E	; 14
     3e8:	81 f0       	breq	.+32     	; 0x40a <_Z10get_buttonh+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ea:	2f ef       	ldi	r18, 0xFF	; 255
     3ec:	37 ee       	ldi	r19, 0xE7	; 231
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	21 50       	subi	r18, 0x01	; 1
     3f2:	30 40       	sbci	r19, 0x00	; 0
     3f4:	80 40       	sbci	r24, 0x00	; 0
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <_Z10get_buttonh+0x10>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <_Z10get_buttonh+0x1a>
     3fa:	00 00       	nop
	{
		_delay_ms(80);
		if ((PINB|keyid) == keyid) return 1;
     3fc:	26 b3       	in	r18, 0x16	; 22
     3fe:	29 2b       	or	r18, r25
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	92 17       	cp	r25, r18
     404:	19 f0       	breq	.+6      	; 0x40c <_Z10get_buttonh+0x2c>
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	08 95       	ret
	}
	return 0;
     40a:	80 e0       	ldi	r24, 0x00	; 0
}
     40c:	08 95       	ret

0000040e <_Z10get_switchv>:

uint8_t get_switch()
{
	uint8_t x=0;
	x = ~PINC;
     40e:	83 b3       	in	r24, 0x13	; 19
     410:	80 95       	com	r24
	x = x & 0x07;
	return x;
}
     412:	87 70       	andi	r24, 0x07	; 7
     414:	08 95       	ret

00000416 <_Z11get_switch2v>:

uint8_t get_switch2()
{
	uint8_t x=0;
	x = ~PINC;
     416:	83 b3       	in	r24, 0x13	; 19
     418:	80 95       	com	r24
	x = x & 0x08;
	return x;
}
     41a:	88 70       	andi	r24, 0x08	; 8
     41c:	08 95       	ret

0000041e <_Z9cal_ratiov>:
	velocity = veloc;
}

void cal_ratio( void )
{
	cnt_ratio++;
     41e:	80 91 7b 00 	lds	r24, 0x007B
     422:	8f 5f       	subi	r24, 0xFF	; 255
     424:	80 93 7b 00 	sts	0x007B, r24
	if (cnt_ratio >= 20) /* 20ms */
     428:	84 31       	cpi	r24, 0x14	; 20
     42a:	08 f4       	brcc	.+2      	; 0x42e <_Z9cal_ratiov+0x10>
     42c:	cb c0       	rjmp	.+406    	; 0x5c4 <__stack+0x165>
	{
		if (velocity < 0)
     42e:	80 91 7c 00 	lds	r24, 0x007C
     432:	90 91 7d 00 	lds	r25, 0x007D
     436:	99 23       	and	r25, r25
     438:	8c f4       	brge	.+34     	; 0x45c <_Z9cal_ratiov+0x3e>
		{
			ratio = ratio_base;
     43a:	80 91 75 00 	lds	r24, 0x0075
     43e:	90 91 76 00 	lds	r25, 0x0076
     442:	a0 91 77 00 	lds	r26, 0x0077
     446:	b0 91 78 00 	lds	r27, 0x0078
     44a:	80 93 71 00 	sts	0x0071, r24
     44e:	90 93 72 00 	sts	0x0072, r25
     452:	a0 93 73 00 	sts	0x0073, r26
     456:	b0 93 74 00 	sts	0x0074, r27
     45a:	9f c0       	rjmp	.+318    	; 0x59a <__stack+0x13b>
		}
		else
		{
			if      (pulse_ratio < velocity / 2)    ratio = ratio_base + 0.3;
     45c:	9c 01       	movw	r18, r24
     45e:	99 23       	and	r25, r25
     460:	14 f4       	brge	.+4      	; 0x466 <__stack+0x7>
     462:	2f 5f       	subi	r18, 0xFF	; 255
     464:	3f 4f       	sbci	r19, 0xFF	; 255
     466:	a9 01       	movw	r20, r18
     468:	55 95       	asr	r21
     46a:	47 95       	ror	r20
     46c:	20 91 79 00 	lds	r18, 0x0079
     470:	30 91 7a 00 	lds	r19, 0x007A
     474:	24 17       	cp	r18, r20
     476:	35 07       	cpc	r19, r21
     478:	bc f4       	brge	.+46     	; 0x4a8 <__stack+0x49>
     47a:	2a e9       	ldi	r18, 0x9A	; 154
     47c:	39 e9       	ldi	r19, 0x99	; 153
     47e:	49 e9       	ldi	r20, 0x99	; 153
     480:	5e e3       	ldi	r21, 0x3E	; 62
     482:	60 91 75 00 	lds	r22, 0x0075
     486:	70 91 76 00 	lds	r23, 0x0076
     48a:	80 91 77 00 	lds	r24, 0x0077
     48e:	90 91 78 00 	lds	r25, 0x0078
     492:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__addsf3>
     496:	60 93 71 00 	sts	0x0071, r22
     49a:	70 93 72 00 	sts	0x0072, r23
     49e:	80 93 73 00 	sts	0x0073, r24
     4a2:	90 93 74 00 	sts	0x0074, r25
     4a6:	5e c0       	rjmp	.+188    	; 0x564 <__stack+0x105>
			else if (pulse_ratio < velocity)        ratio = ratio_base + 0.1;
     4a8:	28 17       	cp	r18, r24
     4aa:	39 07       	cpc	r19, r25
     4ac:	bc f4       	brge	.+46     	; 0x4dc <__stack+0x7d>
     4ae:	2d ec       	ldi	r18, 0xCD	; 205
     4b0:	3c ec       	ldi	r19, 0xCC	; 204
     4b2:	4c ec       	ldi	r20, 0xCC	; 204
     4b4:	5d e3       	ldi	r21, 0x3D	; 61
     4b6:	60 91 75 00 	lds	r22, 0x0075
     4ba:	70 91 76 00 	lds	r23, 0x0076
     4be:	80 91 77 00 	lds	r24, 0x0077
     4c2:	90 91 78 00 	lds	r25, 0x0078
     4c6:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__addsf3>
     4ca:	60 93 71 00 	sts	0x0071, r22
     4ce:	70 93 72 00 	sts	0x0072, r23
     4d2:	80 93 73 00 	sts	0x0073, r24
     4d6:	90 93 74 00 	sts	0x0074, r25
     4da:	44 c0       	rjmp	.+136    	; 0x564 <__stack+0x105>
			else if (pulse_ratio > velocity)        ratio = ratio_base - 0.35;
     4dc:	82 17       	cp	r24, r18
     4de:	93 07       	cpc	r25, r19
     4e0:	bc f4       	brge	.+46     	; 0x510 <__stack+0xb1>
     4e2:	23 e3       	ldi	r18, 0x33	; 51
     4e4:	33 e3       	ldi	r19, 0x33	; 51
     4e6:	43 eb       	ldi	r20, 0xB3	; 179
     4e8:	5e e3       	ldi	r21, 0x3E	; 62
     4ea:	60 91 75 00 	lds	r22, 0x0075
     4ee:	70 91 76 00 	lds	r23, 0x0076
     4f2:	80 91 77 00 	lds	r24, 0x0077
     4f6:	90 91 78 00 	lds	r25, 0x0078
     4fa:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__subsf3>
     4fe:	60 93 71 00 	sts	0x0071, r22
     502:	70 93 72 00 	sts	0x0072, r23
     506:	80 93 73 00 	sts	0x0073, r24
     50a:	90 93 74 00 	sts	0x0074, r25
     50e:	2a c0       	rjmp	.+84     	; 0x564 <__stack+0x105>
			else if (pulse_ratio > velocity / 2)    ratio = ratio_base - 0.25;
     510:	42 17       	cp	r20, r18
     512:	53 07       	cpc	r21, r19
     514:	bc f4       	brge	.+46     	; 0x544 <__stack+0xe5>
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	40 e8       	ldi	r20, 0x80	; 128
     51c:	5e e3       	ldi	r21, 0x3E	; 62
     51e:	60 91 75 00 	lds	r22, 0x0075
     522:	70 91 76 00 	lds	r23, 0x0076
     526:	80 91 77 00 	lds	r24, 0x0077
     52a:	90 91 78 00 	lds	r25, 0x0078
     52e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__subsf3>
     532:	60 93 71 00 	sts	0x0071, r22
     536:	70 93 72 00 	sts	0x0072, r23
     53a:	80 93 73 00 	sts	0x0073, r24
     53e:	90 93 74 00 	sts	0x0074, r25
     542:	10 c0       	rjmp	.+32     	; 0x564 <__stack+0x105>
			else ratio = ratio_base;
     544:	80 91 75 00 	lds	r24, 0x0075
     548:	90 91 76 00 	lds	r25, 0x0076
     54c:	a0 91 77 00 	lds	r26, 0x0077
     550:	b0 91 78 00 	lds	r27, 0x0078
     554:	80 93 71 00 	sts	0x0071, r24
     558:	90 93 72 00 	sts	0x0072, r25
     55c:	a0 93 73 00 	sts	0x0073, r26
     560:	b0 93 74 00 	sts	0x0074, r27
			
			if (ratio <= 0) ratio = 0.1;
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	a9 01       	movw	r20, r18
     56a:	60 91 71 00 	lds	r22, 0x0071
     56e:	70 91 72 00 	lds	r23, 0x0072
     572:	80 91 73 00 	lds	r24, 0x0073
     576:	90 91 74 00 	lds	r25, 0x0074
     57a:	0e 94 b5 0c 	call	0x196a	; 0x196a <__cmpsf2>
     57e:	18 16       	cp	r1, r24
     580:	64 f0       	brlt	.+24     	; 0x59a <__stack+0x13b>
     582:	8d ec       	ldi	r24, 0xCD	; 205
     584:	9c ec       	ldi	r25, 0xCC	; 204
     586:	ac ec       	ldi	r26, 0xCC	; 204
     588:	bd e3       	ldi	r27, 0x3D	; 61
     58a:	80 93 71 00 	sts	0x0071, r24
     58e:	90 93 72 00 	sts	0x0072, r25
     592:	a0 93 73 00 	sts	0x0073, r26
     596:	b0 93 74 00 	sts	0x0074, r27
		}
		
		cSpeedDiff = pulse_ratio - cSpeed;
     59a:	80 91 79 00 	lds	r24, 0x0079
     59e:	90 91 7a 00 	lds	r25, 0x007A
     5a2:	20 91 61 00 	lds	r18, 0x0061
     5a6:	ac 01       	movw	r20, r24
     5a8:	42 1b       	sub	r20, r18
     5aa:	51 09       	sbc	r21, r1
     5ac:	50 93 6c 00 	sts	0x006C, r21
     5b0:	40 93 6b 00 	sts	0x006B, r20
		cSpeed = pulse_ratio;
     5b4:	80 93 61 00 	sts	0x0061, r24
		
		pulse_ratio = 0;
     5b8:	10 92 7a 00 	sts	0x007A, r1
     5bc:	10 92 79 00 	sts	0x0079, r1
		cnt_ratio = 0;
     5c0:	10 92 7b 00 	sts	0x007B, r1
     5c4:	08 95       	ret

000005c6 <_Z6handlei>:
	}
	return false;
}

void handle(int goc)
{
     5c6:	83 38       	cpi	r24, 0x83	; 131
     5c8:	2f ef       	ldi	r18, 0xFF	; 255
     5ca:	92 07       	cpc	r25, r18
     5cc:	14 f4       	brge	.+4      	; 0x5d2 <_Z6handlei+0xc>
     5ce:	83 e8       	ldi	r24, 0x83	; 131
     5d0:	9f ef       	ldi	r25, 0xFF	; 255
     5d2:	8e 37       	cpi	r24, 0x7E	; 126
     5d4:	91 05       	cpc	r25, r1
     5d6:	14 f0       	brlt	.+4      	; 0x5dc <_Z6handlei+0x16>
     5d8:	8d e7       	ldi	r24, 0x7D	; 125
     5da:	90 e0       	ldi	r25, 0x00	; 0
	if      (goc > SERVO_ANGLE_MAX)  goc =  SERVO_ANGLE_MAX;
	else if (goc < -SERVO_ANGLE_MAX) goc = -SERVO_ANGLE_MAX;
	
	OCR1A = SERVO_CENTER + (goc * STEP);
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	20 91 62 00 	lds	r18, 0x0062
     5e8:	30 91 63 00 	lds	r19, 0x0063
     5ec:	82 0f       	add	r24, r18
     5ee:	93 1f       	adc	r25, r19
     5f0:	9b bd       	out	0x2b, r25	; 43
     5f2:	8a bd       	out	0x2a, r24	; 42
     5f4:	08 95       	ret

000005f6 <_Z5speedii>:
}

void speed(int left, int right)
{
     5f6:	8f 92       	push	r8
     5f8:	9f 92       	push	r9
     5fa:	af 92       	push	r10
     5fc:	bf 92       	push	r11
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	8b 01       	movw	r16, r22
	left  = left  *  ratio;
     610:	80 90 71 00 	lds	r8, 0x0071
     614:	90 90 72 00 	lds	r9, 0x0072
     618:	a0 90 73 00 	lds	r10, 0x0073
     61c:	b0 90 74 00 	lds	r11, 0x0074
     620:	bc 01       	movw	r22, r24
     622:	88 27       	eor	r24, r24
     624:	77 fd       	sbrc	r23, 7
     626:	80 95       	com	r24
     628:	98 2f       	mov	r25, r24
     62a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__floatsisf>
     62e:	a5 01       	movw	r20, r10
     630:	94 01       	movw	r18, r8
     632:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__mulsf3>
     636:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__fixsfsi>
     63a:	6b 01       	movw	r12, r22
     63c:	7c 01       	movw	r14, r24
     63e:	eb 01       	movw	r28, r22
	right = right *  ratio;
     640:	b8 01       	movw	r22, r16
     642:	88 27       	eor	r24, r24
     644:	77 fd       	sbrc	r23, 7
     646:	80 95       	com	r24
     648:	98 2f       	mov	r25, r24
     64a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__floatsisf>
     64e:	9b 01       	movw	r18, r22
     650:	ac 01       	movw	r20, r24
     652:	c5 01       	movw	r24, r10
     654:	b4 01       	movw	r22, r8
     656:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__mulsf3>
     65a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__fixsfsi>
     65e:	9b 01       	movw	r18, r22
	
	if (left >= 0)
     660:	dd 23       	and	r29, r29
     662:	5c f0       	brlt	.+22     	; 0x67a <_Z5speedii+0x84>
	{
		sbi(PORTD, DIR00);
     664:	90 9a       	sbi	0x12, 0	; 18
		cbi(PORTD, DIR01);
     666:	91 98       	cbi	0x12, 1	; 18
		OCR1B = left * 200;
     668:	e8 ec       	ldi	r30, 0xC8	; 200
     66a:	ec 9d       	mul	r30, r12
     66c:	a0 01       	movw	r20, r0
     66e:	ed 9d       	mul	r30, r13
     670:	50 0d       	add	r21, r0
     672:	11 24       	eor	r1, r1
     674:	59 bd       	out	0x29, r21	; 41
     676:	48 bd       	out	0x28, r20	; 40
     678:	0b c0       	rjmp	.+22     	; 0x690 <_Z5speedii+0x9a>
	}
	else
	{
		cbi(PORTD, DIR00);
     67a:	90 98       	cbi	0x12, 0	; 18
		sbi(PORTD, DIR01);
     67c:	91 9a       	sbi	0x12, 1	; 18
		OCR1B = (-left) * 200;
     67e:	e8 e3       	ldi	r30, 0x38	; 56
     680:	ec 9d       	mul	r30, r12
     682:	a0 01       	movw	r20, r0
     684:	ed 9d       	mul	r30, r13
     686:	50 0d       	add	r21, r0
     688:	5c 19       	sub	r21, r12
     68a:	11 24       	eor	r1, r1
     68c:	59 bd       	out	0x29, r21	; 41
     68e:	48 bd       	out	0x28, r20	; 40
	}
	
	if (right >= 0)
     690:	33 23       	and	r19, r19
     692:	7c f0       	brlt	.+30     	; 0x6b2 <_Z5speedii+0xbc>
	{
		sbi(PORTD, DIR10);
     694:	93 9a       	sbi	0x12, 3	; 18
		cbi(PORTD, DIR11);
     696:	96 98       	cbi	0x12, 6	; 18
		OCR2 = right * 255/100;
     698:	4f ef       	ldi	r20, 0xFF	; 255
     69a:	46 9f       	mul	r20, r22
     69c:	90 01       	movw	r18, r0
     69e:	47 9f       	mul	r20, r23
     6a0:	30 0d       	add	r19, r0
     6a2:	11 24       	eor	r1, r1
     6a4:	c9 01       	movw	r24, r18
     6a6:	64 e6       	ldi	r22, 0x64	; 100
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     6ae:	63 bd       	out	0x23, r22	; 35
     6b0:	0f c0       	rjmp	.+30     	; 0x6d0 <_Z5speedii+0xda>
	}
	else
	{
		cbi(PORTD, DIR10);
     6b2:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD, DIR11);
     6b4:	96 9a       	sbi	0x12, 6	; 18
		OCR2 = (-right) * 255/100;
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	46 9f       	mul	r20, r22
     6ba:	90 01       	movw	r18, r0
     6bc:	47 9f       	mul	r20, r23
     6be:	30 0d       	add	r19, r0
     6c0:	36 1b       	sub	r19, r22
     6c2:	11 24       	eor	r1, r1
     6c4:	c9 01       	movw	r24, r18
     6c6:	64 e6       	ldi	r22, 0x64	; 100
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divmodhi4>
     6ce:	63 bd       	out	0x23, r22	; 35
	}
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	df 90       	pop	r13
     6de:	cf 90       	pop	r12
     6e0:	bf 90       	pop	r11
     6e2:	af 90       	pop	r10
     6e4:	9f 90       	pop	r9
     6e6:	8f 90       	pop	r8
     6e8:	08 95       	ret

000006ea <_Z3SPIh>:
}

/* -------------------- LED7 -------------------- */
void SPI(uint8_t data)
{
	SPDR = data;
     6ea:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     6ec:	77 9b       	sbis	0x0e, 7	; 14
     6ee:	fe cf       	rjmp	.-4      	; 0x6ec <_Z3SPIh+0x2>
}
     6f0:	08 95       	ret

000006f2 <_Z4led7j>:

void led7(unsigned int num)
{
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ac 01       	movw	r20, r24
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
     6fc:	9c 01       	movw	r18, r24
     6fe:	ad ec       	ldi	r26, 0xCD	; 205
     700:	bc ec       	ldi	r27, 0xCC	; 204
     702:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__umulhisi3>
     706:	96 95       	lsr	r25
     708:	87 95       	ror	r24
     70a:	96 95       	lsr	r25
     70c:	87 95       	ror	r24
     70e:	96 95       	lsr	r25
     710:	87 95       	ror	r24
     712:	9c 01       	movw	r18, r24
     714:	22 0f       	add	r18, r18
     716:	33 1f       	adc	r19, r19
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	82 0f       	add	r24, r18
     726:	93 1f       	adc	r25, r19
     728:	9a 01       	movw	r18, r20
     72a:	28 1b       	sub	r18, r24
     72c:	39 0b       	sbc	r19, r25
     72e:	c9 01       	movw	r24, r18
     730:	80 68       	ori	r24, 0x80	; 128
     732:	80 93 7f 00 	sts	0x007F, r24
	led7_data.ten		 = (unsigned int)(num%100 / 10);
     736:	9a 01       	movw	r18, r20
     738:	36 95       	lsr	r19
     73a:	27 95       	ror	r18
     73c:	36 95       	lsr	r19
     73e:	27 95       	ror	r18
     740:	ab e7       	ldi	r26, 0x7B	; 123
     742:	b4 e1       	ldi	r27, 0x14	; 20
     744:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__umulhisi3>
     748:	96 95       	lsr	r25
     74a:	87 95       	ror	r24
     74c:	64 e6       	ldi	r22, 0x64	; 100
     74e:	68 9f       	mul	r22, r24
     750:	90 01       	movw	r18, r0
     752:	69 9f       	mul	r22, r25
     754:	30 0d       	add	r19, r0
     756:	11 24       	eor	r1, r1
     758:	ca 01       	movw	r24, r20
     75a:	82 1b       	sub	r24, r18
     75c:	93 0b       	sbc	r25, r19
     75e:	9c 01       	movw	r18, r24
     760:	ad ec       	ldi	r26, 0xCD	; 205
     762:	bc ec       	ldi	r27, 0xCC	; 204
     764:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__umulhisi3>
     768:	fc 01       	movw	r30, r24
     76a:	f6 95       	lsr	r31
     76c:	e7 95       	ror	r30
     76e:	f6 95       	lsr	r31
     770:	e7 95       	ror	r30
     772:	f6 95       	lsr	r31
     774:	e7 95       	ror	r30
     776:	1e 2f       	mov	r17, r30
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
     778:	ea 01       	movw	r28, r20
     77a:	d6 95       	lsr	r29
     77c:	c7 95       	ror	r28
     77e:	d6 95       	lsr	r29
     780:	c7 95       	ror	r28
     782:	d6 95       	lsr	r29
     784:	c7 95       	ror	r28
     786:	9e 01       	movw	r18, r28
     788:	a5 ec       	ldi	r26, 0xC5	; 197
     78a:	b0 e2       	ldi	r27, 0x20	; 32
     78c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__umulhisi3>
     790:	92 95       	swap	r25
     792:	82 95       	swap	r24
     794:	8f 70       	andi	r24, 0x0F	; 15
     796:	89 27       	eor	r24, r25
     798:	9f 70       	andi	r25, 0x0F	; 15
     79a:	89 27       	eor	r24, r25
     79c:	68 ee       	ldi	r22, 0xE8	; 232
     79e:	73 e0       	ldi	r23, 0x03	; 3
     7a0:	86 9f       	mul	r24, r22
     7a2:	90 01       	movw	r18, r0
     7a4:	87 9f       	mul	r24, r23
     7a6:	30 0d       	add	r19, r0
     7a8:	96 9f       	mul	r25, r22
     7aa:	30 0d       	add	r19, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	42 1b       	sub	r20, r18
     7b0:	53 0b       	sbc	r21, r19
     7b2:	9a 01       	movw	r18, r20
     7b4:	36 95       	lsr	r19
     7b6:	27 95       	ror	r18
     7b8:	36 95       	lsr	r19
     7ba:	27 95       	ror	r18
     7bc:	ab e7       	ldi	r26, 0x7B	; 123
     7be:	b4 e1       	ldi	r27, 0x14	; 20
     7c0:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__umulhisi3>
     7c4:	ac 01       	movw	r20, r24
     7c6:	56 95       	lsr	r21
     7c8:	47 95       	ror	r20
     7ca:	04 2f       	mov	r16, r20
	led7_data.thousand	 = (unsigned int)(num/ 1000);
     7cc:	9e 01       	movw	r18, r28
     7ce:	a5 ec       	ldi	r26, 0xC5	; 197
     7d0:	b0 e2       	ldi	r27, 0x20	; 32
     7d2:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__umulhisi3>
     7d6:	92 95       	swap	r25
     7d8:	82 95       	swap	r24
     7da:	8f 70       	andi	r24, 0x0F	; 15
     7dc:	89 27       	eor	r24, r25
     7de:	9f 70       	andi	r25, 0x0F	; 15
     7e0:	89 27       	eor	r24, r25
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
     7e2:	88 23       	and	r24, r24
     7e4:	11 f0       	breq	.+4      	; 0x7ea <_Z4led7j+0xf8>
     7e6:	20 e1       	ldi	r18, 0x10	; 16
     7e8:	01 c0       	rjmp	.+2      	; 0x7ec <_Z4led7j+0xfa>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	82 2b       	or	r24, r18
     7ee:	80 93 82 00 	sts	0x0082, r24
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     7f2:	81 11       	cpse	r24, r1
     7f4:	15 c0       	rjmp	.+42     	; 0x820 <_Z4led7j+0x12e>
     7f6:	01 11       	cpse	r16, r1
     7f8:	0c c0       	rjmp	.+24     	; 0x812 <_Z4led7j+0x120>
     7fa:	0c c0       	rjmp	.+24     	; 0x814 <_Z4led7j+0x122>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     7fc:	11 23       	and	r17, r17
     7fe:	11 f0       	breq	.+4      	; 0x804 <_Z4led7j+0x112>
     800:	80 e4       	ldi	r24, 0x40	; 64
     802:	03 c0       	rjmp	.+6      	; 0x80a <_Z4led7j+0x118>
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	01 c0       	rjmp	.+2      	; 0x80a <_Z4led7j+0x118>
     808:	80 e4       	ldi	r24, 0x40	; 64
     80a:	e8 2b       	or	r30, r24
     80c:	e0 93 80 00 	sts	0x0080, r30
     810:	0c c0       	rjmp	.+24     	; 0x82a <_Z4led7j+0x138>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     812:	80 e2       	ldi	r24, 0x20	; 32
     814:	48 2b       	or	r20, r24
     816:	40 93 81 00 	sts	0x0081, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     81a:	44 23       	and	r20, r20
     81c:	79 f3       	breq	.-34     	; 0x7fc <_Z4led7j+0x10a>
     81e:	f4 cf       	rjmp	.-24     	; 0x808 <_Z4led7j+0x116>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     820:	40 62       	ori	r20, 0x20	; 32
     822:	40 93 81 00 	sts	0x0081, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     826:	80 e4       	ldi	r24, 0x40	; 64
     828:	f0 cf       	rjmp	.-32     	; 0x80a <_Z4led7j+0x118>
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	08 95       	ret

00000834 <_Z5printv>:

void print( void )
{
     834:	cf 93       	push	r28
	uint8_t value=0;
	if(led7_data.i++ == 4) led7_data.i=0;
     836:	ee e7       	ldi	r30, 0x7E	; 126
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	90 81       	ld	r25, Z
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	89 0f       	add	r24, r25
     840:	80 83       	st	Z, r24
     842:	94 30       	cpi	r25, 0x04	; 4
     844:	19 f4       	brne	.+6      	; 0x84c <_Z5printv+0x18>
     846:	10 92 7e 00 	sts	0x007E, r1
     84a:	08 c0       	rjmp	.+16     	; 0x85c <_Z5printv+0x28>
	switch(led7_data.i)
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	49 f0       	breq	.+18     	; 0x862 <_Z5printv+0x2e>
     850:	28 f0       	brcs	.+10     	; 0x85c <_Z5printv+0x28>
     852:	82 30       	cpi	r24, 0x02	; 2
     854:	49 f0       	breq	.+18     	; 0x868 <_Z5printv+0x34>
     856:	83 30       	cpi	r24, 0x03	; 3
     858:	51 f0       	breq	.+20     	; 0x86e <_Z5printv+0x3a>
     85a:	0c c0       	rjmp	.+24     	; 0x874 <_Z5printv+0x40>
	{
		case 0: value=led7_data.thousand;	break;
     85c:	c0 91 82 00 	lds	r28, 0x0082
     860:	0a c0       	rjmp	.+20     	; 0x876 <_Z5printv+0x42>
		case 1: value=led7_data.hundred;	break;
     862:	c0 91 81 00 	lds	r28, 0x0081
     866:	07 c0       	rjmp	.+14     	; 0x876 <_Z5printv+0x42>
		case 2: value=led7_data.ten;		break;
     868:	c0 91 80 00 	lds	r28, 0x0080
     86c:	04 c0       	rjmp	.+8      	; 0x876 <_Z5printv+0x42>
		case 3: value=led7_data.unit;		break;
     86e:	c0 91 7f 00 	lds	r28, 0x007F
     872:	01 c0       	rjmp	.+2      	; 0x876 <_Z5printv+0x42>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
}

void print( void )
{
	uint8_t value=0;
     874:	c0 e0       	ldi	r28, 0x00	; 0
		case 1: value=led7_data.hundred;	break;
		case 2: value=led7_data.ten;		break;
		case 3: value=led7_data.unit;		break;
		default: break;
	}
	SPI(~led7_data.sensor_out);
     876:	80 91 83 00 	lds	r24, 0x0083
     87a:	80 95       	com	r24
     87c:	0e 94 75 03 	call	0x6ea	; 0x6ea <_Z3SPIh>
	SPI(value);
     880:	8c 2f       	mov	r24, r28
     882:	0e 94 75 03 	call	0x6ea	; 0x6ea <_Z3SPIh>
	sbi(PORTB,LATCH);
     886:	c4 9a       	sbi	0x18, 4	; 24
	cbi(PORTB,LATCH);
     888:	c4 98       	cbi	0x18, 4	; 24
}
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <_Z15read_adc_eepromv>:

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	0f 2e       	mov	r0, r31
     89c:	f4 e9       	ldi	r31, 0x94	; 148
     89e:	ef 2e       	mov	r14, r31
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	ff 2e       	mov	r15, r31
     8a4:	f0 2d       	mov	r31, r0
     8a6:	04 e8       	ldi	r16, 0x84	; 132
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	c0 e0       	ldi	r28, 0x00	; 0
     8ac:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     8ae:	e1 99       	sbic	0x1c, 1	; 28
     8b0:	fe cf       	rjmp	.-4      	; 0x8ae <_Z15read_adc_eepromv+0x20>
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
     8b2:	ce 01       	movw	r24, r28
     8b4:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__eerd_word_m16>
     8b8:	f7 01       	movw	r30, r14
     8ba:	81 93       	st	Z+, r24
     8bc:	91 93       	st	Z+, r25
     8be:	7f 01       	movw	r14, r30
		while(!eeprom_is_ready());
     8c0:	e1 99       	sbic	0x1c, 1	; 28
     8c2:	fe cf       	rjmp	.-4      	; 0x8c0 <_Z15read_adc_eepromv+0x32>
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
     8c4:	ce 01       	movw	r24, r28
     8c6:	40 96       	adiw	r24, 0x10	; 16
     8c8:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__eerd_word_m16>
     8cc:	f8 01       	movw	r30, r16
     8ce:	81 93       	st	Z+, r24
     8d0:	91 93       	st	Z+, r25
     8d2:	8f 01       	movw	r16, r30
     8d4:	22 96       	adiw	r28, 0x02	; 2
}

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     8d6:	c0 31       	cpi	r28, 0x10	; 16
     8d8:	d1 05       	cpc	r29, r1
     8da:	49 f7       	brne	.-46     	; 0x8ae <_Z15read_adc_eepromv+0x20>
     8dc:	c4 ea       	ldi	r28, 0xA4	; 164
     8de:	d0 e0       	ldi	r29, 0x00	; 0
     8e0:	44 ea       	ldi	r20, 0xA4	; 164
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	a4 e8       	ldi	r26, 0x84	; 132
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e4 e9       	ldi	r30, 0x94	; 148
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     8ec:	81 91       	ld	r24, Z+
     8ee:	91 91       	ld	r25, Z+
     8f0:	2d 91       	ld	r18, X+
     8f2:	3d 91       	ld	r19, X+
     8f4:	82 0f       	add	r24, r18
     8f6:	93 1f       	adc	r25, r19
     8f8:	96 95       	lsr	r25
     8fa:	87 95       	ror	r24
     8fc:	89 93       	st	Y+, r24
     8fe:	99 93       	st	Y+, r25
		while(!eeprom_is_ready());
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
     900:	e4 17       	cp	r30, r20
     902:	f5 07       	cpc	r31, r21
     904:	99 f7       	brne	.-26     	; 0x8ec <_Z15read_adc_eepromv+0x5e>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	08 95       	ret

00000914 <_Z16write_adc_eepromv>:

void write_adc_eeprom( void )
{
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	0f 2e       	mov	r0, r31
     922:	f4 e8       	ldi	r31, 0x84	; 132
     924:	ef 2e       	mov	r14, r31
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	ff 2e       	mov	r15, r31
     92a:	f0 2d       	mov	r31, r0
     92c:	04 e9       	ldi	r16, 0x94	; 148
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	c0 e0       	ldi	r28, 0x00	; 0
     932:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     934:	e1 99       	sbic	0x1c, 1	; 28
     936:	fe cf       	rjmp	.-4      	; 0x934 <_Z16write_adc_eepromv+0x20>
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
     938:	f8 01       	movw	r30, r16
     93a:	61 91       	ld	r22, Z+
     93c:	71 91       	ld	r23, Z+
     93e:	8f 01       	movw	r16, r30
     940:	ce 01       	movw	r24, r28
     942:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__eewr_word_m16>
		while(!eeprom_is_ready());
     946:	e1 99       	sbic	0x1c, 1	; 28
     948:	fe cf       	rjmp	.-4      	; 0x946 <_Z16write_adc_eepromv+0x32>
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
     94a:	f7 01       	movw	r30, r14
     94c:	61 91       	ld	r22, Z+
     94e:	71 91       	ld	r23, Z+
     950:	7f 01       	movw	r14, r30
     952:	ce 01       	movw	r24, r28
     954:	40 96       	adiw	r24, 0x10	; 16
     956:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__eewr_word_m16>
     95a:	22 96       	adiw	r28, 0x02	; 2
	}
}

void write_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     95c:	c0 31       	cpi	r28, 0x10	; 16
     95e:	d1 05       	cpc	r29, r1
     960:	49 f7       	brne	.-46     	; 0x934 <_Z16write_adc_eepromv+0x20>
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
	}
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	08 95       	ret

00000970 <_Z8adc_readh>:

uint16_t adc_read( uint8_t ch )
{
	ADMUX = (1<< REFS0)|ch;
     970:	80 64       	ori	r24, 0x40	; 64
     972:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
     974:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
     976:	34 9b       	sbis	0x06, 4	; 6
     978:	fe cf       	rjmp	.-4      	; 0x976 <_Z8adc_readh+0x6>
	return ADCW;
     97a:	84 b1       	in	r24, 0x04	; 4
     97c:	95 b1       	in	r25, 0x05	; 5
}
     97e:	08 95       	ret

00000980 <_Z10sensor_cmpv>:

uint8_t sensor_cmp( void )
{
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	04 ea       	ldi	r16, 0xA4	; 164
     990:	10 e0       	ldi	r17, 0x00	; 0
     992:	c0 e0       	ldi	r28, 0x00	; 0
     994:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t ADC_value=0;
     996:	d1 2c       	mov	r13, r1
	for(uint8_t i=0; i<8; i++)
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
     998:	ee 24       	eor	r14, r14
     99a:	e3 94       	inc	r14
     99c:	f1 2c       	mov	r15, r1
     99e:	8c 2f       	mov	r24, r28
     9a0:	0e 94 b8 04 	call	0x970	; 0x970 <_Z8adc_readh>
     9a4:	f8 01       	movw	r30, r16
     9a6:	21 91       	ld	r18, Z+
     9a8:	31 91       	ld	r19, Z+
     9aa:	8f 01       	movw	r16, r30
     9ac:	82 17       	cp	r24, r18
     9ae:	93 07       	cpc	r25, r19
     9b0:	40 f4       	brcc	.+16     	; 0x9c2 <_Z10sensor_cmpv+0x42>
     9b2:	97 01       	movw	r18, r14
     9b4:	0c 2e       	mov	r0, r28
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <_Z10sensor_cmpv+0x3c>
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	0a 94       	dec	r0
     9be:	e2 f7       	brpl	.-8      	; 0x9b8 <_Z10sensor_cmpv+0x38>
     9c0:	d2 2a       	or	r13, r18
     9c2:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t sensor_cmp( void )
{
	uint8_t ADC_value=0;
	for(uint8_t i=0; i<8; i++)
     9c4:	c8 30       	cpi	r28, 0x08	; 8
     9c6:	d1 05       	cpc	r29, r1
     9c8:	51 f7       	brne	.-44     	; 0x99e <_Z10sensor_cmpv+0x1e>
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
	}
	led7_data.sensor_out=ADC_value;
     9ca:	d0 92 83 00 	sts	0x0083, r13
	return (ADC_value);
}
     9ce:	8d 2d       	mov	r24, r13
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	08 95       	ret

000009e0 <_Z11learn_colorv>:

void learn_color( void )
{
     9e0:	8f 92       	push	r8
     9e2:	9f 92       	push	r9
     9e4:	af 92       	push	r10
     9e6:	bf 92       	push	r11
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	c4 e9       	ldi	r28, 0x94	; 148
     9fa:	d0 e0       	ldi	r29, 0x00	; 0
     9fc:	04 e8       	ldi	r16, 0x84	; 132
     9fe:	10 e0       	ldi	r17, 0x00	; 0
     a00:	0f 2e       	mov	r0, r31
     a02:	f4 ea       	ldi	r31, 0xA4	; 164
     a04:	ef 2e       	mov	r14, r31
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	ff 2e       	mov	r15, r31
     a0a:	f0 2d       	mov	r31, r0
     a0c:	d8 01       	movw	r26, r16
     a0e:	fe 01       	movw	r30, r28
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
	{
		lineTrang[i] = 1024;
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	81 93       	st	Z+, r24
     a16:	91 93       	st	Z+, r25
		lineDen[i] = 0;
     a18:	1d 92       	st	X+, r1
     a1a:	1d 92       	st	X+, r1

void learn_color( void )
{
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
     a1c:	ee 15       	cp	r30, r14
     a1e:	ff 05       	cpc	r31, r15
     a20:	c9 f7       	brne	.-14     	; 0xa14 <_Z11learn_colorv+0x34>
	{
		lineTrang[i] = 1024;
		lineDen[i] = 0;
	}
	
	led7(6014);
     a22:	8e e7       	ldi	r24, 0x7E	; 126
     a24:	97 e1       	ldi	r25, 0x17	; 23
     a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
	while (1)
	{
		if(get_button(BTN2)) break;
     a2a:	b0 2e       	mov	r11, r16
     a2c:	a1 2e       	mov	r10, r17
     a2e:	9c 2e       	mov	r9, r28
     a30:	8d 2e       	mov	r8, r29
     a32:	c1 2c       	mov	r12, r1
     a34:	87 ef       	ldi	r24, 0xF7	; 247
     a36:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     a3a:	81 11       	cpse	r24, r1
     a3c:	1f c0       	rjmp	.+62     	; 0xa7c <_Z11learn_colorv+0x9c>
     a3e:	0b 2d       	mov	r16, r11
     a40:	1a 2d       	mov	r17, r10
     a42:	c9 2d       	mov	r28, r9
     a44:	d8 2d       	mov	r29, r8
     a46:	dc 2c       	mov	r13, r12
		
		for (uint8_t i = 0; i < 8; i++)
		{
			ADC_temp = adc_read(i);
     a48:	8d 2d       	mov	r24, r13
     a4a:	0e 94 b8 04 	call	0x970	; 0x970 <_Z8adc_readh>
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
     a4e:	28 81       	ld	r18, Y
     a50:	39 81       	ldd	r19, Y+1	; 0x01
     a52:	82 17       	cp	r24, r18
     a54:	93 07       	cpc	r25, r19
     a56:	10 f4       	brcc	.+4      	; 0xa5c <_Z11learn_colorv+0x7c>
     a58:	99 83       	std	Y+1, r25	; 0x01
     a5a:	88 83       	st	Y, r24
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
     a5c:	f8 01       	movw	r30, r16
     a5e:	20 81       	ld	r18, Z
     a60:	31 81       	ldd	r19, Z+1	; 0x01
     a62:	28 17       	cp	r18, r24
     a64:	39 07       	cpc	r19, r25
     a66:	10 f4       	brcc	.+4      	; 0xa6c <_Z11learn_colorv+0x8c>
     a68:	91 83       	std	Z+1, r25	; 0x01
     a6a:	80 83       	st	Z, r24
	led7(6014);
	while (1)
	{
		if(get_button(BTN2)) break;
		
		for (uint8_t i = 0; i < 8; i++)
     a6c:	d3 94       	inc	r13
     a6e:	22 96       	adiw	r28, 0x02	; 2
     a70:	0e 5f       	subi	r16, 0xFE	; 254
     a72:	1f 4f       	sbci	r17, 0xFF	; 255
     a74:	f8 e0       	ldi	r31, 0x08	; 8
     a76:	df 12       	cpse	r13, r31
     a78:	e7 cf       	rjmp	.-50     	; 0xa48 <_Z11learn_colorv+0x68>
     a7a:	dc cf       	rjmp	.-72     	; 0xa34 <_Z11learn_colorv+0x54>
     a7c:	c4 ea       	ldi	r28, 0xA4	; 164
     a7e:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	led7(6014);
	while (1)
	{
		if(get_button(BTN2)) break;
     a80:	a4 e8       	ldi	r26, 0x84	; 132
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	e4 e9       	ldi	r30, 0x94	; 148
     a86:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
	
	for (uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     a88:	81 91       	ld	r24, Z+
     a8a:	91 91       	ld	r25, Z+
     a8c:	2d 91       	ld	r18, X+
     a8e:	3d 91       	ld	r19, X+
     a90:	82 0f       	add	r24, r18
     a92:	93 1f       	adc	r25, r19
     a94:	96 95       	lsr	r25
     a96:	87 95       	ror	r24
     a98:	89 93       	st	Y+, r24
     a9a:	99 93       	st	Y+, r25
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
		}
	}
	
	for (uint8_t i=0; i<8; i++)
     a9c:	ee 15       	cp	r30, r14
     a9e:	ff 05       	cpc	r31, r15
     aa0:	99 f7       	brne	.-26     	; 0xa88 <_Z11learn_colorv+0xa8>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
	
	write_adc_eeprom();
     aa2:	0e 94 8a 04 	call	0x914	; 0x914 <_Z16write_adc_eepromv>
	return (ADC_value);
}

void learn_color( void )
{
	uint8_t sel = 0;
     aa6:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1)
	{
		if(get_button(BTN0))
		{
			if (++sel > 7) sel = 0;
     aa8:	f1 2c       	mov	r15, r1
		{
			break;
		}
		
		led7(ADC_average[sel]);
		led7_data.sensor_out = (1 << sel);
     aaa:	c3 e8       	ldi	r28, 0x83	; 131
     aac:	d0 e0       	ldi	r29, 0x00	; 0
     aae:	01 e0       	ldi	r16, 0x01	; 1
	
	write_adc_eeprom();
	
	while (1)
	{
		if(get_button(BTN0))
     ab0:	8d ef       	ldi	r24, 0xFD	; 253
     ab2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     ab6:	88 23       	and	r24, r24
     ab8:	21 f0       	breq	.+8      	; 0xac2 <_Z11learn_colorv+0xe2>
		{
			if (++sel > 7) sel = 0;
     aba:	1f 5f       	subi	r17, 0xFF	; 255
     abc:	18 30       	cpi	r17, 0x08	; 8
     abe:	08 f0       	brcs	.+2      	; 0xac2 <_Z11learn_colorv+0xe2>
     ac0:	1f 2d       	mov	r17, r15
		}
		if (get_button(BTN1))
     ac2:	8b ef       	ldi	r24, 0xFB	; 251
     ac4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     ac8:	81 11       	cpse	r24, r1
		{
			if (--sel < 0)  sel = 7;
     aca:	11 50       	subi	r17, 0x01	; 1
		}
		if (get_button(BTN2))
     acc:	87 ef       	ldi	r24, 0xF7	; 247
     ace:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     ad2:	81 11       	cpse	r24, r1
     ad4:	12 c0       	rjmp	.+36     	; 0xafa <_Z11learn_colorv+0x11a>
		{
			break;
		}
		
		led7(ADC_average[sel]);
     ad6:	e1 2f       	mov	r30, r17
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	ee 0f       	add	r30, r30
     adc:	ff 1f       	adc	r31, r31
     ade:	ec 55       	subi	r30, 0x5C	; 92
     ae0:	ff 4f       	sbci	r31, 0xFF	; 255
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
		led7_data.sensor_out = (1 << sel);
     aea:	80 2f       	mov	r24, r16
     aec:	01 2e       	mov	r0, r17
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <_Z11learn_colorv+0x112>
     af0:	88 0f       	add	r24, r24
     af2:	0a 94       	dec	r0
     af4:	ea f7       	brpl	.-6      	; 0xaf0 <_Z11learn_colorv+0x110>
     af6:	88 83       	st	Y, r24
	}
     af8:	db cf       	rjmp	.-74     	; 0xab0 <_Z11learn_colorv+0xd0>
}
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	bf 90       	pop	r11
     b0c:	af 90       	pop	r10
     b0e:	9f 90       	pop	r9
     b10:	8f 90       	pop	r8
     b12:	08 95       	ret

00000b14 <_Z4INITv>:

/* -------------------- INITIAL -------------------- */
void INIT( void )
{
	/* ADC */
	ADMUX=(1<<REFS0);
     b14:	80 e4       	ldi	r24, 0x40	; 64
     b16:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN) | (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     b18:	87 e8       	ldi	r24, 0x87	; 135
     b1a:	86 b9       	out	0x06, r24	; 6
	read_adc_eeprom();
     b1c:	0e 94 47 04 	call	0x88e	; 0x88e <_Z15read_adc_eepromv>
	
	/* PORT */
	DDRB  = 0b11110001;
     b20:	81 ef       	ldi	r24, 0xF1	; 241
     b22:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111111;
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	88 bb       	out	0x18, r24	; 24
	
	DDRC  = 0b00000000;
     b28:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b11111111;
     b2a:	85 bb       	out	0x15, r24	; 21
	
	DDRD  = 0b11111011;
     b2c:	8b ef       	ldi	r24, 0xFB	; 251
     b2e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000;
     b30:	12 ba       	out	0x12, r1	; 18
	
	/* SPI */
	SPCR = (1<<SPE)|(1<<MSTR);
     b32:	80 e5       	ldi	r24, 0x50	; 80
     b34:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	8e b9       	out	0x0e, r24	; 14
	
	/* TIMER */
	TCCR0=(1<<WGM01) | (1<<CS02);
     b3a:	8c e0       	ldi	r24, 0x0C	; 12
     b3c:	83 bf       	out	0x33, r24	; 51
	OCR0=62;
     b3e:	8e e3       	ldi	r24, 0x3E	; 62
     b40:	8c bf       	out	0x3c, r24	; 60
	TIMSK=(1<<OCIE0);
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
     b46:	82 ea       	ldi	r24, 0xA2	; 162
     b48:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS11);
     b4a:	8a e1       	ldi	r24, 0x1A	; 26
     b4c:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 20000;
     b4e:	80 e2       	ldi	r24, 0x20	; 32
     b50:	9e e4       	ldi	r25, 0x4E	; 78
     b52:	97 bd       	out	0x27, r25	; 39
     b54:	86 bd       	out	0x26, r24	; 38
	OCR1B = 0;
     b56:	19 bc       	out	0x29, r1	; 41
     b58:	18 bc       	out	0x28, r1	; 40
	
	TCCR2=(1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS22)|(1<<CS21)|(1<<CS20);
     b5a:	8f e6       	ldi	r24, 0x6F	; 111
     b5c:	85 bd       	out	0x25, r24	; 37
	OCR2=0;
     b5e:	13 bc       	out	0x23, r1	; 35
	sei();
     b60:	78 94       	sei
	
	/* ENCODER */
	MCUCR |= (1<<ISC00)|(1<<ISC01);
     b62:	85 b7       	in	r24, 0x35	; 53
     b64:	83 60       	ori	r24, 0x03	; 3
     b66:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     b68:	8b b7       	in	r24, 0x3b	; 59
     b6a:	80 64       	ori	r24, 0x40	; 64
     b6c:	8b bf       	out	0x3b, r24	; 59
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     b6e:	83 e1       	ldi	r24, 0x13	; 19
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	90 93 7d 00 	sts	0x007D, r25
     b76:	80 93 7c 00 	sts	0x007C, r24
     b7a:	08 95       	ret

00000b7c <_Z13test_hardwarev>:
	set_encoder(19);
}

void test_hardware( void )
{
	uint8_t _index=0;
     b7c:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     b7e:	f1 2c       	mov	r15, r1
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
		led7_data.sensor_out = 0 | (1<<_index);
     b80:	c3 e8       	ldi	r28, 0x83	; 131
     b82:	d0 e0       	ldi	r29, 0x00	; 0
     b84:	01 e0       	ldi	r16, 0x01	; 1
void test_hardware( void )
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
     b86:	8d ef       	ldi	r24, 0xFD	; 253
     b88:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     b8c:	88 23       	and	r24, r24
     b8e:	59 f0       	breq	.+22     	; 0xba6 <_Z13test_hardwarev+0x2a>
     b90:	6c e9       	ldi	r22, 0x9C	; 156
     b92:	7f ef       	ldi	r23, 0xFF	; 255
     b94:	84 e6       	ldi	r24, 0x64	; 100
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
     b9c:	83 e8       	ldi	r24, 0x83	; 131
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
     ba0:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
     ba4:	25 c0       	rjmp	.+74     	; 0xbf0 <_Z13test_hardwarev+0x74>
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     ba6:	8b ef       	ldi	r24, 0xFB	; 251
     ba8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     bac:	88 23       	and	r24, r24
     bae:	21 f0       	breq	.+8      	; 0xbb8 <_Z13test_hardwarev+0x3c>
     bb0:	1f 5f       	subi	r17, 0xFF	; 255
     bb2:	18 30       	cpi	r17, 0x08	; 8
     bb4:	e9 f4       	brne	.+58     	; 0xbf0 <_Z13test_hardwarev+0x74>
     bb6:	1b c0       	rjmp	.+54     	; 0xbee <_Z13test_hardwarev+0x72>
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
     bb8:	87 ef       	ldi	r24, 0xF7	; 247
     bba:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     bbe:	88 23       	and	r24, r24
     bc0:	59 f0       	breq	.+22     	; 0xbd8 <_Z13test_hardwarev+0x5c>
     bc2:	64 e6       	ldi	r22, 0x64	; 100
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	8c e9       	ldi	r24, 0x9C	; 156
     bc8:	9f ef       	ldi	r25, 0xFF	; 255
     bca:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
     bce:	8d e7       	ldi	r24, 0x7D	; 125
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
     bd6:	0c c0       	rjmp	.+24     	; 0xbf0 <_Z13test_hardwarev+0x74>
		else						{ speed(0,0);  handle(0);                 }
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <_Z13test_hardwarev+0x74>
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     bee:	1f 2d       	mov	r17, r15
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
     bf0:	81 2f       	mov	r24, r17
     bf2:	0e 94 b8 04 	call	0x970	; 0x970 <_Z8adc_readh>
     bf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
		led7_data.sensor_out = 0 | (1<<_index);
     bfa:	80 2f       	mov	r24, r16
     bfc:	01 2e       	mov	r0, r17
     bfe:	01 c0       	rjmp	.+2      	; 0xc02 <_Z13test_hardwarev+0x86>
     c00:	88 0f       	add	r24, r24
     c02:	0a 94       	dec	r0
     c04:	ea f7       	brpl	.-6      	; 0xc00 <_Z13test_hardwarev+0x84>
     c06:	88 83       	st	Y, r24
	}
     c08:	be cf       	rjmp	.-132    	; 0xb86 <_Z13test_hardwarev+0xa>

00000c0a <_Z15servo_calibratev>:
		if (get_button(BTN2)) angle++;
	}
}

void servo_calibrate( void )
{
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
	int16_t angle = 0;
     c0e:	c0 e0       	ldi	r28, 0x00	; 0
     c10:	d0 e0       	ldi	r29, 0x00	; 0
	while (true)
	{
		led7((angle>=0)?angle:(-angle));
     c12:	ce 01       	movw	r24, r28
     c14:	dd 23       	and	r29, r29
     c16:	24 f4       	brge	.+8      	; 0xc20 <_Z15servo_calibratev+0x16>
     c18:	88 27       	eor	r24, r24
     c1a:	99 27       	eor	r25, r25
     c1c:	8c 1b       	sub	r24, r28
     c1e:	9d 0b       	sbc	r25, r29
     c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
		sensor_cmp();
     c24:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
		handle(angle);
     c28:	ce 01       	movw	r24, r28
     c2a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
		if (get_button(BTN0)) angle--;
     c2e:	8d ef       	ldi	r24, 0xFD	; 253
     c30:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     c34:	81 11       	cpse	r24, r1
     c36:	21 97       	sbiw	r28, 0x01	; 1
		if (get_button(BTN1)) break;;
     c38:	8b ef       	ldi	r24, 0xFB	; 251
     c3a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     c3e:	81 11       	cpse	r24, r1
     c40:	07 c0       	rjmp	.+14     	; 0xc50 <_Z15servo_calibratev+0x46>
		if (get_button(BTN2)) angle++;
     c42:	87 ef       	ldi	r24, 0xF7	; 247
     c44:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     c48:	88 23       	and	r24, r24
     c4a:	19 f3       	breq	.-58     	; 0xc12 <_Z15servo_calibratev+0x8>
     c4c:	21 96       	adiw	r28, 0x01	; 1
     c4e:	e1 cf       	rjmp	.-62     	; 0xc12 <_Z15servo_calibratev+0x8>
	}
	
	SERVO_CENTER = SERVO_CENTER + (angle * STEP);
     c50:	cc 0f       	add	r28, r28
     c52:	dd 1f       	adc	r29, r29
     c54:	cc 0f       	add	r28, r28
     c56:	dd 1f       	adc	r29, r29
     c58:	80 91 62 00 	lds	r24, 0x0062
     c5c:	90 91 63 00 	lds	r25, 0x0063
     c60:	c8 0f       	add	r28, r24
     c62:	d9 1f       	adc	r29, r25
     c64:	d0 93 63 00 	sts	0x0063, r29
     c68:	c0 93 62 00 	sts	0x0062, r28
}
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <_Z8sel_modev>:

/* -------------------- START -------------------- */
void sel_mode()
{
	handle(0);
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
	speed(0,0);
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     c86:	8f ef       	ldi	r24, 0xFF	; 255
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	90 93 7d 00 	sts	0x007D, r25
     c8e:	80 93 7c 00 	sts	0x007C, r24
	speed(0,0);
	set_encoder(-1);
	
	while(1)
	{
		ratio_base = ratio_default + (get_switch() / 20.0);
     c92:	0e 94 07 02 	call	0x40e	; 0x40e <_Z10get_switchv>
     c96:	68 2f       	mov	r22, r24
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__floatsisf>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 ea       	ldi	r20, 0xA0	; 160
     ca8:	51 e4       	ldi	r21, 0x41	; 65
     caa:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__divsf3>
     cae:	2a e9       	ldi	r18, 0x9A	; 154
     cb0:	39 e9       	ldi	r19, 0x99	; 153
     cb2:	49 e9       	ldi	r20, 0x99	; 153
     cb4:	5e e3       	ldi	r21, 0x3E	; 62
     cb6:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__addsf3>
     cba:	60 93 75 00 	sts	0x0075, r22
     cbe:	70 93 76 00 	sts	0x0076, r23
     cc2:	80 93 77 00 	sts	0x0077, r24
     cc6:	90 93 78 00 	sts	0x0078, r25
		ratio = ratio_base;
     cca:	60 93 71 00 	sts	0x0071, r22
     cce:	70 93 72 00 	sts	0x0072, r23
     cd2:	80 93 73 00 	sts	0x0073, r24
     cd6:	90 93 74 00 	sts	0x0074, r25
		led7(ratio_base * 100);
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	48 ec       	ldi	r20, 0xC8	; 200
     ce0:	52 e4       	ldi	r21, 0x42	; 66
     ce2:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__mulsf3>
     ce6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__fixunssfsi>
     cea:	cb 01       	movw	r24, r22
     cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
		delay = (1.4 - 1.125 * ratio);
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e9       	ldi	r20, 0x90	; 144
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	60 91 71 00 	lds	r22, 0x0071
     cfc:	70 91 72 00 	lds	r23, 0x0072
     d00:	80 91 73 00 	lds	r24, 0x0073
     d04:	90 91 74 00 	lds	r25, 0x0074
     d08:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__mulsf3>
     d0c:	9b 01       	movw	r18, r22
     d0e:	ac 01       	movw	r20, r24
     d10:	63 e3       	ldi	r22, 0x33	; 51
     d12:	73 e3       	ldi	r23, 0x33	; 51
     d14:	83 eb       	ldi	r24, 0xB3	; 179
     d16:	9f e3       	ldi	r25, 0x3F	; 63
     d18:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__subsf3>
     d1c:	60 93 6d 00 	sts	0x006D, r22
     d20:	70 93 6e 00 	sts	0x006E, r23
     d24:	80 93 6f 00 	sts	0x006F, r24
     d28:	90 93 70 00 	sts	0x0070, r25
		sensor_cmp();
     d2c:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
		if(get_button(BTN0))		return;
     d30:	8d ef       	ldi	r24, 0xFD	; 253
     d32:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     d36:	81 11       	cpse	r24, r1
     d38:	0f c0       	rjmp	.+30     	; 0xd58 <_Z8sel_modev+0xe6>
		else if (get_button(BTN1))	test_hardware(); /*test_servo();*/
     d3a:	8b ef       	ldi	r24, 0xFB	; 251
     d3c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     d40:	81 11       	cpse	r24, r1
     d42:	0e 94 be 05 	call	0xb7c	; 0xb7c <_Z13test_hardwarev>
		else if (get_button(BTN2))	learn_color();
     d46:	87 ef       	ldi	r24, 0xF7	; 247
     d48:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <_Z8sel_modev+0xe0>
     d50:	a0 cf       	rjmp	.-192    	; 0xc92 <_Z8sel_modev+0x20>
     d52:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_Z11learn_colorv>
     d56:	9d cf       	rjmp	.-198    	; 0xc92 <_Z8sel_modev+0x20>
     d58:	08 95       	ret

00000d5a <__vector_19>:
		}
    }
}

ISR(TIMER0_COMP_vect) /* 1ms */
{
     d5a:	1f 92       	push	r1
     d5c:	0f 92       	push	r0
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	0f 92       	push	r0
     d62:	11 24       	eor	r1, r1
     d64:	2f 93       	push	r18
     d66:	3f 93       	push	r19
     d68:	4f 93       	push	r20
     d6a:	5f 93       	push	r21
     d6c:	6f 93       	push	r22
     d6e:	7f 93       	push	r23
     d70:	8f 93       	push	r24
     d72:	9f 93       	push	r25
     d74:	af 93       	push	r26
     d76:	bf 93       	push	r27
     d78:	ef 93       	push	r30
     d7a:	ff 93       	push	r31
	print();
     d7c:	0e 94 1a 04 	call	0x834	; 0x834 <_Z5printv>
	cal_ratio();
     d80:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z9cal_ratiov>
	timer_cnt++;
     d84:	80 91 68 00 	lds	r24, 0x0068
     d88:	90 91 69 00 	lds	r25, 0x0069
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	90 93 69 00 	sts	0x0069, r25
     d92:	80 93 68 00 	sts	0x0068, r24
}
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	bf 91       	pop	r27
     d9c:	af 91       	pop	r26
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	7f 91       	pop	r23
     da4:	6f 91       	pop	r22
     da6:	5f 91       	pop	r21
     da8:	4f 91       	pop	r20
     daa:	3f 91       	pop	r19
     dac:	2f 91       	pop	r18
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <__vector_1>:

ISR(INT0_vect)
{
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	8f 93       	push	r24
     dc4:	9f 93       	push	r25
	encoder_pulse++;
     dc6:	80 91 66 00 	lds	r24, 0x0066
     dca:	90 91 67 00 	lds	r25, 0x0067
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	90 93 67 00 	sts	0x0067, r25
     dd4:	80 93 66 00 	sts	0x0066, r24
	pulse_ratio++;
     dd8:	80 91 79 00 	lds	r24, 0x0079
     ddc:	90 91 7a 00 	lds	r25, 0x007A
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	90 93 7a 00 	sts	0x007A, r25
     de6:	80 93 79 00 	sts	0x0079, r24
	if (pattern == 10) bridgeCounter++;
     dea:	80 91 60 00 	lds	r24, 0x0060
     dee:	8a 30       	cpi	r24, 0x0A	; 10
     df0:	51 f4       	brne	.+20     	; 0xe06 <__vector_1+0x4e>
     df2:	80 91 64 00 	lds	r24, 0x0064
     df6:	90 91 65 00 	lds	r25, 0x0065
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	90 93 65 00 	sts	0x0065, r25
     e00:	80 93 64 00 	sts	0x0064, r24
     e04:	04 c0       	rjmp	.+8      	; 0xe0e <__vector_1+0x56>
	else bridgeCounter = 0;
     e06:	10 92 65 00 	sts	0x0065, r1
     e0a:	10 92 64 00 	sts	0x0064, r1
}
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <_Z15check_crosslinev>:

bool check_crossline( void )
{
	sensor = sensor_cmp();
     e1c:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
     e20:	80 93 6a 00 	sts	0x006A, r24
	return (((sensor & 0b11111111) == 0b11111111) || ((sensor & 0b01111110) == 0b01111110));
     e24:	8f 3f       	cpi	r24, 0xFF	; 255
     e26:	39 f0       	breq	.+14     	; 0xe36 <_Z15check_crosslinev+0x1a>
     e28:	8e 77       	andi	r24, 0x7E	; 126
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	8e 37       	cpi	r24, 0x7E	; 126
     e2e:	09 f0       	breq	.+2      	; 0xe32 <_Z15check_crosslinev+0x16>
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	89 2f       	mov	r24, r25
     e34:	08 95       	ret
     e36:	81 e0       	ldi	r24, 0x01	; 1
}
     e38:	08 95       	ret

00000e3a <_Z15check_rightlinev>:
bool check_rightline( void )
{
	sensor = sensor_cmp();
     e3a:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
     e3e:	80 93 6a 00 	sts	0x006A, r24
	return (((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111));
     e42:	98 2f       	mov	r25, r24
     e44:	9f 70       	andi	r25, 0x0F	; 15
     e46:	9f 30       	cpi	r25, 0x0F	; 15
     e48:	39 f0       	breq	.+14     	; 0xe58 <_Z15check_rightlinev+0x1e>
     e4a:	8f 71       	andi	r24, 0x1F	; 31
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	8f 31       	cpi	r24, 0x1F	; 31
     e50:	09 f0       	breq	.+2      	; 0xe54 <_Z15check_rightlinev+0x1a>
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	89 2f       	mov	r24, r25
     e56:	08 95       	ret
     e58:	81 e0       	ldi	r24, 0x01	; 1
}
     e5a:	08 95       	ret

00000e5c <_Z14check_leftlinev>:
bool check_leftline( void )
{
	sensor = sensor_cmp();
     e5c:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
     e60:	80 93 6a 00 	sts	0x006A, r24
	return (((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000));
     e64:	98 2f       	mov	r25, r24
     e66:	90 7f       	andi	r25, 0xF0	; 240
     e68:	90 3f       	cpi	r25, 0xF0	; 240
     e6a:	39 f0       	breq	.+14     	; 0xe7a <_Z14check_leftlinev+0x1e>
     e6c:	88 7f       	andi	r24, 0xF8	; 248
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	88 3f       	cpi	r24, 0xF8	; 248
     e72:	09 f0       	breq	.+2      	; 0xe76 <_Z14check_leftlinev+0x1a>
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	89 2f       	mov	r24, r25
     e78:	08 95       	ret
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	08 95       	ret

00000e7e <main>:
uint16_t timer_cnt, encoder_pulse;
uint16_t bridgeCounter = 0;

int main(void)
{
	INIT();
     e7e:	0e 94 8a 05 	call	0xb14	; 0xb14 <_Z4INITv>
	sel_mode();
     e82:	0e 94 39 06 	call	0xc72	; 0xc72 <_Z8sel_modev>
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     e86:	8f e0       	ldi	r24, 0x0F	; 15
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	90 93 7d 00 	sts	0x007D, r25
     e8e:	80 93 7c 00 	sts	0x007C, r24
	set_encoder(15);
	if (get_switch2())
     e92:	0e 94 0b 02 	call	0x416	; 0x416 <_Z11get_switch2v>
     e96:	88 23       	and	r24, r24
     e98:	19 f0       	breq	.+6      	; 0xea0 <main+0x22>
	{
		servo_calibrate();
     e9a:	0e 94 05 06 	call	0xc0a	; 0xc0a <_Z15servo_calibratev>
     e9e:	16 c0       	rjmp	.+44     	; 0xecc <main+0x4e>
	}
	else
	{
		while (true)
		{
			sensor_cmp();
     ea0:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
			led7(encoder_pulse);
     ea4:	80 91 66 00 	lds	r24, 0x0066
     ea8:	90 91 67 00 	lds	r25, 0x0067
     eac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
			if (get_button(BTN0)) encoder_pulse = 0;
     eb0:	8d ef       	ldi	r24, 0xFD	; 253
     eb2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     eb6:	88 23       	and	r24, r24
     eb8:	21 f0       	breq	.+8      	; 0xec2 <main+0x44>
     eba:	10 92 67 00 	sts	0x0067, r1
     ebe:	10 92 66 00 	sts	0x0066, r1
			if (get_button(BTN1)) break;
     ec2:	8b ef       	ldi	r24, 0xFB	; 251
     ec4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z10get_buttonh>
     ec8:	88 23       	and	r24, r24
     eca:	51 f3       	breq	.-44     	; 0xea0 <main+0x22>
		}
	}
	
	pattern = 10; /* Chay thang */
     ecc:	8a e0       	ldi	r24, 0x0A	; 10
     ece:	80 93 60 00 	sts	0x0060, r24
					pattern = 10;
				};
			break; /* case 99 */
				
			default:
				pattern = 10;
     ed2:	0f 2e       	mov	r0, r31
     ed4:	fa e0       	ldi	r31, 0x0A	; 10
     ed6:	9f 2e       	mov	r9, r31
     ed8:	f0 2d       	mov	r31, r0
     eda:	0c e0       	ldi	r16, 0x0C	; 12
     edc:	10 e0       	ldi	r17, 0x00	; 0
     ede:	aa 24       	eor	r10, r10
     ee0:	aa 94       	dec	r10
     ee2:	ba 2c       	mov	r11, r10
			case 62:
				led7(62);
				
				handle(35);
				speed(50 ,35);
				pattern = 63;
     ee4:	0f 2e       	mov	r0, r31
     ee6:	ff e3       	ldi	r31, 0x3F	; 63
     ee8:	6f 2e       	mov	r6, r31
     eea:	f0 2d       	mov	r31, r0
     eec:	ca e0       	ldi	r28, 0x0A	; 10
     eee:	d0 e0       	ldi	r29, 0x00	; 0
				led7(61);
				set_encoder(10);
				sensor = sensor_cmp();
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11111000) == 0b11111000))
				{
					pattern = 21;
     ef0:	0f 2e       	mov	r0, r31
     ef2:	f5 e1       	ldi	r31, 0x15	; 21
     ef4:	8f 2e       	mov	r8, r31
     ef6:	f0 2d       	mov	r31, r0
				
				speed(50, 50);
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
				{
					pattern = 62;
     ef8:	0f 2e       	mov	r0, r31
     efa:	fe e3       	ldi	r31, 0x3E	; 62
     efc:	3f 2e       	mov	r3, r31
     efe:	f0 2d       	mov	r31, r0
			case 52:
				led7(52);
				
				handle(-30);
				speed( 35 ,50 );
				pattern = 53;
     f00:	0f 2e       	mov	r0, r31
     f02:	f5 e3       	ldi	r31, 0x35	; 53
     f04:	7f 2e       	mov	r7, r31
     f06:	f0 2d       	mov	r31, r0
			case 41:
				led7(41);
				
				if( timer_cnt > 200 )
				{
					pattern = 42;
     f08:	0f 2e       	mov	r0, r31
     f0a:	fa e2       	ldi	r31, 0x2A	; 42
     f0c:	5f 2e       	mov	r5, r31
     f0e:	f0 2d       	mov	r31, r0
			case 31:
				led7(31);
				
				if( timer_cnt > 200 )
				{
					pattern = 32;
     f10:	68 94       	set
     f12:	44 24       	eor	r4, r4
     f14:	45 f8       	bld	r4, 5
	
	pattern = 10; /* Chay thang */
	
    while (true)
    {
        switch (pattern)
     f16:	80 91 60 00 	lds	r24, 0x0060
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	fc 01       	movw	r30, r24
     f1e:	3a 97       	sbiw	r30, 0x0a	; 10
     f20:	ea 35       	cpi	r30, 0x5A	; 90
     f22:	f1 05       	cpc	r31, r1
     f24:	08 f0       	brcs	.+2      	; 0xf28 <main+0xaa>
     f26:	b9 c4       	rjmp	.+2418   	; 0x189a <main+0xa1c>
     f28:	e6 5d       	subi	r30, 0xD6	; 214
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__tablejump2__>
		{
			/* Chay thang */
			case 10:
				led7(10);
     f30:	ce 01       	movw	r24, r28
     f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
     f36:	10 93 7d 00 	sts	0x007D, r17
     f3a:	00 93 7c 00 	sts	0x007C, r16
				set_encoder(12);
				if (check_crossline())     /* Cua vuong */
     f3e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_Z15check_crosslinev>
     f42:	88 23       	and	r24, r24
     f44:	19 f0       	breq	.+6      	; 0xf4c <main+0xce>
				{
					pattern = 21;
     f46:	80 92 60 00 	sts	0x0060, r8
					break;
     f4a:	e5 cf       	rjmp	.-54     	; 0xf16 <main+0x98>
				}
				else if (check_leftline()) /* Chuyen lan trai */
     f4c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_Z14check_leftlinev>
     f50:	88 23       	and	r24, r24
     f52:	61 f0       	breq	.+24     	; 0xf6c <main+0xee>
				{
					pattern = 51;
     f54:	83 e3       	ldi	r24, 0x33	; 51
     f56:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
     f5a:	10 92 69 00 	sts	0x0069, r1
     f5e:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
     f62:	10 92 67 00 	sts	0x0067, r1
     f66:	10 92 66 00 	sts	0x0066, r1
					break;
     f6a:	d5 cf       	rjmp	.-86     	; 0xf16 <main+0x98>
				}
				else if (check_rightline()) /* Chuyen lan phai */
     f6c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <_Z15check_rightlinev>
     f70:	88 23       	and	r24, r24
     f72:	61 f0       	breq	.+24     	; 0xf8c <main+0x10e>
				{
					pattern = 61;
     f74:	8d e3       	ldi	r24, 0x3D	; 61
     f76:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
     f7a:	10 92 69 00 	sts	0x0069, r1
     f7e:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
     f82:	10 92 67 00 	sts	0x0067, r1
     f86:	10 92 66 00 	sts	0x0066, r1
					break;
     f8a:	c5 cf       	rjmp	.-118    	; 0xf16 <main+0x98>
				}
				
				if ((get_speed() > 9))
     f8c:	80 91 61 00 	lds	r24, 0x0061
     f90:	8a 30       	cpi	r24, 0x0A	; 10
     f92:	18 f0       	brcs	.+6      	; 0xf9a <main+0x11c>
				{
					pattern = 99;
     f94:	83 e6       	ldi	r24, 0x63	; 99
     f96:	80 93 60 00 	sts	0x0060, r24
				}
				
				switch (sensor_cmp() & 0b01111110)
     f9a:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
     f9e:	8e 77       	andi	r24, 0x7E	; 126
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	fc 01       	movw	r30, r24
     fa4:	32 97       	sbiw	r30, 0x02	; 2
     fa6:	ef 36       	cpi	r30, 0x6F	; 111
     fa8:	f1 05       	cpc	r31, r1
     faa:	08 f0       	brcs	.+2      	; 0xfae <main+0x130>
     fac:	b4 cf       	rjmp	.-152    	; 0xf16 <main+0x98>
     fae:	ec 57       	subi	r30, 0x7C	; 124
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
						handle(0);
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
						speed( 100 ,100 );
     fbe:	64 e6       	ldi	r22, 0x64	; 100
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	84 e6       	ldi	r24, 0x64	; 100
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
					break;
     fca:	a5 cf       	rjmp	.-182    	; 0xf16 <main+0x98>
					
					case 0b00011100:
					case 0b00001000:
						speed(100,100);
     fcc:	64 e6       	ldi	r22, 0x64	; 100
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	84 e6       	ldi	r24, 0x64	; 100
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(9 + addition_handle);
     fd8:	8e e0       	ldi	r24, 0x0E	; 14
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
     fe0:	9a cf       	rjmp	.-204    	; 0xf16 <main+0x98>
					case 0b00001100:
						speed(100,100);
     fe2:	64 e6       	ldi	r22, 0x64	; 100
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	84 e6       	ldi	r24, 0x64	; 100
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(20 + addition_handle);
     fee:	89 e1       	ldi	r24, 0x19	; 25
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
     ff6:	8f cf       	rjmp	.-226    	; 0xf16 <main+0x98>
					case 0b00001110:
					case 0b00000100:
						speed(100,85);
     ff8:	65 e5       	ldi	r22, 0x55	; 85
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	84 e6       	ldi	r24, 0x64	; 100
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(31 + addition_handle);
    1004:	84 e2       	ldi	r24, 0x24	; 36
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    100c:	84 cf       	rjmp	.-248    	; 0xf16 <main+0x98>
					case 0b00000110:
						speed(100,80);
    100e:	60 e5       	ldi	r22, 0x50	; 80
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	84 e6       	ldi	r24, 0x64	; 100
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(50 + addition_handle);
    101a:	87 e3       	ldi	r24, 0x37	; 55
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1022:	79 cf       	rjmp	.-270    	; 0xf16 <main+0x98>
					case 0b00000010:
						speed(100,70);
    1024:	66 e4       	ldi	r22, 0x46	; 70
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	84 e6       	ldi	r24, 0x64	; 100
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(75 + addition_handle);
    1030:	80 e5       	ldi	r24, 0x50	; 80
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
						pattern=11;	/* Lech phai goc lon */ /*Moi sua*/
    1038:	8b e0       	ldi	r24, 0x0B	; 11
    103a:	80 93 60 00 	sts	0x0060, r24
					break;		
    103e:	6b cf       	rjmp	.-298    	; 0xf16 <main+0x98>
					
					case 0b00111000:
					case 0b00010000:
						speed(100,100);
    1040:	64 e6       	ldi	r22, 0x64	; 100
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	84 e6       	ldi	r24, 0x64	; 100
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(-9 - addition_handle);
    104c:	82 ef       	ldi	r24, 0xF2	; 242
    104e:	9f ef       	ldi	r25, 0xFF	; 255
    1050:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1054:	60 cf       	rjmp	.-320    	; 0xf16 <main+0x98>
					case 0b00110000:
						speed(100,100);
    1056:	64 e6       	ldi	r22, 0x64	; 100
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	84 e6       	ldi	r24, 0x64	; 100
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(-20- addition_handle);
    1062:	87 ee       	ldi	r24, 0xE7	; 231
    1064:	9f ef       	ldi	r25, 0xFF	; 255
    1066:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    106a:	55 cf       	rjmp	.-342    	; 0xf16 <main+0x98>
					case 0b01110000:
					case 0b00100000:
						speed(85,100);
    106c:	64 e6       	ldi	r22, 0x64	; 100
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	85 e5       	ldi	r24, 0x55	; 85
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(-31 - addition_handle);
    1078:	8c ed       	ldi	r24, 0xDC	; 220
    107a:	9f ef       	ldi	r25, 0xFF	; 255
    107c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1080:	4a cf       	rjmp	.-364    	; 0xf16 <main+0x98>
					case 0b01100000:
						speed(80,100);
    1082:	64 e6       	ldi	r22, 0x64	; 100
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	80 e5       	ldi	r24, 0x50	; 80
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(-50 - addition_handle);
    108e:	89 ec       	ldi	r24, 0xC9	; 201
    1090:	9f ef       	ldi	r25, 0xFF	; 255
    1092:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1096:	3f cf       	rjmp	.-386    	; 0xf16 <main+0x98>
					case 0b01000000:
						speed(70,100);
    1098:	64 e6       	ldi	r22, 0x64	; 100
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	86 e4       	ldi	r24, 0x46	; 70
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(-75 - addition_handle);
    10a4:	80 eb       	ldi	r24, 0xB0	; 176
    10a6:	9f ef       	ldi	r25, 0xFF	; 255
    10a8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
						pattern=12; /* Lech trai goc lon */ /*Moi sua*/
    10ac:	8c e0       	ldi	r24, 0x0C	; 12
    10ae:	80 93 60 00 	sts	0x0060, r24
					break;
    10b2:	31 cf       	rjmp	.-414    	; 0xf16 <main+0x98>
				}
			break; /* case 10 */
			
			/* Lech phai goc lon */
			case 11:
				led7(11);
    10b4:	8b e0       	ldi	r24, 0x0B	; 11
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				switch (sensor_cmp() & 0b11001100)
    10bc:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
    10c0:	8c 7c       	andi	r24, 0xCC	; 204
    10c2:	8c 30       	cpi	r24, 0x0C	; 12
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <main+0x24a>
    10c6:	4f c0       	rjmp	.+158    	; 0x1166 <main+0x2e8>
    10c8:	28 f4       	brcc	.+10     	; 0x10d4 <main+0x256>
    10ca:	88 23       	and	r24, r24
    10cc:	69 f1       	breq	.+90     	; 0x1128 <main+0x2aa>
    10ce:	84 30       	cpi	r24, 0x04	; 4
    10d0:	d9 f1       	breq	.+118    	; 0x1148 <main+0x2ca>
    10d2:	5e c0       	rjmp	.+188    	; 0x1190 <main+0x312>
    10d4:	80 38       	cpi	r24, 0x80	; 128
    10d6:	b9 f0       	breq	.+46     	; 0x1106 <main+0x288>
    10d8:	80 3c       	cpi	r24, 0xC0	; 192
    10da:	21 f0       	breq	.+8      	; 0x10e4 <main+0x266>
    10dc:	80 36       	cpi	r24, 0x60	; 96
    10de:	09 f0       	breq	.+2      	; 0x10e2 <main+0x264>
    10e0:	57 c0       	rjmp	.+174    	; 0x1190 <main+0x312>
    10e2:	52 c0       	rjmp	.+164    	; 0x1188 <main+0x30a>
    10e4:	86 e0       	ldi	r24, 0x06	; 6
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	90 93 7d 00 	sts	0x007D, r25
    10ec:	80 93 7c 00 	sts	0x007C, r24
				{
					case 0b11000000:
						set_encoder(6/*5*/);
						speed(80, /*0*/-10);
    10f0:	66 ef       	ldi	r22, 0xF6	; 246
    10f2:	7f ef       	ldi	r23, 0xFF	; 255
    10f4:	80 e5       	ldi	r24, 0x50	; 80
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(115/*95*/ + addition_handle);/* sua 95 */
    10fc:	88 e7       	ldi	r24, 0x78	; 120
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1104:	08 cf       	rjmp	.-496    	; 0xf16 <main+0x98>
    1106:	86 e0       	ldi	r24, 0x06	; 6
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	90 93 7d 00 	sts	0x007D, r25
    110e:	80 93 7c 00 	sts	0x007C, r24
					
					case 0b10000000:
						set_encoder(6/*5*/);
						speed(80, /*15*/5);
    1112:	65 e0       	ldi	r22, 0x05	; 5
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	80 e5       	ldi	r24, 0x50	; 80
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(100/*80*/ + addition_handle);/* sua 80*/
    111e:	89 e6       	ldi	r24, 0x69	; 105
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1126:	f7 ce       	rjmp	.-530    	; 0xf16 <main+0x98>
    1128:	88 e0       	ldi	r24, 0x08	; 8
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	90 93 7d 00 	sts	0x007D, r25
    1130:	80 93 7c 00 	sts	0x007C, r24
					
					case 0b00000000:
						set_encoder(8/*7*/);
						speed(80, /*20*/10);
    1134:	be 01       	movw	r22, r28
    1136:	80 e5       	ldi	r24, 0x50	; 80
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(78/*68*/ + addition_handle);
    113e:	83 e5       	ldi	r24, 0x53	; 83
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1146:	e7 ce       	rjmp	.-562    	; 0xf16 <main+0x98>
    1148:	d0 93 7d 00 	sts	0x007D, r29
    114c:	c0 93 7c 00 	sts	0x007C, r28
					
					case 0b00000100:
						set_encoder(10/*9*/);
						speed(80, /*25*/15);
    1150:	6f e0       	ldi	r22, 0x0F	; 15
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	80 e5       	ldi	r24, 0x50	; 80
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(60/*50*/ + addition_handle);
    115c:	81 e4       	ldi	r24, 0x41	; 65
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1164:	d8 ce       	rjmp	.-592    	; 0xf16 <main+0x98>
					
					case 0b00001100:
						speed(80, /*30*/20);
    1166:	64 e1       	ldi	r22, 0x14	; 20
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	80 e5       	ldi	r24, 0x50	; 80
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(50/*42*/ + addition_handle);
    1172:	87 e3       	ldi	r24, 0x37	; 55
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
						pattern = 10;
    117a:	90 92 60 00 	sts	0x0060, r9
    117e:	b0 92 7d 00 	sts	0x007D, r11
    1182:	a0 92 7c 00 	sts	0x007C, r10
    1186:	c7 ce       	rjmp	.-626    	; 0xf16 <main+0x98>
						set_encoder(-1);
					break;
					
					case 0b01100000:
						pattern=12;
    1188:	8c e0       	ldi	r24, 0x0C	; 12
    118a:	80 93 60 00 	sts	0x0060, r24
					break;
    118e:	c3 ce       	rjmp	.-634    	; 0xf16 <main+0x98>
					
					default:
						pattern=11;
    1190:	8b e0       	ldi	r24, 0x0B	; 11
    1192:	80 93 60 00 	sts	0x0060, r24
					break;
    1196:	bf ce       	rjmp	.-642    	; 0xf16 <main+0x98>
				}
			break; /* case 11 */
			
			/* Lech trai goc lon */
			case 12:
				led7(12);
    1198:	c8 01       	movw	r24, r16
    119a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
    119e:	d0 93 7d 00 	sts	0x007D, r29
    11a2:	c0 93 7c 00 	sts	0x007C, r28
				set_encoder(10);
				switch(sensor_cmp() & 0b00110011)
    11a6:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
    11aa:	83 73       	andi	r24, 0x33	; 51
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	71 f0       	breq	.+28     	; 0x11cc <main+0x34e>
    11b0:	28 f4       	brcc	.+10     	; 0x11bc <main+0x33e>
    11b2:	88 23       	and	r24, r24
    11b4:	09 f1       	breq	.+66     	; 0x11f8 <main+0x37a>
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	a1 f0       	breq	.+40     	; 0x11e2 <main+0x364>
    11ba:	52 c0       	rjmp	.+164    	; 0x1260 <main+0x3e2>
    11bc:	80 32       	cpi	r24, 0x20	; 32
    11be:	61 f1       	breq	.+88     	; 0x1218 <main+0x39a>
    11c0:	80 33       	cpi	r24, 0x30	; 48
    11c2:	c9 f1       	breq	.+114    	; 0x1236 <main+0x3b8>
    11c4:	86 30       	cpi	r24, 0x06	; 6
    11c6:	09 f0       	breq	.+2      	; 0x11ca <main+0x34c>
    11c8:	4b c0       	rjmp	.+150    	; 0x1260 <main+0x3e2>
    11ca:	46 c0       	rjmp	.+140    	; 0x1258 <main+0x3da>
				{
					case 0b00000011:
						speed_wait(5);
						speed(/*0*/-10,80);
    11cc:	60 e5       	ldi	r22, 0x50	; 80
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	86 ef       	ldi	r24, 0xF6	; 246
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(-115/*-95*/ - addition_handle);/*sua -95*/
    11d8:	88 e8       	ldi	r24, 0x88	; 136
    11da:	9f ef       	ldi	r25, 0xFF	; 255
    11dc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    11e0:	9a ce       	rjmp	.-716    	; 0xf16 <main+0x98>
					
					case 0b00000001:
						speed_wait(5);
						speed(/*15*/5,80);
    11e2:	60 e5       	ldi	r22, 0x50	; 80
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	85 e0       	ldi	r24, 0x05	; 5
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(/*-80*/-100 - addition_handle);/*sua -80*/
    11ee:	87 e9       	ldi	r24, 0x97	; 151
    11f0:	9f ef       	ldi	r25, 0xFF	; 255
    11f2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    11f6:	8f ce       	rjmp	.-738    	; 0xf16 <main+0x98>
    11f8:	88 e0       	ldi	r24, 0x08	; 8
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	90 93 7d 00 	sts	0x007D, r25
    1200:	80 93 7c 00 	sts	0x007C, r24
					
					case 0b00000000:
						set_encoder(8/*7*/);
						speed(/*20*/10,80);
    1204:	60 e5       	ldi	r22, 0x50	; 80
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	ce 01       	movw	r24, r28
    120a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(/*-68*/-78 - addition_handle);
    120e:	8d ea       	ldi	r24, 0xAD	; 173
    1210:	9f ef       	ldi	r25, 0xFF	; 255
    1212:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1216:	7f ce       	rjmp	.-770    	; 0xf16 <main+0x98>
    1218:	d0 93 7d 00 	sts	0x007D, r29
    121c:	c0 93 7c 00 	sts	0x007C, r28
					
					case 0b00100000:
						set_encoder(10/*9*/);
						speed(/*25*/15,80);
    1220:	60 e5       	ldi	r22, 0x50	; 80
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	8f e0       	ldi	r24, 0x0F	; 15
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(/*-50*/-60 - addition_handle);
    122c:	8f eb       	ldi	r24, 0xBF	; 191
    122e:	9f ef       	ldi	r25, 0xFF	; 255
    1230:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1234:	70 ce       	rjmp	.-800    	; 0xf16 <main+0x98>
					
					case 0b00110000:
						speed(/*30*/20,80);
    1236:	60 e5       	ldi	r22, 0x50	; 80
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	84 e1       	ldi	r24, 0x14	; 20
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
						handle(/*-42*/ - addition_handle);
    1242:	8b ef       	ldi	r24, 0xFB	; 251
    1244:	9f ef       	ldi	r25, 0xFF	; 255
    1246:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
						pattern = 10;
    124a:	90 92 60 00 	sts	0x0060, r9
    124e:	b0 92 7d 00 	sts	0x007D, r11
    1252:	a0 92 7c 00 	sts	0x007C, r10
    1256:	5f ce       	rjmp	.-834    	; 0xf16 <main+0x98>
						set_encoder(-1);
					break;
					
					case 0b00000110:
						pattern=11;
    1258:	8b e0       	ldi	r24, 0x0B	; 11
    125a:	80 93 60 00 	sts	0x0060, r24
					break;
    125e:	5b ce       	rjmp	.-842    	; 0xf16 <main+0x98>
					
					default:
						pattern=12;
    1260:	8c e0       	ldi	r24, 0x0C	; 12
    1262:	80 93 60 00 	sts	0x0060, r24
					break;
    1266:	57 ce       	rjmp	.-850    	; 0xf16 <main+0x98>
				}
			break; /* case 12 */
			
			/* Cua vuong */
			case 21:
				led7(21);
    1268:	85 e1       	ldi	r24, 0x15	; 21
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				
				handle(0);
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
				speed(-40,-40);
    1278:	68 ed       	ldi	r22, 0xD8	; 216
    127a:	7f ef       	ldi	r23, 0xFF	; 255
    127c:	88 ed       	ldi	r24, 0xD8	; 216
    127e:	9f ef       	ldi	r25, 0xFF	; 255
    1280:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
				timer_cnt = 0;
    1284:	10 92 69 00 	sts	0x0069, r1
    1288:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    128c:	10 92 67 00 	sts	0x0067, r1
    1290:	10 92 66 00 	sts	0x0066, r1
				pattern = 22;
    1294:	86 e1       	ldi	r24, 0x16	; 22
    1296:	80 93 60 00 	sts	0x0060, r24
			break; /* case 21 */
    129a:	3d ce       	rjmp	.-902    	; 0xf16 <main+0x98>
			
			case 22:
				led7(22);
    129c:	86 e1       	ldi	r24, 0x16	; 22
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				
				//if( timer_cnt > (300 - (delay * 200)) || encoder_pulse > 20 )
				if (speed_wait(3)) /*important*/
    12a4:	80 91 61 00 	lds	r24, 0x0061
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	a8 f4       	brcc	.+42     	; 0x12d6 <main+0x458>
    12ac:	d0 93 7d 00 	sts	0x007D, r29
    12b0:	c0 93 7c 00 	sts	0x007C, r28
				{
					set_encoder(10);
					speed(70, 70);
    12b4:	66 e4       	ldi	r22, 0x46	; 70
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	86 e4       	ldi	r24, 0x46	; 70
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
					pattern = 23;
    12c0:	87 e1       	ldi	r24, 0x17	; 23
    12c2:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    12c6:	10 92 69 00 	sts	0x0069, r1
    12ca:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    12ce:	10 92 67 00 	sts	0x0067, r1
    12d2:	10 92 66 00 	sts	0x0066, r1
				}
				
				switch (sensor_cmp() & 0b01111110)
    12d6:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
    12da:	8e 77       	andi	r24, 0x7E	; 126
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	fc 01       	movw	r30, r24
    12e0:	32 97       	sbiw	r30, 0x02	; 2
    12e2:	ef 36       	cpi	r30, 0x6F	; 111
    12e4:	f1 05       	cpc	r31, r1
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <main+0x46c>
    12e8:	16 ce       	rjmp	.-980    	; 0xf16 <main+0x98>
    12ea:	ed 50       	subi	r30, 0x0D	; 13
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle( 0 );
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    12fa:	0d ce       	rjmp	.-998    	; 0xf16 <main+0x98>
					
					case 0b00011100:
					case 0b00001000:
					handle(9 + addition_handle);
    12fc:	8e e0       	ldi	r24, 0x0E	; 14
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1304:	08 ce       	rjmp	.-1008   	; 0xf16 <main+0x98>
					case 0b00001100:
					handle(17 + addition_handle);
    1306:	86 e1       	ldi	r24, 0x16	; 22
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    130e:	03 ce       	rjmp	.-1018   	; 0xf16 <main+0x98>
					case 0b00001110:
					case 0b00000100:
					handle(31 + addition_handle);
    1310:	84 e2       	ldi	r24, 0x24	; 36
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1318:	fe cd       	rjmp	.-1028   	; 0xf16 <main+0x98>
					case 0b00000110:
					handle(50 + addition_handle);
    131a:	87 e3       	ldi	r24, 0x37	; 55
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1322:	f9 cd       	rjmp	.-1038   	; 0xf16 <main+0x98>
					case 0b00000010:
					handle(75 + addition_handle);
    1324:	80 e5       	ldi	r24, 0x50	; 80
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    132c:	f4 cd       	rjmp	.-1048   	; 0xf16 <main+0x98>
					
					case 0b00111000:
					case 0b00010000:
					handle(-9 - addition_handle);
    132e:	82 ef       	ldi	r24, 0xF2	; 242
    1330:	9f ef       	ldi	r25, 0xFF	; 255
    1332:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1336:	ef cd       	rjmp	.-1058   	; 0xf16 <main+0x98>
					case 0b00110000:
					handle(-17 - addition_handle);
    1338:	8a ee       	ldi	r24, 0xEA	; 234
    133a:	9f ef       	ldi	r25, 0xFF	; 255
    133c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1340:	ea cd       	rjmp	.-1068   	; 0xf16 <main+0x98>
					case 0b01110000:
					case 0b00100000:
					handle(-31 - addition_handle);
    1342:	8c ed       	ldi	r24, 0xDC	; 220
    1344:	9f ef       	ldi	r25, 0xFF	; 255
    1346:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    134a:	e5 cd       	rjmp	.-1078   	; 0xf16 <main+0x98>
					case 0b01100000:
					handle(-50 - addition_handle);
    134c:	89 ec       	ldi	r24, 0xC9	; 201
    134e:	9f ef       	ldi	r25, 0xFF	; 255
    1350:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1354:	e0 cd       	rjmp	.-1088   	; 0xf16 <main+0x98>
					case 0b01000000:
					handle(-75 - addition_handle);
    1356:	80 eb       	ldi	r24, 0xB0	; 176
    1358:	9f ef       	ldi	r25, 0xFF	; 255
    135a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    135e:	db cd       	rjmp	.-1098   	; 0xf16 <main+0x98>
					break;
				}
			break; /* case 22 */
			
			case 23:
				led7(23);
    1360:	87 e1       	ldi	r24, 0x17	; 23
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				
				sensor = sensor_cmp();
    1368:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
    136c:	80 93 6a 00 	sts	0x006A, r24
				/* Cua trai */
				if(((encoder_pulse > 5) /*|| (timer_cnt > 150)*/) &&(((sensor & 0b11111000) == 0b11111000)  || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11100000) == 0b11100000)))	/* Neu gap tin hieu nay la goc cua 90 trai thi be */
    1370:	20 91 66 00 	lds	r18, 0x0066
    1374:	30 91 67 00 	lds	r19, 0x0067
    1378:	26 30       	cpi	r18, 0x06	; 6
    137a:	31 05       	cpc	r19, r1
    137c:	80 f1       	brcs	.+96     	; 0x13de <main+0x560>
    137e:	98 2f       	mov	r25, r24
    1380:	98 7f       	andi	r25, 0xF8	; 248
    1382:	98 3f       	cpi	r25, 0xF8	; 248
    1384:	41 f0       	breq	.+16     	; 0x1396 <main+0x518>
    1386:	98 2f       	mov	r25, r24
    1388:	90 7f       	andi	r25, 0xF0	; 240
    138a:	90 3f       	cpi	r25, 0xF0	; 240
    138c:	21 f0       	breq	.+8      	; 0x1396 <main+0x518>
    138e:	98 2f       	mov	r25, r24
    1390:	90 7e       	andi	r25, 0xE0	; 224
    1392:	90 3e       	cpi	r25, 0xE0	; 224
    1394:	61 f4       	brne	.+24     	; 0x13ae <main+0x530>
    1396:	b0 92 7d 00 	sts	0x007D, r11
    139a:	a0 92 7c 00 	sts	0x007C, r10
				{
					set_encoder(-1);
					pattern = 26;
    139e:	8a e1       	ldi	r24, 0x1A	; 26
    13a0:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    13a4:	10 92 69 00 	sts	0x0069, r1
    13a8:	10 92 68 00 	sts	0x0068, r1
					break;
    13ac:	b4 cd       	rjmp	.-1176   	; 0xf16 <main+0x98>
				}
				/* Cua phai */
				if(((encoder_pulse > 5) /*|| (timer_cnt > 150)*/) && (((sensor & 0b00011111) == 0b00011111 ) ||((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111))) /* Neu gap tin hieu nay la goc cua 90 phai thi be */
    13ae:	98 2f       	mov	r25, r24
    13b0:	9f 71       	andi	r25, 0x1F	; 31
    13b2:	9f 31       	cpi	r25, 0x1F	; 31
    13b4:	41 f0       	breq	.+16     	; 0x13c6 <main+0x548>
    13b6:	98 2f       	mov	r25, r24
    13b8:	97 70       	andi	r25, 0x07	; 7
    13ba:	97 30       	cpi	r25, 0x07	; 7
    13bc:	21 f0       	breq	.+8      	; 0x13c6 <main+0x548>
    13be:	98 2f       	mov	r25, r24
    13c0:	9f 70       	andi	r25, 0x0F	; 15
    13c2:	9f 30       	cpi	r25, 0x0F	; 15
    13c4:	61 f4       	brne	.+24     	; 0x13de <main+0x560>
    13c6:	b0 92 7d 00 	sts	0x007D, r11
    13ca:	a0 92 7c 00 	sts	0x007C, r10
				{
					set_encoder(-1);
					pattern = 27;
    13ce:	8b e1       	ldi	r24, 0x1B	; 27
    13d0:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    13d4:	10 92 69 00 	sts	0x0069, r1
    13d8:	10 92 68 00 	sts	0x0068, r1
					break;
    13dc:	9c cd       	rjmp	.-1224   	; 0xf16 <main+0x98>
				}
				/* No line */
				if ((sensor & 0b01111110) == 0x00)
    13de:	8e 77       	andi	r24, 0x7E	; 126
    13e0:	a9 f4       	brne	.+42     	; 0x140c <main+0x58e>
				{ 
					pattern = 73;
    13e2:	89 e4       	ldi	r24, 0x49	; 73
    13e4:	80 93 60 00 	sts	0x0060, r24
					handle(0);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					speed(100, 100);
    13f0:	64 e6       	ldi	r22, 0x64	; 100
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	84 e6       	ldi	r24, 0x64	; 100
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
					timer_cnt = 0;
    13fc:	10 92 69 00 	sts	0x0069, r1
    1400:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    1404:	10 92 67 00 	sts	0x0067, r1
    1408:	10 92 66 00 	sts	0x0066, r1
				}
				
				/* Nguoc lai thi chinh thang cho xe */
				switch (sensor & 0b01111110)
    140c:	80 91 6a 00 	lds	r24, 0x006A
    1410:	8e 77       	andi	r24, 0x7E	; 126
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	fc 01       	movw	r30, r24
    1416:	32 97       	sbiw	r30, 0x02	; 2
    1418:	ef 36       	cpi	r30, 0x6F	; 111
    141a:	f1 05       	cpc	r31, r1
    141c:	08 f0       	brcs	.+2      	; 0x1420 <main+0x5a2>
    141e:	7b cd       	rjmp	.-1290   	; 0xf16 <main+0x98>
    1420:	ee 59       	subi	r30, 0x9E	; 158
    1422:	fe 4f       	sbci	r31, 0xFE	; 254
    1424:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
					handle( 0 );
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					//speed( 100 ,100 );
					break;
    1430:	72 cd       	rjmp	.-1308   	; 0xf16 <main+0x98>
					
					case 0b00011100:
					case 0b00001000:
					//speed(100,100);
					handle(9 + addition_handle);
    1432:	8e e0       	ldi	r24, 0x0E	; 14
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    143a:	6d cd       	rjmp	.-1318   	; 0xf16 <main+0x98>
					case 0b00001100:
					//speed(100,100);
					handle(17 + addition_handle);
    143c:	86 e1       	ldi	r24, 0x16	; 22
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1444:	68 cd       	rjmp	.-1328   	; 0xf16 <main+0x98>
					case 0b00001110:
					case 0b00000100:
					//speed(100,85);
					handle(31 + addition_handle);
    1446:	84 e2       	ldi	r24, 0x24	; 36
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    144e:	63 cd       	rjmp	.-1338   	; 0xf16 <main+0x98>
					case 0b00000110:
					//speed(100,80);
					handle(50 + addition_handle);
    1450:	87 e3       	ldi	r24, 0x37	; 55
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1458:	5e cd       	rjmp	.-1348   	; 0xf16 <main+0x98>
					case 0b00000010:
					//speed(100,70);
					handle(75 + addition_handle);
    145a:	80 e5       	ldi	r24, 0x50	; 80
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1462:	59 cd       	rjmp	.-1358   	; 0xf16 <main+0x98>
					
					case 0b00111000:
					case 0b00010000:
					//speed(100,100);
					handle(-9 - addition_handle);
    1464:	82 ef       	ldi	r24, 0xF2	; 242
    1466:	9f ef       	ldi	r25, 0xFF	; 255
    1468:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    146c:	54 cd       	rjmp	.-1368   	; 0xf16 <main+0x98>
					case 0b00110000:
					//speed(100,100);
					handle(-17 - addition_handle);
    146e:	8a ee       	ldi	r24, 0xEA	; 234
    1470:	9f ef       	ldi	r25, 0xFF	; 255
    1472:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1476:	4f cd       	rjmp	.-1378   	; 0xf16 <main+0x98>
					case 0b01110000:
					case 0b00100000:
					//speed(85,100);
					handle(-31 - addition_handle);
    1478:	8c ed       	ldi	r24, 0xDC	; 220
    147a:	9f ef       	ldi	r25, 0xFF	; 255
    147c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1480:	4a cd       	rjmp	.-1388   	; 0xf16 <main+0x98>
					case 0b01100000:
					//speed(80,100);
					handle(-50 - addition_handle);
    1482:	89 ec       	ldi	r24, 0xC9	; 201
    1484:	9f ef       	ldi	r25, 0xFF	; 255
    1486:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    148a:	45 cd       	rjmp	.-1398   	; 0xf16 <main+0x98>
					case 0b01000000:
					//speed(70,100);
					handle(-75 - addition_handle);
    148c:	80 eb       	ldi	r24, 0xB0	; 176
    148e:	9f ef       	ldi	r25, 0xFF	; 255
    1490:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					break;
    1494:	40 cd       	rjmp	.-1408   	; 0xf16 <main+0x98>
					break;
				}
			break; /* case 23 */
			
			case 26: /* trai */
				led7(26);
    1496:	8a e1       	ldi	r24, 0x1A	; 26
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				
				handle( -150  - addition_handle); /* -120 */
    149e:	85 e6       	ldi	r24, 0x65	; 101
    14a0:	9f ef       	ldi	r25, 0xFF	; 255
    14a2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
				speed( -80 , 80 );
    14a6:	60 e5       	ldi	r22, 0x50	; 80
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	80 eb       	ldi	r24, 0xB0	; 176
    14ac:	9f ef       	ldi	r25, 0xFF	; 255
    14ae:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
				pattern = 31;
    14b2:	8f e1       	ldi	r24, 0x1F	; 31
    14b4:	80 93 60 00 	sts	0x0060, r24
				timer_cnt = 0;
    14b8:	10 92 69 00 	sts	0x0069, r1
    14bc:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    14c0:	10 92 67 00 	sts	0x0067, r1
    14c4:	10 92 66 00 	sts	0x0066, r1
			break; /* case 26 */
    14c8:	26 cd       	rjmp	.-1460   	; 0xf16 <main+0x98>
			
			case 27: /* phai */
				led7(27);
    14ca:	8b e1       	ldi	r24, 0x1B	; 27
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				
				handle( 150  + addition_handle); /* 120 */
    14d2:	8b e9       	ldi	r24, 0x9B	; 155
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
				speed( 80 , -80 );
    14da:	60 eb       	ldi	r22, 0xB0	; 176
    14dc:	7f ef       	ldi	r23, 0xFF	; 255
    14de:	80 e5       	ldi	r24, 0x50	; 80
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
				pattern = 41;
    14e6:	89 e2       	ldi	r24, 0x29	; 41
    14e8:	80 93 60 00 	sts	0x0060, r24
				timer_cnt = 0;
    14ec:	10 92 69 00 	sts	0x0069, r1
    14f0:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    14f4:	10 92 67 00 	sts	0x0067, r1
    14f8:	10 92 66 00 	sts	0x0066, r1
			break; /* case 27 */
    14fc:	0c cd       	rjmp	.-1512   	; 0xf16 <main+0x98>
			
			case 31:
				led7(31);
    14fe:	8f e1       	ldi	r24, 0x1F	; 31
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				
				if( timer_cnt > 200 )
    1506:	80 91 68 00 	lds	r24, 0x0068
    150a:	90 91 69 00 	lds	r25, 0x0069
    150e:	89 3c       	cpi	r24, 0xC9	; 201
    1510:	91 05       	cpc	r25, r1
    1512:	08 f4       	brcc	.+2      	; 0x1516 <main+0x698>
    1514:	00 cd       	rjmp	.-1536   	; 0xf16 <main+0x98>
				{
					pattern = 32;
    1516:	40 92 60 00 	sts	0x0060, r4
					timer_cnt = 0;
    151a:	10 92 69 00 	sts	0x0069, r1
    151e:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    1522:	10 92 67 00 	sts	0x0067, r1
    1526:	10 92 66 00 	sts	0x0066, r1
    152a:	f5 cc       	rjmp	.-1558   	; 0xf16 <main+0x98>
				}
			break; /* case 31 */
			
			case 32:
				led7(32);
    152c:	80 e2       	ldi	r24, 0x20	; 32
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				sensor = sensor_cmp();
    1534:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
    1538:	80 93 6a 00 	sts	0x006A, r24
				if((sensor & 0b11100111) == 0b00100000)
    153c:	87 7e       	andi	r24, 0xE7	; 231
    153e:	80 32       	cpi	r24, 0x20	; 32
    1540:	09 f0       	breq	.+2      	; 0x1544 <main+0x6c6>
    1542:	e9 cc       	rjmp	.-1582   	; 0xf16 <main+0x98>
				{
					pattern = 10;
    1544:	90 92 60 00 	sts	0x0060, r9
    1548:	e6 cc       	rjmp	.-1588   	; 0xf16 <main+0x98>
				}
			break; /* case 32 */
			
			case 41:
				led7(41);
    154a:	89 e2       	ldi	r24, 0x29	; 41
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				
				if( timer_cnt > 200 )
    1552:	80 91 68 00 	lds	r24, 0x0068
    1556:	90 91 69 00 	lds	r25, 0x0069
    155a:	89 3c       	cpi	r24, 0xC9	; 201
    155c:	91 05       	cpc	r25, r1
    155e:	08 f4       	brcc	.+2      	; 0x1562 <main+0x6e4>
    1560:	da cc       	rjmp	.-1612   	; 0xf16 <main+0x98>
				{
					pattern = 42;
    1562:	50 92 60 00 	sts	0x0060, r5
					timer_cnt = 0;
    1566:	10 92 69 00 	sts	0x0069, r1
    156a:	10 92 68 00 	sts	0x0068, r1
    156e:	d3 cc       	rjmp	.-1626   	; 0xf16 <main+0x98>
				}
			break; /* case 41 */
			
			case 42:
				led7(42);
    1570:	8a e2       	ldi	r24, 0x2A	; 42
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				sensor = sensor_cmp();
    1578:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
    157c:	80 93 6a 00 	sts	0x006A, r24
				if((sensor & 0b11100111) == 0b00000100) 
    1580:	87 7e       	andi	r24, 0xE7	; 231
    1582:	84 30       	cpi	r24, 0x04	; 4
    1584:	09 f0       	breq	.+2      	; 0x1588 <main+0x70a>
    1586:	c7 cc       	rjmp	.-1650   	; 0xf16 <main+0x98>
				{
					pattern = 10;
    1588:	90 92 60 00 	sts	0x0060, r9
    158c:	c4 cc       	rjmp	.-1656   	; 0xf16 <main+0x98>
				}
			break; /* case 42 */
			
			/* Chuyen lan trai */
			case 51:
				led7(51);
    158e:	83 e3       	ldi	r24, 0x33	; 51
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
    1596:	d0 93 7d 00 	sts	0x007D, r29
    159a:	c0 93 7c 00 	sts	0x007C, r28
				set_encoder(10);
				sensor = sensor_cmp();
    159e:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
    15a2:	80 93 6a 00 	sts	0x006A, r24
				if (((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111))
    15a6:	98 2f       	mov	r25, r24
    15a8:	97 70       	andi	r25, 0x07	; 7
    15aa:	97 30       	cpi	r25, 0x07	; 7
    15ac:	39 f0       	breq	.+14     	; 0x15bc <main+0x73e>
    15ae:	98 2f       	mov	r25, r24
    15b0:	9f 70       	andi	r25, 0x0F	; 15
    15b2:	9f 30       	cpi	r25, 0x0F	; 15
    15b4:	19 f0       	breq	.+6      	; 0x15bc <main+0x73e>
    15b6:	8f 71       	andi	r24, 0x1F	; 31
    15b8:	8f 31       	cpi	r24, 0x1F	; 31
    15ba:	39 f4       	brne	.+14     	; 0x15ca <main+0x74c>
				{
					pattern = 21;
    15bc:	80 92 60 00 	sts	0x0060, r8
    15c0:	b0 92 7d 00 	sts	0x007D, r11
    15c4:	a0 92 7c 00 	sts	0x007C, r10
    15c8:	a6 cc       	rjmp	.-1716   	; 0xf16 <main+0x98>
					set_encoder(-1);
					break;
				}
				
				speed(50, 50);
    15ca:	62 e3       	ldi	r22, 0x32	; 50
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	82 e3       	ldi	r24, 0x32	; 50
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    15d6:	80 91 66 00 	lds	r24, 0x0066
    15da:	90 91 67 00 	lds	r25, 0x0067
    15de:	49 97       	sbiw	r24, 0x19	; 25
    15e0:	40 f4       	brcc	.+16     	; 0x15f2 <main+0x774>
    15e2:	80 91 68 00 	lds	r24, 0x0068
    15e6:	90 91 69 00 	lds	r25, 0x0069
    15ea:	88 37       	cpi	r24, 0x78	; 120
    15ec:	91 05       	cpc	r25, r1
    15ee:	08 f4       	brcc	.+2      	; 0x15f2 <main+0x774>
    15f0:	92 cc       	rjmp	.-1756   	; 0xf16 <main+0x98>
				{
					pattern = 52;
    15f2:	94 e3       	ldi	r25, 0x34	; 52
    15f4:	90 93 60 00 	sts	0x0060, r25
					timer_cnt = 0;
    15f8:	10 92 69 00 	sts	0x0069, r1
    15fc:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse=0;
    1600:	10 92 67 00 	sts	0x0067, r1
    1604:	10 92 66 00 	sts	0x0066, r1
    1608:	86 cc       	rjmp	.-1780   	; 0xf16 <main+0x98>
				}
			break; /* case 51 */
			
			case 52:
				led7(52);
    160a:	84 e3       	ldi	r24, 0x34	; 52
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				
				handle(-30);
    1612:	82 ee       	ldi	r24, 0xE2	; 226
    1614:	9f ef       	ldi	r25, 0xFF	; 255
    1616:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
				speed( 35 ,50 );
    161a:	62 e3       	ldi	r22, 0x32	; 50
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	83 e2       	ldi	r24, 0x23	; 35
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
				pattern = 53;
    1626:	70 92 60 00 	sts	0x0060, r7
				timer_cnt = 0;
    162a:	10 92 69 00 	sts	0x0069, r1
    162e:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    1632:	10 92 67 00 	sts	0x0067, r1
    1636:	10 92 66 00 	sts	0x0066, r1
			break; /* case 52 */
    163a:	6d cc       	rjmp	.-1830   	; 0xf16 <main+0x98>
			
			case 53:
				led7(53);
    163c:	85 e3       	ldi	r24, 0x35	; 53
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				
				sensor = sensor_cmp();
    1644:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
    1648:	28 2e       	mov	r2, r24
    164a:	80 93 6a 00 	sts	0x006A, r24
				if(((encoder_pulse > 100) || (timer_cnt > 200 * delay)) && ((sensor & 0b00110000 ) == 0b00110000))
    164e:	80 91 66 00 	lds	r24, 0x0066
    1652:	90 91 67 00 	lds	r25, 0x0067
    1656:	85 36       	cpi	r24, 0x65	; 101
    1658:	91 05       	cpc	r25, r1
    165a:	08 f5       	brcc	.+66     	; 0x169e <main+0x820>
    165c:	60 91 68 00 	lds	r22, 0x0068
    1660:	70 91 69 00 	lds	r23, 0x0069
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__floatunsisf>
    166c:	6b 01       	movw	r12, r22
    166e:	7c 01       	movw	r14, r24
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	48 e4       	ldi	r20, 0x48	; 72
    1676:	53 e4       	ldi	r21, 0x43	; 67
    1678:	60 91 6d 00 	lds	r22, 0x006D
    167c:	70 91 6e 00 	lds	r23, 0x006E
    1680:	80 91 6f 00 	lds	r24, 0x006F
    1684:	90 91 70 00 	lds	r25, 0x0070
    1688:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__mulsf3>
    168c:	9b 01       	movw	r18, r22
    168e:	ac 01       	movw	r20, r24
    1690:	c7 01       	movw	r24, r14
    1692:	b6 01       	movw	r22, r12
    1694:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__gesf2>
    1698:	18 16       	cp	r1, r24
    169a:	0c f0       	brlt	.+2      	; 0x169e <main+0x820>
    169c:	3c cc       	rjmp	.-1928   	; 0xf16 <main+0x98>
    169e:	82 2d       	mov	r24, r2
    16a0:	80 73       	andi	r24, 0x30	; 48
    16a2:	80 33       	cpi	r24, 0x30	; 48
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <main+0x82a>
    16a6:	37 cc       	rjmp	.-1938   	; 0xf16 <main+0x98>
				{
					pattern = 10;
    16a8:	90 92 60 00 	sts	0x0060, r9
    16ac:	b0 92 7d 00 	sts	0x007D, r11
    16b0:	a0 92 7c 00 	sts	0x007C, r10
					set_encoder(-1);
					
					handle(40);
    16b4:	88 e2       	ldi	r24, 0x28	; 40
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					speed(100, 70);
    16bc:	66 e4       	ldi	r22, 0x46	; 70
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	84 e6       	ldi	r24, 0x64	; 100
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
    16c8:	26 cc       	rjmp	.-1972   	; 0xf16 <main+0x98>
				}
			break; /* case 53 */
			
			/* Chuyen lan phai */
			case 61:
				led7(61);
    16ca:	8d e3       	ldi	r24, 0x3D	; 61
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
    16d2:	d0 93 7d 00 	sts	0x007D, r29
    16d6:	c0 93 7c 00 	sts	0x007C, r28
				set_encoder(10);
				sensor = sensor_cmp();
    16da:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
    16de:	80 93 6a 00 	sts	0x006A, r24
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11111000) == 0b11111000))
    16e2:	98 2f       	mov	r25, r24
    16e4:	90 7e       	andi	r25, 0xE0	; 224
    16e6:	90 3e       	cpi	r25, 0xE0	; 224
    16e8:	19 f0       	breq	.+6      	; 0x16f0 <main+0x872>
    16ea:	88 7f       	andi	r24, 0xF8	; 248
    16ec:	88 3f       	cpi	r24, 0xF8	; 248
    16ee:	39 f4       	brne	.+14     	; 0x16fe <main+0x880>
				{
					pattern = 21;
    16f0:	80 92 60 00 	sts	0x0060, r8
    16f4:	b0 92 7d 00 	sts	0x007D, r11
    16f8:	a0 92 7c 00 	sts	0x007C, r10
    16fc:	0c cc       	rjmp	.-2024   	; 0xf16 <main+0x98>
					set_encoder(-1);
					break;
				}
				
				speed(50, 50);
    16fe:	62 e3       	ldi	r22, 0x32	; 50
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	82 e3       	ldi	r24, 0x32	; 50
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    170a:	80 91 66 00 	lds	r24, 0x0066
    170e:	90 91 67 00 	lds	r25, 0x0067
    1712:	49 97       	sbiw	r24, 0x19	; 25
    1714:	40 f4       	brcc	.+16     	; 0x1726 <main+0x8a8>
    1716:	80 91 68 00 	lds	r24, 0x0068
    171a:	90 91 69 00 	lds	r25, 0x0069
    171e:	88 37       	cpi	r24, 0x78	; 120
    1720:	91 05       	cpc	r25, r1
    1722:	08 f4       	brcc	.+2      	; 0x1726 <main+0x8a8>
    1724:	f8 cb       	rjmp	.-2064   	; 0xf16 <main+0x98>
				{
					pattern = 62;
    1726:	30 92 60 00 	sts	0x0060, r3
					timer_cnt = 0;
    172a:	10 92 69 00 	sts	0x0069, r1
    172e:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse=0;
    1732:	10 92 67 00 	sts	0x0067, r1
    1736:	10 92 66 00 	sts	0x0066, r1
    173a:	ed cb       	rjmp	.-2086   	; 0xf16 <main+0x98>
				}
			break; /* case 61 */
			
			case 62:
				led7(62);
    173c:	8e e3       	ldi	r24, 0x3E	; 62
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				
				handle(35);
    1744:	83 e2       	ldi	r24, 0x23	; 35
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
				speed(50 ,35);
    174c:	63 e2       	ldi	r22, 0x23	; 35
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	82 e3       	ldi	r24, 0x32	; 50
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
				pattern = 63;
    1758:	60 92 60 00 	sts	0x0060, r6
				timer_cnt = 0;
    175c:	10 92 69 00 	sts	0x0069, r1
    1760:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    1764:	10 92 67 00 	sts	0x0067, r1
    1768:	10 92 66 00 	sts	0x0066, r1
			break; /* case 62 */
    176c:	d4 cb       	rjmp	.-2136   	; 0xf16 <main+0x98>
			
			case 63:
				led7(63);
    176e:	8f e3       	ldi	r24, 0x3F	; 63
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				
				sensor = sensor_cmp();
    1776:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
    177a:	28 2e       	mov	r2, r24
    177c:	80 93 6a 00 	sts	0x006A, r24
				if(((encoder_pulse > 100) || (timer_cnt > 200 * delay)) && ((sensor & 0b00110000 ) == 0b00110000))
    1780:	80 91 66 00 	lds	r24, 0x0066
    1784:	90 91 67 00 	lds	r25, 0x0067
    1788:	85 36       	cpi	r24, 0x65	; 101
    178a:	91 05       	cpc	r25, r1
    178c:	08 f5       	brcc	.+66     	; 0x17d0 <main+0x952>
    178e:	60 91 68 00 	lds	r22, 0x0068
    1792:	70 91 69 00 	lds	r23, 0x0069
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__floatunsisf>
    179e:	6b 01       	movw	r12, r22
    17a0:	7c 01       	movw	r14, r24
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	48 e4       	ldi	r20, 0x48	; 72
    17a8:	53 e4       	ldi	r21, 0x43	; 67
    17aa:	60 91 6d 00 	lds	r22, 0x006D
    17ae:	70 91 6e 00 	lds	r23, 0x006E
    17b2:	80 91 6f 00 	lds	r24, 0x006F
    17b6:	90 91 70 00 	lds	r25, 0x0070
    17ba:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__mulsf3>
    17be:	9b 01       	movw	r18, r22
    17c0:	ac 01       	movw	r20, r24
    17c2:	c7 01       	movw	r24, r14
    17c4:	b6 01       	movw	r22, r12
    17c6:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__gesf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	0c f0       	brlt	.+2      	; 0x17d0 <main+0x952>
    17ce:	a3 cb       	rjmp	.-2234   	; 0xf16 <main+0x98>
    17d0:	82 2d       	mov	r24, r2
    17d2:	80 73       	andi	r24, 0x30	; 48
    17d4:	80 33       	cpi	r24, 0x30	; 48
    17d6:	09 f0       	breq	.+2      	; 0x17da <main+0x95c>
    17d8:	9e cb       	rjmp	.-2244   	; 0xf16 <main+0x98>
				{
					pattern = 10;
    17da:	90 92 60 00 	sts	0x0060, r9
    17de:	b0 92 7d 00 	sts	0x007D, r11
    17e2:	a0 92 7c 00 	sts	0x007C, r10
					set_encoder(-1);
					
					handle(-40);
    17e6:	88 ed       	ldi	r24, 0xD8	; 216
    17e8:	9f ef       	ldi	r25, 0xFF	; 255
    17ea:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
					speed(70, 100);
    17ee:	64 e6       	ldi	r22, 0x64	; 100
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	86 e4       	ldi	r24, 0x46	; 70
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
    17fa:	8d cb       	rjmp	.-2278   	; 0xf16 <main+0x98>
				}
			break; /* case 63 */
			
			/* No line */
			case 73:
			led7(73);
    17fc:	89 e4       	ldi	r24, 0x49	; 73
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
    1804:	10 93 7d 00 	sts	0x007D, r17
    1808:	00 93 7c 00 	sts	0x007C, r16
			
			set_encoder(12);
			speed(60,60);
    180c:	6c e3       	ldi	r22, 0x3C	; 60
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	8c e3       	ldi	r24, 0x3C	; 60
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
			sensor = sensor_cmp();
    1818:	0e 94 c0 04 	call	0x980	; 0x980 <_Z10sensor_cmpv>
    181c:	80 93 6a 00 	sts	0x006A, r24
			if ((sensor & 0b11000000) == 0b11000000) handle(40 /*+ addition_handle*/);
    1820:	80 7c       	andi	r24, 0xC0	; 192
    1822:	80 3c       	cpi	r24, 0xC0	; 192
    1824:	21 f4       	brne	.+8      	; 0x182e <main+0x9b0>
    1826:	88 e2       	ldi	r24, 0x28	; 40
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
			if ((sensor & 0b10000000) == 0b10000000) handle(30 /*+ addition_handle*/);
    182e:	80 91 6a 00 	lds	r24, 0x006A
    1832:	88 23       	and	r24, r24
    1834:	24 f4       	brge	.+8      	; 0x183e <main+0x9c0>
    1836:	8e e1       	ldi	r24, 0x1E	; 30
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
			if ((sensor & 0b00000011) == 0b00000011) handle(-40 /*- addition_handle*/);
    183e:	80 91 6a 00 	lds	r24, 0x006A
    1842:	83 70       	andi	r24, 0x03	; 3
    1844:	83 30       	cpi	r24, 0x03	; 3
    1846:	21 f4       	brne	.+8      	; 0x1850 <main+0x9d2>
    1848:	88 ed       	ldi	r24, 0xD8	; 216
    184a:	9f ef       	ldi	r25, 0xFF	; 255
    184c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
			if ((sensor & 0b00000001) == 0b00000001) handle(-30 /*- addition_handle*/);
    1850:	80 91 6a 00 	lds	r24, 0x006A
    1854:	80 ff       	sbrs	r24, 0
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <main+0x9e2>
    1858:	82 ee       	ldi	r24, 0xE2	; 226
    185a:	9f ef       	ldi	r25, 0xFF	; 255
    185c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z6handlei>
			if ((sensor & 0b00111100) != 0)
    1860:	80 91 6a 00 	lds	r24, 0x006A
    1864:	8c 73       	andi	r24, 0x3C	; 60
    1866:	09 f4       	brne	.+2      	; 0x186a <main+0x9ec>
    1868:	56 cb       	rjmp	.-2388   	; 0xf16 <main+0x98>
			{
				pattern = 10;
    186a:	90 92 60 00 	sts	0x0060, r9
    186e:	b0 92 7d 00 	sts	0x007D, r11
    1872:	a0 92 7c 00 	sts	0x007C, r10
    1876:	4f cb       	rjmp	.-2402   	; 0xf16 <main+0x98>
			}
			break; /* case 73 */
		
			/* Bridge */
			case 99:
				led7(99);
    1878:	83 e6       	ldi	r24, 0x63	; 99
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z4led7j>
				speed(-100, -100);
    1880:	6c e9       	ldi	r22, 0x9C	; 156
    1882:	7f ef       	ldi	r23, 0xFF	; 255
    1884:	8c e9       	ldi	r24, 0x9C	; 156
    1886:	9f ef       	ldi	r25, 0xFF	; 255
    1888:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z5speedii>
				if (speed_wait(0))
    188c:	80 91 61 00 	lds	r24, 0x0061
    1890:	81 11       	cpse	r24, r1
    1892:	41 cb       	rjmp	.-2430   	; 0xf16 <main+0x98>
				{
					pattern = 10;
    1894:	90 92 60 00 	sts	0x0060, r9
    1898:	3e cb       	rjmp	.-2436   	; 0xf16 <main+0x98>
				};
			break; /* case 99 */
				
			default:
				pattern = 10;
    189a:	90 92 60 00 	sts	0x0060, r9
			break; /* default */
    189e:	3b cb       	rjmp	.-2442   	; 0xf16 <main+0x98>

000018a0 <__subsf3>:
    18a0:	50 58       	subi	r21, 0x80	; 128

000018a2 <__addsf3>:
    18a2:	bb 27       	eor	r27, r27
    18a4:	aa 27       	eor	r26, r26
    18a6:	0e d0       	rcall	.+28     	; 0x18c4 <__addsf3x>
    18a8:	75 c1       	rjmp	.+746    	; 0x1b94 <__fp_round>
    18aa:	66 d1       	rcall	.+716    	; 0x1b78 <__fp_pscA>
    18ac:	30 f0       	brcs	.+12     	; 0x18ba <__addsf3+0x18>
    18ae:	6b d1       	rcall	.+726    	; 0x1b86 <__fp_pscB>
    18b0:	20 f0       	brcs	.+8      	; 0x18ba <__addsf3+0x18>
    18b2:	31 f4       	brne	.+12     	; 0x18c0 <__addsf3+0x1e>
    18b4:	9f 3f       	cpi	r25, 0xFF	; 255
    18b6:	11 f4       	brne	.+4      	; 0x18bc <__addsf3+0x1a>
    18b8:	1e f4       	brtc	.+6      	; 0x18c0 <__addsf3+0x1e>
    18ba:	5b c1       	rjmp	.+694    	; 0x1b72 <__fp_nan>
    18bc:	0e f4       	brtc	.+2      	; 0x18c0 <__addsf3+0x1e>
    18be:	e0 95       	com	r30
    18c0:	e7 fb       	bst	r30, 7
    18c2:	51 c1       	rjmp	.+674    	; 0x1b66 <__fp_inf>

000018c4 <__addsf3x>:
    18c4:	e9 2f       	mov	r30, r25
    18c6:	77 d1       	rcall	.+750    	; 0x1bb6 <__fp_split3>
    18c8:	80 f3       	brcs	.-32     	; 0x18aa <__addsf3+0x8>
    18ca:	ba 17       	cp	r27, r26
    18cc:	62 07       	cpc	r22, r18
    18ce:	73 07       	cpc	r23, r19
    18d0:	84 07       	cpc	r24, r20
    18d2:	95 07       	cpc	r25, r21
    18d4:	18 f0       	brcs	.+6      	; 0x18dc <__addsf3x+0x18>
    18d6:	71 f4       	brne	.+28     	; 0x18f4 <__addsf3x+0x30>
    18d8:	9e f5       	brtc	.+102    	; 0x1940 <__addsf3x+0x7c>
    18da:	8f c1       	rjmp	.+798    	; 0x1bfa <__fp_zero>
    18dc:	0e f4       	brtc	.+2      	; 0x18e0 <__addsf3x+0x1c>
    18de:	e0 95       	com	r30
    18e0:	0b 2e       	mov	r0, r27
    18e2:	ba 2f       	mov	r27, r26
    18e4:	a0 2d       	mov	r26, r0
    18e6:	0b 01       	movw	r0, r22
    18e8:	b9 01       	movw	r22, r18
    18ea:	90 01       	movw	r18, r0
    18ec:	0c 01       	movw	r0, r24
    18ee:	ca 01       	movw	r24, r20
    18f0:	a0 01       	movw	r20, r0
    18f2:	11 24       	eor	r1, r1
    18f4:	ff 27       	eor	r31, r31
    18f6:	59 1b       	sub	r21, r25
    18f8:	99 f0       	breq	.+38     	; 0x1920 <__addsf3x+0x5c>
    18fa:	59 3f       	cpi	r21, 0xF9	; 249
    18fc:	50 f4       	brcc	.+20     	; 0x1912 <__addsf3x+0x4e>
    18fe:	50 3e       	cpi	r21, 0xE0	; 224
    1900:	68 f1       	brcs	.+90     	; 0x195c <__addsf3x+0x98>
    1902:	1a 16       	cp	r1, r26
    1904:	f0 40       	sbci	r31, 0x00	; 0
    1906:	a2 2f       	mov	r26, r18
    1908:	23 2f       	mov	r18, r19
    190a:	34 2f       	mov	r19, r20
    190c:	44 27       	eor	r20, r20
    190e:	58 5f       	subi	r21, 0xF8	; 248
    1910:	f3 cf       	rjmp	.-26     	; 0x18f8 <__addsf3x+0x34>
    1912:	46 95       	lsr	r20
    1914:	37 95       	ror	r19
    1916:	27 95       	ror	r18
    1918:	a7 95       	ror	r26
    191a:	f0 40       	sbci	r31, 0x00	; 0
    191c:	53 95       	inc	r21
    191e:	c9 f7       	brne	.-14     	; 0x1912 <__addsf3x+0x4e>
    1920:	7e f4       	brtc	.+30     	; 0x1940 <__addsf3x+0x7c>
    1922:	1f 16       	cp	r1, r31
    1924:	ba 0b       	sbc	r27, r26
    1926:	62 0b       	sbc	r22, r18
    1928:	73 0b       	sbc	r23, r19
    192a:	84 0b       	sbc	r24, r20
    192c:	ba f0       	brmi	.+46     	; 0x195c <__addsf3x+0x98>
    192e:	91 50       	subi	r25, 0x01	; 1
    1930:	a1 f0       	breq	.+40     	; 0x195a <__addsf3x+0x96>
    1932:	ff 0f       	add	r31, r31
    1934:	bb 1f       	adc	r27, r27
    1936:	66 1f       	adc	r22, r22
    1938:	77 1f       	adc	r23, r23
    193a:	88 1f       	adc	r24, r24
    193c:	c2 f7       	brpl	.-16     	; 0x192e <__addsf3x+0x6a>
    193e:	0e c0       	rjmp	.+28     	; 0x195c <__addsf3x+0x98>
    1940:	ba 0f       	add	r27, r26
    1942:	62 1f       	adc	r22, r18
    1944:	73 1f       	adc	r23, r19
    1946:	84 1f       	adc	r24, r20
    1948:	48 f4       	brcc	.+18     	; 0x195c <__addsf3x+0x98>
    194a:	87 95       	ror	r24
    194c:	77 95       	ror	r23
    194e:	67 95       	ror	r22
    1950:	b7 95       	ror	r27
    1952:	f7 95       	ror	r31
    1954:	9e 3f       	cpi	r25, 0xFE	; 254
    1956:	08 f0       	brcs	.+2      	; 0x195a <__addsf3x+0x96>
    1958:	b3 cf       	rjmp	.-154    	; 0x18c0 <__addsf3+0x1e>
    195a:	93 95       	inc	r25
    195c:	88 0f       	add	r24, r24
    195e:	08 f0       	brcs	.+2      	; 0x1962 <__addsf3x+0x9e>
    1960:	99 27       	eor	r25, r25
    1962:	ee 0f       	add	r30, r30
    1964:	97 95       	ror	r25
    1966:	87 95       	ror	r24
    1968:	08 95       	ret

0000196a <__cmpsf2>:
    196a:	d9 d0       	rcall	.+434    	; 0x1b1e <__fp_cmp>
    196c:	08 f4       	brcc	.+2      	; 0x1970 <__cmpsf2+0x6>
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	08 95       	ret

00001972 <__divsf3>:
    1972:	0c d0       	rcall	.+24     	; 0x198c <__divsf3x>
    1974:	0f c1       	rjmp	.+542    	; 0x1b94 <__fp_round>
    1976:	07 d1       	rcall	.+526    	; 0x1b86 <__fp_pscB>
    1978:	40 f0       	brcs	.+16     	; 0x198a <__divsf3+0x18>
    197a:	fe d0       	rcall	.+508    	; 0x1b78 <__fp_pscA>
    197c:	30 f0       	brcs	.+12     	; 0x198a <__divsf3+0x18>
    197e:	21 f4       	brne	.+8      	; 0x1988 <__divsf3+0x16>
    1980:	5f 3f       	cpi	r21, 0xFF	; 255
    1982:	19 f0       	breq	.+6      	; 0x198a <__divsf3+0x18>
    1984:	f0 c0       	rjmp	.+480    	; 0x1b66 <__fp_inf>
    1986:	51 11       	cpse	r21, r1
    1988:	39 c1       	rjmp	.+626    	; 0x1bfc <__fp_szero>
    198a:	f3 c0       	rjmp	.+486    	; 0x1b72 <__fp_nan>

0000198c <__divsf3x>:
    198c:	14 d1       	rcall	.+552    	; 0x1bb6 <__fp_split3>
    198e:	98 f3       	brcs	.-26     	; 0x1976 <__divsf3+0x4>

00001990 <__divsf3_pse>:
    1990:	99 23       	and	r25, r25
    1992:	c9 f3       	breq	.-14     	; 0x1986 <__divsf3+0x14>
    1994:	55 23       	and	r21, r21
    1996:	b1 f3       	breq	.-20     	; 0x1984 <__divsf3+0x12>
    1998:	95 1b       	sub	r25, r21
    199a:	55 0b       	sbc	r21, r21
    199c:	bb 27       	eor	r27, r27
    199e:	aa 27       	eor	r26, r26
    19a0:	62 17       	cp	r22, r18
    19a2:	73 07       	cpc	r23, r19
    19a4:	84 07       	cpc	r24, r20
    19a6:	38 f0       	brcs	.+14     	; 0x19b6 <__divsf3_pse+0x26>
    19a8:	9f 5f       	subi	r25, 0xFF	; 255
    19aa:	5f 4f       	sbci	r21, 0xFF	; 255
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	44 1f       	adc	r20, r20
    19b2:	aa 1f       	adc	r26, r26
    19b4:	a9 f3       	breq	.-22     	; 0x19a0 <__divsf3_pse+0x10>
    19b6:	33 d0       	rcall	.+102    	; 0x1a1e <__divsf3_pse+0x8e>
    19b8:	0e 2e       	mov	r0, r30
    19ba:	3a f0       	brmi	.+14     	; 0x19ca <__divsf3_pse+0x3a>
    19bc:	e0 e8       	ldi	r30, 0x80	; 128
    19be:	30 d0       	rcall	.+96     	; 0x1a20 <__divsf3_pse+0x90>
    19c0:	91 50       	subi	r25, 0x01	; 1
    19c2:	50 40       	sbci	r21, 0x00	; 0
    19c4:	e6 95       	lsr	r30
    19c6:	00 1c       	adc	r0, r0
    19c8:	ca f7       	brpl	.-14     	; 0x19bc <__divsf3_pse+0x2c>
    19ca:	29 d0       	rcall	.+82     	; 0x1a1e <__divsf3_pse+0x8e>
    19cc:	fe 2f       	mov	r31, r30
    19ce:	27 d0       	rcall	.+78     	; 0x1a1e <__divsf3_pse+0x8e>
    19d0:	66 0f       	add	r22, r22
    19d2:	77 1f       	adc	r23, r23
    19d4:	88 1f       	adc	r24, r24
    19d6:	bb 1f       	adc	r27, r27
    19d8:	26 17       	cp	r18, r22
    19da:	37 07       	cpc	r19, r23
    19dc:	48 07       	cpc	r20, r24
    19de:	ab 07       	cpc	r26, r27
    19e0:	b0 e8       	ldi	r27, 0x80	; 128
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <__divsf3_pse+0x56>
    19e4:	bb 0b       	sbc	r27, r27
    19e6:	80 2d       	mov	r24, r0
    19e8:	bf 01       	movw	r22, r30
    19ea:	ff 27       	eor	r31, r31
    19ec:	93 58       	subi	r25, 0x83	; 131
    19ee:	5f 4f       	sbci	r21, 0xFF	; 255
    19f0:	2a f0       	brmi	.+10     	; 0x19fc <__divsf3_pse+0x6c>
    19f2:	9e 3f       	cpi	r25, 0xFE	; 254
    19f4:	51 05       	cpc	r21, r1
    19f6:	68 f0       	brcs	.+26     	; 0x1a12 <__divsf3_pse+0x82>
    19f8:	b6 c0       	rjmp	.+364    	; 0x1b66 <__fp_inf>
    19fa:	00 c1       	rjmp	.+512    	; 0x1bfc <__fp_szero>
    19fc:	5f 3f       	cpi	r21, 0xFF	; 255
    19fe:	ec f3       	brlt	.-6      	; 0x19fa <__divsf3_pse+0x6a>
    1a00:	98 3e       	cpi	r25, 0xE8	; 232
    1a02:	dc f3       	brlt	.-10     	; 0x19fa <__divsf3_pse+0x6a>
    1a04:	86 95       	lsr	r24
    1a06:	77 95       	ror	r23
    1a08:	67 95       	ror	r22
    1a0a:	b7 95       	ror	r27
    1a0c:	f7 95       	ror	r31
    1a0e:	9f 5f       	subi	r25, 0xFF	; 255
    1a10:	c9 f7       	brne	.-14     	; 0x1a04 <__divsf3_pse+0x74>
    1a12:	88 0f       	add	r24, r24
    1a14:	91 1d       	adc	r25, r1
    1a16:	96 95       	lsr	r25
    1a18:	87 95       	ror	r24
    1a1a:	97 f9       	bld	r25, 7
    1a1c:	08 95       	ret
    1a1e:	e1 e0       	ldi	r30, 0x01	; 1
    1a20:	66 0f       	add	r22, r22
    1a22:	77 1f       	adc	r23, r23
    1a24:	88 1f       	adc	r24, r24
    1a26:	bb 1f       	adc	r27, r27
    1a28:	62 17       	cp	r22, r18
    1a2a:	73 07       	cpc	r23, r19
    1a2c:	84 07       	cpc	r24, r20
    1a2e:	ba 07       	cpc	r27, r26
    1a30:	20 f0       	brcs	.+8      	; 0x1a3a <__divsf3_pse+0xaa>
    1a32:	62 1b       	sub	r22, r18
    1a34:	73 0b       	sbc	r23, r19
    1a36:	84 0b       	sbc	r24, r20
    1a38:	ba 0b       	sbc	r27, r26
    1a3a:	ee 1f       	adc	r30, r30
    1a3c:	88 f7       	brcc	.-30     	; 0x1a20 <__divsf3_pse+0x90>
    1a3e:	e0 95       	com	r30
    1a40:	08 95       	ret

00001a42 <__fixsfsi>:
    1a42:	04 d0       	rcall	.+8      	; 0x1a4c <__fixunssfsi>
    1a44:	68 94       	set
    1a46:	b1 11       	cpse	r27, r1
    1a48:	d9 c0       	rjmp	.+434    	; 0x1bfc <__fp_szero>
    1a4a:	08 95       	ret

00001a4c <__fixunssfsi>:
    1a4c:	bc d0       	rcall	.+376    	; 0x1bc6 <__fp_splitA>
    1a4e:	88 f0       	brcs	.+34     	; 0x1a72 <__fixunssfsi+0x26>
    1a50:	9f 57       	subi	r25, 0x7F	; 127
    1a52:	90 f0       	brcs	.+36     	; 0x1a78 <__fixunssfsi+0x2c>
    1a54:	b9 2f       	mov	r27, r25
    1a56:	99 27       	eor	r25, r25
    1a58:	b7 51       	subi	r27, 0x17	; 23
    1a5a:	a0 f0       	brcs	.+40     	; 0x1a84 <__fixunssfsi+0x38>
    1a5c:	d1 f0       	breq	.+52     	; 0x1a92 <__fixunssfsi+0x46>
    1a5e:	66 0f       	add	r22, r22
    1a60:	77 1f       	adc	r23, r23
    1a62:	88 1f       	adc	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	1a f0       	brmi	.+6      	; 0x1a6e <__fixunssfsi+0x22>
    1a68:	ba 95       	dec	r27
    1a6a:	c9 f7       	brne	.-14     	; 0x1a5e <__fixunssfsi+0x12>
    1a6c:	12 c0       	rjmp	.+36     	; 0x1a92 <__fixunssfsi+0x46>
    1a6e:	b1 30       	cpi	r27, 0x01	; 1
    1a70:	81 f0       	breq	.+32     	; 0x1a92 <__fixunssfsi+0x46>
    1a72:	c3 d0       	rcall	.+390    	; 0x1bfa <__fp_zero>
    1a74:	b1 e0       	ldi	r27, 0x01	; 1
    1a76:	08 95       	ret
    1a78:	c0 c0       	rjmp	.+384    	; 0x1bfa <__fp_zero>
    1a7a:	67 2f       	mov	r22, r23
    1a7c:	78 2f       	mov	r23, r24
    1a7e:	88 27       	eor	r24, r24
    1a80:	b8 5f       	subi	r27, 0xF8	; 248
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <__fixunssfsi+0x46>
    1a84:	b9 3f       	cpi	r27, 0xF9	; 249
    1a86:	cc f3       	brlt	.-14     	; 0x1a7a <__fixunssfsi+0x2e>
    1a88:	86 95       	lsr	r24
    1a8a:	77 95       	ror	r23
    1a8c:	67 95       	ror	r22
    1a8e:	b3 95       	inc	r27
    1a90:	d9 f7       	brne	.-10     	; 0x1a88 <__fixunssfsi+0x3c>
    1a92:	3e f4       	brtc	.+14     	; 0x1aa2 <__fixunssfsi+0x56>
    1a94:	90 95       	com	r25
    1a96:	80 95       	com	r24
    1a98:	70 95       	com	r23
    1a9a:	61 95       	neg	r22
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	08 95       	ret

00001aa4 <__floatunsisf>:
    1aa4:	e8 94       	clt
    1aa6:	09 c0       	rjmp	.+18     	; 0x1aba <__floatsisf+0x12>

00001aa8 <__floatsisf>:
    1aa8:	97 fb       	bst	r25, 7
    1aaa:	3e f4       	brtc	.+14     	; 0x1aba <__floatsisf+0x12>
    1aac:	90 95       	com	r25
    1aae:	80 95       	com	r24
    1ab0:	70 95       	com	r23
    1ab2:	61 95       	neg	r22
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	99 23       	and	r25, r25
    1abc:	a9 f0       	breq	.+42     	; 0x1ae8 <__floatsisf+0x40>
    1abe:	f9 2f       	mov	r31, r25
    1ac0:	96 e9       	ldi	r25, 0x96	; 150
    1ac2:	bb 27       	eor	r27, r27
    1ac4:	93 95       	inc	r25
    1ac6:	f6 95       	lsr	r31
    1ac8:	87 95       	ror	r24
    1aca:	77 95       	ror	r23
    1acc:	67 95       	ror	r22
    1ace:	b7 95       	ror	r27
    1ad0:	f1 11       	cpse	r31, r1
    1ad2:	f8 cf       	rjmp	.-16     	; 0x1ac4 <__floatsisf+0x1c>
    1ad4:	fa f4       	brpl	.+62     	; 0x1b14 <__floatsisf+0x6c>
    1ad6:	bb 0f       	add	r27, r27
    1ad8:	11 f4       	brne	.+4      	; 0x1ade <__floatsisf+0x36>
    1ada:	60 ff       	sbrs	r22, 0
    1adc:	1b c0       	rjmp	.+54     	; 0x1b14 <__floatsisf+0x6c>
    1ade:	6f 5f       	subi	r22, 0xFF	; 255
    1ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae6:	16 c0       	rjmp	.+44     	; 0x1b14 <__floatsisf+0x6c>
    1ae8:	88 23       	and	r24, r24
    1aea:	11 f0       	breq	.+4      	; 0x1af0 <__floatsisf+0x48>
    1aec:	96 e9       	ldi	r25, 0x96	; 150
    1aee:	11 c0       	rjmp	.+34     	; 0x1b12 <__floatsisf+0x6a>
    1af0:	77 23       	and	r23, r23
    1af2:	21 f0       	breq	.+8      	; 0x1afc <__floatsisf+0x54>
    1af4:	9e e8       	ldi	r25, 0x8E	; 142
    1af6:	87 2f       	mov	r24, r23
    1af8:	76 2f       	mov	r23, r22
    1afa:	05 c0       	rjmp	.+10     	; 0x1b06 <__floatsisf+0x5e>
    1afc:	66 23       	and	r22, r22
    1afe:	71 f0       	breq	.+28     	; 0x1b1c <__floatsisf+0x74>
    1b00:	96 e8       	ldi	r25, 0x86	; 134
    1b02:	86 2f       	mov	r24, r22
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	2a f0       	brmi	.+10     	; 0x1b14 <__floatsisf+0x6c>
    1b0a:	9a 95       	dec	r25
    1b0c:	66 0f       	add	r22, r22
    1b0e:	77 1f       	adc	r23, r23
    1b10:	88 1f       	adc	r24, r24
    1b12:	da f7       	brpl	.-10     	; 0x1b0a <__floatsisf+0x62>
    1b14:	88 0f       	add	r24, r24
    1b16:	96 95       	lsr	r25
    1b18:	87 95       	ror	r24
    1b1a:	97 f9       	bld	r25, 7
    1b1c:	08 95       	ret

00001b1e <__fp_cmp>:
    1b1e:	99 0f       	add	r25, r25
    1b20:	00 08       	sbc	r0, r0
    1b22:	55 0f       	add	r21, r21
    1b24:	aa 0b       	sbc	r26, r26
    1b26:	e0 e8       	ldi	r30, 0x80	; 128
    1b28:	fe ef       	ldi	r31, 0xFE	; 254
    1b2a:	16 16       	cp	r1, r22
    1b2c:	17 06       	cpc	r1, r23
    1b2e:	e8 07       	cpc	r30, r24
    1b30:	f9 07       	cpc	r31, r25
    1b32:	c0 f0       	brcs	.+48     	; 0x1b64 <__fp_cmp+0x46>
    1b34:	12 16       	cp	r1, r18
    1b36:	13 06       	cpc	r1, r19
    1b38:	e4 07       	cpc	r30, r20
    1b3a:	f5 07       	cpc	r31, r21
    1b3c:	98 f0       	brcs	.+38     	; 0x1b64 <__fp_cmp+0x46>
    1b3e:	62 1b       	sub	r22, r18
    1b40:	73 0b       	sbc	r23, r19
    1b42:	84 0b       	sbc	r24, r20
    1b44:	95 0b       	sbc	r25, r21
    1b46:	39 f4       	brne	.+14     	; 0x1b56 <__fp_cmp+0x38>
    1b48:	0a 26       	eor	r0, r26
    1b4a:	61 f0       	breq	.+24     	; 0x1b64 <__fp_cmp+0x46>
    1b4c:	23 2b       	or	r18, r19
    1b4e:	24 2b       	or	r18, r20
    1b50:	25 2b       	or	r18, r21
    1b52:	21 f4       	brne	.+8      	; 0x1b5c <__fp_cmp+0x3e>
    1b54:	08 95       	ret
    1b56:	0a 26       	eor	r0, r26
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <__fp_cmp+0x3e>
    1b5a:	a1 40       	sbci	r26, 0x01	; 1
    1b5c:	a6 95       	lsr	r26
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	81 1d       	adc	r24, r1
    1b62:	81 1d       	adc	r24, r1
    1b64:	08 95       	ret

00001b66 <__fp_inf>:
    1b66:	97 f9       	bld	r25, 7
    1b68:	9f 67       	ori	r25, 0x7F	; 127
    1b6a:	80 e8       	ldi	r24, 0x80	; 128
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	08 95       	ret

00001b72 <__fp_nan>:
    1b72:	9f ef       	ldi	r25, 0xFF	; 255
    1b74:	80 ec       	ldi	r24, 0xC0	; 192
    1b76:	08 95       	ret

00001b78 <__fp_pscA>:
    1b78:	00 24       	eor	r0, r0
    1b7a:	0a 94       	dec	r0
    1b7c:	16 16       	cp	r1, r22
    1b7e:	17 06       	cpc	r1, r23
    1b80:	18 06       	cpc	r1, r24
    1b82:	09 06       	cpc	r0, r25
    1b84:	08 95       	ret

00001b86 <__fp_pscB>:
    1b86:	00 24       	eor	r0, r0
    1b88:	0a 94       	dec	r0
    1b8a:	12 16       	cp	r1, r18
    1b8c:	13 06       	cpc	r1, r19
    1b8e:	14 06       	cpc	r1, r20
    1b90:	05 06       	cpc	r0, r21
    1b92:	08 95       	ret

00001b94 <__fp_round>:
    1b94:	09 2e       	mov	r0, r25
    1b96:	03 94       	inc	r0
    1b98:	00 0c       	add	r0, r0
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <__fp_round+0xc>
    1b9c:	88 23       	and	r24, r24
    1b9e:	52 f0       	brmi	.+20     	; 0x1bb4 <__fp_round+0x20>
    1ba0:	bb 0f       	add	r27, r27
    1ba2:	40 f4       	brcc	.+16     	; 0x1bb4 <__fp_round+0x20>
    1ba4:	bf 2b       	or	r27, r31
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <__fp_round+0x18>
    1ba8:	60 ff       	sbrs	r22, 0
    1baa:	04 c0       	rjmp	.+8      	; 0x1bb4 <__fp_round+0x20>
    1bac:	6f 5f       	subi	r22, 0xFF	; 255
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	08 95       	ret

00001bb6 <__fp_split3>:
    1bb6:	57 fd       	sbrc	r21, 7
    1bb8:	90 58       	subi	r25, 0x80	; 128
    1bba:	44 0f       	add	r20, r20
    1bbc:	55 1f       	adc	r21, r21
    1bbe:	59 f0       	breq	.+22     	; 0x1bd6 <__fp_splitA+0x10>
    1bc0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc2:	71 f0       	breq	.+28     	; 0x1be0 <__fp_splitA+0x1a>
    1bc4:	47 95       	ror	r20

00001bc6 <__fp_splitA>:
    1bc6:	88 0f       	add	r24, r24
    1bc8:	97 fb       	bst	r25, 7
    1bca:	99 1f       	adc	r25, r25
    1bcc:	61 f0       	breq	.+24     	; 0x1be6 <__fp_splitA+0x20>
    1bce:	9f 3f       	cpi	r25, 0xFF	; 255
    1bd0:	79 f0       	breq	.+30     	; 0x1bf0 <__fp_splitA+0x2a>
    1bd2:	87 95       	ror	r24
    1bd4:	08 95       	ret
    1bd6:	12 16       	cp	r1, r18
    1bd8:	13 06       	cpc	r1, r19
    1bda:	14 06       	cpc	r1, r20
    1bdc:	55 1f       	adc	r21, r21
    1bde:	f2 cf       	rjmp	.-28     	; 0x1bc4 <__fp_split3+0xe>
    1be0:	46 95       	lsr	r20
    1be2:	f1 df       	rcall	.-30     	; 0x1bc6 <__fp_splitA>
    1be4:	08 c0       	rjmp	.+16     	; 0x1bf6 <__fp_splitA+0x30>
    1be6:	16 16       	cp	r1, r22
    1be8:	17 06       	cpc	r1, r23
    1bea:	18 06       	cpc	r1, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	f1 cf       	rjmp	.-30     	; 0x1bd2 <__fp_splitA+0xc>
    1bf0:	86 95       	lsr	r24
    1bf2:	71 05       	cpc	r23, r1
    1bf4:	61 05       	cpc	r22, r1
    1bf6:	08 94       	sec
    1bf8:	08 95       	ret

00001bfa <__fp_zero>:
    1bfa:	e8 94       	clt

00001bfc <__fp_szero>:
    1bfc:	bb 27       	eor	r27, r27
    1bfe:	66 27       	eor	r22, r22
    1c00:	77 27       	eor	r23, r23
    1c02:	cb 01       	movw	r24, r22
    1c04:	97 f9       	bld	r25, 7
    1c06:	08 95       	ret

00001c08 <__gesf2>:
    1c08:	8a df       	rcall	.-236    	; 0x1b1e <__fp_cmp>
    1c0a:	08 f4       	brcc	.+2      	; 0x1c0e <__gesf2+0x6>
    1c0c:	8f ef       	ldi	r24, 0xFF	; 255
    1c0e:	08 95       	ret

00001c10 <__mulsf3>:
    1c10:	0b d0       	rcall	.+22     	; 0x1c28 <__mulsf3x>
    1c12:	c0 cf       	rjmp	.-128    	; 0x1b94 <__fp_round>
    1c14:	b1 df       	rcall	.-158    	; 0x1b78 <__fp_pscA>
    1c16:	28 f0       	brcs	.+10     	; 0x1c22 <__mulsf3+0x12>
    1c18:	b6 df       	rcall	.-148    	; 0x1b86 <__fp_pscB>
    1c1a:	18 f0       	brcs	.+6      	; 0x1c22 <__mulsf3+0x12>
    1c1c:	95 23       	and	r25, r21
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <__mulsf3+0x12>
    1c20:	a2 cf       	rjmp	.-188    	; 0x1b66 <__fp_inf>
    1c22:	a7 cf       	rjmp	.-178    	; 0x1b72 <__fp_nan>
    1c24:	11 24       	eor	r1, r1
    1c26:	ea cf       	rjmp	.-44     	; 0x1bfc <__fp_szero>

00001c28 <__mulsf3x>:
    1c28:	c6 df       	rcall	.-116    	; 0x1bb6 <__fp_split3>
    1c2a:	a0 f3       	brcs	.-24     	; 0x1c14 <__mulsf3+0x4>

00001c2c <__mulsf3_pse>:
    1c2c:	95 9f       	mul	r25, r21
    1c2e:	d1 f3       	breq	.-12     	; 0x1c24 <__mulsf3+0x14>
    1c30:	95 0f       	add	r25, r21
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	55 1f       	adc	r21, r21
    1c36:	62 9f       	mul	r22, r18
    1c38:	f0 01       	movw	r30, r0
    1c3a:	72 9f       	mul	r23, r18
    1c3c:	bb 27       	eor	r27, r27
    1c3e:	f0 0d       	add	r31, r0
    1c40:	b1 1d       	adc	r27, r1
    1c42:	63 9f       	mul	r22, r19
    1c44:	aa 27       	eor	r26, r26
    1c46:	f0 0d       	add	r31, r0
    1c48:	b1 1d       	adc	r27, r1
    1c4a:	aa 1f       	adc	r26, r26
    1c4c:	64 9f       	mul	r22, r20
    1c4e:	66 27       	eor	r22, r22
    1c50:	b0 0d       	add	r27, r0
    1c52:	a1 1d       	adc	r26, r1
    1c54:	66 1f       	adc	r22, r22
    1c56:	82 9f       	mul	r24, r18
    1c58:	22 27       	eor	r18, r18
    1c5a:	b0 0d       	add	r27, r0
    1c5c:	a1 1d       	adc	r26, r1
    1c5e:	62 1f       	adc	r22, r18
    1c60:	73 9f       	mul	r23, r19
    1c62:	b0 0d       	add	r27, r0
    1c64:	a1 1d       	adc	r26, r1
    1c66:	62 1f       	adc	r22, r18
    1c68:	83 9f       	mul	r24, r19
    1c6a:	a0 0d       	add	r26, r0
    1c6c:	61 1d       	adc	r22, r1
    1c6e:	22 1f       	adc	r18, r18
    1c70:	74 9f       	mul	r23, r20
    1c72:	33 27       	eor	r19, r19
    1c74:	a0 0d       	add	r26, r0
    1c76:	61 1d       	adc	r22, r1
    1c78:	23 1f       	adc	r18, r19
    1c7a:	84 9f       	mul	r24, r20
    1c7c:	60 0d       	add	r22, r0
    1c7e:	21 1d       	adc	r18, r1
    1c80:	82 2f       	mov	r24, r18
    1c82:	76 2f       	mov	r23, r22
    1c84:	6a 2f       	mov	r22, r26
    1c86:	11 24       	eor	r1, r1
    1c88:	9f 57       	subi	r25, 0x7F	; 127
    1c8a:	50 40       	sbci	r21, 0x00	; 0
    1c8c:	8a f0       	brmi	.+34     	; 0x1cb0 <__mulsf3_pse+0x84>
    1c8e:	e1 f0       	breq	.+56     	; 0x1cc8 <__mulsf3_pse+0x9c>
    1c90:	88 23       	and	r24, r24
    1c92:	4a f0       	brmi	.+18     	; 0x1ca6 <__mulsf3_pse+0x7a>
    1c94:	ee 0f       	add	r30, r30
    1c96:	ff 1f       	adc	r31, r31
    1c98:	bb 1f       	adc	r27, r27
    1c9a:	66 1f       	adc	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	91 50       	subi	r25, 0x01	; 1
    1ca2:	50 40       	sbci	r21, 0x00	; 0
    1ca4:	a9 f7       	brne	.-22     	; 0x1c90 <__mulsf3_pse+0x64>
    1ca6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ca8:	51 05       	cpc	r21, r1
    1caa:	70 f0       	brcs	.+28     	; 0x1cc8 <__mulsf3_pse+0x9c>
    1cac:	5c cf       	rjmp	.-328    	; 0x1b66 <__fp_inf>
    1cae:	a6 cf       	rjmp	.-180    	; 0x1bfc <__fp_szero>
    1cb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb2:	ec f3       	brlt	.-6      	; 0x1cae <__mulsf3_pse+0x82>
    1cb4:	98 3e       	cpi	r25, 0xE8	; 232
    1cb6:	dc f3       	brlt	.-10     	; 0x1cae <__mulsf3_pse+0x82>
    1cb8:	86 95       	lsr	r24
    1cba:	77 95       	ror	r23
    1cbc:	67 95       	ror	r22
    1cbe:	b7 95       	ror	r27
    1cc0:	f7 95       	ror	r31
    1cc2:	e7 95       	ror	r30
    1cc4:	9f 5f       	subi	r25, 0xFF	; 255
    1cc6:	c1 f7       	brne	.-16     	; 0x1cb8 <__mulsf3_pse+0x8c>
    1cc8:	fe 2b       	or	r31, r30
    1cca:	88 0f       	add	r24, r24
    1ccc:	91 1d       	adc	r25, r1
    1cce:	96 95       	lsr	r25
    1cd0:	87 95       	ror	r24
    1cd2:	97 f9       	bld	r25, 7
    1cd4:	08 95       	ret

00001cd6 <__divmodhi4>:
    1cd6:	97 fb       	bst	r25, 7
    1cd8:	07 2e       	mov	r0, r23
    1cda:	16 f4       	brtc	.+4      	; 0x1ce0 <__divmodhi4+0xa>
    1cdc:	00 94       	com	r0
    1cde:	07 d0       	rcall	.+14     	; 0x1cee <__divmodhi4_neg1>
    1ce0:	77 fd       	sbrc	r23, 7
    1ce2:	09 d0       	rcall	.+18     	; 0x1cf6 <__divmodhi4_neg2>
    1ce4:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__udivmodhi4>
    1ce8:	07 fc       	sbrc	r0, 7
    1cea:	05 d0       	rcall	.+10     	; 0x1cf6 <__divmodhi4_neg2>
    1cec:	3e f4       	brtc	.+14     	; 0x1cfc <__divmodhi4_exit>

00001cee <__divmodhi4_neg1>:
    1cee:	90 95       	com	r25
    1cf0:	81 95       	neg	r24
    1cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf4:	08 95       	ret

00001cf6 <__divmodhi4_neg2>:
    1cf6:	70 95       	com	r23
    1cf8:	61 95       	neg	r22
    1cfa:	7f 4f       	sbci	r23, 0xFF	; 255

00001cfc <__divmodhi4_exit>:
    1cfc:	08 95       	ret

00001cfe <__tablejump2__>:
    1cfe:	ee 0f       	add	r30, r30
    1d00:	ff 1f       	adc	r31, r31

00001d02 <__tablejump__>:
    1d02:	05 90       	lpm	r0, Z+
    1d04:	f4 91       	lpm	r31, Z
    1d06:	e0 2d       	mov	r30, r0
    1d08:	09 94       	ijmp

00001d0a <__umulhisi3>:
    1d0a:	a2 9f       	mul	r26, r18
    1d0c:	b0 01       	movw	r22, r0
    1d0e:	b3 9f       	mul	r27, r19
    1d10:	c0 01       	movw	r24, r0
    1d12:	a3 9f       	mul	r26, r19
    1d14:	70 0d       	add	r23, r0
    1d16:	81 1d       	adc	r24, r1
    1d18:	11 24       	eor	r1, r1
    1d1a:	91 1d       	adc	r25, r1
    1d1c:	b2 9f       	mul	r27, r18
    1d1e:	70 0d       	add	r23, r0
    1d20:	81 1d       	adc	r24, r1
    1d22:	11 24       	eor	r1, r1
    1d24:	91 1d       	adc	r25, r1
    1d26:	08 95       	ret

00001d28 <__udivmodhi4>:
    1d28:	aa 1b       	sub	r26, r26
    1d2a:	bb 1b       	sub	r27, r27
    1d2c:	51 e1       	ldi	r21, 0x11	; 17
    1d2e:	07 c0       	rjmp	.+14     	; 0x1d3e <__udivmodhi4_ep>

00001d30 <__udivmodhi4_loop>:
    1d30:	aa 1f       	adc	r26, r26
    1d32:	bb 1f       	adc	r27, r27
    1d34:	a6 17       	cp	r26, r22
    1d36:	b7 07       	cpc	r27, r23
    1d38:	10 f0       	brcs	.+4      	; 0x1d3e <__udivmodhi4_ep>
    1d3a:	a6 1b       	sub	r26, r22
    1d3c:	b7 0b       	sbc	r27, r23

00001d3e <__udivmodhi4_ep>:
    1d3e:	88 1f       	adc	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	5a 95       	dec	r21
    1d44:	a9 f7       	brne	.-22     	; 0x1d30 <__udivmodhi4_loop>
    1d46:	80 95       	com	r24
    1d48:	90 95       	com	r25
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	08 95       	ret

00001d50 <__eerd_word_m16>:
    1d50:	a8 e1       	ldi	r26, 0x18	; 24
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	42 e0       	ldi	r20, 0x02	; 2
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__eerd_blraw_m16>

00001d5c <__eewr_word_m16>:
    1d5c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__eewr_byte_m16>
    1d60:	27 2f       	mov	r18, r23
    1d62:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__eewr_r18_m16>

00001d66 <__eerd_block_m16>:
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22

00001d6a <__eerd_blraw_m16>:
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	e1 99       	sbic	0x1c, 1	; 28
    1d6e:	fe cf       	rjmp	.-4      	; 0x1d6c <__eerd_blraw_m16+0x2>
    1d70:	06 c0       	rjmp	.+12     	; 0x1d7e <__eerd_blraw_m16+0x14>
    1d72:	ff bb       	out	0x1f, r31	; 31
    1d74:	ee bb       	out	0x1e, r30	; 30
    1d76:	e0 9a       	sbi	0x1c, 0	; 28
    1d78:	31 96       	adiw	r30, 0x01	; 1
    1d7a:	0d b2       	in	r0, 0x1d	; 29
    1d7c:	0d 92       	st	X+, r0
    1d7e:	41 50       	subi	r20, 0x01	; 1
    1d80:	50 40       	sbci	r21, 0x00	; 0
    1d82:	b8 f7       	brcc	.-18     	; 0x1d72 <__eerd_blraw_m16+0x8>
    1d84:	08 95       	ret

00001d86 <__eewr_byte_m16>:
    1d86:	26 2f       	mov	r18, r22

00001d88 <__eewr_r18_m16>:
    1d88:	e1 99       	sbic	0x1c, 1	; 28
    1d8a:	fe cf       	rjmp	.-4      	; 0x1d88 <__eewr_r18_m16>
    1d8c:	9f bb       	out	0x1f, r25	; 31
    1d8e:	8e bb       	out	0x1e, r24	; 30
    1d90:	2d bb       	out	0x1d, r18	; 29
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	e2 9a       	sbi	0x1c, 2	; 28
    1d98:	e1 9a       	sbi	0x1c, 1	; 28
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	08 95       	ret

00001da0 <_exit>:
    1da0:	f8 94       	cli

00001da2 <__stop_program>:
    1da2:	ff cf       	rjmp	.-2      	; 0x1da2 <__stop_program>
