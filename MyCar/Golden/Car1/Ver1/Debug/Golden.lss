
Golden.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002210  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00002210  000022a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  00800064  00800064  000022a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002111  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000045d  00000000  00000000  00004501  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000895  00000000  00000000  0000495e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  000051f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000060c  00000000  00000000  00005574  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a45  00000000  00000000  00005b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000065c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__ctors_end>
       4:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__vector_1>
       8:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
       c:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      10:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      14:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      18:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      1c:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      20:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      24:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      28:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      2c:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      30:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      34:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      38:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      3c:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      40:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      44:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      48:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      4c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_19>
      50:	0c 94 3b 03 	jmp	0x676	; 0x676 <__bad_interrupt>
      54:	ee 08       	sbc	r14, r14
      56:	b5 09       	sbc	r27, r5
      58:	23 0a       	sbc	r2, r19
      5a:	7f 0e       	add	r7, r31
      5c:	7f 0e       	add	r7, r31
      5e:	7f 0e       	add	r7, r31
      60:	7f 0e       	add	r7, r31
      62:	7f 0e       	add	r7, r31
      64:	7f 0e       	add	r7, r31
      66:	7f 0e       	add	r7, r31
      68:	7f 0e       	add	r7, r31
      6a:	94 0a       	sbc	r9, r20
      6c:	ae 0a       	sbc	r10, r30
      6e:	10 0b       	sbc	r17, r16
      70:	7f 0e       	add	r7, r31
      72:	7f 0e       	add	r7, r31
      74:	ab 0b       	sbc	r26, r27
      76:	c5 0b       	sbc	r28, r21
      78:	7f 0e       	add	r7, r31
      7a:	7f 0e       	add	r7, r31
      7c:	7f 0e       	add	r7, r31
      7e:	df 0b       	sbc	r29, r31
      80:	f6 0b       	sbc	r31, r22
      82:	7f 0e       	add	r7, r31
      84:	7f 0e       	add	r7, r31
      86:	7f 0e       	add	r7, r31
      88:	7f 0e       	add	r7, r31
      8a:	7f 0e       	add	r7, r31
      8c:	7f 0e       	add	r7, r31
      8e:	7f 0e       	add	r7, r31
      90:	7f 0e       	add	r7, r31
      92:	05 0c       	add	r0, r5
      94:	19 0c       	add	r1, r9
      96:	7f 0e       	add	r7, r31
      98:	7f 0e       	add	r7, r31
      9a:	7f 0e       	add	r7, r31
      9c:	7f 0e       	add	r7, r31
      9e:	7f 0e       	add	r7, r31
      a0:	7f 0e       	add	r7, r31
      a2:	7f 0e       	add	r7, r31
      a4:	7f 0e       	add	r7, r31
      a6:	28 0c       	add	r2, r8
      a8:	a9 0c       	add	r10, r9
      aa:	c2 0c       	add	r12, r2
      ac:	7f 0e       	add	r7, r31
      ae:	7f 0e       	add	r7, r31
      b0:	7f 0e       	add	r7, r31
      b2:	7f 0e       	add	r7, r31
      b4:	7f 0e       	add	r7, r31
      b6:	7f 0e       	add	r7, r31
      b8:	7f 0e       	add	r7, r31
      ba:	09 0d       	add	r16, r9
      bc:	86 0d       	add	r24, r6
      be:	9f 0d       	add	r25, r15
      c0:	7f 0e       	add	r7, r31
      c2:	7f 0e       	add	r7, r31
      c4:	7f 0e       	add	r7, r31
      c6:	7f 0e       	add	r7, r31
      c8:	7f 0e       	add	r7, r31
      ca:	7f 0e       	add	r7, r31
      cc:	7f 0e       	add	r7, r31
      ce:	7f 0e       	add	r7, r31
      d0:	7f 0e       	add	r7, r31
      d2:	e6 0d       	add	r30, r6
      d4:	7f 0e       	add	r7, r31
      d6:	7f 0e       	add	r7, r31
      d8:	7f 0e       	add	r7, r31
      da:	7f 0e       	add	r7, r31
      dc:	7f 0e       	add	r7, r31
      de:	7f 0e       	add	r7, r31
      e0:	7f 0e       	add	r7, r31
      e2:	7f 0e       	add	r7, r31
      e4:	7f 0e       	add	r7, r31
      e6:	7f 0e       	add	r7, r31
      e8:	7f 0e       	add	r7, r31
      ea:	7f 0e       	add	r7, r31
      ec:	7f 0e       	add	r7, r31
      ee:	7f 0e       	add	r7, r31
      f0:	7f 0e       	add	r7, r31
      f2:	7f 0e       	add	r7, r31
      f4:	7f 0e       	add	r7, r31
      f6:	7f 0e       	add	r7, r31
      f8:	7f 0e       	add	r7, r31
      fa:	7f 0e       	add	r7, r31
      fc:	7f 0e       	add	r7, r31
      fe:	7f 0e       	add	r7, r31
     100:	7f 0e       	add	r7, r31
     102:	7f 0e       	add	r7, r31
     104:	7f 0e       	add	r7, r31
     106:	24 0e       	add	r2, r20
     108:	6d 09       	sbc	r22, r13
     10a:	e1 08       	sbc	r14, r1
     10c:	57 09       	sbc	r21, r7
     10e:	e1 08       	sbc	r14, r1
     110:	62 09       	sbc	r22, r2
     112:	e1 08       	sbc	r14, r1
     114:	41 09       	sbc	r20, r1
     116:	e1 08       	sbc	r14, r1
     118:	e1 08       	sbc	r14, r1
     11a:	e1 08       	sbc	r14, r1
     11c:	4c 09       	sbc	r20, r12
     11e:	e1 08       	sbc	r14, r1
     120:	57 09       	sbc	r21, r7
     122:	e1 08       	sbc	r14, r1
     124:	7b 09       	sbc	r23, r11
     126:	e1 08       	sbc	r14, r1
     128:	e1 08       	sbc	r14, r1
     12a:	e1 08       	sbc	r14, r1
     12c:	e1 08       	sbc	r14, r1
     12e:	e1 08       	sbc	r14, r1
     130:	e1 08       	sbc	r14, r1
     132:	e1 08       	sbc	r14, r1
     134:	36 09       	sbc	r19, r6
     136:	e1 08       	sbc	r14, r1
     138:	e1 08       	sbc	r14, r1
     13a:	e1 08       	sbc	r14, r1
     13c:	41 09       	sbc	r20, r1
     13e:	e1 08       	sbc	r14, r1
     140:	e1 08       	sbc	r14, r1
     142:	e1 08       	sbc	r14, r1
     144:	91 09       	sbc	r25, r1
     146:	e1 08       	sbc	r14, r1
     148:	e1 08       	sbc	r14, r1
     14a:	e1 08       	sbc	r14, r1
     14c:	e1 08       	sbc	r14, r1
     14e:	e1 08       	sbc	r14, r1
     150:	e1 08       	sbc	r14, r1
     152:	e1 08       	sbc	r14, r1
     154:	e1 08       	sbc	r14, r1
     156:	e1 08       	sbc	r14, r1
     158:	e1 08       	sbc	r14, r1
     15a:	e1 08       	sbc	r14, r1
     15c:	e1 08       	sbc	r14, r1
     15e:	e1 08       	sbc	r14, r1
     160:	e1 08       	sbc	r14, r1
     162:	e1 08       	sbc	r14, r1
     164:	86 09       	sbc	r24, r6
     166:	e1 08       	sbc	r14, r1
     168:	e1 08       	sbc	r14, r1
     16a:	e1 08       	sbc	r14, r1
     16c:	e1 08       	sbc	r14, r1
     16e:	e1 08       	sbc	r14, r1
     170:	e1 08       	sbc	r14, r1
     172:	e1 08       	sbc	r14, r1
     174:	7b 09       	sbc	r23, r11
     176:	e1 08       	sbc	r14, r1
     178:	e1 08       	sbc	r14, r1
     17a:	e1 08       	sbc	r14, r1
     17c:	e1 08       	sbc	r14, r1
     17e:	e1 08       	sbc	r14, r1
     180:	e1 08       	sbc	r14, r1
     182:	e1 08       	sbc	r14, r1
     184:	a7 09       	sbc	r26, r7
     186:	e1 08       	sbc	r14, r1
     188:	e1 08       	sbc	r14, r1
     18a:	e1 08       	sbc	r14, r1
     18c:	e1 08       	sbc	r14, r1
     18e:	e1 08       	sbc	r14, r1
     190:	e1 08       	sbc	r14, r1
     192:	e1 08       	sbc	r14, r1
     194:	e1 08       	sbc	r14, r1
     196:	e1 08       	sbc	r14, r1
     198:	e1 08       	sbc	r14, r1
     19a:	e1 08       	sbc	r14, r1
     19c:	e1 08       	sbc	r14, r1
     19e:	e1 08       	sbc	r14, r1
     1a0:	e1 08       	sbc	r14, r1
     1a2:	e1 08       	sbc	r14, r1
     1a4:	e1 08       	sbc	r14, r1
     1a6:	e1 08       	sbc	r14, r1
     1a8:	e1 08       	sbc	r14, r1
     1aa:	e1 08       	sbc	r14, r1
     1ac:	e1 08       	sbc	r14, r1
     1ae:	e1 08       	sbc	r14, r1
     1b0:	e1 08       	sbc	r14, r1
     1b2:	e1 08       	sbc	r14, r1
     1b4:	e1 08       	sbc	r14, r1
     1b6:	e1 08       	sbc	r14, r1
     1b8:	e1 08       	sbc	r14, r1
     1ba:	e1 08       	sbc	r14, r1
     1bc:	e1 08       	sbc	r14, r1
     1be:	e1 08       	sbc	r14, r1
     1c0:	e1 08       	sbc	r14, r1
     1c2:	e1 08       	sbc	r14, r1
     1c4:	9c 09       	sbc	r25, r12
     1c6:	e1 08       	sbc	r14, r1
     1c8:	e1 08       	sbc	r14, r1
     1ca:	e1 08       	sbc	r14, r1
     1cc:	e1 08       	sbc	r14, r1
     1ce:	e1 08       	sbc	r14, r1
     1d0:	e1 08       	sbc	r14, r1
     1d2:	e1 08       	sbc	r14, r1
     1d4:	e1 08       	sbc	r14, r1
     1d6:	e1 08       	sbc	r14, r1
     1d8:	e1 08       	sbc	r14, r1
     1da:	e1 08       	sbc	r14, r1
     1dc:	e1 08       	sbc	r14, r1
     1de:	e1 08       	sbc	r14, r1
     1e0:	e1 08       	sbc	r14, r1
     1e2:	e1 08       	sbc	r14, r1
     1e4:	91 09       	sbc	r25, r1
     1e6:	f2 0a       	sbc	r15, r18
     1e8:	e1 08       	sbc	r14, r1
     1ea:	e8 0a       	sbc	r14, r24
     1ec:	e1 08       	sbc	r14, r1
     1ee:	ed 0a       	sbc	r14, r29
     1f0:	e1 08       	sbc	r14, r1
     1f2:	de 0a       	sbc	r13, r30
     1f4:	e1 08       	sbc	r14, r1
     1f6:	e1 08       	sbc	r14, r1
     1f8:	e1 08       	sbc	r14, r1
     1fa:	e3 0a       	sbc	r14, r19
     1fc:	e1 08       	sbc	r14, r1
     1fe:	e8 0a       	sbc	r14, r24
     200:	e1 08       	sbc	r14, r1
     202:	f7 0a       	sbc	r15, r23
     204:	e1 08       	sbc	r14, r1
     206:	e1 08       	sbc	r14, r1
     208:	e1 08       	sbc	r14, r1
     20a:	e1 08       	sbc	r14, r1
     20c:	e1 08       	sbc	r14, r1
     20e:	e1 08       	sbc	r14, r1
     210:	e1 08       	sbc	r14, r1
     212:	d9 0a       	sbc	r13, r25
     214:	e1 08       	sbc	r14, r1
     216:	e1 08       	sbc	r14, r1
     218:	e1 08       	sbc	r14, r1
     21a:	de 0a       	sbc	r13, r30
     21c:	e1 08       	sbc	r14, r1
     21e:	e1 08       	sbc	r14, r1
     220:	e1 08       	sbc	r14, r1
     222:	01 0b       	sbc	r16, r17
     224:	e1 08       	sbc	r14, r1
     226:	e1 08       	sbc	r14, r1
     228:	e1 08       	sbc	r14, r1
     22a:	e1 08       	sbc	r14, r1
     22c:	e1 08       	sbc	r14, r1
     22e:	e1 08       	sbc	r14, r1
     230:	e1 08       	sbc	r14, r1
     232:	e1 08       	sbc	r14, r1
     234:	e1 08       	sbc	r14, r1
     236:	e1 08       	sbc	r14, r1
     238:	e1 08       	sbc	r14, r1
     23a:	e1 08       	sbc	r14, r1
     23c:	e1 08       	sbc	r14, r1
     23e:	e1 08       	sbc	r14, r1
     240:	e1 08       	sbc	r14, r1
     242:	fc 0a       	sbc	r15, r28
     244:	e1 08       	sbc	r14, r1
     246:	e1 08       	sbc	r14, r1
     248:	e1 08       	sbc	r14, r1
     24a:	e1 08       	sbc	r14, r1
     24c:	e1 08       	sbc	r14, r1
     24e:	e1 08       	sbc	r14, r1
     250:	e1 08       	sbc	r14, r1
     252:	f7 0a       	sbc	r15, r23
     254:	e1 08       	sbc	r14, r1
     256:	e1 08       	sbc	r14, r1
     258:	e1 08       	sbc	r14, r1
     25a:	e1 08       	sbc	r14, r1
     25c:	e1 08       	sbc	r14, r1
     25e:	e1 08       	sbc	r14, r1
     260:	e1 08       	sbc	r14, r1
     262:	0b 0b       	sbc	r16, r27
     264:	e1 08       	sbc	r14, r1
     266:	e1 08       	sbc	r14, r1
     268:	e1 08       	sbc	r14, r1
     26a:	e1 08       	sbc	r14, r1
     26c:	e1 08       	sbc	r14, r1
     26e:	e1 08       	sbc	r14, r1
     270:	e1 08       	sbc	r14, r1
     272:	e1 08       	sbc	r14, r1
     274:	e1 08       	sbc	r14, r1
     276:	e1 08       	sbc	r14, r1
     278:	e1 08       	sbc	r14, r1
     27a:	e1 08       	sbc	r14, r1
     27c:	e1 08       	sbc	r14, r1
     27e:	e1 08       	sbc	r14, r1
     280:	e1 08       	sbc	r14, r1
     282:	e1 08       	sbc	r14, r1
     284:	e1 08       	sbc	r14, r1
     286:	e1 08       	sbc	r14, r1
     288:	e1 08       	sbc	r14, r1
     28a:	e1 08       	sbc	r14, r1
     28c:	e1 08       	sbc	r14, r1
     28e:	e1 08       	sbc	r14, r1
     290:	e1 08       	sbc	r14, r1
     292:	e1 08       	sbc	r14, r1
     294:	e1 08       	sbc	r14, r1
     296:	e1 08       	sbc	r14, r1
     298:	e1 08       	sbc	r14, r1
     29a:	e1 08       	sbc	r14, r1
     29c:	e1 08       	sbc	r14, r1
     29e:	e1 08       	sbc	r14, r1
     2a0:	e1 08       	sbc	r14, r1
     2a2:	06 0b       	sbc	r16, r22
     2a4:	e1 08       	sbc	r14, r1
     2a6:	e1 08       	sbc	r14, r1
     2a8:	e1 08       	sbc	r14, r1
     2aa:	e1 08       	sbc	r14, r1
     2ac:	e1 08       	sbc	r14, r1
     2ae:	e1 08       	sbc	r14, r1
     2b0:	e1 08       	sbc	r14, r1
     2b2:	e1 08       	sbc	r14, r1
     2b4:	e1 08       	sbc	r14, r1
     2b6:	e1 08       	sbc	r14, r1
     2b8:	e1 08       	sbc	r14, r1
     2ba:	e1 08       	sbc	r14, r1
     2bc:	e1 08       	sbc	r14, r1
     2be:	e1 08       	sbc	r14, r1
     2c0:	e1 08       	sbc	r14, r1
     2c2:	01 0b       	sbc	r16, r17
     2c4:	8d 0b       	sbc	r24, r29
     2c6:	e1 08       	sbc	r14, r1
     2c8:	83 0b       	sbc	r24, r19
     2ca:	e1 08       	sbc	r14, r1
     2cc:	88 0b       	sbc	r24, r24
     2ce:	e1 08       	sbc	r14, r1
     2d0:	79 0b       	sbc	r23, r25
     2d2:	e1 08       	sbc	r14, r1
     2d4:	e1 08       	sbc	r14, r1
     2d6:	e1 08       	sbc	r14, r1
     2d8:	7e 0b       	sbc	r23, r30
     2da:	e1 08       	sbc	r14, r1
     2dc:	83 0b       	sbc	r24, r19
     2de:	e1 08       	sbc	r14, r1
     2e0:	92 0b       	sbc	r25, r18
     2e2:	e1 08       	sbc	r14, r1
     2e4:	e1 08       	sbc	r14, r1
     2e6:	e1 08       	sbc	r14, r1
     2e8:	e1 08       	sbc	r14, r1
     2ea:	e1 08       	sbc	r14, r1
     2ec:	e1 08       	sbc	r14, r1
     2ee:	e1 08       	sbc	r14, r1
     2f0:	74 0b       	sbc	r23, r20
     2f2:	e1 08       	sbc	r14, r1
     2f4:	e1 08       	sbc	r14, r1
     2f6:	e1 08       	sbc	r14, r1
     2f8:	79 0b       	sbc	r23, r25
     2fa:	e1 08       	sbc	r14, r1
     2fc:	e1 08       	sbc	r14, r1
     2fe:	e1 08       	sbc	r14, r1
     300:	9c 0b       	sbc	r25, r28
     302:	e1 08       	sbc	r14, r1
     304:	e1 08       	sbc	r14, r1
     306:	e1 08       	sbc	r14, r1
     308:	e1 08       	sbc	r14, r1
     30a:	e1 08       	sbc	r14, r1
     30c:	e1 08       	sbc	r14, r1
     30e:	e1 08       	sbc	r14, r1
     310:	e1 08       	sbc	r14, r1
     312:	e1 08       	sbc	r14, r1
     314:	e1 08       	sbc	r14, r1
     316:	e1 08       	sbc	r14, r1
     318:	e1 08       	sbc	r14, r1
     31a:	e1 08       	sbc	r14, r1
     31c:	e1 08       	sbc	r14, r1
     31e:	e1 08       	sbc	r14, r1
     320:	97 0b       	sbc	r25, r23
     322:	e1 08       	sbc	r14, r1
     324:	e1 08       	sbc	r14, r1
     326:	e1 08       	sbc	r14, r1
     328:	e1 08       	sbc	r14, r1
     32a:	e1 08       	sbc	r14, r1
     32c:	e1 08       	sbc	r14, r1
     32e:	e1 08       	sbc	r14, r1
     330:	92 0b       	sbc	r25, r18
     332:	e1 08       	sbc	r14, r1
     334:	e1 08       	sbc	r14, r1
     336:	e1 08       	sbc	r14, r1
     338:	e1 08       	sbc	r14, r1
     33a:	e1 08       	sbc	r14, r1
     33c:	e1 08       	sbc	r14, r1
     33e:	e1 08       	sbc	r14, r1
     340:	a6 0b       	sbc	r26, r22
     342:	e1 08       	sbc	r14, r1
     344:	e1 08       	sbc	r14, r1
     346:	e1 08       	sbc	r14, r1
     348:	e1 08       	sbc	r14, r1
     34a:	e1 08       	sbc	r14, r1
     34c:	e1 08       	sbc	r14, r1
     34e:	e1 08       	sbc	r14, r1
     350:	e1 08       	sbc	r14, r1
     352:	e1 08       	sbc	r14, r1
     354:	e1 08       	sbc	r14, r1
     356:	e1 08       	sbc	r14, r1
     358:	e1 08       	sbc	r14, r1
     35a:	e1 08       	sbc	r14, r1
     35c:	e1 08       	sbc	r14, r1
     35e:	e1 08       	sbc	r14, r1
     360:	e1 08       	sbc	r14, r1
     362:	e1 08       	sbc	r14, r1
     364:	e1 08       	sbc	r14, r1
     366:	e1 08       	sbc	r14, r1
     368:	e1 08       	sbc	r14, r1
     36a:	e1 08       	sbc	r14, r1
     36c:	e1 08       	sbc	r14, r1
     36e:	e1 08       	sbc	r14, r1
     370:	e1 08       	sbc	r14, r1
     372:	e1 08       	sbc	r14, r1
     374:	e1 08       	sbc	r14, r1
     376:	e1 08       	sbc	r14, r1
     378:	e1 08       	sbc	r14, r1
     37a:	e1 08       	sbc	r14, r1
     37c:	e1 08       	sbc	r14, r1
     37e:	e1 08       	sbc	r14, r1
     380:	a1 0b       	sbc	r26, r17
     382:	e1 08       	sbc	r14, r1
     384:	e1 08       	sbc	r14, r1
     386:	e1 08       	sbc	r14, r1
     388:	e1 08       	sbc	r14, r1
     38a:	e1 08       	sbc	r14, r1
     38c:	e1 08       	sbc	r14, r1
     38e:	e1 08       	sbc	r14, r1
     390:	e1 08       	sbc	r14, r1
     392:	e1 08       	sbc	r14, r1
     394:	e1 08       	sbc	r14, r1
     396:	e1 08       	sbc	r14, r1
     398:	e1 08       	sbc	r14, r1
     39a:	e1 08       	sbc	r14, r1
     39c:	e1 08       	sbc	r14, r1
     39e:	e1 08       	sbc	r14, r1
     3a0:	9c 0b       	sbc	r25, r28
     3a2:	8b 0c       	add	r8, r11
     3a4:	e1 08       	sbc	r14, r1
     3a6:	81 0c       	add	r8, r1
     3a8:	e1 08       	sbc	r14, r1
     3aa:	86 0c       	add	r8, r6
     3ac:	e1 08       	sbc	r14, r1
     3ae:	77 0c       	add	r7, r7
     3b0:	e1 08       	sbc	r14, r1
     3b2:	e1 08       	sbc	r14, r1
     3b4:	e1 08       	sbc	r14, r1
     3b6:	7c 0c       	add	r7, r12
     3b8:	e1 08       	sbc	r14, r1
     3ba:	81 0c       	add	r8, r1
     3bc:	e1 08       	sbc	r14, r1
     3be:	90 0c       	add	r9, r0
     3c0:	e1 08       	sbc	r14, r1
     3c2:	e1 08       	sbc	r14, r1
     3c4:	e1 08       	sbc	r14, r1
     3c6:	e1 08       	sbc	r14, r1
     3c8:	e1 08       	sbc	r14, r1
     3ca:	e1 08       	sbc	r14, r1
     3cc:	e1 08       	sbc	r14, r1
     3ce:	72 0c       	add	r7, r2
     3d0:	e1 08       	sbc	r14, r1
     3d2:	e1 08       	sbc	r14, r1
     3d4:	e1 08       	sbc	r14, r1
     3d6:	77 0c       	add	r7, r7
     3d8:	e1 08       	sbc	r14, r1
     3da:	e1 08       	sbc	r14, r1
     3dc:	e1 08       	sbc	r14, r1
     3de:	9a 0c       	add	r9, r10
     3e0:	e1 08       	sbc	r14, r1
     3e2:	e1 08       	sbc	r14, r1
     3e4:	e1 08       	sbc	r14, r1
     3e6:	e1 08       	sbc	r14, r1
     3e8:	e1 08       	sbc	r14, r1
     3ea:	e1 08       	sbc	r14, r1
     3ec:	e1 08       	sbc	r14, r1
     3ee:	e1 08       	sbc	r14, r1
     3f0:	e1 08       	sbc	r14, r1
     3f2:	e1 08       	sbc	r14, r1
     3f4:	e1 08       	sbc	r14, r1
     3f6:	e1 08       	sbc	r14, r1
     3f8:	e1 08       	sbc	r14, r1
     3fa:	e1 08       	sbc	r14, r1
     3fc:	e1 08       	sbc	r14, r1
     3fe:	95 0c       	add	r9, r5
     400:	e1 08       	sbc	r14, r1
     402:	e1 08       	sbc	r14, r1
     404:	e1 08       	sbc	r14, r1
     406:	e1 08       	sbc	r14, r1
     408:	e1 08       	sbc	r14, r1
     40a:	e1 08       	sbc	r14, r1
     40c:	e1 08       	sbc	r14, r1
     40e:	90 0c       	add	r9, r0
     410:	e1 08       	sbc	r14, r1
     412:	e1 08       	sbc	r14, r1
     414:	e1 08       	sbc	r14, r1
     416:	e1 08       	sbc	r14, r1
     418:	e1 08       	sbc	r14, r1
     41a:	e1 08       	sbc	r14, r1
     41c:	e1 08       	sbc	r14, r1
     41e:	a4 0c       	add	r10, r4
     420:	e1 08       	sbc	r14, r1
     422:	e1 08       	sbc	r14, r1
     424:	e1 08       	sbc	r14, r1
     426:	e1 08       	sbc	r14, r1
     428:	e1 08       	sbc	r14, r1
     42a:	e1 08       	sbc	r14, r1
     42c:	e1 08       	sbc	r14, r1
     42e:	e1 08       	sbc	r14, r1
     430:	e1 08       	sbc	r14, r1
     432:	e1 08       	sbc	r14, r1
     434:	e1 08       	sbc	r14, r1
     436:	e1 08       	sbc	r14, r1
     438:	e1 08       	sbc	r14, r1
     43a:	e1 08       	sbc	r14, r1
     43c:	e1 08       	sbc	r14, r1
     43e:	e1 08       	sbc	r14, r1
     440:	e1 08       	sbc	r14, r1
     442:	e1 08       	sbc	r14, r1
     444:	e1 08       	sbc	r14, r1
     446:	e1 08       	sbc	r14, r1
     448:	e1 08       	sbc	r14, r1
     44a:	e1 08       	sbc	r14, r1
     44c:	e1 08       	sbc	r14, r1
     44e:	e1 08       	sbc	r14, r1
     450:	e1 08       	sbc	r14, r1
     452:	e1 08       	sbc	r14, r1
     454:	e1 08       	sbc	r14, r1
     456:	e1 08       	sbc	r14, r1
     458:	e1 08       	sbc	r14, r1
     45a:	e1 08       	sbc	r14, r1
     45c:	e1 08       	sbc	r14, r1
     45e:	9f 0c       	add	r9, r15
     460:	e1 08       	sbc	r14, r1
     462:	e1 08       	sbc	r14, r1
     464:	e1 08       	sbc	r14, r1
     466:	e1 08       	sbc	r14, r1
     468:	e1 08       	sbc	r14, r1
     46a:	e1 08       	sbc	r14, r1
     46c:	e1 08       	sbc	r14, r1
     46e:	e1 08       	sbc	r14, r1
     470:	e1 08       	sbc	r14, r1
     472:	e1 08       	sbc	r14, r1
     474:	e1 08       	sbc	r14, r1
     476:	e1 08       	sbc	r14, r1
     478:	e1 08       	sbc	r14, r1
     47a:	e1 08       	sbc	r14, r1
     47c:	e1 08       	sbc	r14, r1
     47e:	9a 0c       	add	r9, r10
     480:	68 0d       	add	r22, r8
     482:	e1 08       	sbc	r14, r1
     484:	5e 0d       	add	r21, r14
     486:	e1 08       	sbc	r14, r1
     488:	63 0d       	add	r22, r3
     48a:	e1 08       	sbc	r14, r1
     48c:	54 0d       	add	r21, r4
     48e:	e1 08       	sbc	r14, r1
     490:	e1 08       	sbc	r14, r1
     492:	e1 08       	sbc	r14, r1
     494:	59 0d       	add	r21, r9
     496:	e1 08       	sbc	r14, r1
     498:	5e 0d       	add	r21, r14
     49a:	e1 08       	sbc	r14, r1
     49c:	6d 0d       	add	r22, r13
     49e:	e1 08       	sbc	r14, r1
     4a0:	e1 08       	sbc	r14, r1
     4a2:	e1 08       	sbc	r14, r1
     4a4:	e1 08       	sbc	r14, r1
     4a6:	e1 08       	sbc	r14, r1
     4a8:	e1 08       	sbc	r14, r1
     4aa:	e1 08       	sbc	r14, r1
     4ac:	4f 0d       	add	r20, r15
     4ae:	e1 08       	sbc	r14, r1
     4b0:	e1 08       	sbc	r14, r1
     4b2:	e1 08       	sbc	r14, r1
     4b4:	54 0d       	add	r21, r4
     4b6:	e1 08       	sbc	r14, r1
     4b8:	e1 08       	sbc	r14, r1
     4ba:	e1 08       	sbc	r14, r1
     4bc:	77 0d       	add	r23, r7
     4be:	e1 08       	sbc	r14, r1
     4c0:	e1 08       	sbc	r14, r1
     4c2:	e1 08       	sbc	r14, r1
     4c4:	e1 08       	sbc	r14, r1
     4c6:	e1 08       	sbc	r14, r1
     4c8:	e1 08       	sbc	r14, r1
     4ca:	e1 08       	sbc	r14, r1
     4cc:	e1 08       	sbc	r14, r1
     4ce:	e1 08       	sbc	r14, r1
     4d0:	e1 08       	sbc	r14, r1
     4d2:	e1 08       	sbc	r14, r1
     4d4:	e1 08       	sbc	r14, r1
     4d6:	e1 08       	sbc	r14, r1
     4d8:	e1 08       	sbc	r14, r1
     4da:	e1 08       	sbc	r14, r1
     4dc:	72 0d       	add	r23, r2
     4de:	e1 08       	sbc	r14, r1
     4e0:	e1 08       	sbc	r14, r1
     4e2:	e1 08       	sbc	r14, r1
     4e4:	e1 08       	sbc	r14, r1
     4e6:	e1 08       	sbc	r14, r1
     4e8:	e1 08       	sbc	r14, r1
     4ea:	e1 08       	sbc	r14, r1
     4ec:	6d 0d       	add	r22, r13
     4ee:	e1 08       	sbc	r14, r1
     4f0:	e1 08       	sbc	r14, r1
     4f2:	e1 08       	sbc	r14, r1
     4f4:	e1 08       	sbc	r14, r1
     4f6:	e1 08       	sbc	r14, r1
     4f8:	e1 08       	sbc	r14, r1
     4fa:	e1 08       	sbc	r14, r1
     4fc:	81 0d       	add	r24, r1
     4fe:	e1 08       	sbc	r14, r1
     500:	e1 08       	sbc	r14, r1
     502:	e1 08       	sbc	r14, r1
     504:	e1 08       	sbc	r14, r1
     506:	e1 08       	sbc	r14, r1
     508:	e1 08       	sbc	r14, r1
     50a:	e1 08       	sbc	r14, r1
     50c:	e1 08       	sbc	r14, r1
     50e:	e1 08       	sbc	r14, r1
     510:	e1 08       	sbc	r14, r1
     512:	e1 08       	sbc	r14, r1
     514:	e1 08       	sbc	r14, r1
     516:	e1 08       	sbc	r14, r1
     518:	e1 08       	sbc	r14, r1
     51a:	e1 08       	sbc	r14, r1
     51c:	e1 08       	sbc	r14, r1
     51e:	e1 08       	sbc	r14, r1
     520:	e1 08       	sbc	r14, r1
     522:	e1 08       	sbc	r14, r1
     524:	e1 08       	sbc	r14, r1
     526:	e1 08       	sbc	r14, r1
     528:	e1 08       	sbc	r14, r1
     52a:	e1 08       	sbc	r14, r1
     52c:	e1 08       	sbc	r14, r1
     52e:	e1 08       	sbc	r14, r1
     530:	e1 08       	sbc	r14, r1
     532:	e1 08       	sbc	r14, r1
     534:	e1 08       	sbc	r14, r1
     536:	e1 08       	sbc	r14, r1
     538:	e1 08       	sbc	r14, r1
     53a:	e1 08       	sbc	r14, r1
     53c:	7c 0d       	add	r23, r12
     53e:	e1 08       	sbc	r14, r1
     540:	e1 08       	sbc	r14, r1
     542:	e1 08       	sbc	r14, r1
     544:	e1 08       	sbc	r14, r1
     546:	e1 08       	sbc	r14, r1
     548:	e1 08       	sbc	r14, r1
     54a:	e1 08       	sbc	r14, r1
     54c:	e1 08       	sbc	r14, r1
     54e:	e1 08       	sbc	r14, r1
     550:	e1 08       	sbc	r14, r1
     552:	e1 08       	sbc	r14, r1
     554:	e1 08       	sbc	r14, r1
     556:	e1 08       	sbc	r14, r1
     558:	e1 08       	sbc	r14, r1
     55a:	e1 08       	sbc	r14, r1
     55c:	77 0d       	add	r23, r7
     55e:	54 0e       	add	r5, r20
     560:	71 0e       	add	r7, r17
     562:	4a 0e       	add	r4, r26
     564:	71 0e       	add	r7, r17
     566:	4f 0e       	add	r4, r31
     568:	71 0e       	add	r7, r17
     56a:	40 0e       	add	r4, r16
     56c:	71 0e       	add	r7, r17
     56e:	71 0e       	add	r7, r17
     570:	71 0e       	add	r7, r17
     572:	45 0e       	add	r4, r21
     574:	71 0e       	add	r7, r17
     576:	4a 0e       	add	r4, r26
     578:	71 0e       	add	r7, r17
     57a:	59 0e       	add	r5, r25
     57c:	71 0e       	add	r7, r17
     57e:	71 0e       	add	r7, r17
     580:	71 0e       	add	r7, r17
     582:	71 0e       	add	r7, r17
     584:	71 0e       	add	r7, r17
     586:	71 0e       	add	r7, r17
     588:	71 0e       	add	r7, r17
     58a:	3b 0e       	add	r3, r27
     58c:	71 0e       	add	r7, r17
     58e:	71 0e       	add	r7, r17
     590:	71 0e       	add	r7, r17
     592:	40 0e       	add	r4, r16
     594:	71 0e       	add	r7, r17
     596:	71 0e       	add	r7, r17
     598:	71 0e       	add	r7, r17
     59a:	63 0e       	add	r6, r19
     59c:	71 0e       	add	r7, r17
     59e:	71 0e       	add	r7, r17
     5a0:	71 0e       	add	r7, r17
     5a2:	71 0e       	add	r7, r17
     5a4:	71 0e       	add	r7, r17
     5a6:	71 0e       	add	r7, r17
     5a8:	71 0e       	add	r7, r17
     5aa:	71 0e       	add	r7, r17
     5ac:	71 0e       	add	r7, r17
     5ae:	71 0e       	add	r7, r17
     5b0:	71 0e       	add	r7, r17
     5b2:	71 0e       	add	r7, r17
     5b4:	71 0e       	add	r7, r17
     5b6:	71 0e       	add	r7, r17
     5b8:	71 0e       	add	r7, r17
     5ba:	5e 0e       	add	r5, r30
     5bc:	71 0e       	add	r7, r17
     5be:	71 0e       	add	r7, r17
     5c0:	71 0e       	add	r7, r17
     5c2:	71 0e       	add	r7, r17
     5c4:	71 0e       	add	r7, r17
     5c6:	71 0e       	add	r7, r17
     5c8:	71 0e       	add	r7, r17
     5ca:	59 0e       	add	r5, r25
     5cc:	71 0e       	add	r7, r17
     5ce:	71 0e       	add	r7, r17
     5d0:	71 0e       	add	r7, r17
     5d2:	71 0e       	add	r7, r17
     5d4:	71 0e       	add	r7, r17
     5d6:	71 0e       	add	r7, r17
     5d8:	71 0e       	add	r7, r17
     5da:	6d 0e       	add	r6, r29
     5dc:	71 0e       	add	r7, r17
     5de:	71 0e       	add	r7, r17
     5e0:	71 0e       	add	r7, r17
     5e2:	71 0e       	add	r7, r17
     5e4:	71 0e       	add	r7, r17
     5e6:	71 0e       	add	r7, r17
     5e8:	71 0e       	add	r7, r17
     5ea:	71 0e       	add	r7, r17
     5ec:	71 0e       	add	r7, r17
     5ee:	71 0e       	add	r7, r17
     5f0:	71 0e       	add	r7, r17
     5f2:	71 0e       	add	r7, r17
     5f4:	71 0e       	add	r7, r17
     5f6:	71 0e       	add	r7, r17
     5f8:	71 0e       	add	r7, r17
     5fa:	71 0e       	add	r7, r17
     5fc:	71 0e       	add	r7, r17
     5fe:	71 0e       	add	r7, r17
     600:	71 0e       	add	r7, r17
     602:	71 0e       	add	r7, r17
     604:	71 0e       	add	r7, r17
     606:	71 0e       	add	r7, r17
     608:	71 0e       	add	r7, r17
     60a:	71 0e       	add	r7, r17
     60c:	71 0e       	add	r7, r17
     60e:	71 0e       	add	r7, r17
     610:	71 0e       	add	r7, r17
     612:	71 0e       	add	r7, r17
     614:	71 0e       	add	r7, r17
     616:	71 0e       	add	r7, r17
     618:	71 0e       	add	r7, r17
     61a:	68 0e       	add	r6, r24
     61c:	71 0e       	add	r7, r17
     61e:	71 0e       	add	r7, r17
     620:	71 0e       	add	r7, r17
     622:	71 0e       	add	r7, r17
     624:	71 0e       	add	r7, r17
     626:	71 0e       	add	r7, r17
     628:	71 0e       	add	r7, r17
     62a:	71 0e       	add	r7, r17
     62c:	71 0e       	add	r7, r17
     62e:	71 0e       	add	r7, r17
     630:	71 0e       	add	r7, r17
     632:	71 0e       	add	r7, r17
     634:	71 0e       	add	r7, r17
     636:	71 0e       	add	r7, r17
     638:	71 0e       	add	r7, r17
     63a:	63 0e       	add	r6, r19

0000063c <__ctors_end>:
     63c:	11 24       	eor	r1, r1
     63e:	1f be       	out	0x3f, r1	; 63
     640:	cf e5       	ldi	r28, 0x5F	; 95
     642:	d4 e0       	ldi	r29, 0x04	; 4
     644:	de bf       	out	0x3e, r29	; 62
     646:	cd bf       	out	0x3d, r28	; 61

00000648 <__do_copy_data>:
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	a0 e6       	ldi	r26, 0x60	; 96
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	e0 e1       	ldi	r30, 0x10	; 16
     650:	f2 e2       	ldi	r31, 0x22	; 34
     652:	02 c0       	rjmp	.+4      	; 0x658 <__do_copy_data+0x10>
     654:	05 90       	lpm	r0, Z+
     656:	0d 92       	st	X+, r0
     658:	a4 36       	cpi	r26, 0x64	; 100
     65a:	b1 07       	cpc	r27, r17
     65c:	d9 f7       	brne	.-10     	; 0x654 <__do_copy_data+0xc>

0000065e <__do_clear_bss>:
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	a4 e6       	ldi	r26, 0x64	; 100
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	01 c0       	rjmp	.+2      	; 0x668 <.do_clear_bss_start>

00000666 <.do_clear_bss_loop>:
     666:	1d 92       	st	X+, r1

00000668 <.do_clear_bss_start>:
     668:	a4 3b       	cpi	r26, 0xB4	; 180
     66a:	b2 07       	cpc	r27, r18
     66c:	e1 f7       	brne	.-8      	; 0x666 <.do_clear_bss_loop>
     66e:	0e 94 98 08 	call	0x1130	; 0x1130 <main>
     672:	0c 94 06 11 	jmp	0x220c	; 0x220c <_exit>

00000676 <__bad_interrupt>:
     676:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000067a <_Z10get_buttonh>:
uint8_t cSpeed = 0xff, incCounter = 0;
int16_t cSpeedDiff = 0;

/* -------------------- BUTTON + SWITCH -------------------- */
uint8_t get_button(uint8_t keyid)
{
     67a:	98 2f       	mov	r25, r24
	if ((PINB & 0x0e) != 0x0e)
     67c:	86 b3       	in	r24, 0x16	; 22
     67e:	8e 70       	andi	r24, 0x0E	; 14
     680:	8e 30       	cpi	r24, 0x0E	; 14
     682:	81 f0       	breq	.+32     	; 0x6a4 <_Z10get_buttonh+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     684:	2f ef       	ldi	r18, 0xFF	; 255
     686:	37 ee       	ldi	r19, 0xE7	; 231
     688:	83 e0       	ldi	r24, 0x03	; 3
     68a:	21 50       	subi	r18, 0x01	; 1
     68c:	30 40       	sbci	r19, 0x00	; 0
     68e:	80 40       	sbci	r24, 0x00	; 0
     690:	e1 f7       	brne	.-8      	; 0x68a <_Z10get_buttonh+0x10>
     692:	00 c0       	rjmp	.+0      	; 0x694 <_Z10get_buttonh+0x1a>
     694:	00 00       	nop
	{
		_delay_ms(80);
		if ((PINB|keyid) == keyid) return 1;
     696:	26 b3       	in	r18, 0x16	; 22
     698:	29 2b       	or	r18, r25
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	92 17       	cp	r25, r18
     69e:	19 f0       	breq	.+6      	; 0x6a6 <_Z10get_buttonh+0x2c>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	08 95       	ret
	}
	return 0;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
}
     6a6:	08 95       	ret

000006a8 <_Z10get_switchv>:

uint8_t get_switch()
{
	uint8_t x=0;
	x = ~PINC;
     6a8:	83 b3       	in	r24, 0x13	; 19
     6aa:	80 95       	com	r24
	x = x & 0x07;
	return x;
}
     6ac:	87 70       	andi	r24, 0x07	; 7
     6ae:	08 95       	ret

000006b0 <_Z11get_switch2v>:

uint8_t get_switch2()
{
	uint8_t x=0;
	x = ~PINC;
     6b0:	83 b3       	in	r24, 0x13	; 19
     6b2:	80 95       	com	r24
	x = x & 0x08;
	return x;
}
     6b4:	88 70       	andi	r24, 0x08	; 8
     6b6:	08 95       	ret

000006b8 <_Z9cal_ratiov>:
	velocity = veloc;
}

void cal_ratio( void )
{
	cnt_ratio++;
     6b8:	80 91 7b 00 	lds	r24, 0x007B
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	80 93 7b 00 	sts	0x007B, r24
	if (cnt_ratio >= 20) /* 20ms */
     6c2:	84 31       	cpi	r24, 0x14	; 20
     6c4:	08 f4       	brcc	.+2      	; 0x6c8 <_Z9cal_ratiov+0x10>
     6c6:	cb c0       	rjmp	.+406    	; 0x85e <_Z9cal_ratiov+0x1a6>
	{
		if (velocity < 0)
     6c8:	80 91 7c 00 	lds	r24, 0x007C
     6cc:	90 91 7d 00 	lds	r25, 0x007D
     6d0:	99 23       	and	r25, r25
     6d2:	8c f4       	brge	.+34     	; 0x6f6 <_Z9cal_ratiov+0x3e>
		{
			ratio = ratio_base;
     6d4:	80 91 75 00 	lds	r24, 0x0075
     6d8:	90 91 76 00 	lds	r25, 0x0076
     6dc:	a0 91 77 00 	lds	r26, 0x0077
     6e0:	b0 91 78 00 	lds	r27, 0x0078
     6e4:	80 93 71 00 	sts	0x0071, r24
     6e8:	90 93 72 00 	sts	0x0072, r25
     6ec:	a0 93 73 00 	sts	0x0073, r26
     6f0:	b0 93 74 00 	sts	0x0074, r27
     6f4:	9f c0       	rjmp	.+318    	; 0x834 <_Z9cal_ratiov+0x17c>
		}
		else
		{
			if      (pulse_ratio < velocity / 2)    ratio = ratio_base + 0.3;
     6f6:	9c 01       	movw	r18, r24
     6f8:	99 23       	and	r25, r25
     6fa:	14 f4       	brge	.+4      	; 0x700 <_Z9cal_ratiov+0x48>
     6fc:	2f 5f       	subi	r18, 0xFF	; 255
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	a9 01       	movw	r20, r18
     702:	55 95       	asr	r21
     704:	47 95       	ror	r20
     706:	20 91 79 00 	lds	r18, 0x0079
     70a:	30 91 7a 00 	lds	r19, 0x007A
     70e:	24 17       	cp	r18, r20
     710:	35 07       	cpc	r19, r21
     712:	bc f4       	brge	.+46     	; 0x742 <_Z9cal_ratiov+0x8a>
     714:	2a e9       	ldi	r18, 0x9A	; 154
     716:	39 e9       	ldi	r19, 0x99	; 153
     718:	49 e9       	ldi	r20, 0x99	; 153
     71a:	5e e3       	ldi	r21, 0x3E	; 62
     71c:	60 91 75 00 	lds	r22, 0x0075
     720:	70 91 76 00 	lds	r23, 0x0076
     724:	80 91 77 00 	lds	r24, 0x0077
     728:	90 91 78 00 	lds	r25, 0x0078
     72c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__addsf3>
     730:	60 93 71 00 	sts	0x0071, r22
     734:	70 93 72 00 	sts	0x0072, r23
     738:	80 93 73 00 	sts	0x0073, r24
     73c:	90 93 74 00 	sts	0x0074, r25
     740:	5e c0       	rjmp	.+188    	; 0x7fe <_Z9cal_ratiov+0x146>
			else if (pulse_ratio < velocity)        ratio = ratio_base + 0.1;
     742:	28 17       	cp	r18, r24
     744:	39 07       	cpc	r19, r25
     746:	bc f4       	brge	.+46     	; 0x776 <_Z9cal_ratiov+0xbe>
     748:	2d ec       	ldi	r18, 0xCD	; 205
     74a:	3c ec       	ldi	r19, 0xCC	; 204
     74c:	4c ec       	ldi	r20, 0xCC	; 204
     74e:	5d e3       	ldi	r21, 0x3D	; 61
     750:	60 91 75 00 	lds	r22, 0x0075
     754:	70 91 76 00 	lds	r23, 0x0076
     758:	80 91 77 00 	lds	r24, 0x0077
     75c:	90 91 78 00 	lds	r25, 0x0078
     760:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__addsf3>
     764:	60 93 71 00 	sts	0x0071, r22
     768:	70 93 72 00 	sts	0x0072, r23
     76c:	80 93 73 00 	sts	0x0073, r24
     770:	90 93 74 00 	sts	0x0074, r25
     774:	44 c0       	rjmp	.+136    	; 0x7fe <_Z9cal_ratiov+0x146>
			else if (pulse_ratio > velocity)        ratio = ratio_base - 0.35;
     776:	82 17       	cp	r24, r18
     778:	93 07       	cpc	r25, r19
     77a:	bc f4       	brge	.+46     	; 0x7aa <_Z9cal_ratiov+0xf2>
     77c:	23 e3       	ldi	r18, 0x33	; 51
     77e:	33 e3       	ldi	r19, 0x33	; 51
     780:	43 eb       	ldi	r20, 0xB3	; 179
     782:	5e e3       	ldi	r21, 0x3E	; 62
     784:	60 91 75 00 	lds	r22, 0x0075
     788:	70 91 76 00 	lds	r23, 0x0076
     78c:	80 91 77 00 	lds	r24, 0x0077
     790:	90 91 78 00 	lds	r25, 0x0078
     794:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__subsf3>
     798:	60 93 71 00 	sts	0x0071, r22
     79c:	70 93 72 00 	sts	0x0072, r23
     7a0:	80 93 73 00 	sts	0x0073, r24
     7a4:	90 93 74 00 	sts	0x0074, r25
     7a8:	2a c0       	rjmp	.+84     	; 0x7fe <_Z9cal_ratiov+0x146>
			else if (pulse_ratio > velocity / 2)    ratio = ratio_base - 0.25;
     7aa:	42 17       	cp	r20, r18
     7ac:	53 07       	cpc	r21, r19
     7ae:	bc f4       	brge	.+46     	; 0x7de <_Z9cal_ratiov+0x126>
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	40 e8       	ldi	r20, 0x80	; 128
     7b6:	5e e3       	ldi	r21, 0x3E	; 62
     7b8:	60 91 75 00 	lds	r22, 0x0075
     7bc:	70 91 76 00 	lds	r23, 0x0076
     7c0:	80 91 77 00 	lds	r24, 0x0077
     7c4:	90 91 78 00 	lds	r25, 0x0078
     7c8:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__subsf3>
     7cc:	60 93 71 00 	sts	0x0071, r22
     7d0:	70 93 72 00 	sts	0x0072, r23
     7d4:	80 93 73 00 	sts	0x0073, r24
     7d8:	90 93 74 00 	sts	0x0074, r25
     7dc:	10 c0       	rjmp	.+32     	; 0x7fe <_Z9cal_ratiov+0x146>
			else ratio = ratio_base;
     7de:	80 91 75 00 	lds	r24, 0x0075
     7e2:	90 91 76 00 	lds	r25, 0x0076
     7e6:	a0 91 77 00 	lds	r26, 0x0077
     7ea:	b0 91 78 00 	lds	r27, 0x0078
     7ee:	80 93 71 00 	sts	0x0071, r24
     7f2:	90 93 72 00 	sts	0x0072, r25
     7f6:	a0 93 73 00 	sts	0x0073, r26
     7fa:	b0 93 74 00 	sts	0x0074, r27
			
			if (ratio <= 0) ratio = 0.1;
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	a9 01       	movw	r20, r18
     804:	60 91 71 00 	lds	r22, 0x0071
     808:	70 91 72 00 	lds	r23, 0x0072
     80c:	80 91 73 00 	lds	r24, 0x0073
     810:	90 91 74 00 	lds	r25, 0x0074
     814:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__cmpsf2>
     818:	18 16       	cp	r1, r24
     81a:	64 f0       	brlt	.+24     	; 0x834 <_Z9cal_ratiov+0x17c>
     81c:	8d ec       	ldi	r24, 0xCD	; 205
     81e:	9c ec       	ldi	r25, 0xCC	; 204
     820:	ac ec       	ldi	r26, 0xCC	; 204
     822:	bd e3       	ldi	r27, 0x3D	; 61
     824:	80 93 71 00 	sts	0x0071, r24
     828:	90 93 72 00 	sts	0x0072, r25
     82c:	a0 93 73 00 	sts	0x0073, r26
     830:	b0 93 74 00 	sts	0x0074, r27
		}
		
		cSpeedDiff = pulse_ratio - cSpeed;
     834:	80 91 79 00 	lds	r24, 0x0079
     838:	90 91 7a 00 	lds	r25, 0x007A
     83c:	20 91 61 00 	lds	r18, 0x0061
     840:	ac 01       	movw	r20, r24
     842:	42 1b       	sub	r20, r18
     844:	51 09       	sbc	r21, r1
     846:	50 93 6c 00 	sts	0x006C, r21
     84a:	40 93 6b 00 	sts	0x006B, r20
		cSpeed = pulse_ratio;
     84e:	80 93 61 00 	sts	0x0061, r24
		
		pulse_ratio = 0;
     852:	10 92 7a 00 	sts	0x007A, r1
     856:	10 92 79 00 	sts	0x0079, r1
		cnt_ratio = 0;
     85a:	10 92 7b 00 	sts	0x007B, r1
     85e:	08 95       	ret

00000860 <_Z6handlei>:
	}
	return false;
}

void handle(int goc)
{
     860:	83 38       	cpi	r24, 0x83	; 131
     862:	2f ef       	ldi	r18, 0xFF	; 255
     864:	92 07       	cpc	r25, r18
     866:	14 f4       	brge	.+4      	; 0x86c <_Z6handlei+0xc>
     868:	83 e8       	ldi	r24, 0x83	; 131
     86a:	9f ef       	ldi	r25, 0xFF	; 255
     86c:	8e 37       	cpi	r24, 0x7E	; 126
     86e:	91 05       	cpc	r25, r1
     870:	14 f0       	brlt	.+4      	; 0x876 <_Z6handlei+0x16>
     872:	8d e7       	ldi	r24, 0x7D	; 125
     874:	90 e0       	ldi	r25, 0x00	; 0
	if      (goc > SERVO_ANGLE_MAX)  goc =  SERVO_ANGLE_MAX;
	else if (goc < -SERVO_ANGLE_MAX) goc = -SERVO_ANGLE_MAX;
	
	OCR1A = SERVO_CENTER + (goc * STEP);
     876:	88 0f       	add	r24, r24
     878:	99 1f       	adc	r25, r25
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	20 91 62 00 	lds	r18, 0x0062
     882:	30 91 63 00 	lds	r19, 0x0063
     886:	82 0f       	add	r24, r18
     888:	93 1f       	adc	r25, r19
     88a:	9b bd       	out	0x2b, r25	; 43
     88c:	8a bd       	out	0x2a, r24	; 42
     88e:	08 95       	ret

00000890 <_Z5speedii>:
}

void speed(int left, int right)
{
     890:	8f 92       	push	r8
     892:	9f 92       	push	r9
     894:	af 92       	push	r10
     896:	bf 92       	push	r11
     898:	cf 92       	push	r12
     89a:	df 92       	push	r13
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	8b 01       	movw	r16, r22
	left  = left  *  ratio;
     8aa:	80 90 71 00 	lds	r8, 0x0071
     8ae:	90 90 72 00 	lds	r9, 0x0072
     8b2:	a0 90 73 00 	lds	r10, 0x0073
     8b6:	b0 90 74 00 	lds	r11, 0x0074
     8ba:	bc 01       	movw	r22, r24
     8bc:	88 27       	eor	r24, r24
     8be:	77 fd       	sbrc	r23, 7
     8c0:	80 95       	com	r24
     8c2:	98 2f       	mov	r25, r24
     8c4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__floatsisf>
     8c8:	a5 01       	movw	r20, r10
     8ca:	94 01       	movw	r18, r8
     8cc:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     8d0:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fixsfsi>
     8d4:	6b 01       	movw	r12, r22
     8d6:	7c 01       	movw	r14, r24
     8d8:	eb 01       	movw	r28, r22
	right = right *  ratio;
     8da:	b8 01       	movw	r22, r16
     8dc:	88 27       	eor	r24, r24
     8de:	77 fd       	sbrc	r23, 7
     8e0:	80 95       	com	r24
     8e2:	98 2f       	mov	r25, r24
     8e4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__floatsisf>
     8e8:	9b 01       	movw	r18, r22
     8ea:	ac 01       	movw	r20, r24
     8ec:	c5 01       	movw	r24, r10
     8ee:	b4 01       	movw	r22, r8
     8f0:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     8f4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fixsfsi>
     8f8:	9b 01       	movw	r18, r22
	
	if (left >= 0)
     8fa:	dd 23       	and	r29, r29
     8fc:	5c f0       	brlt	.+22     	; 0x914 <_Z5speedii+0x84>
	{
		sbi(PORTD, DIR00);
     8fe:	90 9a       	sbi	0x12, 0	; 18
		cbi(PORTD, DIR01);
     900:	91 98       	cbi	0x12, 1	; 18
		OCR1B = left * 200;
     902:	e8 ec       	ldi	r30, 0xC8	; 200
     904:	ec 9d       	mul	r30, r12
     906:	a0 01       	movw	r20, r0
     908:	ed 9d       	mul	r30, r13
     90a:	50 0d       	add	r21, r0
     90c:	11 24       	eor	r1, r1
     90e:	59 bd       	out	0x29, r21	; 41
     910:	48 bd       	out	0x28, r20	; 40
     912:	0b c0       	rjmp	.+22     	; 0x92a <_Z5speedii+0x9a>
	}
	else
	{
		cbi(PORTD, DIR00);
     914:	90 98       	cbi	0x12, 0	; 18
		sbi(PORTD, DIR01);
     916:	91 9a       	sbi	0x12, 1	; 18
		OCR1B = (-left) * 200;
     918:	e8 e3       	ldi	r30, 0x38	; 56
     91a:	ec 9d       	mul	r30, r12
     91c:	a0 01       	movw	r20, r0
     91e:	ed 9d       	mul	r30, r13
     920:	50 0d       	add	r21, r0
     922:	5c 19       	sub	r21, r12
     924:	11 24       	eor	r1, r1
     926:	59 bd       	out	0x29, r21	; 41
     928:	48 bd       	out	0x28, r20	; 40
	}
	
	if (right >= 0)
     92a:	33 23       	and	r19, r19
     92c:	7c f0       	brlt	.+30     	; 0x94c <_Z5speedii+0xbc>
	{
		sbi(PORTD, DIR10);
     92e:	93 9a       	sbi	0x12, 3	; 18
		cbi(PORTD, DIR11);
     930:	96 98       	cbi	0x12, 6	; 18
		OCR2 = right * 255/100;
     932:	4f ef       	ldi	r20, 0xFF	; 255
     934:	46 9f       	mul	r20, r22
     936:	90 01       	movw	r18, r0
     938:	47 9f       	mul	r20, r23
     93a:	30 0d       	add	r19, r0
     93c:	11 24       	eor	r1, r1
     93e:	c9 01       	movw	r24, r18
     940:	64 e6       	ldi	r22, 0x64	; 100
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodhi4>
     948:	63 bd       	out	0x23, r22	; 35
     94a:	0f c0       	rjmp	.+30     	; 0x96a <_Z5speedii+0xda>
	}
	else
	{
		cbi(PORTD, DIR10);
     94c:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD, DIR11);
     94e:	96 9a       	sbi	0x12, 6	; 18
		OCR2 = (-right) * 255/100;
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	46 9f       	mul	r20, r22
     954:	90 01       	movw	r18, r0
     956:	47 9f       	mul	r20, r23
     958:	30 0d       	add	r19, r0
     95a:	36 1b       	sub	r19, r22
     95c:	11 24       	eor	r1, r1
     95e:	c9 01       	movw	r24, r18
     960:	64 e6       	ldi	r22, 0x64	; 100
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodhi4>
     968:	63 bd       	out	0x23, r22	; 35
	}
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	bf 90       	pop	r11
     97c:	af 90       	pop	r10
     97e:	9f 90       	pop	r9
     980:	8f 90       	pop	r8
     982:	08 95       	ret

00000984 <_Z3SPIh>:
}

/* -------------------- LED7 -------------------- */
void SPI(uint8_t data)
{
	SPDR = data;
     984:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     986:	77 9b       	sbis	0x0e, 7	; 14
     988:	fe cf       	rjmp	.-4      	; 0x986 <_Z3SPIh+0x2>
}
     98a:	08 95       	ret

0000098c <_Z4led7j>:

void led7(unsigned int num)
{
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	ac 01       	movw	r20, r24
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
     996:	9c 01       	movw	r18, r24
     998:	ad ec       	ldi	r26, 0xCD	; 205
     99a:	bc ec       	ldi	r27, 0xCC	; 204
     99c:	0e 94 bb 10 	call	0x2176	; 0x2176 <__umulhisi3>
     9a0:	96 95       	lsr	r25
     9a2:	87 95       	ror	r24
     9a4:	96 95       	lsr	r25
     9a6:	87 95       	ror	r24
     9a8:	96 95       	lsr	r25
     9aa:	87 95       	ror	r24
     9ac:	9c 01       	movw	r18, r24
     9ae:	22 0f       	add	r18, r18
     9b0:	33 1f       	adc	r19, r19
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	82 0f       	add	r24, r18
     9c0:	93 1f       	adc	r25, r19
     9c2:	9a 01       	movw	r18, r20
     9c4:	28 1b       	sub	r18, r24
     9c6:	39 0b       	sbc	r19, r25
     9c8:	c9 01       	movw	r24, r18
     9ca:	80 68       	ori	r24, 0x80	; 128
     9cc:	80 93 7f 00 	sts	0x007F, r24
	led7_data.ten		 = (unsigned int)(num%100 / 10);
     9d0:	9a 01       	movw	r18, r20
     9d2:	36 95       	lsr	r19
     9d4:	27 95       	ror	r18
     9d6:	36 95       	lsr	r19
     9d8:	27 95       	ror	r18
     9da:	ab e7       	ldi	r26, 0x7B	; 123
     9dc:	b4 e1       	ldi	r27, 0x14	; 20
     9de:	0e 94 bb 10 	call	0x2176	; 0x2176 <__umulhisi3>
     9e2:	96 95       	lsr	r25
     9e4:	87 95       	ror	r24
     9e6:	64 e6       	ldi	r22, 0x64	; 100
     9e8:	68 9f       	mul	r22, r24
     9ea:	90 01       	movw	r18, r0
     9ec:	69 9f       	mul	r22, r25
     9ee:	30 0d       	add	r19, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	ca 01       	movw	r24, r20
     9f4:	82 1b       	sub	r24, r18
     9f6:	93 0b       	sbc	r25, r19
     9f8:	9c 01       	movw	r18, r24
     9fa:	ad ec       	ldi	r26, 0xCD	; 205
     9fc:	bc ec       	ldi	r27, 0xCC	; 204
     9fe:	0e 94 bb 10 	call	0x2176	; 0x2176 <__umulhisi3>
     a02:	fc 01       	movw	r30, r24
     a04:	f6 95       	lsr	r31
     a06:	e7 95       	ror	r30
     a08:	f6 95       	lsr	r31
     a0a:	e7 95       	ror	r30
     a0c:	f6 95       	lsr	r31
     a0e:	e7 95       	ror	r30
     a10:	1e 2f       	mov	r17, r30
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
     a12:	ea 01       	movw	r28, r20
     a14:	d6 95       	lsr	r29
     a16:	c7 95       	ror	r28
     a18:	d6 95       	lsr	r29
     a1a:	c7 95       	ror	r28
     a1c:	d6 95       	lsr	r29
     a1e:	c7 95       	ror	r28
     a20:	9e 01       	movw	r18, r28
     a22:	a5 ec       	ldi	r26, 0xC5	; 197
     a24:	b0 e2       	ldi	r27, 0x20	; 32
     a26:	0e 94 bb 10 	call	0x2176	; 0x2176 <__umulhisi3>
     a2a:	92 95       	swap	r25
     a2c:	82 95       	swap	r24
     a2e:	8f 70       	andi	r24, 0x0F	; 15
     a30:	89 27       	eor	r24, r25
     a32:	9f 70       	andi	r25, 0x0F	; 15
     a34:	89 27       	eor	r24, r25
     a36:	68 ee       	ldi	r22, 0xE8	; 232
     a38:	73 e0       	ldi	r23, 0x03	; 3
     a3a:	86 9f       	mul	r24, r22
     a3c:	90 01       	movw	r18, r0
     a3e:	87 9f       	mul	r24, r23
     a40:	30 0d       	add	r19, r0
     a42:	96 9f       	mul	r25, r22
     a44:	30 0d       	add	r19, r0
     a46:	11 24       	eor	r1, r1
     a48:	42 1b       	sub	r20, r18
     a4a:	53 0b       	sbc	r21, r19
     a4c:	9a 01       	movw	r18, r20
     a4e:	36 95       	lsr	r19
     a50:	27 95       	ror	r18
     a52:	36 95       	lsr	r19
     a54:	27 95       	ror	r18
     a56:	ab e7       	ldi	r26, 0x7B	; 123
     a58:	b4 e1       	ldi	r27, 0x14	; 20
     a5a:	0e 94 bb 10 	call	0x2176	; 0x2176 <__umulhisi3>
     a5e:	ac 01       	movw	r20, r24
     a60:	56 95       	lsr	r21
     a62:	47 95       	ror	r20
     a64:	04 2f       	mov	r16, r20
	led7_data.thousand	 = (unsigned int)(num/ 1000);
     a66:	9e 01       	movw	r18, r28
     a68:	a5 ec       	ldi	r26, 0xC5	; 197
     a6a:	b0 e2       	ldi	r27, 0x20	; 32
     a6c:	0e 94 bb 10 	call	0x2176	; 0x2176 <__umulhisi3>
     a70:	92 95       	swap	r25
     a72:	82 95       	swap	r24
     a74:	8f 70       	andi	r24, 0x0F	; 15
     a76:	89 27       	eor	r24, r25
     a78:	9f 70       	andi	r25, 0x0F	; 15
     a7a:	89 27       	eor	r24, r25
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
     a7c:	88 23       	and	r24, r24
     a7e:	11 f0       	breq	.+4      	; 0xa84 <_Z4led7j+0xf8>
     a80:	20 e1       	ldi	r18, 0x10	; 16
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <_Z4led7j+0xfa>
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	82 2b       	or	r24, r18
     a88:	80 93 82 00 	sts	0x0082, r24
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     a8c:	81 11       	cpse	r24, r1
     a8e:	15 c0       	rjmp	.+42     	; 0xaba <_Z4led7j+0x12e>
     a90:	01 11       	cpse	r16, r1
     a92:	0c c0       	rjmp	.+24     	; 0xaac <_Z4led7j+0x120>
     a94:	0c c0       	rjmp	.+24     	; 0xaae <_Z4led7j+0x122>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     a96:	11 23       	and	r17, r17
     a98:	11 f0       	breq	.+4      	; 0xa9e <_Z4led7j+0x112>
     a9a:	80 e4       	ldi	r24, 0x40	; 64
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <_Z4led7j+0x118>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <_Z4led7j+0x118>
     aa2:	80 e4       	ldi	r24, 0x40	; 64
     aa4:	e8 2b       	or	r30, r24
     aa6:	e0 93 80 00 	sts	0x0080, r30
     aaa:	0c c0       	rjmp	.+24     	; 0xac4 <_Z4led7j+0x138>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     aac:	80 e2       	ldi	r24, 0x20	; 32
     aae:	48 2b       	or	r20, r24
     ab0:	40 93 81 00 	sts	0x0081, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     ab4:	44 23       	and	r20, r20
     ab6:	79 f3       	breq	.-34     	; 0xa96 <_Z4led7j+0x10a>
     ab8:	f4 cf       	rjmp	.-24     	; 0xaa2 <_Z4led7j+0x116>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     aba:	40 62       	ori	r20, 0x20	; 32
     abc:	40 93 81 00 	sts	0x0081, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     ac0:	80 e4       	ldi	r24, 0x40	; 64
     ac2:	f0 cf       	rjmp	.-32     	; 0xaa4 <_Z4led7j+0x118>
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	08 95       	ret

00000ace <_Z5printv>:

void print( void )
{
     ace:	cf 93       	push	r28
	uint8_t value=0;
	if(led7_data.i++ == 4) led7_data.i=0;
     ad0:	ee e7       	ldi	r30, 0x7E	; 126
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	90 81       	ld	r25, Z
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	89 0f       	add	r24, r25
     ada:	80 83       	st	Z, r24
     adc:	94 30       	cpi	r25, 0x04	; 4
     ade:	19 f4       	brne	.+6      	; 0xae6 <_Z5printv+0x18>
     ae0:	10 92 7e 00 	sts	0x007E, r1
     ae4:	08 c0       	rjmp	.+16     	; 0xaf6 <_Z5printv+0x28>
	switch(led7_data.i)
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	49 f0       	breq	.+18     	; 0xafc <_Z5printv+0x2e>
     aea:	28 f0       	brcs	.+10     	; 0xaf6 <_Z5printv+0x28>
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	49 f0       	breq	.+18     	; 0xb02 <_Z5printv+0x34>
     af0:	83 30       	cpi	r24, 0x03	; 3
     af2:	51 f0       	breq	.+20     	; 0xb08 <_Z5printv+0x3a>
     af4:	0c c0       	rjmp	.+24     	; 0xb0e <_Z5printv+0x40>
	{
		case 0: value=led7_data.thousand;	break;
     af6:	c0 91 82 00 	lds	r28, 0x0082
     afa:	0a c0       	rjmp	.+20     	; 0xb10 <_Z5printv+0x42>
		case 1: value=led7_data.hundred;	break;
     afc:	c0 91 81 00 	lds	r28, 0x0081
     b00:	07 c0       	rjmp	.+14     	; 0xb10 <_Z5printv+0x42>
		case 2: value=led7_data.ten;		break;
     b02:	c0 91 80 00 	lds	r28, 0x0080
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <_Z5printv+0x42>
		case 3: value=led7_data.unit;		break;
     b08:	c0 91 7f 00 	lds	r28, 0x007F
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <_Z5printv+0x42>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
}

void print( void )
{
	uint8_t value=0;
     b0e:	c0 e0       	ldi	r28, 0x00	; 0
		case 1: value=led7_data.hundred;	break;
		case 2: value=led7_data.ten;		break;
		case 3: value=led7_data.unit;		break;
		default: break;
	}
	SPI(~led7_data.sensor_out);
     b10:	80 91 83 00 	lds	r24, 0x0083
     b14:	80 95       	com	r24
     b16:	0e 94 c2 04 	call	0x984	; 0x984 <_Z3SPIh>
	SPI(value);
     b1a:	8c 2f       	mov	r24, r28
     b1c:	0e 94 c2 04 	call	0x984	; 0x984 <_Z3SPIh>
	sbi(PORTB,LATCH);
     b20:	c4 9a       	sbi	0x18, 4	; 24
	cbi(PORTB,LATCH);
     b22:	c4 98       	cbi	0x18, 4	; 24
}
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <_Z15read_adc_eepromv>:

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	0f 2e       	mov	r0, r31
     b36:	f4 e9       	ldi	r31, 0x94	; 148
     b38:	ef 2e       	mov	r14, r31
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	ff 2e       	mov	r15, r31
     b3e:	f0 2d       	mov	r31, r0
     b40:	04 e8       	ldi	r16, 0x84	; 132
     b42:	10 e0       	ldi	r17, 0x00	; 0
     b44:	c0 e0       	ldi	r28, 0x00	; 0
     b46:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     b48:	e1 99       	sbic	0x1c, 1	; 28
     b4a:	fe cf       	rjmp	.-4      	; 0xb48 <_Z15read_adc_eepromv+0x20>
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
     b4c:	ce 01       	movw	r24, r28
     b4e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__eerd_word_m16>
     b52:	f7 01       	movw	r30, r14
     b54:	81 93       	st	Z+, r24
     b56:	91 93       	st	Z+, r25
     b58:	7f 01       	movw	r14, r30
		while(!eeprom_is_ready());
     b5a:	e1 99       	sbic	0x1c, 1	; 28
     b5c:	fe cf       	rjmp	.-4      	; 0xb5a <_Z15read_adc_eepromv+0x32>
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
     b5e:	ce 01       	movw	r24, r28
     b60:	40 96       	adiw	r24, 0x10	; 16
     b62:	0e 94 de 10 	call	0x21bc	; 0x21bc <__eerd_word_m16>
     b66:	f8 01       	movw	r30, r16
     b68:	81 93       	st	Z+, r24
     b6a:	91 93       	st	Z+, r25
     b6c:	8f 01       	movw	r16, r30
     b6e:	22 96       	adiw	r28, 0x02	; 2
}

/* -------------------- ADC -------------------- */
void read_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     b70:	c0 31       	cpi	r28, 0x10	; 16
     b72:	d1 05       	cpc	r29, r1
     b74:	49 f7       	brne	.-46     	; 0xb48 <_Z15read_adc_eepromv+0x20>
     b76:	c4 ea       	ldi	r28, 0xA4	; 164
     b78:	d0 e0       	ldi	r29, 0x00	; 0
     b7a:	44 ea       	ldi	r20, 0xA4	; 164
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	a4 e8       	ldi	r26, 0x84	; 132
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e4 e9       	ldi	r30, 0x94	; 148
     b84:	f0 e0       	ldi	r31, 0x00	; 0
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     b86:	81 91       	ld	r24, Z+
     b88:	91 91       	ld	r25, Z+
     b8a:	2d 91       	ld	r18, X+
     b8c:	3d 91       	ld	r19, X+
     b8e:	82 0f       	add	r24, r18
     b90:	93 1f       	adc	r25, r19
     b92:	96 95       	lsr	r25
     b94:	87 95       	ror	r24
     b96:	89 93       	st	Y+, r24
     b98:	99 93       	st	Y+, r25
		while(!eeprom_is_ready());
		lineTrang[j] = eeprom_read_word((uint16_t*)(j*2));
		while(!eeprom_is_ready());
		lineDen[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
     b9a:	e4 17       	cp	r30, r20
     b9c:	f5 07       	cpc	r31, r21
     b9e:	99 f7       	brne	.-26     	; 0xb86 <_Z15read_adc_eepromv+0x5e>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	08 95       	ret

00000bae <_Z16write_adc_eepromv>:

void write_adc_eeprom( void )
{
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	0f 2e       	mov	r0, r31
     bbc:	f4 e8       	ldi	r31, 0x84	; 132
     bbe:	ef 2e       	mov	r14, r31
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	ff 2e       	mov	r15, r31
     bc4:	f0 2d       	mov	r31, r0
     bc6:	04 e9       	ldi	r16, 0x94	; 148
     bc8:	10 e0       	ldi	r17, 0x00	; 0
     bca:	c0 e0       	ldi	r28, 0x00	; 0
     bcc:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     bce:	e1 99       	sbic	0x1c, 1	; 28
     bd0:	fe cf       	rjmp	.-4      	; 0xbce <_Z16write_adc_eepromv+0x20>
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
     bd2:	f8 01       	movw	r30, r16
     bd4:	61 91       	ld	r22, Z+
     bd6:	71 91       	ld	r23, Z+
     bd8:	8f 01       	movw	r16, r30
     bda:	ce 01       	movw	r24, r28
     bdc:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__eewr_word_m16>
		while(!eeprom_is_ready());
     be0:	e1 99       	sbic	0x1c, 1	; 28
     be2:	fe cf       	rjmp	.-4      	; 0xbe0 <_Z16write_adc_eepromv+0x32>
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
     be4:	f7 01       	movw	r30, r14
     be6:	61 91       	ld	r22, Z+
     be8:	71 91       	ld	r23, Z+
     bea:	7f 01       	movw	r14, r30
     bec:	ce 01       	movw	r24, r28
     bee:	40 96       	adiw	r24, 0x10	; 16
     bf0:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__eewr_word_m16>
     bf4:	22 96       	adiw	r28, 0x02	; 2
	}
}

void write_adc_eeprom( void )
{
	for(uint8_t j=0; j<8; j++)
     bf6:	c0 31       	cpi	r28, 0x10	; 16
     bf8:	d1 05       	cpc	r29, r1
     bfa:	49 f7       	brne	.-46     	; 0xbce <_Z16write_adc_eepromv+0x20>
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)lineTrang[j]);
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineDen[j]);
	}
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	08 95       	ret

00000c0a <_Z8adc_readh>:

uint16_t adc_read( uint8_t ch )
{
	ADMUX = (1<< REFS0)|ch;
     c0a:	80 64       	ori	r24, 0x40	; 64
     c0c:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
     c0e:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
     c10:	34 9b       	sbis	0x06, 4	; 6
     c12:	fe cf       	rjmp	.-4      	; 0xc10 <_Z8adc_readh+0x6>
	return ADCW;
     c14:	84 b1       	in	r24, 0x04	; 4
     c16:	95 b1       	in	r25, 0x05	; 5
}
     c18:	08 95       	ret

00000c1a <_Z10sensor_cmpv>:

uint8_t sensor_cmp( void )
{
     c1a:	df 92       	push	r13
     c1c:	ef 92       	push	r14
     c1e:	ff 92       	push	r15
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	04 ea       	ldi	r16, 0xA4	; 164
     c2a:	10 e0       	ldi	r17, 0x00	; 0
     c2c:	c0 e0       	ldi	r28, 0x00	; 0
     c2e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t ADC_value=0;
     c30:	d1 2c       	mov	r13, r1
	for(uint8_t i=0; i<8; i++)
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
     c32:	ee 24       	eor	r14, r14
     c34:	e3 94       	inc	r14
     c36:	f1 2c       	mov	r15, r1
     c38:	8c 2f       	mov	r24, r28
     c3a:	0e 94 05 06 	call	0xc0a	; 0xc0a <_Z8adc_readh>
     c3e:	f8 01       	movw	r30, r16
     c40:	21 91       	ld	r18, Z+
     c42:	31 91       	ld	r19, Z+
     c44:	8f 01       	movw	r16, r30
     c46:	82 17       	cp	r24, r18
     c48:	93 07       	cpc	r25, r19
     c4a:	40 f4       	brcc	.+16     	; 0xc5c <_Z10sensor_cmpv+0x42>
     c4c:	97 01       	movw	r18, r14
     c4e:	0c 2e       	mov	r0, r28
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <_Z10sensor_cmpv+0x3c>
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	0a 94       	dec	r0
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <_Z10sensor_cmpv+0x38>
     c5a:	d2 2a       	or	r13, r18
     c5c:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t sensor_cmp( void )
{
	uint8_t ADC_value=0;
	for(uint8_t i=0; i<8; i++)
     c5e:	c8 30       	cpi	r28, 0x08	; 8
     c60:	d1 05       	cpc	r29, r1
     c62:	51 f7       	brne	.-44     	; 0xc38 <_Z10sensor_cmpv+0x1e>
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);
	}
	led7_data.sensor_out=ADC_value;
     c64:	d0 92 83 00 	sts	0x0083, r13
	return (ADC_value);
}
     c68:	8d 2d       	mov	r24, r13
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	df 90       	pop	r13
     c78:	08 95       	ret

00000c7a <_Z11learn_colorv>:

void learn_color( void )
{
     c7a:	8f 92       	push	r8
     c7c:	9f 92       	push	r9
     c7e:	af 92       	push	r10
     c80:	bf 92       	push	r11
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	c4 e9       	ldi	r28, 0x94	; 148
     c94:	d0 e0       	ldi	r29, 0x00	; 0
     c96:	04 e8       	ldi	r16, 0x84	; 132
     c98:	10 e0       	ldi	r17, 0x00	; 0
     c9a:	0f 2e       	mov	r0, r31
     c9c:	f4 ea       	ldi	r31, 0xA4	; 164
     c9e:	ef 2e       	mov	r14, r31
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	ff 2e       	mov	r15, r31
     ca4:	f0 2d       	mov	r31, r0
     ca6:	d8 01       	movw	r26, r16
     ca8:	fe 01       	movw	r30, r28
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
	{
		lineTrang[i] = 1024;
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	94 e0       	ldi	r25, 0x04	; 4
     cae:	81 93       	st	Z+, r24
     cb0:	91 93       	st	Z+, r25
		lineDen[i] = 0;
     cb2:	1d 92       	st	X+, r1
     cb4:	1d 92       	st	X+, r1

void learn_color( void )
{
	uint8_t sel = 0;
	uint16_t ADC_temp=0;
	for (uint8_t i = 0; i < 8; i++)
     cb6:	ee 15       	cp	r30, r14
     cb8:	ff 05       	cpc	r31, r15
     cba:	c9 f7       	brne	.-14     	; 0xcae <_Z11learn_colorv+0x34>
	{
		lineTrang[i] = 1024;
		lineDen[i] = 0;
	}
	
	led7(6014);
     cbc:	8e e7       	ldi	r24, 0x7E	; 126
     cbe:	97 e1       	ldi	r25, 0x17	; 23
     cc0:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
	while (1)
	{
		if(get_button(BTN2)) break;
     cc4:	b0 2e       	mov	r11, r16
     cc6:	a1 2e       	mov	r10, r17
     cc8:	9c 2e       	mov	r9, r28
     cca:	8d 2e       	mov	r8, r29
     ccc:	c1 2c       	mov	r12, r1
     cce:	87 ef       	ldi	r24, 0xF7	; 247
     cd0:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     cd4:	81 11       	cpse	r24, r1
     cd6:	1f c0       	rjmp	.+62     	; 0xd16 <_Z11learn_colorv+0x9c>
     cd8:	0b 2d       	mov	r16, r11
     cda:	1a 2d       	mov	r17, r10
     cdc:	c9 2d       	mov	r28, r9
     cde:	d8 2d       	mov	r29, r8
     ce0:	dc 2c       	mov	r13, r12
		
		for (uint8_t i = 0; i < 8; i++)
		{
			ADC_temp = adc_read(i);
     ce2:	8d 2d       	mov	r24, r13
     ce4:	0e 94 05 06 	call	0xc0a	; 0xc0a <_Z8adc_readh>
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
     ce8:	28 81       	ld	r18, Y
     cea:	39 81       	ldd	r19, Y+1	; 0x01
     cec:	82 17       	cp	r24, r18
     cee:	93 07       	cpc	r25, r19
     cf0:	10 f4       	brcc	.+4      	; 0xcf6 <_Z11learn_colorv+0x7c>
     cf2:	99 83       	std	Y+1, r25	; 0x01
     cf4:	88 83       	st	Y, r24
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
     cf6:	f8 01       	movw	r30, r16
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	28 17       	cp	r18, r24
     cfe:	39 07       	cpc	r19, r25
     d00:	10 f4       	brcc	.+4      	; 0xd06 <_Z11learn_colorv+0x8c>
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
	led7(6014);
	while (1)
	{
		if(get_button(BTN2)) break;
		
		for (uint8_t i = 0; i < 8; i++)
     d06:	d3 94       	inc	r13
     d08:	22 96       	adiw	r28, 0x02	; 2
     d0a:	0e 5f       	subi	r16, 0xFE	; 254
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	f8 e0       	ldi	r31, 0x08	; 8
     d10:	df 12       	cpse	r13, r31
     d12:	e7 cf       	rjmp	.-50     	; 0xce2 <_Z11learn_colorv+0x68>
     d14:	dc cf       	rjmp	.-72     	; 0xcce <_Z11learn_colorv+0x54>
     d16:	c4 ea       	ldi	r28, 0xA4	; 164
     d18:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	led7(6014);
	while (1)
	{
		if(get_button(BTN2)) break;
     d1a:	a4 e8       	ldi	r26, 0x84	; 132
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e4 e9       	ldi	r30, 0x94	; 148
     d20:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
	
	for (uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
     d22:	81 91       	ld	r24, Z+
     d24:	91 91       	ld	r25, Z+
     d26:	2d 91       	ld	r18, X+
     d28:	3d 91       	ld	r19, X+
     d2a:	82 0f       	add	r24, r18
     d2c:	93 1f       	adc	r25, r19
     d2e:	96 95       	lsr	r25
     d30:	87 95       	ror	r24
     d32:	89 93       	st	Y+, r24
     d34:	99 93       	st	Y+, r25
			if (ADC_temp < lineTrang[i]) lineTrang[i] = ADC_temp;
			if(ADC_temp > lineDen[i]) lineDen[i] = ADC_temp;
		}
	}
	
	for (uint8_t i=0; i<8; i++)
     d36:	ee 15       	cp	r30, r14
     d38:	ff 05       	cpc	r31, r15
     d3a:	99 f7       	brne	.-26     	; 0xd22 <_Z11learn_colorv+0xa8>
	{
		ADC_average[i]=(lineTrang[i]+lineDen[i])/2;
	}
	
	write_adc_eeprom();
     d3c:	0e 94 d7 05 	call	0xbae	; 0xbae <_Z16write_adc_eepromv>
	return (ADC_value);
}

void learn_color( void )
{
	uint8_t sel = 0;
     d40:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1)
	{
		if(get_button(BTN0))
		{
			if (++sel > 7) sel = 0;
     d42:	f1 2c       	mov	r15, r1
		{
			break;
		}
		
		led7(ADC_average[sel]);
		led7_data.sensor_out = (1 << sel);
     d44:	c3 e8       	ldi	r28, 0x83	; 131
     d46:	d0 e0       	ldi	r29, 0x00	; 0
     d48:	01 e0       	ldi	r16, 0x01	; 1
	
	write_adc_eeprom();
	
	while (1)
	{
		if(get_button(BTN0))
     d4a:	8d ef       	ldi	r24, 0xFD	; 253
     d4c:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     d50:	88 23       	and	r24, r24
     d52:	21 f0       	breq	.+8      	; 0xd5c <_Z11learn_colorv+0xe2>
		{
			if (++sel > 7) sel = 0;
     d54:	1f 5f       	subi	r17, 0xFF	; 255
     d56:	18 30       	cpi	r17, 0x08	; 8
     d58:	08 f0       	brcs	.+2      	; 0xd5c <_Z11learn_colorv+0xe2>
     d5a:	1f 2d       	mov	r17, r15
		}
		if (get_button(BTN1))
     d5c:	8b ef       	ldi	r24, 0xFB	; 251
     d5e:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     d62:	81 11       	cpse	r24, r1
		{
			if (--sel < 0)  sel = 7;
     d64:	11 50       	subi	r17, 0x01	; 1
		}
		if (get_button(BTN2))
     d66:	87 ef       	ldi	r24, 0xF7	; 247
     d68:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     d6c:	81 11       	cpse	r24, r1
     d6e:	12 c0       	rjmp	.+36     	; 0xd94 <_Z11learn_colorv+0x11a>
		{
			break;
		}
		
		led7(ADC_average[sel]);
     d70:	e1 2f       	mov	r30, r17
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	ec 55       	subi	r30, 0x5C	; 92
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
		led7_data.sensor_out = (1 << sel);
     d84:	80 2f       	mov	r24, r16
     d86:	01 2e       	mov	r0, r17
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <_Z11learn_colorv+0x112>
     d8a:	88 0f       	add	r24, r24
     d8c:	0a 94       	dec	r0
     d8e:	ea f7       	brpl	.-6      	; 0xd8a <_Z11learn_colorv+0x110>
     d90:	88 83       	st	Y, r24
	}
     d92:	db cf       	rjmp	.-74     	; 0xd4a <_Z11learn_colorv+0xd0>
}
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	bf 90       	pop	r11
     da6:	af 90       	pop	r10
     da8:	9f 90       	pop	r9
     daa:	8f 90       	pop	r8
     dac:	08 95       	ret

00000dae <_Z4INITv>:

/* -------------------- INITIAL -------------------- */
void INIT( void )
{
	/* ADC */
	ADMUX=(1<<REFS0);
     dae:	80 e4       	ldi	r24, 0x40	; 64
     db0:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN) | (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     db2:	87 e8       	ldi	r24, 0x87	; 135
     db4:	86 b9       	out	0x06, r24	; 6
	read_adc_eeprom();
     db6:	0e 94 94 05 	call	0xb28	; 0xb28 <_Z15read_adc_eepromv>
	
	/* PORT */
	DDRB  = 0b11110001;
     dba:	81 ef       	ldi	r24, 0xF1	; 241
     dbc:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111111;
     dbe:	8f ef       	ldi	r24, 0xFF	; 255
     dc0:	88 bb       	out	0x18, r24	; 24
	
	DDRC  = 0b00000000;
     dc2:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b11111111;
     dc4:	85 bb       	out	0x15, r24	; 21
	
	DDRD  = 0b11111011;
     dc6:	8b ef       	ldi	r24, 0xFB	; 251
     dc8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000;
     dca:	12 ba       	out	0x12, r1	; 18
	
	/* SPI */
	SPCR = (1<<SPE)|(1<<MSTR);
     dcc:	80 e5       	ldi	r24, 0x50	; 80
     dce:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	8e b9       	out	0x0e, r24	; 14
	
	/* TIMER */
	TCCR0=(1<<WGM01) | (1<<CS02);
     dd4:	8c e0       	ldi	r24, 0x0C	; 12
     dd6:	83 bf       	out	0x33, r24	; 51
	OCR0=62;
     dd8:	8e e3       	ldi	r24, 0x3E	; 62
     dda:	8c bf       	out	0x3c, r24	; 60
	TIMSK=(1<<OCIE0);
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
     de0:	82 ea       	ldi	r24, 0xA2	; 162
     de2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS11);
     de4:	8a e1       	ldi	r24, 0x1A	; 26
     de6:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 20000;
     de8:	80 e2       	ldi	r24, 0x20	; 32
     dea:	9e e4       	ldi	r25, 0x4E	; 78
     dec:	97 bd       	out	0x27, r25	; 39
     dee:	86 bd       	out	0x26, r24	; 38
	OCR1B = 0;
     df0:	19 bc       	out	0x29, r1	; 41
     df2:	18 bc       	out	0x28, r1	; 40
	
	TCCR2=(1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS22)|(1<<CS21)|(1<<CS20);
     df4:	8f e6       	ldi	r24, 0x6F	; 111
     df6:	85 bd       	out	0x25, r24	; 37
	OCR2=0;
     df8:	13 bc       	out	0x23, r1	; 35
	sei();
     dfa:	78 94       	sei
	
	/* ENCODER */
	MCUCR |= (1<<ISC00)|(1<<ISC01);
     dfc:	85 b7       	in	r24, 0x35	; 53
     dfe:	83 60       	ori	r24, 0x03	; 3
     e00:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     e02:	8b b7       	in	r24, 0x3b	; 59
     e04:	80 64       	ori	r24, 0x40	; 64
     e06:	8b bf       	out	0x3b, r24	; 59
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     e08:	83 e1       	ldi	r24, 0x13	; 19
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	90 93 7d 00 	sts	0x007D, r25
     e10:	80 93 7c 00 	sts	0x007C, r24
     e14:	08 95       	ret

00000e16 <_Z13test_hardwarev>:
	set_encoder(19);
}

void test_hardware( void )
{
	uint8_t _index=0;
     e16:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     e18:	f1 2c       	mov	r15, r1
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
		led7_data.sensor_out = 0 | (1<<_index);
     e1a:	c3 e8       	ldi	r28, 0x83	; 131
     e1c:	d0 e0       	ldi	r29, 0x00	; 0
     e1e:	01 e0       	ldi	r16, 0x01	; 1
void test_hardware( void )
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
     e20:	8d ef       	ldi	r24, 0xFD	; 253
     e22:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     e26:	88 23       	and	r24, r24
     e28:	59 f0       	breq	.+22     	; 0xe40 <_Z13test_hardwarev+0x2a>
     e2a:	6c e9       	ldi	r22, 0x9C	; 156
     e2c:	7f ef       	ldi	r23, 0xFF	; 255
     e2e:	84 e6       	ldi	r24, 0x64	; 100
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
     e36:	83 e8       	ldi	r24, 0x83	; 131
     e38:	9f ef       	ldi	r25, 0xFF	; 255
     e3a:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
     e3e:	25 c0       	rjmp	.+74     	; 0xe8a <_Z13test_hardwarev+0x74>
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     e40:	8b ef       	ldi	r24, 0xFB	; 251
     e42:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     e46:	88 23       	and	r24, r24
     e48:	21 f0       	breq	.+8      	; 0xe52 <_Z13test_hardwarev+0x3c>
     e4a:	1f 5f       	subi	r17, 0xFF	; 255
     e4c:	18 30       	cpi	r17, 0x08	; 8
     e4e:	e9 f4       	brne	.+58     	; 0xe8a <_Z13test_hardwarev+0x74>
     e50:	1b c0       	rjmp	.+54     	; 0xe88 <_Z13test_hardwarev+0x72>
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
     e52:	87 ef       	ldi	r24, 0xF7	; 247
     e54:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     e58:	88 23       	and	r24, r24
     e5a:	59 f0       	breq	.+22     	; 0xe72 <_Z13test_hardwarev+0x5c>
     e5c:	64 e6       	ldi	r22, 0x64	; 100
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	8c e9       	ldi	r24, 0x9C	; 156
     e62:	9f ef       	ldi	r25, 0xFF	; 255
     e64:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
     e68:	8d e7       	ldi	r24, 0x7D	; 125
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
     e70:	0c c0       	rjmp	.+24     	; 0xe8a <_Z13test_hardwarev+0x74>
		else						{ speed(0,0);  handle(0);                 }
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <_Z13test_hardwarev+0x74>
{
	uint8_t _index=0;
	while(1)
	{
		if      (get_button(BTN0))  { speed(100,-100); handle(-SERVO_ANGLE_MAX); }
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;             }
     e88:	1f 2d       	mov	r17, r15
		else if (get_button(BTN2))	{ speed(-100,100); handle(SERVO_ANGLE_MAX);  }
		else						{ speed(0,0);  handle(0);                 }
		
		led7(adc_read(_index));
     e8a:	81 2f       	mov	r24, r17
     e8c:	0e 94 05 06 	call	0xc0a	; 0xc0a <_Z8adc_readh>
     e90:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
		led7_data.sensor_out = 0 | (1<<_index);
     e94:	80 2f       	mov	r24, r16
     e96:	01 2e       	mov	r0, r17
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <_Z13test_hardwarev+0x86>
     e9a:	88 0f       	add	r24, r24
     e9c:	0a 94       	dec	r0
     e9e:	ea f7       	brpl	.-6      	; 0xe9a <_Z13test_hardwarev+0x84>
     ea0:	88 83       	st	Y, r24
	}
     ea2:	be cf       	rjmp	.-132    	; 0xe20 <_Z13test_hardwarev+0xa>

00000ea4 <_Z15servo_calibratev>:
		if (get_button(BTN2)) angle++;
	}
}

void servo_calibrate( void )
{
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
	int16_t angle = 0;
     ea8:	c0 e0       	ldi	r28, 0x00	; 0
     eaa:	d0 e0       	ldi	r29, 0x00	; 0
	while (true)
	{
		led7((angle>=0)?angle:(-angle));
     eac:	ce 01       	movw	r24, r28
     eae:	dd 23       	and	r29, r29
     eb0:	24 f4       	brge	.+8      	; 0xeba <_Z15servo_calibratev+0x16>
     eb2:	88 27       	eor	r24, r24
     eb4:	99 27       	eor	r25, r25
     eb6:	8c 1b       	sub	r24, r28
     eb8:	9d 0b       	sbc	r25, r29
     eba:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
		sensor_cmp();
     ebe:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
		handle(angle);
     ec2:	ce 01       	movw	r24, r28
     ec4:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
		if (get_button(BTN0)) angle--;
     ec8:	8d ef       	ldi	r24, 0xFD	; 253
     eca:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     ece:	81 11       	cpse	r24, r1
     ed0:	21 97       	sbiw	r28, 0x01	; 1
		if (get_button(BTN1)) break;;
     ed2:	8b ef       	ldi	r24, 0xFB	; 251
     ed4:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     ed8:	81 11       	cpse	r24, r1
     eda:	07 c0       	rjmp	.+14     	; 0xeea <_Z15servo_calibratev+0x46>
		if (get_button(BTN2)) angle++;
     edc:	87 ef       	ldi	r24, 0xF7	; 247
     ede:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     ee2:	88 23       	and	r24, r24
     ee4:	19 f3       	breq	.-58     	; 0xeac <_Z15servo_calibratev+0x8>
     ee6:	21 96       	adiw	r28, 0x01	; 1
     ee8:	e1 cf       	rjmp	.-62     	; 0xeac <_Z15servo_calibratev+0x8>
	}
	
	SERVO_CENTER = SERVO_CENTER + (angle * STEP);
     eea:	cc 0f       	add	r28, r28
     eec:	dd 1f       	adc	r29, r29
     eee:	cc 0f       	add	r28, r28
     ef0:	dd 1f       	adc	r29, r29
     ef2:	80 91 62 00 	lds	r24, 0x0062
     ef6:	90 91 63 00 	lds	r25, 0x0063
     efa:	c8 0f       	add	r28, r24
     efc:	d9 1f       	adc	r29, r25
     efe:	d0 93 63 00 	sts	0x0063, r29
     f02:	c0 93 62 00 	sts	0x0062, r28
}
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <_Z8sel_modev>:

/* -------------------- START -------------------- */
void sel_mode()
{
	handle(0);
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
	speed(0,0);
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
     f20:	8f ef       	ldi	r24, 0xFF	; 255
     f22:	9f ef       	ldi	r25, 0xFF	; 255
     f24:	90 93 7d 00 	sts	0x007D, r25
     f28:	80 93 7c 00 	sts	0x007C, r24
	speed(0,0);
	set_encoder(-1);
	
	while(1)
	{
		ratio_base = ratio_default + (get_switch() / 20.0);
     f2c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_Z10get_switchv>
     f30:	68 2f       	mov	r22, r24
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__floatsisf>
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 ea       	ldi	r20, 0xA0	; 160
     f42:	51 e4       	ldi	r21, 0x41	; 65
     f44:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__divsf3>
     f48:	2a e9       	ldi	r18, 0x9A	; 154
     f4a:	39 e9       	ldi	r19, 0x99	; 153
     f4c:	49 e9       	ldi	r20, 0x99	; 153
     f4e:	5e e3       	ldi	r21, 0x3E	; 62
     f50:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__addsf3>
     f54:	60 93 75 00 	sts	0x0075, r22
     f58:	70 93 76 00 	sts	0x0076, r23
     f5c:	80 93 77 00 	sts	0x0077, r24
     f60:	90 93 78 00 	sts	0x0078, r25
		ratio = ratio_base;
     f64:	60 93 71 00 	sts	0x0071, r22
     f68:	70 93 72 00 	sts	0x0072, r23
     f6c:	80 93 73 00 	sts	0x0073, r24
     f70:	90 93 74 00 	sts	0x0074, r25
		led7(ratio_base * 100);
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	48 ec       	ldi	r20, 0xC8	; 200
     f7a:	52 e4       	ldi	r21, 0x42	; 66
     f7c:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     f80:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixunssfsi>
     f84:	cb 01       	movw	r24, r22
     f86:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
		delay = (1.4 - 1.125 * ratio);
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e9       	ldi	r20, 0x90	; 144
     f90:	5f e3       	ldi	r21, 0x3F	; 63
     f92:	60 91 71 00 	lds	r22, 0x0071
     f96:	70 91 72 00 	lds	r23, 0x0072
     f9a:	80 91 73 00 	lds	r24, 0x0073
     f9e:	90 91 74 00 	lds	r25, 0x0074
     fa2:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
     fa6:	9b 01       	movw	r18, r22
     fa8:	ac 01       	movw	r20, r24
     faa:	63 e3       	ldi	r22, 0x33	; 51
     fac:	73 e3       	ldi	r23, 0x33	; 51
     fae:	83 eb       	ldi	r24, 0xB3	; 179
     fb0:	9f e3       	ldi	r25, 0x3F	; 63
     fb2:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__subsf3>
     fb6:	60 93 6d 00 	sts	0x006D, r22
     fba:	70 93 6e 00 	sts	0x006E, r23
     fbe:	80 93 6f 00 	sts	0x006F, r24
     fc2:	90 93 70 00 	sts	0x0070, r25
		sensor_cmp();
     fc6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
		if(get_button(BTN0))		return;
     fca:	8d ef       	ldi	r24, 0xFD	; 253
     fcc:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     fd0:	81 11       	cpse	r24, r1
     fd2:	0f c0       	rjmp	.+30     	; 0xff2 <_Z8sel_modev+0xe6>
		else if (get_button(BTN1))	test_hardware(); /*test_servo();*/
     fd4:	8b ef       	ldi	r24, 0xFB	; 251
     fd6:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     fda:	81 11       	cpse	r24, r1
     fdc:	0e 94 0b 07 	call	0xe16	; 0xe16 <_Z13test_hardwarev>
		else if (get_button(BTN2))	learn_color();
     fe0:	87 ef       	ldi	r24, 0xF7	; 247
     fe2:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
     fe6:	88 23       	and	r24, r24
     fe8:	09 f4       	brne	.+2      	; 0xfec <_Z8sel_modev+0xe0>
     fea:	a0 cf       	rjmp	.-192    	; 0xf2c <_Z8sel_modev+0x20>
     fec:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_Z11learn_colorv>
     ff0:	9d cf       	rjmp	.-198    	; 0xf2c <_Z8sel_modev+0x20>
     ff2:	08 95       	ret

00000ff4 <__vector_19>:
		}
    }
}

ISR(TIMER0_COMP_vect) /* 1ms */
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
	print();
    1016:	0e 94 67 05 	call	0xace	; 0xace <_Z5printv>
	cal_ratio();
    101a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_Z9cal_ratiov>
	timer_cnt++;
    101e:	80 91 68 00 	lds	r24, 0x0068
    1022:	90 91 69 00 	lds	r25, 0x0069
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	90 93 69 00 	sts	0x0069, r25
    102c:	80 93 68 00 	sts	0x0068, r24
}
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	bf 91       	pop	r27
    1036:	af 91       	pop	r26
    1038:	9f 91       	pop	r25
    103a:	8f 91       	pop	r24
    103c:	7f 91       	pop	r23
    103e:	6f 91       	pop	r22
    1040:	5f 91       	pop	r21
    1042:	4f 91       	pop	r20
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti

00001052 <__vector_1>:

ISR(INT0_vect)
{
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
	encoder_pulse++;
    1060:	80 91 66 00 	lds	r24, 0x0066
    1064:	90 91 67 00 	lds	r25, 0x0067
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	90 93 67 00 	sts	0x0067, r25
    106e:	80 93 66 00 	sts	0x0066, r24
	pulse_ratio++;
    1072:	80 91 79 00 	lds	r24, 0x0079
    1076:	90 91 7a 00 	lds	r25, 0x007A
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	90 93 7a 00 	sts	0x007A, r25
    1080:	80 93 79 00 	sts	0x0079, r24
	if (pattern == 10) bridgeCounter++;
    1084:	80 91 60 00 	lds	r24, 0x0060
    1088:	8a 30       	cpi	r24, 0x0A	; 10
    108a:	51 f4       	brne	.+20     	; 0x10a0 <__vector_1+0x4e>
    108c:	80 91 64 00 	lds	r24, 0x0064
    1090:	90 91 65 00 	lds	r25, 0x0065
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	90 93 65 00 	sts	0x0065, r25
    109a:	80 93 64 00 	sts	0x0064, r24
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__vector_1+0x56>
	else bridgeCounter = 0;
    10a0:	10 92 65 00 	sts	0x0065, r1
    10a4:	10 92 64 00 	sts	0x0064, r1
}
    10a8:	9f 91       	pop	r25
    10aa:	8f 91       	pop	r24
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <_Z15check_crosslinev>:

bool check_crossline( void )
{
	sensor = sensor_cmp();
    10b6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    10ba:	80 93 6a 00 	sts	0x006A, r24
	return (((sensor & 0b11111111) == 0b11111111) || ((sensor & 0b01111110) == 0b01111110));
    10be:	8f 3f       	cpi	r24, 0xFF	; 255
    10c0:	39 f0       	breq	.+14     	; 0x10d0 <_Z15check_crosslinev+0x1a>
    10c2:	8e 77       	andi	r24, 0x7E	; 126
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	8e 37       	cpi	r24, 0x7E	; 126
    10c8:	09 f0       	breq	.+2      	; 0x10cc <_Z15check_crosslinev+0x16>
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	89 2f       	mov	r24, r25
    10ce:	08 95       	ret
    10d0:	81 e0       	ldi	r24, 0x01	; 1
}
    10d2:	08 95       	ret

000010d4 <_Z15check_rightlinev>:
bool check_rightline( void )
{
	sensor = sensor_cmp();
    10d4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    10d8:	80 93 6a 00 	sts	0x006A, r24
	return (((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111) || ((sensor & 0b00000111) == 0b00000111));
    10dc:	98 2f       	mov	r25, r24
    10de:	9f 70       	andi	r25, 0x0F	; 15
    10e0:	9f 30       	cpi	r25, 0x0F	; 15
    10e2:	59 f0       	breq	.+22     	; 0x10fa <_Z15check_rightlinev+0x26>
    10e4:	98 2f       	mov	r25, r24
    10e6:	9f 71       	andi	r25, 0x1F	; 31
    10e8:	9f 31       	cpi	r25, 0x1F	; 31
    10ea:	49 f0       	breq	.+18     	; 0x10fe <_Z15check_rightlinev+0x2a>
    10ec:	98 2f       	mov	r25, r24
    10ee:	97 70       	andi	r25, 0x07	; 7
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	97 30       	cpi	r25, 0x07	; 7
    10f4:	29 f0       	breq	.+10     	; 0x1100 <_Z15check_rightlinev+0x2c>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	08 95       	ret
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	08 95       	ret
    10fe:	81 e0       	ldi	r24, 0x01	; 1
}
    1100:	08 95       	ret

00001102 <_Z14check_leftlinev>:
bool check_leftline( void )
{
	sensor = sensor_cmp();
    1102:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    1106:	80 93 6a 00 	sts	0x006A, r24
	return (((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000) || ((sensor & 0b11100000) == 0b11100000));
    110a:	98 2f       	mov	r25, r24
    110c:	90 7f       	andi	r25, 0xF0	; 240
    110e:	90 3f       	cpi	r25, 0xF0	; 240
    1110:	59 f0       	breq	.+22     	; 0x1128 <_Z14check_leftlinev+0x26>
    1112:	98 2f       	mov	r25, r24
    1114:	98 7f       	andi	r25, 0xF8	; 248
    1116:	98 3f       	cpi	r25, 0xF8	; 248
    1118:	49 f0       	breq	.+18     	; 0x112c <_Z14check_leftlinev+0x2a>
    111a:	98 2f       	mov	r25, r24
    111c:	90 7e       	andi	r25, 0xE0	; 224
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 3e       	cpi	r25, 0xE0	; 224
    1122:	29 f0       	breq	.+10     	; 0x112e <_Z14check_leftlinev+0x2c>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	08 95       	ret
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	08 95       	ret
    112c:	81 e0       	ldi	r24, 0x01	; 1
}
    112e:	08 95       	ret

00001130 <main>:
uint16_t timer_cnt, encoder_pulse;
uint16_t bridgeCounter = 0;

int main(void)
{
	INIT();
    1130:	0e 94 d7 06 	call	0xdae	; 0xdae <_Z4INITv>
	sel_mode();
    1134:	0e 94 86 07 	call	0xf0c	; 0xf0c <_Z8sel_modev>
}

/* -------------------- RATIO + SERVO + MOTOR -------------------- */
void set_encoder(int8_t veloc)
{
	velocity = veloc;
    1138:	8f e0       	ldi	r24, 0x0F	; 15
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	90 93 7d 00 	sts	0x007D, r25
    1140:	80 93 7c 00 	sts	0x007C, r24
	set_encoder(15);
	if (get_switch2())
    1144:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z11get_switch2v>
    1148:	88 23       	and	r24, r24
    114a:	19 f0       	breq	.+6      	; 0x1152 <main+0x22>
	{
		servo_calibrate();
    114c:	0e 94 52 07 	call	0xea4	; 0xea4 <_Z15servo_calibratev>
    1150:	16 c0       	rjmp	.+44     	; 0x117e <main+0x4e>
	}
	else
	{
		while (true)
		{
			sensor_cmp();
    1152:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
			led7(encoder_pulse);
    1156:	80 91 66 00 	lds	r24, 0x0066
    115a:	90 91 67 00 	lds	r25, 0x0067
    115e:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
			if (get_button(BTN0)) encoder_pulse = 0;
    1162:	8d ef       	ldi	r24, 0xFD	; 253
    1164:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
    1168:	88 23       	and	r24, r24
    116a:	21 f0       	breq	.+8      	; 0x1174 <main+0x44>
    116c:	10 92 67 00 	sts	0x0067, r1
    1170:	10 92 66 00 	sts	0x0066, r1
			if (get_button(BTN1)) break;
    1174:	8b ef       	ldi	r24, 0xFB	; 251
    1176:	0e 94 3d 03 	call	0x67a	; 0x67a <_Z10get_buttonh>
    117a:	88 23       	and	r24, r24
    117c:	51 f3       	breq	.-44     	; 0x1152 <main+0x22>
		}
	}
	
	pattern = 10; /* Chay thang */
    117e:	8a e0       	ldi	r24, 0x0A	; 10
    1180:	80 93 60 00 	sts	0x0060, r24
					pattern = 10;
				};
			break; /* case 99 */
				
			default:
				pattern = 10;
    1184:	0f 2e       	mov	r0, r31
    1186:	fa e0       	ldi	r31, 0x0A	; 10
    1188:	9f 2e       	mov	r9, r31
    118a:	f0 2d       	mov	r31, r0
    118c:	0c e0       	ldi	r16, 0x0C	; 12
    118e:	10 e0       	ldi	r17, 0x00	; 0
    1190:	aa 24       	eor	r10, r10
    1192:	aa 94       	dec	r10
    1194:	ba 2c       	mov	r11, r10
			case 62:
				led7(62);
				
				handle(35);
				speed(50 ,35);
				pattern = 63;
    1196:	0f 2e       	mov	r0, r31
    1198:	ff e3       	ldi	r31, 0x3F	; 63
    119a:	6f 2e       	mov	r6, r31
    119c:	f0 2d       	mov	r31, r0
    119e:	ca e0       	ldi	r28, 0x0A	; 10
    11a0:	d0 e0       	ldi	r29, 0x00	; 0
				led7(61);
				set_encoder(10);
				sensor = sensor_cmp();
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11111000) == 0b11111000))
				{
					pattern = 21;
    11a2:	0f 2e       	mov	r0, r31
    11a4:	f5 e1       	ldi	r31, 0x15	; 21
    11a6:	8f 2e       	mov	r8, r31
    11a8:	f0 2d       	mov	r31, r0
			case 52:
				led7(52);
				
				handle(-30);
				speed( 35 ,50 );
				pattern = 53;
    11aa:	0f 2e       	mov	r0, r31
    11ac:	f5 e3       	ldi	r31, 0x35	; 53
    11ae:	7f 2e       	mov	r7, r31
    11b0:	f0 2d       	mov	r31, r0
			case 31:
				led7(31);
				
				if( timer_cnt > 200 )
				{
					pattern = 32;
    11b2:	68 94       	set
    11b4:	33 24       	eor	r3, r3
    11b6:	35 f8       	bld	r3, 5
    11b8:	0f 2e       	mov	r0, r31
    11ba:	f6 e0       	ldi	r31, 0x06	; 6
    11bc:	4f 2e       	mov	r4, r31
    11be:	51 2c       	mov	r5, r1
    11c0:	f0 2d       	mov	r31, r0
	
	pattern = 10; /* Chay thang */
	
    while (true)
    {
        switch (pattern)
    11c2:	80 91 60 00 	lds	r24, 0x0060
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	fc 01       	movw	r30, r24
    11ca:	3a 97       	sbiw	r30, 0x0a	; 10
    11cc:	ea 35       	cpi	r30, 0x5A	; 90
    11ce:	f1 05       	cpc	r31, r1
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <main+0xa4>
    11d2:	95 c5       	rjmp	.+2858   	; 0x1cfe <main+0xbce>
    11d4:	e6 5d       	subi	r30, 0xD6	; 214
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__tablejump2__>
		{
			/* Chay thang */
			case 10:
				led7(10);
    11dc:	ce 01       	movw	r24, r28
    11de:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
    11e2:	10 93 7d 00 	sts	0x007D, r17
    11e6:	00 93 7c 00 	sts	0x007C, r16
				set_encoder(12);
				if (check_crossline())     /* Cua vuong */
    11ea:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z15check_crosslinev>
    11ee:	88 23       	and	r24, r24
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <main+0xc8>
				{
					pattern = 21;
    11f2:	80 92 60 00 	sts	0x0060, r8
					break;
    11f6:	e5 cf       	rjmp	.-54     	; 0x11c2 <main+0x92>
				}
				else if (check_leftline()) /* Chuyen lan trai */
    11f8:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z14check_leftlinev>
    11fc:	88 23       	and	r24, r24
    11fe:	61 f0       	breq	.+24     	; 0x1218 <main+0xe8>
				{
					pattern = 51;
    1200:	83 e3       	ldi	r24, 0x33	; 51
    1202:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    1206:	10 92 69 00 	sts	0x0069, r1
    120a:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    120e:	10 92 67 00 	sts	0x0067, r1
    1212:	10 92 66 00 	sts	0x0066, r1
					break;
    1216:	d5 cf       	rjmp	.-86     	; 0x11c2 <main+0x92>
				}
				else if (check_rightline()) /* Chuyen lan phai */
    1218:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_Z15check_rightlinev>
    121c:	88 23       	and	r24, r24
    121e:	61 f0       	breq	.+24     	; 0x1238 <main+0x108>
				{
					pattern = 61;
    1220:	8d e3       	ldi	r24, 0x3D	; 61
    1222:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    1226:	10 92 69 00 	sts	0x0069, r1
    122a:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    122e:	10 92 67 00 	sts	0x0067, r1
    1232:	10 92 66 00 	sts	0x0066, r1
					break;
    1236:	c5 cf       	rjmp	.-118    	; 0x11c2 <main+0x92>
				}
				
				if ((get_speed() > 10) && (bridgeCounter > 500))
    1238:	80 91 61 00 	lds	r24, 0x0061
    123c:	8b 30       	cpi	r24, 0x0B	; 11
    123e:	40 f0       	brcs	.+16     	; 0x1250 <main+0x120>
    1240:	80 91 64 00 	lds	r24, 0x0064
    1244:	90 91 65 00 	lds	r25, 0x0065
    1248:	85 3f       	cpi	r24, 0xF5	; 245
    124a:	91 40       	sbci	r25, 0x01	; 1
    124c:	08 f0       	brcs	.+2      	; 0x1250 <main+0x120>
    124e:	5a c5       	rjmp	.+2740   	; 0x1d04 <main+0xbd4>
				{
					pattern = 99;
				}
				
				switch (sensor_cmp() & 0b01111110)
    1250:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    1254:	8e 77       	andi	r24, 0x7E	; 126
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	fc 01       	movw	r30, r24
    125a:	32 97       	sbiw	r30, 0x02	; 2
    125c:	ef 36       	cpi	r30, 0x6F	; 111
    125e:	f1 05       	cpc	r31, r1
    1260:	08 f0       	brcs	.+2      	; 0x1264 <main+0x134>
    1262:	af cf       	rjmp	.-162    	; 0x11c2 <main+0x92>
    1264:	ec 57       	subi	r30, 0x7C	; 124
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__tablejump2__>
				{
					case 0b01111110:
					break;
					
					case 0b00011000: /* Chay thang */
						handle(0);
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
						speed( 100 ,100 );
    1274:	64 e6       	ldi	r22, 0x64	; 100
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	84 e6       	ldi	r24, 0x64	; 100
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
					break;
    1280:	a0 cf       	rjmp	.-192    	; 0x11c2 <main+0x92>
					
					case 0b00011100:
					case 0b00001000:
						speed(100,100);
    1282:	64 e6       	ldi	r22, 0x64	; 100
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	84 e6       	ldi	r24, 0x64	; 100
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(9 + addition_handle);
    128e:	8e e0       	ldi	r24, 0x0E	; 14
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    1296:	95 cf       	rjmp	.-214    	; 0x11c2 <main+0x92>
					case 0b00001100:
						speed(100,100);
    1298:	64 e6       	ldi	r22, 0x64	; 100
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	84 e6       	ldi	r24, 0x64	; 100
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(20 + addition_handle);
    12a4:	89 e1       	ldi	r24, 0x19	; 25
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    12ac:	8a cf       	rjmp	.-236    	; 0x11c2 <main+0x92>
					case 0b00001110:
					case 0b00000100:
						speed(100,85);
    12ae:	65 e5       	ldi	r22, 0x55	; 85
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	84 e6       	ldi	r24, 0x64	; 100
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(31 + addition_handle);
    12ba:	84 e2       	ldi	r24, 0x24	; 36
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    12c2:	7f cf       	rjmp	.-258    	; 0x11c2 <main+0x92>
					case 0b00000110:
						speed(100,80);
    12c4:	60 e5       	ldi	r22, 0x50	; 80
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	84 e6       	ldi	r24, 0x64	; 100
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(50 + addition_handle);
    12d0:	87 e3       	ldi	r24, 0x37	; 55
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    12d8:	74 cf       	rjmp	.-280    	; 0x11c2 <main+0x92>
					case 0b00000010:
						speed(100,70);
    12da:	66 e4       	ldi	r22, 0x46	; 70
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	84 e6       	ldi	r24, 0x64	; 100
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(75 + addition_handle);
    12e6:	80 e5       	ldi	r24, 0x50	; 80
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
						pattern=11;	/* Lech phai goc lon */ /*Moi sua*/
    12ee:	8b e0       	ldi	r24, 0x0B	; 11
    12f0:	80 93 60 00 	sts	0x0060, r24
					break;		
    12f4:	66 cf       	rjmp	.-308    	; 0x11c2 <main+0x92>
					
					case 0b00111000:
					case 0b00010000:
						speed(100,100);
    12f6:	64 e6       	ldi	r22, 0x64	; 100
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	84 e6       	ldi	r24, 0x64	; 100
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(-9 - addition_handle);
    1302:	82 ef       	ldi	r24, 0xF2	; 242
    1304:	9f ef       	ldi	r25, 0xFF	; 255
    1306:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    130a:	5b cf       	rjmp	.-330    	; 0x11c2 <main+0x92>
					case 0b00110000:
						speed(100,100);
    130c:	64 e6       	ldi	r22, 0x64	; 100
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	84 e6       	ldi	r24, 0x64	; 100
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(-20- addition_handle);
    1318:	87 ee       	ldi	r24, 0xE7	; 231
    131a:	9f ef       	ldi	r25, 0xFF	; 255
    131c:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    1320:	50 cf       	rjmp	.-352    	; 0x11c2 <main+0x92>
					case 0b01110000:
					case 0b00100000:
						speed(85,100);
    1322:	64 e6       	ldi	r22, 0x64	; 100
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	85 e5       	ldi	r24, 0x55	; 85
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(-31 - addition_handle);
    132e:	8c ed       	ldi	r24, 0xDC	; 220
    1330:	9f ef       	ldi	r25, 0xFF	; 255
    1332:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    1336:	45 cf       	rjmp	.-374    	; 0x11c2 <main+0x92>
					case 0b01100000:
						speed(80,100);
    1338:	64 e6       	ldi	r22, 0x64	; 100
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	80 e5       	ldi	r24, 0x50	; 80
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(-50 - addition_handle);
    1344:	89 ec       	ldi	r24, 0xC9	; 201
    1346:	9f ef       	ldi	r25, 0xFF	; 255
    1348:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    134c:	3a cf       	rjmp	.-396    	; 0x11c2 <main+0x92>
					case 0b01000000:
						speed(70,100);
    134e:	64 e6       	ldi	r22, 0x64	; 100
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	86 e4       	ldi	r24, 0x46	; 70
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(-75 - addition_handle);
    135a:	80 eb       	ldi	r24, 0xB0	; 176
    135c:	9f ef       	ldi	r25, 0xFF	; 255
    135e:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
						pattern=12; /* Lech trai goc lon */ /*Moi sua*/
    1362:	8c e0       	ldi	r24, 0x0C	; 12
    1364:	80 93 60 00 	sts	0x0060, r24
					break;
    1368:	2c cf       	rjmp	.-424    	; 0x11c2 <main+0x92>
				}
			break; /* case 10 */
			
			/* Lech phai goc lon */
			case 11:
				led7(11);
    136a:	8b e0       	ldi	r24, 0x0B	; 11
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				switch (sensor_cmp() & 0b11001100)
    1372:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    1376:	8c 7c       	andi	r24, 0xCC	; 204
    1378:	8c 30       	cpi	r24, 0x0C	; 12
    137a:	09 f4       	brne	.+2      	; 0x137e <main+0x24e>
    137c:	4b c0       	rjmp	.+150    	; 0x1414 <main+0x2e4>
    137e:	28 f4       	brcc	.+10     	; 0x138a <main+0x25a>
    1380:	88 23       	and	r24, r24
    1382:	49 f1       	breq	.+82     	; 0x13d6 <main+0x2a6>
    1384:	84 30       	cpi	r24, 0x04	; 4
    1386:	b9 f1       	breq	.+110    	; 0x13f6 <main+0x2c6>
    1388:	5a c0       	rjmp	.+180    	; 0x143e <main+0x30e>
    138a:	80 38       	cpi	r24, 0x80	; 128
    138c:	a9 f0       	breq	.+42     	; 0x13b8 <main+0x288>
    138e:	80 3c       	cpi	r24, 0xC0	; 192
    1390:	21 f0       	breq	.+8      	; 0x139a <main+0x26a>
    1392:	80 36       	cpi	r24, 0x60	; 96
    1394:	09 f0       	breq	.+2      	; 0x1398 <main+0x268>
    1396:	53 c0       	rjmp	.+166    	; 0x143e <main+0x30e>
    1398:	4e c0       	rjmp	.+156    	; 0x1436 <main+0x306>
    139a:	50 92 7d 00 	sts	0x007D, r5
    139e:	40 92 7c 00 	sts	0x007C, r4
				{
					case 0b11000000:
						set_encoder(6/*5*/);
						speed(80, /*0*/-10);
    13a2:	66 ef       	ldi	r22, 0xF6	; 246
    13a4:	7f ef       	ldi	r23, 0xFF	; 255
    13a6:	80 e5       	ldi	r24, 0x50	; 80
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(145/*95*/ + addition_handle);/* sua 95 */
    13ae:	86 e9       	ldi	r24, 0x96	; 150
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    13b6:	05 cf       	rjmp	.-502    	; 0x11c2 <main+0x92>
    13b8:	50 92 7d 00 	sts	0x007D, r5
    13bc:	40 92 7c 00 	sts	0x007C, r4
					
					case 0b10000000:
						set_encoder(6/*5*/);
						speed(80, /*15*/5);
    13c0:	65 e0       	ldi	r22, 0x05	; 5
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	80 e5       	ldi	r24, 0x50	; 80
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(125/*80*/ + addition_handle);/* sua 80*/
    13cc:	82 e8       	ldi	r24, 0x82	; 130
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    13d4:	f6 ce       	rjmp	.-532    	; 0x11c2 <main+0x92>
    13d6:	88 e0       	ldi	r24, 0x08	; 8
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	90 93 7d 00 	sts	0x007D, r25
    13de:	80 93 7c 00 	sts	0x007C, r24
					
					case 0b00000000:
						set_encoder(8/*7*/);
						speed(80, /*20*/10);
    13e2:	be 01       	movw	r22, r28
    13e4:	80 e5       	ldi	r24, 0x50	; 80
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(90/*68*/ + addition_handle);
    13ec:	8f e5       	ldi	r24, 0x5F	; 95
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    13f4:	e6 ce       	rjmp	.-564    	; 0x11c2 <main+0x92>
    13f6:	d0 93 7d 00 	sts	0x007D, r29
    13fa:	c0 93 7c 00 	sts	0x007C, r28
					
					case 0b00000100:
						set_encoder(10/*9*/);
						speed(80, /*25*/15);
    13fe:	6f e0       	ldi	r22, 0x0F	; 15
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	80 e5       	ldi	r24, 0x50	; 80
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(65/*50*/ + addition_handle);
    140a:	86 e4       	ldi	r24, 0x46	; 70
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    1412:	d7 ce       	rjmp	.-594    	; 0x11c2 <main+0x92>
					
					case 0b00001100:
						speed(80, /*30*/20);
    1414:	64 e1       	ldi	r22, 0x14	; 20
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	80 e5       	ldi	r24, 0x50	; 80
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(55/*42*/ + addition_handle);
    1420:	8c e3       	ldi	r24, 0x3C	; 60
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
						pattern = 10;
    1428:	90 92 60 00 	sts	0x0060, r9
    142c:	b0 92 7d 00 	sts	0x007D, r11
    1430:	a0 92 7c 00 	sts	0x007C, r10
    1434:	c6 ce       	rjmp	.-628    	; 0x11c2 <main+0x92>
						set_encoder(-1);
					break;
					
					case 0b01100000:
						pattern=12;
    1436:	8c e0       	ldi	r24, 0x0C	; 12
    1438:	80 93 60 00 	sts	0x0060, r24
					break;
    143c:	c2 ce       	rjmp	.-636    	; 0x11c2 <main+0x92>
					
					default:
						pattern=11;
    143e:	8b e0       	ldi	r24, 0x0B	; 11
    1440:	80 93 60 00 	sts	0x0060, r24
					break;
    1444:	be ce       	rjmp	.-644    	; 0x11c2 <main+0x92>
				}
			break; /* case 11 */
			
			/* Lech trai goc lon */
			case 12:
				led7(12);
    1446:	c8 01       	movw	r24, r16
    1448:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
    144c:	d0 93 7d 00 	sts	0x007D, r29
    1450:	c0 93 7c 00 	sts	0x007C, r28
				set_encoder(10);
				switch(sensor_cmp() & 0b00110011)
    1454:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    1458:	83 73       	andi	r24, 0x33	; 51
    145a:	83 30       	cpi	r24, 0x03	; 3
    145c:	79 f0       	breq	.+30     	; 0x147c <main+0x34c>
    145e:	28 f4       	brcc	.+10     	; 0x146a <main+0x33a>
    1460:	88 23       	and	r24, r24
    1462:	51 f1       	breq	.+84     	; 0x14b8 <main+0x388>
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	c9 f0       	breq	.+50     	; 0x149a <main+0x36a>
    1468:	5b c0       	rjmp	.+182    	; 0x1520 <main+0x3f0>
    146a:	80 32       	cpi	r24, 0x20	; 32
    146c:	a9 f1       	breq	.+106    	; 0x14d8 <main+0x3a8>
    146e:	80 33       	cpi	r24, 0x30	; 48
    1470:	09 f4       	brne	.+2      	; 0x1474 <main+0x344>
    1472:	41 c0       	rjmp	.+130    	; 0x14f6 <main+0x3c6>
    1474:	86 30       	cpi	r24, 0x06	; 6
    1476:	09 f0       	breq	.+2      	; 0x147a <main+0x34a>
    1478:	53 c0       	rjmp	.+166    	; 0x1520 <main+0x3f0>
    147a:	4e c0       	rjmp	.+156    	; 0x1518 <main+0x3e8>
    147c:	50 92 7d 00 	sts	0x007D, r5
    1480:	40 92 7c 00 	sts	0x007C, r4
				{
					case 0b00000011:
						set_encoder(6);
						speed(/*0*/-10,80);
    1484:	60 e5       	ldi	r22, 0x50	; 80
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	86 ef       	ldi	r24, 0xF6	; 246
    148a:	9f ef       	ldi	r25, 0xFF	; 255
    148c:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(-145/*-95*/ - addition_handle);/*sua -95*/
    1490:	8a e6       	ldi	r24, 0x6A	; 106
    1492:	9f ef       	ldi	r25, 0xFF	; 255
    1494:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    1498:	94 ce       	rjmp	.-728    	; 0x11c2 <main+0x92>
    149a:	50 92 7d 00 	sts	0x007D, r5
    149e:	40 92 7c 00 	sts	0x007C, r4
					
					case 0b00000001:
						set_encoder(6);
						speed(/*15*/5,80);
    14a2:	60 e5       	ldi	r22, 0x50	; 80
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	85 e0       	ldi	r24, 0x05	; 5
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(/*-80*/-125 - addition_handle);/*sua -80*/
    14ae:	8e e7       	ldi	r24, 0x7E	; 126
    14b0:	9f ef       	ldi	r25, 0xFF	; 255
    14b2:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    14b6:	85 ce       	rjmp	.-758    	; 0x11c2 <main+0x92>
    14b8:	88 e0       	ldi	r24, 0x08	; 8
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	90 93 7d 00 	sts	0x007D, r25
    14c0:	80 93 7c 00 	sts	0x007C, r24
					
					case 0b00000000:
						set_encoder(8/*7*/);
						speed(/*20*/10,80);
    14c4:	60 e5       	ldi	r22, 0x50	; 80
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	ce 01       	movw	r24, r28
    14ca:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(/*-68*/-90 - addition_handle);
    14ce:	81 ea       	ldi	r24, 0xA1	; 161
    14d0:	9f ef       	ldi	r25, 0xFF	; 255
    14d2:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    14d6:	75 ce       	rjmp	.-790    	; 0x11c2 <main+0x92>
    14d8:	d0 93 7d 00 	sts	0x007D, r29
    14dc:	c0 93 7c 00 	sts	0x007C, r28
					
					case 0b00100000:
						set_encoder(10/*9*/);
						speed(/*25*/15,80);
    14e0:	60 e5       	ldi	r22, 0x50	; 80
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	8f e0       	ldi	r24, 0x0F	; 15
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(/*-50*/-65 - addition_handle);
    14ec:	8a eb       	ldi	r24, 0xBA	; 186
    14ee:	9f ef       	ldi	r25, 0xFF	; 255
    14f0:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					break;
    14f4:	66 ce       	rjmp	.-820    	; 0x11c2 <main+0x92>
					
					case 0b00110000:
						speed(/*30*/20,80);
    14f6:	60 e5       	ldi	r22, 0x50	; 80
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	84 e1       	ldi	r24, 0x14	; 20
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
						handle(-55/*-42*/ - addition_handle);
    1502:	84 ec       	ldi	r24, 0xC4	; 196
    1504:	9f ef       	ldi	r25, 0xFF	; 255
    1506:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
						pattern = 10;
    150a:	90 92 60 00 	sts	0x0060, r9
    150e:	b0 92 7d 00 	sts	0x007D, r11
    1512:	a0 92 7c 00 	sts	0x007C, r10
    1516:	55 ce       	rjmp	.-854    	; 0x11c2 <main+0x92>
						set_encoder(-1);
					break;
					
					case 0b00000110:
						pattern=11;
    1518:	8b e0       	ldi	r24, 0x0B	; 11
    151a:	80 93 60 00 	sts	0x0060, r24
					break;
    151e:	51 ce       	rjmp	.-862    	; 0x11c2 <main+0x92>
					
					default:
						pattern=12;
    1520:	8c e0       	ldi	r24, 0x0C	; 12
    1522:	80 93 60 00 	sts	0x0060, r24
					break;
    1526:	4d ce       	rjmp	.-870    	; 0x11c2 <main+0x92>
				}
			break; /* case 12 */
			
			/* Cua vuong */
			case 21:
				led7(21);
    1528:	85 e1       	ldi	r24, 0x15	; 21
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				
				handle(0);
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
				speed(-40,-40);
    1538:	68 ed       	ldi	r22, 0xD8	; 216
    153a:	7f ef       	ldi	r23, 0xFF	; 255
    153c:	88 ed       	ldi	r24, 0xD8	; 216
    153e:	9f ef       	ldi	r25, 0xFF	; 255
    1540:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
				timer_cnt = 0;
    1544:	10 92 69 00 	sts	0x0069, r1
    1548:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    154c:	10 92 67 00 	sts	0x0067, r1
    1550:	10 92 66 00 	sts	0x0066, r1
				pattern = 22;
    1554:	86 e1       	ldi	r24, 0x16	; 22
    1556:	80 93 60 00 	sts	0x0060, r24
			break; /* case 21 */
    155a:	33 ce       	rjmp	.-922    	; 0x11c2 <main+0x92>
			
			case 22:
				led7(22);
    155c:	86 e1       	ldi	r24, 0x16	; 22
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				
				//if( timer_cnt > (300 - (delay * 200)) || encoder_pulse > 20 )
				if (speed_wait(3)) /*important*/
    1564:	80 91 61 00 	lds	r24, 0x0061
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	a8 f4       	brcc	.+42     	; 0x1596 <main+0x466>
    156c:	d0 93 7d 00 	sts	0x007D, r29
    1570:	c0 93 7c 00 	sts	0x007C, r28
				{
					set_encoder(10);
					speed(70, 70);
    1574:	66 e4       	ldi	r22, 0x46	; 70
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	86 e4       	ldi	r24, 0x46	; 70
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
					pattern = 23;
    1580:	87 e1       	ldi	r24, 0x17	; 23
    1582:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    1586:	10 92 69 00 	sts	0x0069, r1
    158a:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    158e:	10 92 67 00 	sts	0x0067, r1
    1592:	10 92 66 00 	sts	0x0066, r1
	return (((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000) || ((sensor & 0b11100000) == 0b11100000));
}

inline void center_no_speed( void )
{
	switch (sensor_cmp() & 0b01111110)
    1596:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    159a:	8e 77       	andi	r24, 0x7E	; 126
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	fc 01       	movw	r30, r24
    15a0:	32 97       	sbiw	r30, 0x02	; 2
    15a2:	ef 36       	cpi	r30, 0x6F	; 111
    15a4:	f1 05       	cpc	r31, r1
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <main+0x47a>
    15a8:	0c ce       	rjmp	.-1000   	; 0x11c2 <main+0x92>
    15aa:	ed 50       	subi	r30, 0x0D	; 13
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__tablejump2__>
	{
		case 0b01111110:
		break;
		
		case 0b00011000: /* Chay thang */
		handle( 0 );
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    15ba:	03 ce       	rjmp	.-1018   	; 0x11c2 <main+0x92>
		break;
		
		case 0b00011100:
		case 0b00001000:
		handle(9 + addition_handle);
    15bc:	8e e0       	ldi	r24, 0x0E	; 14
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    15c4:	fe cd       	rjmp	.-1028   	; 0x11c2 <main+0x92>
		break;
		case 0b00001100:
		handle(17 + addition_handle);
    15c6:	86 e1       	ldi	r24, 0x16	; 22
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    15ce:	f9 cd       	rjmp	.-1038   	; 0x11c2 <main+0x92>
		break;
		case 0b00001110:
		case 0b00000100:
		handle(31 + addition_handle);
    15d0:	84 e2       	ldi	r24, 0x24	; 36
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    15d8:	f4 cd       	rjmp	.-1048   	; 0x11c2 <main+0x92>
		break;
		case 0b00000110:
		handle(50 + addition_handle);
    15da:	87 e3       	ldi	r24, 0x37	; 55
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    15e2:	ef cd       	rjmp	.-1058   	; 0x11c2 <main+0x92>
		break;
		case 0b00000010:
		handle(75 + addition_handle);
    15e4:	80 e5       	ldi	r24, 0x50	; 80
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    15ec:	ea cd       	rjmp	.-1068   	; 0x11c2 <main+0x92>
		break;
		
		case 0b00111000:
		case 0b00010000:
		handle(-9 - addition_handle);
    15ee:	82 ef       	ldi	r24, 0xF2	; 242
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    15f6:	e5 cd       	rjmp	.-1078   	; 0x11c2 <main+0x92>
		break;
		case 0b00110000:
		handle(-17 - addition_handle);
    15f8:	8a ee       	ldi	r24, 0xEA	; 234
    15fa:	9f ef       	ldi	r25, 0xFF	; 255
    15fc:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1600:	e0 cd       	rjmp	.-1088   	; 0x11c2 <main+0x92>
		break;
		case 0b01110000:
		case 0b00100000:
		handle(-31 - addition_handle);
    1602:	8c ed       	ldi	r24, 0xDC	; 220
    1604:	9f ef       	ldi	r25, 0xFF	; 255
    1606:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    160a:	db cd       	rjmp	.-1098   	; 0x11c2 <main+0x92>
		break;
		case 0b01100000:
		handle(-50 - addition_handle);
    160c:	89 ec       	ldi	r24, 0xC9	; 201
    160e:	9f ef       	ldi	r25, 0xFF	; 255
    1610:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1614:	d6 cd       	rjmp	.-1108   	; 0x11c2 <main+0x92>
		break;
		case 0b01000000:
		handle(-75 - addition_handle);
    1616:	80 eb       	ldi	r24, 0xB0	; 176
    1618:	9f ef       	ldi	r25, 0xFF	; 255
    161a:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    161e:	d1 cd       	rjmp	.-1118   	; 0x11c2 <main+0x92>
				
				center_no_speed();
			break; /* case 22 */
			
			case 23:
				led7(23);
    1620:	87 e1       	ldi	r24, 0x17	; 23
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				
				sensor = sensor_cmp();
    1628:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    162c:	80 93 6a 00 	sts	0x006A, r24
				/* Cua trai */
				if(((encoder_pulse > 5) /*|| (timer_cnt > 150)*/) &&(((sensor & 0b11111000) == 0b11111000)  || ((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11100000) == 0b11100000)))	/* Neu gap tin hieu nay la goc cua 90 trai thi be */
    1630:	20 91 66 00 	lds	r18, 0x0066
    1634:	30 91 67 00 	lds	r19, 0x0067
    1638:	26 30       	cpi	r18, 0x06	; 6
    163a:	31 05       	cpc	r19, r1
    163c:	80 f1       	brcs	.+96     	; 0x169e <main+0x56e>
    163e:	98 2f       	mov	r25, r24
    1640:	98 7f       	andi	r25, 0xF8	; 248
    1642:	98 3f       	cpi	r25, 0xF8	; 248
    1644:	41 f0       	breq	.+16     	; 0x1656 <main+0x526>
    1646:	98 2f       	mov	r25, r24
    1648:	90 7f       	andi	r25, 0xF0	; 240
    164a:	90 3f       	cpi	r25, 0xF0	; 240
    164c:	21 f0       	breq	.+8      	; 0x1656 <main+0x526>
    164e:	98 2f       	mov	r25, r24
    1650:	90 7e       	andi	r25, 0xE0	; 224
    1652:	90 3e       	cpi	r25, 0xE0	; 224
    1654:	61 f4       	brne	.+24     	; 0x166e <main+0x53e>
    1656:	b0 92 7d 00 	sts	0x007D, r11
    165a:	a0 92 7c 00 	sts	0x007C, r10
				{
					set_encoder(-1);
					pattern = 26;
    165e:	8a e1       	ldi	r24, 0x1A	; 26
    1660:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    1664:	10 92 69 00 	sts	0x0069, r1
    1668:	10 92 68 00 	sts	0x0068, r1
					break;
    166c:	aa cd       	rjmp	.-1196   	; 0x11c2 <main+0x92>
				}
				/* Cua phai */
				if(((encoder_pulse > 5) /*|| (timer_cnt > 150)*/) && (((sensor & 0b00011111) == 0b00011111 ) ||((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111))) /* Neu gap tin hieu nay la goc cua 90 phai thi be */
    166e:	98 2f       	mov	r25, r24
    1670:	9f 71       	andi	r25, 0x1F	; 31
    1672:	9f 31       	cpi	r25, 0x1F	; 31
    1674:	41 f0       	breq	.+16     	; 0x1686 <main+0x556>
    1676:	98 2f       	mov	r25, r24
    1678:	97 70       	andi	r25, 0x07	; 7
    167a:	97 30       	cpi	r25, 0x07	; 7
    167c:	21 f0       	breq	.+8      	; 0x1686 <main+0x556>
    167e:	98 2f       	mov	r25, r24
    1680:	9f 70       	andi	r25, 0x0F	; 15
    1682:	9f 30       	cpi	r25, 0x0F	; 15
    1684:	61 f4       	brne	.+24     	; 0x169e <main+0x56e>
    1686:	b0 92 7d 00 	sts	0x007D, r11
    168a:	a0 92 7c 00 	sts	0x007C, r10
				{
					set_encoder(-1);
					pattern = 27;
    168e:	8b e1       	ldi	r24, 0x1B	; 27
    1690:	80 93 60 00 	sts	0x0060, r24
					timer_cnt=0;
    1694:	10 92 69 00 	sts	0x0069, r1
    1698:	10 92 68 00 	sts	0x0068, r1
					break;
    169c:	92 cd       	rjmp	.-1244   	; 0x11c2 <main+0x92>
				}
				/* No line */
				if ((sensor & 0b01111110) == 0x00)
    169e:	8e 77       	andi	r24, 0x7E	; 126
    16a0:	a9 f4       	brne	.+42     	; 0x16cc <main+0x59c>
				{ 
					pattern = 73;
    16a2:	89 e4       	ldi	r24, 0x49	; 73
    16a4:	80 93 60 00 	sts	0x0060, r24
					handle(0);
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					speed(100, 100);
    16b0:	64 e6       	ldi	r22, 0x64	; 100
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	84 e6       	ldi	r24, 0x64	; 100
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
					timer_cnt = 0;
    16bc:	10 92 69 00 	sts	0x0069, r1
    16c0:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    16c4:	10 92 67 00 	sts	0x0067, r1
    16c8:	10 92 66 00 	sts	0x0066, r1
	return (((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000) || ((sensor & 0b11100000) == 0b11100000));
}

inline void center_no_speed( void )
{
	switch (sensor_cmp() & 0b01111110)
    16cc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    16d0:	8e 77       	andi	r24, 0x7E	; 126
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	fc 01       	movw	r30, r24
    16d6:	32 97       	sbiw	r30, 0x02	; 2
    16d8:	ef 36       	cpi	r30, 0x6F	; 111
    16da:	f1 05       	cpc	r31, r1
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <main+0x5b0>
    16de:	71 cd       	rjmp	.-1310   	; 0x11c2 <main+0x92>
    16e0:	ee 59       	subi	r30, 0x9E	; 158
    16e2:	fe 4f       	sbci	r31, 0xFE	; 254
    16e4:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__tablejump2__>
	{
		case 0b01111110:
		break;
		
		case 0b00011000: /* Chay thang */
		handle( 0 );
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    16f0:	68 cd       	rjmp	.-1328   	; 0x11c2 <main+0x92>
		break;
		
		case 0b00011100:
		case 0b00001000:
		handle(9 + addition_handle);
    16f2:	8e e0       	ldi	r24, 0x0E	; 14
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    16fa:	63 cd       	rjmp	.-1338   	; 0x11c2 <main+0x92>
		break;
		case 0b00001100:
		handle(17 + addition_handle);
    16fc:	86 e1       	ldi	r24, 0x16	; 22
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1704:	5e cd       	rjmp	.-1348   	; 0x11c2 <main+0x92>
		break;
		case 0b00001110:
		case 0b00000100:
		handle(31 + addition_handle);
    1706:	84 e2       	ldi	r24, 0x24	; 36
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    170e:	59 cd       	rjmp	.-1358   	; 0x11c2 <main+0x92>
		break;
		case 0b00000110:
		handle(50 + addition_handle);
    1710:	87 e3       	ldi	r24, 0x37	; 55
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1718:	54 cd       	rjmp	.-1368   	; 0x11c2 <main+0x92>
		break;
		case 0b00000010:
		handle(75 + addition_handle);
    171a:	80 e5       	ldi	r24, 0x50	; 80
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1722:	4f cd       	rjmp	.-1378   	; 0x11c2 <main+0x92>
		break;
		
		case 0b00111000:
		case 0b00010000:
		handle(-9 - addition_handle);
    1724:	82 ef       	ldi	r24, 0xF2	; 242
    1726:	9f ef       	ldi	r25, 0xFF	; 255
    1728:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    172c:	4a cd       	rjmp	.-1388   	; 0x11c2 <main+0x92>
		break;
		case 0b00110000:
		handle(-17 - addition_handle);
    172e:	8a ee       	ldi	r24, 0xEA	; 234
    1730:	9f ef       	ldi	r25, 0xFF	; 255
    1732:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1736:	45 cd       	rjmp	.-1398   	; 0x11c2 <main+0x92>
		break;
		case 0b01110000:
		case 0b00100000:
		handle(-31 - addition_handle);
    1738:	8c ed       	ldi	r24, 0xDC	; 220
    173a:	9f ef       	ldi	r25, 0xFF	; 255
    173c:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1740:	40 cd       	rjmp	.-1408   	; 0x11c2 <main+0x92>
		break;
		case 0b01100000:
		handle(-50 - addition_handle);
    1742:	89 ec       	ldi	r24, 0xC9	; 201
    1744:	9f ef       	ldi	r25, 0xFF	; 255
    1746:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    174a:	3b cd       	rjmp	.-1418   	; 0x11c2 <main+0x92>
		break;
		case 0b01000000:
		handle(-75 - addition_handle);
    174c:	80 eb       	ldi	r24, 0xB0	; 176
    174e:	9f ef       	ldi	r25, 0xFF	; 255
    1750:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1754:	36 cd       	rjmp	.-1428   	; 0x11c2 <main+0x92>
				/* Nguoc lai thi chinh thang cho xe */
				center_no_speed();
			break; /* case 23 */
			
			case 26: /* trai */
				led7(26);
    1756:	8a e1       	ldi	r24, 0x1A	; 26
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				
				handle( -150  - addition_handle); /* -120 */
    175e:	85 e6       	ldi	r24, 0x65	; 101
    1760:	9f ef       	ldi	r25, 0xFF	; 255
    1762:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
				speed( -80 , 80 );
    1766:	60 e5       	ldi	r22, 0x50	; 80
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	80 eb       	ldi	r24, 0xB0	; 176
    176c:	9f ef       	ldi	r25, 0xFF	; 255
    176e:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
				pattern = 31;
    1772:	8f e1       	ldi	r24, 0x1F	; 31
    1774:	80 93 60 00 	sts	0x0060, r24
				timer_cnt = 0;
    1778:	10 92 69 00 	sts	0x0069, r1
    177c:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    1780:	10 92 67 00 	sts	0x0067, r1
    1784:	10 92 66 00 	sts	0x0066, r1
			break; /* case 26 */
    1788:	1c cd       	rjmp	.-1480   	; 0x11c2 <main+0x92>
			
			case 27: /* phai */
				led7(27);
    178a:	8b e1       	ldi	r24, 0x1B	; 27
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				
				handle( 150  + addition_handle); /* 120 */
    1792:	8b e9       	ldi	r24, 0x9B	; 155
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
				speed( 80 , -80 );
    179a:	60 eb       	ldi	r22, 0xB0	; 176
    179c:	7f ef       	ldi	r23, 0xFF	; 255
    179e:	80 e5       	ldi	r24, 0x50	; 80
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
				pattern = 41;
    17a6:	89 e2       	ldi	r24, 0x29	; 41
    17a8:	80 93 60 00 	sts	0x0060, r24
				timer_cnt = 0;
    17ac:	10 92 69 00 	sts	0x0069, r1
    17b0:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    17b4:	10 92 67 00 	sts	0x0067, r1
    17b8:	10 92 66 00 	sts	0x0066, r1
			break; /* case 27 */
    17bc:	02 cd       	rjmp	.-1532   	; 0x11c2 <main+0x92>
			
			case 31:
				led7(31);
    17be:	8f e1       	ldi	r24, 0x1F	; 31
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				
				if( timer_cnt > 200 )
    17c6:	80 91 68 00 	lds	r24, 0x0068
    17ca:	90 91 69 00 	lds	r25, 0x0069
    17ce:	89 3c       	cpi	r24, 0xC9	; 201
    17d0:	91 05       	cpc	r25, r1
    17d2:	08 f4       	brcc	.+2      	; 0x17d6 <main+0x6a6>
    17d4:	f6 cc       	rjmp	.-1556   	; 0x11c2 <main+0x92>
				{
					pattern = 32;
    17d6:	30 92 60 00 	sts	0x0060, r3
					timer_cnt = 0;
    17da:	10 92 69 00 	sts	0x0069, r1
    17de:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse = 0;
    17e2:	10 92 67 00 	sts	0x0067, r1
    17e6:	10 92 66 00 	sts	0x0066, r1
    17ea:	eb cc       	rjmp	.-1578   	; 0x11c2 <main+0x92>
				}
			break; /* case 31 */
			
			case 32:
				led7(32);
    17ec:	80 e2       	ldi	r24, 0x20	; 32
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				sensor = sensor_cmp();
    17f4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    17f8:	80 93 6a 00 	sts	0x006A, r24
				if((sensor & 0b11100111) == 0b00100000)
    17fc:	87 7e       	andi	r24, 0xE7	; 231
    17fe:	80 32       	cpi	r24, 0x20	; 32
    1800:	09 f0       	breq	.+2      	; 0x1804 <main+0x6d4>
    1802:	df cc       	rjmp	.-1602   	; 0x11c2 <main+0x92>
				{
					pattern = 10;
    1804:	90 92 60 00 	sts	0x0060, r9
    1808:	dc cc       	rjmp	.-1608   	; 0x11c2 <main+0x92>
				}
			break; /* case 32 */
			
			case 41:
				led7(41);
    180a:	89 e2       	ldi	r24, 0x29	; 41
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				
				if( timer_cnt > 200 )
    1812:	80 91 68 00 	lds	r24, 0x0068
    1816:	90 91 69 00 	lds	r25, 0x0069
    181a:	89 3c       	cpi	r24, 0xC9	; 201
    181c:	91 05       	cpc	r25, r1
    181e:	08 f4       	brcc	.+2      	; 0x1822 <main+0x6f2>
    1820:	d0 cc       	rjmp	.-1632   	; 0x11c2 <main+0x92>
				{
					pattern = 42;
    1822:	9a e2       	ldi	r25, 0x2A	; 42
    1824:	90 93 60 00 	sts	0x0060, r25
					timer_cnt = 0;
    1828:	10 92 69 00 	sts	0x0069, r1
    182c:	10 92 68 00 	sts	0x0068, r1
    1830:	c8 cc       	rjmp	.-1648   	; 0x11c2 <main+0x92>
				}
			break; /* case 41 */
			
			case 42:
				led7(42);
    1832:	8a e2       	ldi	r24, 0x2A	; 42
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				sensor = sensor_cmp();
    183a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    183e:	80 93 6a 00 	sts	0x006A, r24
				if((sensor & 0b11100111) == 0b00000100) 
    1842:	87 7e       	andi	r24, 0xE7	; 231
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	09 f0       	breq	.+2      	; 0x184a <main+0x71a>
    1848:	bc cc       	rjmp	.-1672   	; 0x11c2 <main+0x92>
				{
					pattern = 10;
    184a:	90 92 60 00 	sts	0x0060, r9
    184e:	b9 cc       	rjmp	.-1678   	; 0x11c2 <main+0x92>
				}
			break; /* case 42 */
			
			/* Chuyen lan trai */
			case 51:
				led7(51);
    1850:	83 e3       	ldi	r24, 0x33	; 51
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
    1858:	d0 93 7d 00 	sts	0x007D, r29
    185c:	c0 93 7c 00 	sts	0x007C, r28
				set_encoder(10);
				sensor = sensor_cmp();
    1860:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    1864:	80 93 6a 00 	sts	0x006A, r24
				if (((sensor & 0b00000111) == 0b00000111) || ((sensor & 0b00001111) == 0b00001111) || ((sensor & 0b00011111) == 0b00011111))
    1868:	98 2f       	mov	r25, r24
    186a:	97 70       	andi	r25, 0x07	; 7
    186c:	97 30       	cpi	r25, 0x07	; 7
    186e:	39 f0       	breq	.+14     	; 0x187e <main+0x74e>
    1870:	98 2f       	mov	r25, r24
    1872:	9f 70       	andi	r25, 0x0F	; 15
    1874:	9f 30       	cpi	r25, 0x0F	; 15
    1876:	19 f0       	breq	.+6      	; 0x187e <main+0x74e>
    1878:	8f 71       	andi	r24, 0x1F	; 31
    187a:	8f 31       	cpi	r24, 0x1F	; 31
    187c:	39 f4       	brne	.+14     	; 0x188c <main+0x75c>
				{
					pattern = 21;
    187e:	80 92 60 00 	sts	0x0060, r8
    1882:	b0 92 7d 00 	sts	0x007D, r11
    1886:	a0 92 7c 00 	sts	0x007C, r10
    188a:	9b cc       	rjmp	.-1738   	; 0x11c2 <main+0x92>
					set_encoder(-1);
					break;
				}
				
				speed(50, 50);
    188c:	62 e3       	ldi	r22, 0x32	; 50
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	82 e3       	ldi	r24, 0x32	; 50
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    1898:	80 91 66 00 	lds	r24, 0x0066
    189c:	90 91 67 00 	lds	r25, 0x0067
    18a0:	49 97       	sbiw	r24, 0x19	; 25
    18a2:	38 f4       	brcc	.+14     	; 0x18b2 <main+0x782>
    18a4:	80 91 68 00 	lds	r24, 0x0068
    18a8:	90 91 69 00 	lds	r25, 0x0069
    18ac:	88 37       	cpi	r24, 0x78	; 120
    18ae:	91 05       	cpc	r25, r1
    18b0:	58 f0       	brcs	.+22     	; 0x18c8 <main+0x798>
				{
					pattern = 52;
    18b2:	24 e3       	ldi	r18, 0x34	; 52
    18b4:	20 93 60 00 	sts	0x0060, r18
					timer_cnt = 0;
    18b8:	10 92 69 00 	sts	0x0069, r1
    18bc:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse=0;
    18c0:	10 92 67 00 	sts	0x0067, r1
    18c4:	10 92 66 00 	sts	0x0066, r1
	return (((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000) || ((sensor & 0b11100000) == 0b11100000));
}

inline void center_no_speed( void )
{
	switch (sensor_cmp() & 0b01111110)
    18c8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    18cc:	8e 77       	andi	r24, 0x7E	; 126
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	fc 01       	movw	r30, r24
    18d2:	32 97       	sbiw	r30, 0x02	; 2
    18d4:	ef 36       	cpi	r30, 0x6F	; 111
    18d6:	f1 05       	cpc	r31, r1
    18d8:	08 f0       	brcs	.+2      	; 0x18dc <main+0x7ac>
    18da:	73 cc       	rjmp	.-1818   	; 0x11c2 <main+0x92>
    18dc:	ef 52       	subi	r30, 0x2F	; 47
    18de:	fe 4f       	sbci	r31, 0xFE	; 254
    18e0:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__tablejump2__>
	{
		case 0b01111110:
		break;
		
		case 0b00011000: /* Chay thang */
		handle( 0 );
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    18ec:	6a cc       	rjmp	.-1836   	; 0x11c2 <main+0x92>
		break;
		
		case 0b00011100:
		case 0b00001000:
		handle(9 + addition_handle);
    18ee:	8e e0       	ldi	r24, 0x0E	; 14
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    18f6:	65 cc       	rjmp	.-1846   	; 0x11c2 <main+0x92>
		break;
		case 0b00001100:
		handle(17 + addition_handle);
    18f8:	86 e1       	ldi	r24, 0x16	; 22
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1900:	60 cc       	rjmp	.-1856   	; 0x11c2 <main+0x92>
		break;
		case 0b00001110:
		case 0b00000100:
		handle(31 + addition_handle);
    1902:	84 e2       	ldi	r24, 0x24	; 36
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    190a:	5b cc       	rjmp	.-1866   	; 0x11c2 <main+0x92>
		break;
		case 0b00000110:
		handle(50 + addition_handle);
    190c:	87 e3       	ldi	r24, 0x37	; 55
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1914:	56 cc       	rjmp	.-1876   	; 0x11c2 <main+0x92>
		break;
		case 0b00000010:
		handle(75 + addition_handle);
    1916:	80 e5       	ldi	r24, 0x50	; 80
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    191e:	51 cc       	rjmp	.-1886   	; 0x11c2 <main+0x92>
		break;
		
		case 0b00111000:
		case 0b00010000:
		handle(-9 - addition_handle);
    1920:	82 ef       	ldi	r24, 0xF2	; 242
    1922:	9f ef       	ldi	r25, 0xFF	; 255
    1924:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1928:	4c cc       	rjmp	.-1896   	; 0x11c2 <main+0x92>
		break;
		case 0b00110000:
		handle(-17 - addition_handle);
    192a:	8a ee       	ldi	r24, 0xEA	; 234
    192c:	9f ef       	ldi	r25, 0xFF	; 255
    192e:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1932:	47 cc       	rjmp	.-1906   	; 0x11c2 <main+0x92>
		break;
		case 0b01110000:
		case 0b00100000:
		handle(-31 - addition_handle);
    1934:	8c ed       	ldi	r24, 0xDC	; 220
    1936:	9f ef       	ldi	r25, 0xFF	; 255
    1938:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    193c:	42 cc       	rjmp	.-1916   	; 0x11c2 <main+0x92>
		break;
		case 0b01100000:
		handle(-50 - addition_handle);
    193e:	89 ec       	ldi	r24, 0xC9	; 201
    1940:	9f ef       	ldi	r25, 0xFF	; 255
    1942:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1946:	3d cc       	rjmp	.-1926   	; 0x11c2 <main+0x92>
		break;
		case 0b01000000:
		handle(-75 - addition_handle);
    1948:	80 eb       	ldi	r24, 0xB0	; 176
    194a:	9f ef       	ldi	r25, 0xFF	; 255
    194c:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1950:	38 cc       	rjmp	.-1936   	; 0x11c2 <main+0x92>
				
				center_no_speed();
			break; /* case 51 */
			
			case 52:
				led7(52);
    1952:	84 e3       	ldi	r24, 0x34	; 52
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				
				handle(-30);
    195a:	82 ee       	ldi	r24, 0xE2	; 226
    195c:	9f ef       	ldi	r25, 0xFF	; 255
    195e:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
				speed( 35 ,50 );
    1962:	62 e3       	ldi	r22, 0x32	; 50
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	83 e2       	ldi	r24, 0x23	; 35
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
				pattern = 53;
    196e:	70 92 60 00 	sts	0x0060, r7
				timer_cnt = 0;
    1972:	10 92 69 00 	sts	0x0069, r1
    1976:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    197a:	10 92 67 00 	sts	0x0067, r1
    197e:	10 92 66 00 	sts	0x0066, r1
			break; /* case 52 */
    1982:	1f cc       	rjmp	.-1986   	; 0x11c2 <main+0x92>
			
			case 53:
				led7(53);
    1984:	85 e3       	ldi	r24, 0x35	; 53
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				
				sensor = sensor_cmp();
    198c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    1990:	28 2e       	mov	r2, r24
    1992:	80 93 6a 00 	sts	0x006A, r24
				if(((encoder_pulse > 100) || (timer_cnt > 200 * delay)) && ((sensor & 0b00110000 ) == 0b00110000))
    1996:	80 91 66 00 	lds	r24, 0x0066
    199a:	90 91 67 00 	lds	r25, 0x0067
    199e:	85 36       	cpi	r24, 0x65	; 101
    19a0:	91 05       	cpc	r25, r1
    19a2:	08 f5       	brcc	.+66     	; 0x19e6 <main+0x8b6>
    19a4:	60 91 68 00 	lds	r22, 0x0068
    19a8:	70 91 69 00 	lds	r23, 0x0069
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__floatunsisf>
    19b4:	6b 01       	movw	r12, r22
    19b6:	7c 01       	movw	r14, r24
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	48 e4       	ldi	r20, 0x48	; 72
    19be:	53 e4       	ldi	r21, 0x43	; 67
    19c0:	60 91 6d 00 	lds	r22, 0x006D
    19c4:	70 91 6e 00 	lds	r23, 0x006E
    19c8:	80 91 6f 00 	lds	r24, 0x006F
    19cc:	90 91 70 00 	lds	r25, 0x0070
    19d0:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
    19d4:	9b 01       	movw	r18, r22
    19d6:	ac 01       	movw	r20, r24
    19d8:	c7 01       	movw	r24, r14
    19da:	b6 01       	movw	r22, r12
    19dc:	0e 94 3a 10 	call	0x2074	; 0x2074 <__gesf2>
    19e0:	18 16       	cp	r1, r24
    19e2:	0c f0       	brlt	.+2      	; 0x19e6 <main+0x8b6>
    19e4:	ee cb       	rjmp	.-2084   	; 0x11c2 <main+0x92>
    19e6:	82 2d       	mov	r24, r2
    19e8:	80 73       	andi	r24, 0x30	; 48
    19ea:	80 33       	cpi	r24, 0x30	; 48
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <main+0x8c0>
    19ee:	e9 cb       	rjmp	.-2094   	; 0x11c2 <main+0x92>
				{
					pattern = 10;
    19f0:	90 92 60 00 	sts	0x0060, r9
    19f4:	b0 92 7d 00 	sts	0x007D, r11
    19f8:	a0 92 7c 00 	sts	0x007C, r10
					set_encoder(-1);
					
					handle(40);
    19fc:	88 e2       	ldi	r24, 0x28	; 40
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					speed(100, 70);
    1a04:	66 e4       	ldi	r22, 0x46	; 70
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	84 e6       	ldi	r24, 0x64	; 100
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
    1a10:	d8 cb       	rjmp	.-2128   	; 0x11c2 <main+0x92>
				}
			break; /* case 53 */
			
			/* Chuyen lan phai */
			case 61:
				led7(61);
    1a12:	8d e3       	ldi	r24, 0x3D	; 61
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
    1a1a:	d0 93 7d 00 	sts	0x007D, r29
    1a1e:	c0 93 7c 00 	sts	0x007C, r28
				set_encoder(10);
				sensor = sensor_cmp();
    1a22:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    1a26:	80 93 6a 00 	sts	0x006A, r24
				if (((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11100000) == 0b11100000) || ((sensor & 0b11111000) == 0b11111000))
    1a2a:	98 2f       	mov	r25, r24
    1a2c:	90 7e       	andi	r25, 0xE0	; 224
    1a2e:	90 3e       	cpi	r25, 0xE0	; 224
    1a30:	19 f0       	breq	.+6      	; 0x1a38 <main+0x908>
    1a32:	88 7f       	andi	r24, 0xF8	; 248
    1a34:	88 3f       	cpi	r24, 0xF8	; 248
    1a36:	39 f4       	brne	.+14     	; 0x1a46 <main+0x916>
				{
					pattern = 21;
    1a38:	80 92 60 00 	sts	0x0060, r8
    1a3c:	b0 92 7d 00 	sts	0x007D, r11
    1a40:	a0 92 7c 00 	sts	0x007C, r10
    1a44:	be cb       	rjmp	.-2180   	; 0x11c2 <main+0x92>
					set_encoder(-1);
					break;
				}
				
				speed(50, 50);
    1a46:	62 e3       	ldi	r22, 0x32	; 50
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	82 e3       	ldi	r24, 0x32	; 50
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
				
				if (encoder_pulse >= 25 || timer_cnt >= 120)
    1a52:	80 91 66 00 	lds	r24, 0x0066
    1a56:	90 91 67 00 	lds	r25, 0x0067
    1a5a:	49 97       	sbiw	r24, 0x19	; 25
    1a5c:	38 f4       	brcc	.+14     	; 0x1a6c <main+0x93c>
    1a5e:	80 91 68 00 	lds	r24, 0x0068
    1a62:	90 91 69 00 	lds	r25, 0x0069
    1a66:	88 37       	cpi	r24, 0x78	; 120
    1a68:	91 05       	cpc	r25, r1
    1a6a:	58 f0       	brcs	.+22     	; 0x1a82 <main+0x952>
				{
					pattern = 62;
    1a6c:	8e e3       	ldi	r24, 0x3E	; 62
    1a6e:	80 93 60 00 	sts	0x0060, r24
					timer_cnt = 0;
    1a72:	10 92 69 00 	sts	0x0069, r1
    1a76:	10 92 68 00 	sts	0x0068, r1
					encoder_pulse=0;
    1a7a:	10 92 67 00 	sts	0x0067, r1
    1a7e:	10 92 66 00 	sts	0x0066, r1
	return (((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000) || ((sensor & 0b11100000) == 0b11100000));
}

inline void center_no_speed( void )
{
	switch (sensor_cmp() & 0b01111110)
    1a82:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    1a86:	8e 77       	andi	r24, 0x7E	; 126
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	32 97       	sbiw	r30, 0x02	; 2
    1a8e:	ef 36       	cpi	r30, 0x6F	; 111
    1a90:	f1 05       	cpc	r31, r1
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <main+0x966>
    1a94:	96 cb       	rjmp	.-2260   	; 0x11c2 <main+0x92>
    1a96:	e0 5c       	subi	r30, 0xC0	; 192
    1a98:	fd 4f       	sbci	r31, 0xFD	; 253
    1a9a:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__tablejump2__>
	{
		case 0b01111110:
		break;
		
		case 0b00011000: /* Chay thang */
		handle( 0 );
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1aa6:	8d cb       	rjmp	.-2278   	; 0x11c2 <main+0x92>
		break;
		
		case 0b00011100:
		case 0b00001000:
		handle(9 + addition_handle);
    1aa8:	8e e0       	ldi	r24, 0x0E	; 14
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1ab0:	88 cb       	rjmp	.-2288   	; 0x11c2 <main+0x92>
		break;
		case 0b00001100:
		handle(17 + addition_handle);
    1ab2:	86 e1       	ldi	r24, 0x16	; 22
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1aba:	83 cb       	rjmp	.-2298   	; 0x11c2 <main+0x92>
		break;
		case 0b00001110:
		case 0b00000100:
		handle(31 + addition_handle);
    1abc:	84 e2       	ldi	r24, 0x24	; 36
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1ac4:	7e cb       	rjmp	.-2308   	; 0x11c2 <main+0x92>
		break;
		case 0b00000110:
		handle(50 + addition_handle);
    1ac6:	87 e3       	ldi	r24, 0x37	; 55
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1ace:	79 cb       	rjmp	.-2318   	; 0x11c2 <main+0x92>
		break;
		case 0b00000010:
		handle(75 + addition_handle);
    1ad0:	80 e5       	ldi	r24, 0x50	; 80
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1ad8:	74 cb       	rjmp	.-2328   	; 0x11c2 <main+0x92>
		break;
		
		case 0b00111000:
		case 0b00010000:
		handle(-9 - addition_handle);
    1ada:	82 ef       	ldi	r24, 0xF2	; 242
    1adc:	9f ef       	ldi	r25, 0xFF	; 255
    1ade:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1ae2:	6f cb       	rjmp	.-2338   	; 0x11c2 <main+0x92>
		break;
		case 0b00110000:
		handle(-17 - addition_handle);
    1ae4:	8a ee       	ldi	r24, 0xEA	; 234
    1ae6:	9f ef       	ldi	r25, 0xFF	; 255
    1ae8:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1aec:	6a cb       	rjmp	.-2348   	; 0x11c2 <main+0x92>
		break;
		case 0b01110000:
		case 0b00100000:
		handle(-31 - addition_handle);
    1aee:	8c ed       	ldi	r24, 0xDC	; 220
    1af0:	9f ef       	ldi	r25, 0xFF	; 255
    1af2:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1af6:	65 cb       	rjmp	.-2358   	; 0x11c2 <main+0x92>
		break;
		case 0b01100000:
		handle(-50 - addition_handle);
    1af8:	89 ec       	ldi	r24, 0xC9	; 201
    1afa:	9f ef       	ldi	r25, 0xFF	; 255
    1afc:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1b00:	60 cb       	rjmp	.-2368   	; 0x11c2 <main+0x92>
		break;
		case 0b01000000:
		handle(-75 - addition_handle);
    1b02:	80 eb       	ldi	r24, 0xB0	; 176
    1b04:	9f ef       	ldi	r25, 0xFF	; 255
    1b06:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1b0a:	5b cb       	rjmp	.-2378   	; 0x11c2 <main+0x92>
				
				center_no_speed();
			break; /* case 61 */
			
			case 62:
				led7(62);
    1b0c:	8e e3       	ldi	r24, 0x3E	; 62
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				
				handle(35);
    1b14:	83 e2       	ldi	r24, 0x23	; 35
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
				speed(50 ,35);
    1b1c:	63 e2       	ldi	r22, 0x23	; 35
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	82 e3       	ldi	r24, 0x32	; 50
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
				pattern = 63;
    1b28:	60 92 60 00 	sts	0x0060, r6
				timer_cnt = 0;
    1b2c:	10 92 69 00 	sts	0x0069, r1
    1b30:	10 92 68 00 	sts	0x0068, r1
				encoder_pulse = 0;
    1b34:	10 92 67 00 	sts	0x0067, r1
    1b38:	10 92 66 00 	sts	0x0066, r1
			break; /* case 62 */
    1b3c:	42 cb       	rjmp	.-2428   	; 0x11c2 <main+0x92>
			
			case 63:
				led7(63);
    1b3e:	8f e3       	ldi	r24, 0x3F	; 63
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				
				sensor = sensor_cmp();
    1b46:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    1b4a:	28 2e       	mov	r2, r24
    1b4c:	80 93 6a 00 	sts	0x006A, r24
				if(((encoder_pulse > 100) || (timer_cnt > 200 * delay)) && ((sensor & 0b00110000 ) == 0b00110000))
    1b50:	80 91 66 00 	lds	r24, 0x0066
    1b54:	90 91 67 00 	lds	r25, 0x0067
    1b58:	85 36       	cpi	r24, 0x65	; 101
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	08 f5       	brcc	.+66     	; 0x1ba0 <main+0xa70>
    1b5e:	60 91 68 00 	lds	r22, 0x0068
    1b62:	70 91 69 00 	lds	r23, 0x0069
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__floatunsisf>
    1b6e:	6b 01       	movw	r12, r22
    1b70:	7c 01       	movw	r14, r24
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	48 e4       	ldi	r20, 0x48	; 72
    1b78:	53 e4       	ldi	r21, 0x43	; 67
    1b7a:	60 91 6d 00 	lds	r22, 0x006D
    1b7e:	70 91 6e 00 	lds	r23, 0x006E
    1b82:	80 91 6f 00 	lds	r24, 0x006F
    1b86:	90 91 70 00 	lds	r25, 0x0070
    1b8a:	0e 94 3e 10 	call	0x207c	; 0x207c <__mulsf3>
    1b8e:	9b 01       	movw	r18, r22
    1b90:	ac 01       	movw	r20, r24
    1b92:	c7 01       	movw	r24, r14
    1b94:	b6 01       	movw	r22, r12
    1b96:	0e 94 3a 10 	call	0x2074	; 0x2074 <__gesf2>
    1b9a:	18 16       	cp	r1, r24
    1b9c:	0c f0       	brlt	.+2      	; 0x1ba0 <main+0xa70>
    1b9e:	11 cb       	rjmp	.-2526   	; 0x11c2 <main+0x92>
    1ba0:	82 2d       	mov	r24, r2
    1ba2:	80 73       	andi	r24, 0x30	; 48
    1ba4:	80 33       	cpi	r24, 0x30	; 48
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <main+0xa7a>
    1ba8:	0c cb       	rjmp	.-2536   	; 0x11c2 <main+0x92>
				{
					pattern = 10;
    1baa:	90 92 60 00 	sts	0x0060, r9
    1bae:	b0 92 7d 00 	sts	0x007D, r11
    1bb2:	a0 92 7c 00 	sts	0x007C, r10
					set_encoder(-1);
					
					handle(-40);
    1bb6:	88 ed       	ldi	r24, 0xD8	; 216
    1bb8:	9f ef       	ldi	r25, 0xFF	; 255
    1bba:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
					speed(70, 100);
    1bbe:	64 e6       	ldi	r22, 0x64	; 100
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	86 e4       	ldi	r24, 0x46	; 70
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
    1bca:	fb ca       	rjmp	.-2570   	; 0x11c2 <main+0x92>
				}
			break; /* case 63 */
			
			/* No line */
			case 73:
			led7(73);
    1bcc:	89 e4       	ldi	r24, 0x49	; 73
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
    1bd4:	10 93 7d 00 	sts	0x007D, r17
    1bd8:	00 93 7c 00 	sts	0x007C, r16
			
			set_encoder(12);
			speed(60,60);
    1bdc:	6c e3       	ldi	r22, 0x3C	; 60
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	8c e3       	ldi	r24, 0x3C	; 60
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
			sensor = sensor_cmp();
    1be8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    1bec:	80 93 6a 00 	sts	0x006A, r24
			if ((sensor & 0b11000000) == 0b11000000) handle(40 /*+ addition_handle*/);
    1bf0:	80 7c       	andi	r24, 0xC0	; 192
    1bf2:	80 3c       	cpi	r24, 0xC0	; 192
    1bf4:	21 f4       	brne	.+8      	; 0x1bfe <main+0xace>
    1bf6:	88 e2       	ldi	r24, 0x28	; 40
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
			if ((sensor & 0b10000000) == 0b10000000) handle(30 /*+ addition_handle*/);
    1bfe:	80 91 6a 00 	lds	r24, 0x006A
    1c02:	88 23       	and	r24, r24
    1c04:	24 f4       	brge	.+8      	; 0x1c0e <main+0xade>
    1c06:	8e e1       	ldi	r24, 0x1E	; 30
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
			if ((sensor & 0b00000011) == 0b00000011) handle(-40 /*- addition_handle*/);
    1c0e:	80 91 6a 00 	lds	r24, 0x006A
    1c12:	83 70       	andi	r24, 0x03	; 3
    1c14:	83 30       	cpi	r24, 0x03	; 3
    1c16:	21 f4       	brne	.+8      	; 0x1c20 <main+0xaf0>
    1c18:	88 ed       	ldi	r24, 0xD8	; 216
    1c1a:	9f ef       	ldi	r25, 0xFF	; 255
    1c1c:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
			if ((sensor & 0b00000001) == 0b00000001) handle(-30 /*- addition_handle*/);
    1c20:	80 91 6a 00 	lds	r24, 0x006A
    1c24:	80 ff       	sbrs	r24, 0
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <main+0xb00>
    1c28:	82 ee       	ldi	r24, 0xE2	; 226
    1c2a:	9f ef       	ldi	r25, 0xFF	; 255
    1c2c:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
			if ((sensor & 0b00111100) != 0)
    1c30:	80 91 6a 00 	lds	r24, 0x006A
    1c34:	8c 73       	andi	r24, 0x3C	; 60
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <main+0xb0a>
    1c38:	c4 ca       	rjmp	.-2680   	; 0x11c2 <main+0x92>
			{
				pattern = 10;
    1c3a:	90 92 60 00 	sts	0x0060, r9
    1c3e:	b0 92 7d 00 	sts	0x007D, r11
    1c42:	a0 92 7c 00 	sts	0x007C, r10
    1c46:	bd ca       	rjmp	.-2694   	; 0x11c2 <main+0x92>
			}
			break; /* case 73 */
		
			/* Bridge */
			case 99:
				led7(99);
    1c48:	83 e6       	ldi	r24, 0x63	; 99
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z4led7j>
				speed(-50, -50);
    1c50:	6e ec       	ldi	r22, 0xCE	; 206
    1c52:	7f ef       	ldi	r23, 0xFF	; 255
    1c54:	8e ec       	ldi	r24, 0xCE	; 206
    1c56:	9f ef       	ldi	r25, 0xFF	; 255
    1c58:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
	return (((sensor & 0b11110000) == 0b11110000) || ((sensor & 0b11111000) == 0b11111000) || ((sensor & 0b11100000) == 0b11100000));
}

inline void center_no_speed( void )
{
	switch (sensor_cmp() & 0b01111110)
    1c5c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_Z10sensor_cmpv>
    1c60:	8e 77       	andi	r24, 0x7E	; 126
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	fc 01       	movw	r30, r24
    1c66:	32 97       	sbiw	r30, 0x02	; 2
    1c68:	ef 36       	cpi	r30, 0x6F	; 111
    1c6a:	f1 05       	cpc	r31, r1
    1c6c:	d0 f5       	brcc	.+116    	; 0x1ce2 <main+0xbb2>
    1c6e:	e1 55       	subi	r30, 0x51	; 81
    1c70:	fd 4f       	sbci	r31, 0xFD	; 253
    1c72:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__tablejump2__>
	{
		case 0b01111110:
		break;
		
		case 0b00011000: /* Chay thang */
		handle( 0 );
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1c7e:	31 c0       	rjmp	.+98     	; 0x1ce2 <main+0xbb2>
		break;
		
		case 0b00011100:
		case 0b00001000:
		handle(9 + addition_handle);
    1c80:	8e e0       	ldi	r24, 0x0E	; 14
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1c88:	2c c0       	rjmp	.+88     	; 0x1ce2 <main+0xbb2>
		break;
		case 0b00001100:
		handle(17 + addition_handle);
    1c8a:	86 e1       	ldi	r24, 0x16	; 22
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1c92:	27 c0       	rjmp	.+78     	; 0x1ce2 <main+0xbb2>
		break;
		case 0b00001110:
		case 0b00000100:
		handle(31 + addition_handle);
    1c94:	84 e2       	ldi	r24, 0x24	; 36
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1c9c:	22 c0       	rjmp	.+68     	; 0x1ce2 <main+0xbb2>
		break;
		case 0b00000110:
		handle(50 + addition_handle);
    1c9e:	87 e3       	ldi	r24, 0x37	; 55
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1ca6:	1d c0       	rjmp	.+58     	; 0x1ce2 <main+0xbb2>
		break;
		case 0b00000010:
		handle(75 + addition_handle);
    1ca8:	80 e5       	ldi	r24, 0x50	; 80
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1cb0:	18 c0       	rjmp	.+48     	; 0x1ce2 <main+0xbb2>
		break;
		
		case 0b00111000:
		case 0b00010000:
		handle(-9 - addition_handle);
    1cb2:	82 ef       	ldi	r24, 0xF2	; 242
    1cb4:	9f ef       	ldi	r25, 0xFF	; 255
    1cb6:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1cba:	13 c0       	rjmp	.+38     	; 0x1ce2 <main+0xbb2>
		break;
		case 0b00110000:
		handle(-17 - addition_handle);
    1cbc:	8a ee       	ldi	r24, 0xEA	; 234
    1cbe:	9f ef       	ldi	r25, 0xFF	; 255
    1cc0:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1cc4:	0e c0       	rjmp	.+28     	; 0x1ce2 <main+0xbb2>
		break;
		case 0b01110000:
		case 0b00100000:
		handle(-31 - addition_handle);
    1cc6:	8c ed       	ldi	r24, 0xDC	; 220
    1cc8:	9f ef       	ldi	r25, 0xFF	; 255
    1cca:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1cce:	09 c0       	rjmp	.+18     	; 0x1ce2 <main+0xbb2>
		break;
		case 0b01100000:
		handle(-50 - addition_handle);
    1cd0:	89 ec       	ldi	r24, 0xC9	; 201
    1cd2:	9f ef       	ldi	r25, 0xFF	; 255
    1cd4:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <main+0xbb2>
		break;
		case 0b01000000:
		handle(-75 - addition_handle);
    1cda:	80 eb       	ldi	r24, 0xB0	; 176
    1cdc:	9f ef       	ldi	r25, 0xFF	; 255
    1cde:	0e 94 30 04 	call	0x860	; 0x860 <_Z6handlei>
				led7(99);
				speed(-50, -50);
				
				center_no_speed();
				
				if (speed_wait(3))
    1ce2:	80 91 61 00 	lds	r24, 0x0061
    1ce6:	84 30       	cpi	r24, 0x04	; 4
    1ce8:	08 f0       	brcs	.+2      	; 0x1cec <main+0xbbc>
    1cea:	6b ca       	rjmp	.-2858   	; 0x11c2 <main+0x92>
				{
					speed(70, 70);
    1cec:	66 e4       	ldi	r22, 0x46	; 70
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	86 e4       	ldi	r24, 0x46	; 70
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 48 04 	call	0x890	; 0x890 <_Z5speedii>
					pattern = 10;
    1cf8:	90 92 60 00 	sts	0x0060, r9
    1cfc:	62 ca       	rjmp	.-2876   	; 0x11c2 <main+0x92>
				};
			break; /* case 99 */
				
			default:
				pattern = 10;
    1cfe:	90 92 60 00 	sts	0x0060, r9
			break; /* default */
    1d02:	5f ca       	rjmp	.-2882   	; 0x11c2 <main+0x92>
					break;
				}
				
				if ((get_speed() > 10) && (bridgeCounter > 500))
				{
					pattern = 99;
    1d04:	83 e6       	ldi	r24, 0x63	; 99
    1d06:	80 93 60 00 	sts	0x0060, r24
    1d0a:	a2 ca       	rjmp	.-2748   	; 0x1250 <main+0x120>

00001d0c <__subsf3>:
    1d0c:	50 58       	subi	r21, 0x80	; 128

00001d0e <__addsf3>:
    1d0e:	bb 27       	eor	r27, r27
    1d10:	aa 27       	eor	r26, r26
    1d12:	0e d0       	rcall	.+28     	; 0x1d30 <__addsf3x>
    1d14:	75 c1       	rjmp	.+746    	; 0x2000 <__fp_round>
    1d16:	66 d1       	rcall	.+716    	; 0x1fe4 <__fp_pscA>
    1d18:	30 f0       	brcs	.+12     	; 0x1d26 <__addsf3+0x18>
    1d1a:	6b d1       	rcall	.+726    	; 0x1ff2 <__fp_pscB>
    1d1c:	20 f0       	brcs	.+8      	; 0x1d26 <__addsf3+0x18>
    1d1e:	31 f4       	brne	.+12     	; 0x1d2c <__addsf3+0x1e>
    1d20:	9f 3f       	cpi	r25, 0xFF	; 255
    1d22:	11 f4       	brne	.+4      	; 0x1d28 <__addsf3+0x1a>
    1d24:	1e f4       	brtc	.+6      	; 0x1d2c <__addsf3+0x1e>
    1d26:	5b c1       	rjmp	.+694    	; 0x1fde <__fp_nan>
    1d28:	0e f4       	brtc	.+2      	; 0x1d2c <__addsf3+0x1e>
    1d2a:	e0 95       	com	r30
    1d2c:	e7 fb       	bst	r30, 7
    1d2e:	51 c1       	rjmp	.+674    	; 0x1fd2 <__fp_inf>

00001d30 <__addsf3x>:
    1d30:	e9 2f       	mov	r30, r25
    1d32:	77 d1       	rcall	.+750    	; 0x2022 <__fp_split3>
    1d34:	80 f3       	brcs	.-32     	; 0x1d16 <__addsf3+0x8>
    1d36:	ba 17       	cp	r27, r26
    1d38:	62 07       	cpc	r22, r18
    1d3a:	73 07       	cpc	r23, r19
    1d3c:	84 07       	cpc	r24, r20
    1d3e:	95 07       	cpc	r25, r21
    1d40:	18 f0       	brcs	.+6      	; 0x1d48 <__addsf3x+0x18>
    1d42:	71 f4       	brne	.+28     	; 0x1d60 <__addsf3x+0x30>
    1d44:	9e f5       	brtc	.+102    	; 0x1dac <__addsf3x+0x7c>
    1d46:	8f c1       	rjmp	.+798    	; 0x2066 <__fp_zero>
    1d48:	0e f4       	brtc	.+2      	; 0x1d4c <__addsf3x+0x1c>
    1d4a:	e0 95       	com	r30
    1d4c:	0b 2e       	mov	r0, r27
    1d4e:	ba 2f       	mov	r27, r26
    1d50:	a0 2d       	mov	r26, r0
    1d52:	0b 01       	movw	r0, r22
    1d54:	b9 01       	movw	r22, r18
    1d56:	90 01       	movw	r18, r0
    1d58:	0c 01       	movw	r0, r24
    1d5a:	ca 01       	movw	r24, r20
    1d5c:	a0 01       	movw	r20, r0
    1d5e:	11 24       	eor	r1, r1
    1d60:	ff 27       	eor	r31, r31
    1d62:	59 1b       	sub	r21, r25
    1d64:	99 f0       	breq	.+38     	; 0x1d8c <__addsf3x+0x5c>
    1d66:	59 3f       	cpi	r21, 0xF9	; 249
    1d68:	50 f4       	brcc	.+20     	; 0x1d7e <__addsf3x+0x4e>
    1d6a:	50 3e       	cpi	r21, 0xE0	; 224
    1d6c:	68 f1       	brcs	.+90     	; 0x1dc8 <__addsf3x+0x98>
    1d6e:	1a 16       	cp	r1, r26
    1d70:	f0 40       	sbci	r31, 0x00	; 0
    1d72:	a2 2f       	mov	r26, r18
    1d74:	23 2f       	mov	r18, r19
    1d76:	34 2f       	mov	r19, r20
    1d78:	44 27       	eor	r20, r20
    1d7a:	58 5f       	subi	r21, 0xF8	; 248
    1d7c:	f3 cf       	rjmp	.-26     	; 0x1d64 <__addsf3x+0x34>
    1d7e:	46 95       	lsr	r20
    1d80:	37 95       	ror	r19
    1d82:	27 95       	ror	r18
    1d84:	a7 95       	ror	r26
    1d86:	f0 40       	sbci	r31, 0x00	; 0
    1d88:	53 95       	inc	r21
    1d8a:	c9 f7       	brne	.-14     	; 0x1d7e <__addsf3x+0x4e>
    1d8c:	7e f4       	brtc	.+30     	; 0x1dac <__addsf3x+0x7c>
    1d8e:	1f 16       	cp	r1, r31
    1d90:	ba 0b       	sbc	r27, r26
    1d92:	62 0b       	sbc	r22, r18
    1d94:	73 0b       	sbc	r23, r19
    1d96:	84 0b       	sbc	r24, r20
    1d98:	ba f0       	brmi	.+46     	; 0x1dc8 <__addsf3x+0x98>
    1d9a:	91 50       	subi	r25, 0x01	; 1
    1d9c:	a1 f0       	breq	.+40     	; 0x1dc6 <__addsf3x+0x96>
    1d9e:	ff 0f       	add	r31, r31
    1da0:	bb 1f       	adc	r27, r27
    1da2:	66 1f       	adc	r22, r22
    1da4:	77 1f       	adc	r23, r23
    1da6:	88 1f       	adc	r24, r24
    1da8:	c2 f7       	brpl	.-16     	; 0x1d9a <__addsf3x+0x6a>
    1daa:	0e c0       	rjmp	.+28     	; 0x1dc8 <__addsf3x+0x98>
    1dac:	ba 0f       	add	r27, r26
    1dae:	62 1f       	adc	r22, r18
    1db0:	73 1f       	adc	r23, r19
    1db2:	84 1f       	adc	r24, r20
    1db4:	48 f4       	brcc	.+18     	; 0x1dc8 <__addsf3x+0x98>
    1db6:	87 95       	ror	r24
    1db8:	77 95       	ror	r23
    1dba:	67 95       	ror	r22
    1dbc:	b7 95       	ror	r27
    1dbe:	f7 95       	ror	r31
    1dc0:	9e 3f       	cpi	r25, 0xFE	; 254
    1dc2:	08 f0       	brcs	.+2      	; 0x1dc6 <__addsf3x+0x96>
    1dc4:	b3 cf       	rjmp	.-154    	; 0x1d2c <__addsf3+0x1e>
    1dc6:	93 95       	inc	r25
    1dc8:	88 0f       	add	r24, r24
    1dca:	08 f0       	brcs	.+2      	; 0x1dce <__addsf3x+0x9e>
    1dcc:	99 27       	eor	r25, r25
    1dce:	ee 0f       	add	r30, r30
    1dd0:	97 95       	ror	r25
    1dd2:	87 95       	ror	r24
    1dd4:	08 95       	ret

00001dd6 <__cmpsf2>:
    1dd6:	d9 d0       	rcall	.+434    	; 0x1f8a <__fp_cmp>
    1dd8:	08 f4       	brcc	.+2      	; 0x1ddc <__cmpsf2+0x6>
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	08 95       	ret

00001dde <__divsf3>:
    1dde:	0c d0       	rcall	.+24     	; 0x1df8 <__divsf3x>
    1de0:	0f c1       	rjmp	.+542    	; 0x2000 <__fp_round>
    1de2:	07 d1       	rcall	.+526    	; 0x1ff2 <__fp_pscB>
    1de4:	40 f0       	brcs	.+16     	; 0x1df6 <__divsf3+0x18>
    1de6:	fe d0       	rcall	.+508    	; 0x1fe4 <__fp_pscA>
    1de8:	30 f0       	brcs	.+12     	; 0x1df6 <__divsf3+0x18>
    1dea:	21 f4       	brne	.+8      	; 0x1df4 <__divsf3+0x16>
    1dec:	5f 3f       	cpi	r21, 0xFF	; 255
    1dee:	19 f0       	breq	.+6      	; 0x1df6 <__divsf3+0x18>
    1df0:	f0 c0       	rjmp	.+480    	; 0x1fd2 <__fp_inf>
    1df2:	51 11       	cpse	r21, r1
    1df4:	39 c1       	rjmp	.+626    	; 0x2068 <__fp_szero>
    1df6:	f3 c0       	rjmp	.+486    	; 0x1fde <__fp_nan>

00001df8 <__divsf3x>:
    1df8:	14 d1       	rcall	.+552    	; 0x2022 <__fp_split3>
    1dfa:	98 f3       	brcs	.-26     	; 0x1de2 <__divsf3+0x4>

00001dfc <__divsf3_pse>:
    1dfc:	99 23       	and	r25, r25
    1dfe:	c9 f3       	breq	.-14     	; 0x1df2 <__divsf3+0x14>
    1e00:	55 23       	and	r21, r21
    1e02:	b1 f3       	breq	.-20     	; 0x1df0 <__divsf3+0x12>
    1e04:	95 1b       	sub	r25, r21
    1e06:	55 0b       	sbc	r21, r21
    1e08:	bb 27       	eor	r27, r27
    1e0a:	aa 27       	eor	r26, r26
    1e0c:	62 17       	cp	r22, r18
    1e0e:	73 07       	cpc	r23, r19
    1e10:	84 07       	cpc	r24, r20
    1e12:	38 f0       	brcs	.+14     	; 0x1e22 <__divsf3_pse+0x26>
    1e14:	9f 5f       	subi	r25, 0xFF	; 255
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255
    1e18:	22 0f       	add	r18, r18
    1e1a:	33 1f       	adc	r19, r19
    1e1c:	44 1f       	adc	r20, r20
    1e1e:	aa 1f       	adc	r26, r26
    1e20:	a9 f3       	breq	.-22     	; 0x1e0c <__divsf3_pse+0x10>
    1e22:	33 d0       	rcall	.+102    	; 0x1e8a <__divsf3_pse+0x8e>
    1e24:	0e 2e       	mov	r0, r30
    1e26:	3a f0       	brmi	.+14     	; 0x1e36 <__divsf3_pse+0x3a>
    1e28:	e0 e8       	ldi	r30, 0x80	; 128
    1e2a:	30 d0       	rcall	.+96     	; 0x1e8c <__divsf3_pse+0x90>
    1e2c:	91 50       	subi	r25, 0x01	; 1
    1e2e:	50 40       	sbci	r21, 0x00	; 0
    1e30:	e6 95       	lsr	r30
    1e32:	00 1c       	adc	r0, r0
    1e34:	ca f7       	brpl	.-14     	; 0x1e28 <__divsf3_pse+0x2c>
    1e36:	29 d0       	rcall	.+82     	; 0x1e8a <__divsf3_pse+0x8e>
    1e38:	fe 2f       	mov	r31, r30
    1e3a:	27 d0       	rcall	.+78     	; 0x1e8a <__divsf3_pse+0x8e>
    1e3c:	66 0f       	add	r22, r22
    1e3e:	77 1f       	adc	r23, r23
    1e40:	88 1f       	adc	r24, r24
    1e42:	bb 1f       	adc	r27, r27
    1e44:	26 17       	cp	r18, r22
    1e46:	37 07       	cpc	r19, r23
    1e48:	48 07       	cpc	r20, r24
    1e4a:	ab 07       	cpc	r26, r27
    1e4c:	b0 e8       	ldi	r27, 0x80	; 128
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <__divsf3_pse+0x56>
    1e50:	bb 0b       	sbc	r27, r27
    1e52:	80 2d       	mov	r24, r0
    1e54:	bf 01       	movw	r22, r30
    1e56:	ff 27       	eor	r31, r31
    1e58:	93 58       	subi	r25, 0x83	; 131
    1e5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5c:	2a f0       	brmi	.+10     	; 0x1e68 <__divsf3_pse+0x6c>
    1e5e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e60:	51 05       	cpc	r21, r1
    1e62:	68 f0       	brcs	.+26     	; 0x1e7e <__divsf3_pse+0x82>
    1e64:	b6 c0       	rjmp	.+364    	; 0x1fd2 <__fp_inf>
    1e66:	00 c1       	rjmp	.+512    	; 0x2068 <__fp_szero>
    1e68:	5f 3f       	cpi	r21, 0xFF	; 255
    1e6a:	ec f3       	brlt	.-6      	; 0x1e66 <__divsf3_pse+0x6a>
    1e6c:	98 3e       	cpi	r25, 0xE8	; 232
    1e6e:	dc f3       	brlt	.-10     	; 0x1e66 <__divsf3_pse+0x6a>
    1e70:	86 95       	lsr	r24
    1e72:	77 95       	ror	r23
    1e74:	67 95       	ror	r22
    1e76:	b7 95       	ror	r27
    1e78:	f7 95       	ror	r31
    1e7a:	9f 5f       	subi	r25, 0xFF	; 255
    1e7c:	c9 f7       	brne	.-14     	; 0x1e70 <__divsf3_pse+0x74>
    1e7e:	88 0f       	add	r24, r24
    1e80:	91 1d       	adc	r25, r1
    1e82:	96 95       	lsr	r25
    1e84:	87 95       	ror	r24
    1e86:	97 f9       	bld	r25, 7
    1e88:	08 95       	ret
    1e8a:	e1 e0       	ldi	r30, 0x01	; 1
    1e8c:	66 0f       	add	r22, r22
    1e8e:	77 1f       	adc	r23, r23
    1e90:	88 1f       	adc	r24, r24
    1e92:	bb 1f       	adc	r27, r27
    1e94:	62 17       	cp	r22, r18
    1e96:	73 07       	cpc	r23, r19
    1e98:	84 07       	cpc	r24, r20
    1e9a:	ba 07       	cpc	r27, r26
    1e9c:	20 f0       	brcs	.+8      	; 0x1ea6 <__divsf3_pse+0xaa>
    1e9e:	62 1b       	sub	r22, r18
    1ea0:	73 0b       	sbc	r23, r19
    1ea2:	84 0b       	sbc	r24, r20
    1ea4:	ba 0b       	sbc	r27, r26
    1ea6:	ee 1f       	adc	r30, r30
    1ea8:	88 f7       	brcc	.-30     	; 0x1e8c <__divsf3_pse+0x90>
    1eaa:	e0 95       	com	r30
    1eac:	08 95       	ret

00001eae <__fixsfsi>:
    1eae:	04 d0       	rcall	.+8      	; 0x1eb8 <__fixunssfsi>
    1eb0:	68 94       	set
    1eb2:	b1 11       	cpse	r27, r1
    1eb4:	d9 c0       	rjmp	.+434    	; 0x2068 <__fp_szero>
    1eb6:	08 95       	ret

00001eb8 <__fixunssfsi>:
    1eb8:	bc d0       	rcall	.+376    	; 0x2032 <__fp_splitA>
    1eba:	88 f0       	brcs	.+34     	; 0x1ede <__fixunssfsi+0x26>
    1ebc:	9f 57       	subi	r25, 0x7F	; 127
    1ebe:	90 f0       	brcs	.+36     	; 0x1ee4 <__fixunssfsi+0x2c>
    1ec0:	b9 2f       	mov	r27, r25
    1ec2:	99 27       	eor	r25, r25
    1ec4:	b7 51       	subi	r27, 0x17	; 23
    1ec6:	a0 f0       	brcs	.+40     	; 0x1ef0 <__fixunssfsi+0x38>
    1ec8:	d1 f0       	breq	.+52     	; 0x1efe <__fixunssfsi+0x46>
    1eca:	66 0f       	add	r22, r22
    1ecc:	77 1f       	adc	r23, r23
    1ece:	88 1f       	adc	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	1a f0       	brmi	.+6      	; 0x1eda <__fixunssfsi+0x22>
    1ed4:	ba 95       	dec	r27
    1ed6:	c9 f7       	brne	.-14     	; 0x1eca <__fixunssfsi+0x12>
    1ed8:	12 c0       	rjmp	.+36     	; 0x1efe <__fixunssfsi+0x46>
    1eda:	b1 30       	cpi	r27, 0x01	; 1
    1edc:	81 f0       	breq	.+32     	; 0x1efe <__fixunssfsi+0x46>
    1ede:	c3 d0       	rcall	.+390    	; 0x2066 <__fp_zero>
    1ee0:	b1 e0       	ldi	r27, 0x01	; 1
    1ee2:	08 95       	ret
    1ee4:	c0 c0       	rjmp	.+384    	; 0x2066 <__fp_zero>
    1ee6:	67 2f       	mov	r22, r23
    1ee8:	78 2f       	mov	r23, r24
    1eea:	88 27       	eor	r24, r24
    1eec:	b8 5f       	subi	r27, 0xF8	; 248
    1eee:	39 f0       	breq	.+14     	; 0x1efe <__fixunssfsi+0x46>
    1ef0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ef2:	cc f3       	brlt	.-14     	; 0x1ee6 <__fixunssfsi+0x2e>
    1ef4:	86 95       	lsr	r24
    1ef6:	77 95       	ror	r23
    1ef8:	67 95       	ror	r22
    1efa:	b3 95       	inc	r27
    1efc:	d9 f7       	brne	.-10     	; 0x1ef4 <__fixunssfsi+0x3c>
    1efe:	3e f4       	brtc	.+14     	; 0x1f0e <__fixunssfsi+0x56>
    1f00:	90 95       	com	r25
    1f02:	80 95       	com	r24
    1f04:	70 95       	com	r23
    1f06:	61 95       	neg	r22
    1f08:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0e:	08 95       	ret

00001f10 <__floatunsisf>:
    1f10:	e8 94       	clt
    1f12:	09 c0       	rjmp	.+18     	; 0x1f26 <__floatsisf+0x12>

00001f14 <__floatsisf>:
    1f14:	97 fb       	bst	r25, 7
    1f16:	3e f4       	brtc	.+14     	; 0x1f26 <__floatsisf+0x12>
    1f18:	90 95       	com	r25
    1f1a:	80 95       	com	r24
    1f1c:	70 95       	com	r23
    1f1e:	61 95       	neg	r22
    1f20:	7f 4f       	sbci	r23, 0xFF	; 255
    1f22:	8f 4f       	sbci	r24, 0xFF	; 255
    1f24:	9f 4f       	sbci	r25, 0xFF	; 255
    1f26:	99 23       	and	r25, r25
    1f28:	a9 f0       	breq	.+42     	; 0x1f54 <__floatsisf+0x40>
    1f2a:	f9 2f       	mov	r31, r25
    1f2c:	96 e9       	ldi	r25, 0x96	; 150
    1f2e:	bb 27       	eor	r27, r27
    1f30:	93 95       	inc	r25
    1f32:	f6 95       	lsr	r31
    1f34:	87 95       	ror	r24
    1f36:	77 95       	ror	r23
    1f38:	67 95       	ror	r22
    1f3a:	b7 95       	ror	r27
    1f3c:	f1 11       	cpse	r31, r1
    1f3e:	f8 cf       	rjmp	.-16     	; 0x1f30 <__floatsisf+0x1c>
    1f40:	fa f4       	brpl	.+62     	; 0x1f80 <__floatsisf+0x6c>
    1f42:	bb 0f       	add	r27, r27
    1f44:	11 f4       	brne	.+4      	; 0x1f4a <__floatsisf+0x36>
    1f46:	60 ff       	sbrs	r22, 0
    1f48:	1b c0       	rjmp	.+54     	; 0x1f80 <__floatsisf+0x6c>
    1f4a:	6f 5f       	subi	r22, 0xFF	; 255
    1f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f50:	9f 4f       	sbci	r25, 0xFF	; 255
    1f52:	16 c0       	rjmp	.+44     	; 0x1f80 <__floatsisf+0x6c>
    1f54:	88 23       	and	r24, r24
    1f56:	11 f0       	breq	.+4      	; 0x1f5c <__floatsisf+0x48>
    1f58:	96 e9       	ldi	r25, 0x96	; 150
    1f5a:	11 c0       	rjmp	.+34     	; 0x1f7e <__floatsisf+0x6a>
    1f5c:	77 23       	and	r23, r23
    1f5e:	21 f0       	breq	.+8      	; 0x1f68 <__floatsisf+0x54>
    1f60:	9e e8       	ldi	r25, 0x8E	; 142
    1f62:	87 2f       	mov	r24, r23
    1f64:	76 2f       	mov	r23, r22
    1f66:	05 c0       	rjmp	.+10     	; 0x1f72 <__floatsisf+0x5e>
    1f68:	66 23       	and	r22, r22
    1f6a:	71 f0       	breq	.+28     	; 0x1f88 <__floatsisf+0x74>
    1f6c:	96 e8       	ldi	r25, 0x86	; 134
    1f6e:	86 2f       	mov	r24, r22
    1f70:	70 e0       	ldi	r23, 0x00	; 0
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	2a f0       	brmi	.+10     	; 0x1f80 <__floatsisf+0x6c>
    1f76:	9a 95       	dec	r25
    1f78:	66 0f       	add	r22, r22
    1f7a:	77 1f       	adc	r23, r23
    1f7c:	88 1f       	adc	r24, r24
    1f7e:	da f7       	brpl	.-10     	; 0x1f76 <__floatsisf+0x62>
    1f80:	88 0f       	add	r24, r24
    1f82:	96 95       	lsr	r25
    1f84:	87 95       	ror	r24
    1f86:	97 f9       	bld	r25, 7
    1f88:	08 95       	ret

00001f8a <__fp_cmp>:
    1f8a:	99 0f       	add	r25, r25
    1f8c:	00 08       	sbc	r0, r0
    1f8e:	55 0f       	add	r21, r21
    1f90:	aa 0b       	sbc	r26, r26
    1f92:	e0 e8       	ldi	r30, 0x80	; 128
    1f94:	fe ef       	ldi	r31, 0xFE	; 254
    1f96:	16 16       	cp	r1, r22
    1f98:	17 06       	cpc	r1, r23
    1f9a:	e8 07       	cpc	r30, r24
    1f9c:	f9 07       	cpc	r31, r25
    1f9e:	c0 f0       	brcs	.+48     	; 0x1fd0 <__fp_cmp+0x46>
    1fa0:	12 16       	cp	r1, r18
    1fa2:	13 06       	cpc	r1, r19
    1fa4:	e4 07       	cpc	r30, r20
    1fa6:	f5 07       	cpc	r31, r21
    1fa8:	98 f0       	brcs	.+38     	; 0x1fd0 <__fp_cmp+0x46>
    1faa:	62 1b       	sub	r22, r18
    1fac:	73 0b       	sbc	r23, r19
    1fae:	84 0b       	sbc	r24, r20
    1fb0:	95 0b       	sbc	r25, r21
    1fb2:	39 f4       	brne	.+14     	; 0x1fc2 <__fp_cmp+0x38>
    1fb4:	0a 26       	eor	r0, r26
    1fb6:	61 f0       	breq	.+24     	; 0x1fd0 <__fp_cmp+0x46>
    1fb8:	23 2b       	or	r18, r19
    1fba:	24 2b       	or	r18, r20
    1fbc:	25 2b       	or	r18, r21
    1fbe:	21 f4       	brne	.+8      	; 0x1fc8 <__fp_cmp+0x3e>
    1fc0:	08 95       	ret
    1fc2:	0a 26       	eor	r0, r26
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <__fp_cmp+0x3e>
    1fc6:	a1 40       	sbci	r26, 0x01	; 1
    1fc8:	a6 95       	lsr	r26
    1fca:	8f ef       	ldi	r24, 0xFF	; 255
    1fcc:	81 1d       	adc	r24, r1
    1fce:	81 1d       	adc	r24, r1
    1fd0:	08 95       	ret

00001fd2 <__fp_inf>:
    1fd2:	97 f9       	bld	r25, 7
    1fd4:	9f 67       	ori	r25, 0x7F	; 127
    1fd6:	80 e8       	ldi	r24, 0x80	; 128
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	08 95       	ret

00001fde <__fp_nan>:
    1fde:	9f ef       	ldi	r25, 0xFF	; 255
    1fe0:	80 ec       	ldi	r24, 0xC0	; 192
    1fe2:	08 95       	ret

00001fe4 <__fp_pscA>:
    1fe4:	00 24       	eor	r0, r0
    1fe6:	0a 94       	dec	r0
    1fe8:	16 16       	cp	r1, r22
    1fea:	17 06       	cpc	r1, r23
    1fec:	18 06       	cpc	r1, r24
    1fee:	09 06       	cpc	r0, r25
    1ff0:	08 95       	ret

00001ff2 <__fp_pscB>:
    1ff2:	00 24       	eor	r0, r0
    1ff4:	0a 94       	dec	r0
    1ff6:	12 16       	cp	r1, r18
    1ff8:	13 06       	cpc	r1, r19
    1ffa:	14 06       	cpc	r1, r20
    1ffc:	05 06       	cpc	r0, r21
    1ffe:	08 95       	ret

00002000 <__fp_round>:
    2000:	09 2e       	mov	r0, r25
    2002:	03 94       	inc	r0
    2004:	00 0c       	add	r0, r0
    2006:	11 f4       	brne	.+4      	; 0x200c <__fp_round+0xc>
    2008:	88 23       	and	r24, r24
    200a:	52 f0       	brmi	.+20     	; 0x2020 <__fp_round+0x20>
    200c:	bb 0f       	add	r27, r27
    200e:	40 f4       	brcc	.+16     	; 0x2020 <__fp_round+0x20>
    2010:	bf 2b       	or	r27, r31
    2012:	11 f4       	brne	.+4      	; 0x2018 <__fp_round+0x18>
    2014:	60 ff       	sbrs	r22, 0
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <__fp_round+0x20>
    2018:	6f 5f       	subi	r22, 0xFF	; 255
    201a:	7f 4f       	sbci	r23, 0xFF	; 255
    201c:	8f 4f       	sbci	r24, 0xFF	; 255
    201e:	9f 4f       	sbci	r25, 0xFF	; 255
    2020:	08 95       	ret

00002022 <__fp_split3>:
    2022:	57 fd       	sbrc	r21, 7
    2024:	90 58       	subi	r25, 0x80	; 128
    2026:	44 0f       	add	r20, r20
    2028:	55 1f       	adc	r21, r21
    202a:	59 f0       	breq	.+22     	; 0x2042 <__fp_splitA+0x10>
    202c:	5f 3f       	cpi	r21, 0xFF	; 255
    202e:	71 f0       	breq	.+28     	; 0x204c <__fp_splitA+0x1a>
    2030:	47 95       	ror	r20

00002032 <__fp_splitA>:
    2032:	88 0f       	add	r24, r24
    2034:	97 fb       	bst	r25, 7
    2036:	99 1f       	adc	r25, r25
    2038:	61 f0       	breq	.+24     	; 0x2052 <__fp_splitA+0x20>
    203a:	9f 3f       	cpi	r25, 0xFF	; 255
    203c:	79 f0       	breq	.+30     	; 0x205c <__fp_splitA+0x2a>
    203e:	87 95       	ror	r24
    2040:	08 95       	ret
    2042:	12 16       	cp	r1, r18
    2044:	13 06       	cpc	r1, r19
    2046:	14 06       	cpc	r1, r20
    2048:	55 1f       	adc	r21, r21
    204a:	f2 cf       	rjmp	.-28     	; 0x2030 <__fp_split3+0xe>
    204c:	46 95       	lsr	r20
    204e:	f1 df       	rcall	.-30     	; 0x2032 <__fp_splitA>
    2050:	08 c0       	rjmp	.+16     	; 0x2062 <__fp_splitA+0x30>
    2052:	16 16       	cp	r1, r22
    2054:	17 06       	cpc	r1, r23
    2056:	18 06       	cpc	r1, r24
    2058:	99 1f       	adc	r25, r25
    205a:	f1 cf       	rjmp	.-30     	; 0x203e <__fp_splitA+0xc>
    205c:	86 95       	lsr	r24
    205e:	71 05       	cpc	r23, r1
    2060:	61 05       	cpc	r22, r1
    2062:	08 94       	sec
    2064:	08 95       	ret

00002066 <__fp_zero>:
    2066:	e8 94       	clt

00002068 <__fp_szero>:
    2068:	bb 27       	eor	r27, r27
    206a:	66 27       	eor	r22, r22
    206c:	77 27       	eor	r23, r23
    206e:	cb 01       	movw	r24, r22
    2070:	97 f9       	bld	r25, 7
    2072:	08 95       	ret

00002074 <__gesf2>:
    2074:	8a df       	rcall	.-236    	; 0x1f8a <__fp_cmp>
    2076:	08 f4       	brcc	.+2      	; 0x207a <__gesf2+0x6>
    2078:	8f ef       	ldi	r24, 0xFF	; 255
    207a:	08 95       	ret

0000207c <__mulsf3>:
    207c:	0b d0       	rcall	.+22     	; 0x2094 <__mulsf3x>
    207e:	c0 cf       	rjmp	.-128    	; 0x2000 <__fp_round>
    2080:	b1 df       	rcall	.-158    	; 0x1fe4 <__fp_pscA>
    2082:	28 f0       	brcs	.+10     	; 0x208e <__mulsf3+0x12>
    2084:	b6 df       	rcall	.-148    	; 0x1ff2 <__fp_pscB>
    2086:	18 f0       	brcs	.+6      	; 0x208e <__mulsf3+0x12>
    2088:	95 23       	and	r25, r21
    208a:	09 f0       	breq	.+2      	; 0x208e <__mulsf3+0x12>
    208c:	a2 cf       	rjmp	.-188    	; 0x1fd2 <__fp_inf>
    208e:	a7 cf       	rjmp	.-178    	; 0x1fde <__fp_nan>
    2090:	11 24       	eor	r1, r1
    2092:	ea cf       	rjmp	.-44     	; 0x2068 <__fp_szero>

00002094 <__mulsf3x>:
    2094:	c6 df       	rcall	.-116    	; 0x2022 <__fp_split3>
    2096:	a0 f3       	brcs	.-24     	; 0x2080 <__mulsf3+0x4>

00002098 <__mulsf3_pse>:
    2098:	95 9f       	mul	r25, r21
    209a:	d1 f3       	breq	.-12     	; 0x2090 <__mulsf3+0x14>
    209c:	95 0f       	add	r25, r21
    209e:	50 e0       	ldi	r21, 0x00	; 0
    20a0:	55 1f       	adc	r21, r21
    20a2:	62 9f       	mul	r22, r18
    20a4:	f0 01       	movw	r30, r0
    20a6:	72 9f       	mul	r23, r18
    20a8:	bb 27       	eor	r27, r27
    20aa:	f0 0d       	add	r31, r0
    20ac:	b1 1d       	adc	r27, r1
    20ae:	63 9f       	mul	r22, r19
    20b0:	aa 27       	eor	r26, r26
    20b2:	f0 0d       	add	r31, r0
    20b4:	b1 1d       	adc	r27, r1
    20b6:	aa 1f       	adc	r26, r26
    20b8:	64 9f       	mul	r22, r20
    20ba:	66 27       	eor	r22, r22
    20bc:	b0 0d       	add	r27, r0
    20be:	a1 1d       	adc	r26, r1
    20c0:	66 1f       	adc	r22, r22
    20c2:	82 9f       	mul	r24, r18
    20c4:	22 27       	eor	r18, r18
    20c6:	b0 0d       	add	r27, r0
    20c8:	a1 1d       	adc	r26, r1
    20ca:	62 1f       	adc	r22, r18
    20cc:	73 9f       	mul	r23, r19
    20ce:	b0 0d       	add	r27, r0
    20d0:	a1 1d       	adc	r26, r1
    20d2:	62 1f       	adc	r22, r18
    20d4:	83 9f       	mul	r24, r19
    20d6:	a0 0d       	add	r26, r0
    20d8:	61 1d       	adc	r22, r1
    20da:	22 1f       	adc	r18, r18
    20dc:	74 9f       	mul	r23, r20
    20de:	33 27       	eor	r19, r19
    20e0:	a0 0d       	add	r26, r0
    20e2:	61 1d       	adc	r22, r1
    20e4:	23 1f       	adc	r18, r19
    20e6:	84 9f       	mul	r24, r20
    20e8:	60 0d       	add	r22, r0
    20ea:	21 1d       	adc	r18, r1
    20ec:	82 2f       	mov	r24, r18
    20ee:	76 2f       	mov	r23, r22
    20f0:	6a 2f       	mov	r22, r26
    20f2:	11 24       	eor	r1, r1
    20f4:	9f 57       	subi	r25, 0x7F	; 127
    20f6:	50 40       	sbci	r21, 0x00	; 0
    20f8:	8a f0       	brmi	.+34     	; 0x211c <__mulsf3_pse+0x84>
    20fa:	e1 f0       	breq	.+56     	; 0x2134 <__mulsf3_pse+0x9c>
    20fc:	88 23       	and	r24, r24
    20fe:	4a f0       	brmi	.+18     	; 0x2112 <__mulsf3_pse+0x7a>
    2100:	ee 0f       	add	r30, r30
    2102:	ff 1f       	adc	r31, r31
    2104:	bb 1f       	adc	r27, r27
    2106:	66 1f       	adc	r22, r22
    2108:	77 1f       	adc	r23, r23
    210a:	88 1f       	adc	r24, r24
    210c:	91 50       	subi	r25, 0x01	; 1
    210e:	50 40       	sbci	r21, 0x00	; 0
    2110:	a9 f7       	brne	.-22     	; 0x20fc <__mulsf3_pse+0x64>
    2112:	9e 3f       	cpi	r25, 0xFE	; 254
    2114:	51 05       	cpc	r21, r1
    2116:	70 f0       	brcs	.+28     	; 0x2134 <__mulsf3_pse+0x9c>
    2118:	5c cf       	rjmp	.-328    	; 0x1fd2 <__fp_inf>
    211a:	a6 cf       	rjmp	.-180    	; 0x2068 <__fp_szero>
    211c:	5f 3f       	cpi	r21, 0xFF	; 255
    211e:	ec f3       	brlt	.-6      	; 0x211a <__mulsf3_pse+0x82>
    2120:	98 3e       	cpi	r25, 0xE8	; 232
    2122:	dc f3       	brlt	.-10     	; 0x211a <__mulsf3_pse+0x82>
    2124:	86 95       	lsr	r24
    2126:	77 95       	ror	r23
    2128:	67 95       	ror	r22
    212a:	b7 95       	ror	r27
    212c:	f7 95       	ror	r31
    212e:	e7 95       	ror	r30
    2130:	9f 5f       	subi	r25, 0xFF	; 255
    2132:	c1 f7       	brne	.-16     	; 0x2124 <__mulsf3_pse+0x8c>
    2134:	fe 2b       	or	r31, r30
    2136:	88 0f       	add	r24, r24
    2138:	91 1d       	adc	r25, r1
    213a:	96 95       	lsr	r25
    213c:	87 95       	ror	r24
    213e:	97 f9       	bld	r25, 7
    2140:	08 95       	ret

00002142 <__divmodhi4>:
    2142:	97 fb       	bst	r25, 7
    2144:	07 2e       	mov	r0, r23
    2146:	16 f4       	brtc	.+4      	; 0x214c <__divmodhi4+0xa>
    2148:	00 94       	com	r0
    214a:	07 d0       	rcall	.+14     	; 0x215a <__divmodhi4_neg1>
    214c:	77 fd       	sbrc	r23, 7
    214e:	09 d0       	rcall	.+18     	; 0x2162 <__divmodhi4_neg2>
    2150:	0e 94 ca 10 	call	0x2194	; 0x2194 <__udivmodhi4>
    2154:	07 fc       	sbrc	r0, 7
    2156:	05 d0       	rcall	.+10     	; 0x2162 <__divmodhi4_neg2>
    2158:	3e f4       	brtc	.+14     	; 0x2168 <__divmodhi4_exit>

0000215a <__divmodhi4_neg1>:
    215a:	90 95       	com	r25
    215c:	81 95       	neg	r24
    215e:	9f 4f       	sbci	r25, 0xFF	; 255
    2160:	08 95       	ret

00002162 <__divmodhi4_neg2>:
    2162:	70 95       	com	r23
    2164:	61 95       	neg	r22
    2166:	7f 4f       	sbci	r23, 0xFF	; 255

00002168 <__divmodhi4_exit>:
    2168:	08 95       	ret

0000216a <__tablejump2__>:
    216a:	ee 0f       	add	r30, r30
    216c:	ff 1f       	adc	r31, r31

0000216e <__tablejump__>:
    216e:	05 90       	lpm	r0, Z+
    2170:	f4 91       	lpm	r31, Z
    2172:	e0 2d       	mov	r30, r0
    2174:	09 94       	ijmp

00002176 <__umulhisi3>:
    2176:	a2 9f       	mul	r26, r18
    2178:	b0 01       	movw	r22, r0
    217a:	b3 9f       	mul	r27, r19
    217c:	c0 01       	movw	r24, r0
    217e:	a3 9f       	mul	r26, r19
    2180:	70 0d       	add	r23, r0
    2182:	81 1d       	adc	r24, r1
    2184:	11 24       	eor	r1, r1
    2186:	91 1d       	adc	r25, r1
    2188:	b2 9f       	mul	r27, r18
    218a:	70 0d       	add	r23, r0
    218c:	81 1d       	adc	r24, r1
    218e:	11 24       	eor	r1, r1
    2190:	91 1d       	adc	r25, r1
    2192:	08 95       	ret

00002194 <__udivmodhi4>:
    2194:	aa 1b       	sub	r26, r26
    2196:	bb 1b       	sub	r27, r27
    2198:	51 e1       	ldi	r21, 0x11	; 17
    219a:	07 c0       	rjmp	.+14     	; 0x21aa <__udivmodhi4_ep>

0000219c <__udivmodhi4_loop>:
    219c:	aa 1f       	adc	r26, r26
    219e:	bb 1f       	adc	r27, r27
    21a0:	a6 17       	cp	r26, r22
    21a2:	b7 07       	cpc	r27, r23
    21a4:	10 f0       	brcs	.+4      	; 0x21aa <__udivmodhi4_ep>
    21a6:	a6 1b       	sub	r26, r22
    21a8:	b7 0b       	sbc	r27, r23

000021aa <__udivmodhi4_ep>:
    21aa:	88 1f       	adc	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	5a 95       	dec	r21
    21b0:	a9 f7       	brne	.-22     	; 0x219c <__udivmodhi4_loop>
    21b2:	80 95       	com	r24
    21b4:	90 95       	com	r25
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	08 95       	ret

000021bc <__eerd_word_m16>:
    21bc:	a8 e1       	ldi	r26, 0x18	; 24
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	42 e0       	ldi	r20, 0x02	; 2
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__eerd_blraw_m16>

000021c8 <__eewr_word_m16>:
    21c8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__eewr_byte_m16>
    21cc:	27 2f       	mov	r18, r23
    21ce:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__eewr_r18_m16>

000021d2 <__eerd_block_m16>:
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22

000021d6 <__eerd_blraw_m16>:
    21d6:	fc 01       	movw	r30, r24
    21d8:	e1 99       	sbic	0x1c, 1	; 28
    21da:	fe cf       	rjmp	.-4      	; 0x21d8 <__eerd_blraw_m16+0x2>
    21dc:	06 c0       	rjmp	.+12     	; 0x21ea <__eerd_blraw_m16+0x14>
    21de:	ff bb       	out	0x1f, r31	; 31
    21e0:	ee bb       	out	0x1e, r30	; 30
    21e2:	e0 9a       	sbi	0x1c, 0	; 28
    21e4:	31 96       	adiw	r30, 0x01	; 1
    21e6:	0d b2       	in	r0, 0x1d	; 29
    21e8:	0d 92       	st	X+, r0
    21ea:	41 50       	subi	r20, 0x01	; 1
    21ec:	50 40       	sbci	r21, 0x00	; 0
    21ee:	b8 f7       	brcc	.-18     	; 0x21de <__eerd_blraw_m16+0x8>
    21f0:	08 95       	ret

000021f2 <__eewr_byte_m16>:
    21f2:	26 2f       	mov	r18, r22

000021f4 <__eewr_r18_m16>:
    21f4:	e1 99       	sbic	0x1c, 1	; 28
    21f6:	fe cf       	rjmp	.-4      	; 0x21f4 <__eewr_r18_m16>
    21f8:	9f bb       	out	0x1f, r25	; 31
    21fa:	8e bb       	out	0x1e, r24	; 30
    21fc:	2d bb       	out	0x1d, r18	; 29
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	e2 9a       	sbi	0x1c, 2	; 28
    2204:	e1 9a       	sbi	0x1c, 1	; 28
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	01 96       	adiw	r24, 0x01	; 1
    220a:	08 95       	ret

0000220c <_exit>:
    220c:	f8 94       	cli

0000220e <__stop_program>:
    220e:	ff cf       	rjmp	.-2      	; 0x220e <__stop_program>
