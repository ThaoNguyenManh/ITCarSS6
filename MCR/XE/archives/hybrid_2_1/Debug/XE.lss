
XE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001df4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001df4  00001ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000025e  00800062  00800062  00001eaa  2**0
                  ALLOC
  3 .eeprom       00000028  00810000  00810000  00001eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001ed2  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e0f  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034b  00000000  00000000  00003e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080c  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00004998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000525  00000000  00000000  00004d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011d1  00000000  00000000  00005289  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000645a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__ctors_end>
       4:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__vector_1>
       8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
       c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      10:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      14:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      18:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      1c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      20:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      24:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      28:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      2c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      30:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      34:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      38:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      3c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      40:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      44:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      48:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      4c:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__vector_19>
      50:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      54:	94 06       	cpc	r9, r20
      56:	da 06       	cpc	r13, r26
      58:	8f 06       	cpc	r8, r31
      5a:	8f 06       	cpc	r8, r31
      5c:	8f 06       	cpc	r8, r31
      5e:	8f 06       	cpc	r8, r31
      60:	8f 06       	cpc	r8, r31
      62:	8f 06       	cpc	r8, r31
      64:	8f 06       	cpc	r8, r31
      66:	8f 06       	cpc	r8, r31
      68:	21 07       	cpc	r18, r17
      6a:	3c 07       	cpc	r19, r28
      6c:	65 07       	cpc	r22, r21
      6e:	07 08       	sbc	r0, r7
      70:	2d 08       	sbc	r2, r13
      72:	53 08       	sbc	r5, r3
      74:	6a 08       	sbc	r6, r10
      76:	8f 06       	cpc	r8, r31
      78:	8f 06       	cpc	r8, r31
      7a:	8f 06       	cpc	r8, r31
      7c:	81 08       	sbc	r8, r1
      7e:	98 08       	sbc	r9, r8
      80:	8f 06       	cpc	r8, r31
      82:	8f 06       	cpc	r8, r31
      84:	8f 06       	cpc	r8, r31
      86:	8f 06       	cpc	r8, r31
      88:	8f 06       	cpc	r8, r31
      8a:	8f 06       	cpc	r8, r31
      8c:	8f 06       	cpc	r8, r31
      8e:	8f 06       	cpc	r8, r31
      90:	ad 08       	sbc	r10, r13
      92:	c4 08       	sbc	r12, r4
      94:	8f 06       	cpc	r8, r31
      96:	8f 06       	cpc	r8, r31
      98:	8f 06       	cpc	r8, r31
      9a:	8f 06       	cpc	r8, r31
      9c:	8f 06       	cpc	r8, r31
      9e:	8f 06       	cpc	r8, r31
      a0:	8f 06       	cpc	r8, r31
      a2:	8f 06       	cpc	r8, r31
      a4:	d9 08       	sbc	r13, r9
      a6:	02 09       	sbc	r16, r2
      a8:	21 09       	sbc	r18, r1
      aa:	67 09       	sbc	r22, r7
      ac:	8f 06       	cpc	r8, r31
      ae:	8f 06       	cpc	r8, r31
      b0:	8f 06       	cpc	r8, r31
      b2:	8f 06       	cpc	r8, r31
      b4:	8f 06       	cpc	r8, r31
      b6:	8f 06       	cpc	r8, r31
      b8:	73 09       	sbc	r23, r3
      ba:	9a 09       	sbc	r25, r10
      bc:	b9 09       	sbc	r27, r9
      be:	cb 09       	sbc	r28, r11
      c0:	8f 06       	cpc	r8, r31
      c2:	8f 06       	cpc	r8, r31
      c4:	8f 06       	cpc	r8, r31
      c6:	8f 06       	cpc	r8, r31
      c8:	8f 06       	cpc	r8, r31
      ca:	8f 06       	cpc	r8, r31
      cc:	d7 09       	sbc	r29, r7
      ce:	f8 09       	sbc	r31, r8
      d0:	66 0a       	sbc	r6, r22
      d2:	da 07       	cpc	r29, r26
      d4:	84 06       	cpc	r8, r20
      d6:	d1 07       	cpc	r29, r17
      d8:	84 06       	cpc	r8, r20
      da:	da 07       	cpc	r29, r26
      dc:	84 06       	cpc	r8, r20
      de:	bf 07       	cpc	r27, r31
      e0:	84 06       	cpc	r8, r20
      e2:	84 06       	cpc	r8, r20
      e4:	84 06       	cpc	r8, r20
      e6:	c8 07       	cpc	r28, r24
      e8:	84 06       	cpc	r8, r20
      ea:	84 06       	cpc	r8, r20
      ec:	84 06       	cpc	r8, r20
      ee:	e3 07       	cpc	r30, r19
      f0:	84 06       	cpc	r8, r20
      f2:	84 06       	cpc	r8, r20
      f4:	84 06       	cpc	r8, r20
      f6:	84 06       	cpc	r8, r20
      f8:	84 06       	cpc	r8, r20
      fa:	84 06       	cpc	r8, r20
      fc:	84 06       	cpc	r8, r20
      fe:	b6 07       	cpc	r27, r22
     100:	84 06       	cpc	r8, r20
     102:	84 06       	cpc	r8, r20
     104:	84 06       	cpc	r8, r20
     106:	84 06       	cpc	r8, r20
     108:	84 06       	cpc	r8, r20
     10a:	84 06       	cpc	r8, r20
     10c:	84 06       	cpc	r8, r20
     10e:	f5 07       	cpc	r31, r21
     110:	84 06       	cpc	r8, r20
     112:	84 06       	cpc	r8, r20
     114:	84 06       	cpc	r8, r20
     116:	84 06       	cpc	r8, r20
     118:	84 06       	cpc	r8, r20
     11a:	84 06       	cpc	r8, r20
     11c:	84 06       	cpc	r8, r20
     11e:	84 06       	cpc	r8, r20
     120:	84 06       	cpc	r8, r20
     122:	84 06       	cpc	r8, r20
     124:	84 06       	cpc	r8, r20
     126:	84 06       	cpc	r8, r20
     128:	84 06       	cpc	r8, r20
     12a:	84 06       	cpc	r8, r20
     12c:	84 06       	cpc	r8, r20
     12e:	ec 07       	cpc	r30, r28
     130:	84 06       	cpc	r8, r20
     132:	84 06       	cpc	r8, r20
     134:	84 06       	cpc	r8, r20
     136:	84 06       	cpc	r8, r20
     138:	84 06       	cpc	r8, r20
     13a:	84 06       	cpc	r8, r20
     13c:	84 06       	cpc	r8, r20
     13e:	84 06       	cpc	r8, r20
     140:	84 06       	cpc	r8, r20
     142:	84 06       	cpc	r8, r20
     144:	84 06       	cpc	r8, r20
     146:	84 06       	cpc	r8, r20
     148:	84 06       	cpc	r8, r20
     14a:	84 06       	cpc	r8, r20
     14c:	84 06       	cpc	r8, r20
     14e:	fe 07       	cpc	r31, r30
     150:	84 06       	cpc	r8, r20
     152:	84 06       	cpc	r8, r20
     154:	84 06       	cpc	r8, r20
     156:	84 06       	cpc	r8, r20
     158:	84 06       	cpc	r8, r20
     15a:	84 06       	cpc	r8, r20
     15c:	84 06       	cpc	r8, r20
     15e:	84 06       	cpc	r8, r20
     160:	84 06       	cpc	r8, r20
     162:	84 06       	cpc	r8, r20
     164:	84 06       	cpc	r8, r20
     166:	84 06       	cpc	r8, r20
     168:	84 06       	cpc	r8, r20
     16a:	84 06       	cpc	r8, r20
     16c:	84 06       	cpc	r8, r20
     16e:	84 06       	cpc	r8, r20
     170:	84 06       	cpc	r8, r20
     172:	84 06       	cpc	r8, r20
     174:	84 06       	cpc	r8, r20
     176:	84 06       	cpc	r8, r20
     178:	84 06       	cpc	r8, r20
     17a:	84 06       	cpc	r8, r20
     17c:	84 06       	cpc	r8, r20
     17e:	84 06       	cpc	r8, r20
     180:	84 06       	cpc	r8, r20
     182:	84 06       	cpc	r8, r20
     184:	84 06       	cpc	r8, r20
     186:	84 06       	cpc	r8, r20
     188:	84 06       	cpc	r8, r20
     18a:	84 06       	cpc	r8, r20
     18c:	84 06       	cpc	r8, r20
     18e:	fe 07       	cpc	r31, r30
     190:	39 0a       	sbc	r3, r25
     192:	84 06       	cpc	r8, r20
     194:	30 0a       	sbc	r3, r16
     196:	84 06       	cpc	r8, r20
     198:	39 0a       	sbc	r3, r25
     19a:	84 06       	cpc	r8, r20
     19c:	1e 0a       	sbc	r1, r30
     19e:	84 06       	cpc	r8, r20
     1a0:	84 06       	cpc	r8, r20
     1a2:	84 06       	cpc	r8, r20
     1a4:	27 0a       	sbc	r2, r23
     1a6:	84 06       	cpc	r8, r20
     1a8:	84 06       	cpc	r8, r20
     1aa:	84 06       	cpc	r8, r20
     1ac:	42 0a       	sbc	r4, r18
     1ae:	84 06       	cpc	r8, r20
     1b0:	84 06       	cpc	r8, r20
     1b2:	84 06       	cpc	r8, r20
     1b4:	84 06       	cpc	r8, r20
     1b6:	84 06       	cpc	r8, r20
     1b8:	84 06       	cpc	r8, r20
     1ba:	84 06       	cpc	r8, r20
     1bc:	15 0a       	sbc	r1, r21
     1be:	84 06       	cpc	r8, r20
     1c0:	84 06       	cpc	r8, r20
     1c2:	84 06       	cpc	r8, r20
     1c4:	84 06       	cpc	r8, r20
     1c6:	84 06       	cpc	r8, r20
     1c8:	84 06       	cpc	r8, r20
     1ca:	84 06       	cpc	r8, r20
     1cc:	54 0a       	sbc	r5, r20
     1ce:	84 06       	cpc	r8, r20
     1d0:	84 06       	cpc	r8, r20
     1d2:	84 06       	cpc	r8, r20
     1d4:	84 06       	cpc	r8, r20
     1d6:	84 06       	cpc	r8, r20
     1d8:	84 06       	cpc	r8, r20
     1da:	84 06       	cpc	r8, r20
     1dc:	84 06       	cpc	r8, r20
     1de:	84 06       	cpc	r8, r20
     1e0:	84 06       	cpc	r8, r20
     1e2:	84 06       	cpc	r8, r20
     1e4:	84 06       	cpc	r8, r20
     1e6:	84 06       	cpc	r8, r20
     1e8:	84 06       	cpc	r8, r20
     1ea:	84 06       	cpc	r8, r20
     1ec:	4b 0a       	sbc	r4, r27
     1ee:	84 06       	cpc	r8, r20
     1f0:	84 06       	cpc	r8, r20
     1f2:	84 06       	cpc	r8, r20
     1f4:	84 06       	cpc	r8, r20
     1f6:	84 06       	cpc	r8, r20
     1f8:	84 06       	cpc	r8, r20
     1fa:	84 06       	cpc	r8, r20
     1fc:	84 06       	cpc	r8, r20
     1fe:	84 06       	cpc	r8, r20
     200:	84 06       	cpc	r8, r20
     202:	84 06       	cpc	r8, r20
     204:	84 06       	cpc	r8, r20
     206:	84 06       	cpc	r8, r20
     208:	84 06       	cpc	r8, r20
     20a:	84 06       	cpc	r8, r20
     20c:	5d 0a       	sbc	r5, r29
     20e:	84 06       	cpc	r8, r20
     210:	84 06       	cpc	r8, r20
     212:	84 06       	cpc	r8, r20
     214:	84 06       	cpc	r8, r20
     216:	84 06       	cpc	r8, r20
     218:	84 06       	cpc	r8, r20
     21a:	84 06       	cpc	r8, r20
     21c:	84 06       	cpc	r8, r20
     21e:	84 06       	cpc	r8, r20
     220:	84 06       	cpc	r8, r20
     222:	84 06       	cpc	r8, r20
     224:	84 06       	cpc	r8, r20
     226:	84 06       	cpc	r8, r20
     228:	84 06       	cpc	r8, r20
     22a:	84 06       	cpc	r8, r20
     22c:	84 06       	cpc	r8, r20
     22e:	84 06       	cpc	r8, r20
     230:	84 06       	cpc	r8, r20
     232:	84 06       	cpc	r8, r20
     234:	84 06       	cpc	r8, r20
     236:	84 06       	cpc	r8, r20
     238:	84 06       	cpc	r8, r20
     23a:	84 06       	cpc	r8, r20
     23c:	84 06       	cpc	r8, r20
     23e:	84 06       	cpc	r8, r20
     240:	84 06       	cpc	r8, r20
     242:	84 06       	cpc	r8, r20
     244:	84 06       	cpc	r8, r20
     246:	84 06       	cpc	r8, r20
     248:	84 06       	cpc	r8, r20
     24a:	84 06       	cpc	r8, r20
     24c:	5d 0a       	sbc	r5, r29

0000024e <__ctors_end>:
     24e:	11 24       	eor	r1, r1
     250:	1f be       	out	0x3f, r1	; 63
     252:	cf e5       	ldi	r28, 0x5F	; 95
     254:	d4 e0       	ldi	r29, 0x04	; 4
     256:	de bf       	out	0x3e, r29	; 62
     258:	cd bf       	out	0x3d, r28	; 61

0000025a <__do_copy_data>:
     25a:	10 e0       	ldi	r17, 0x00	; 0
     25c:	a0 e6       	ldi	r26, 0x60	; 96
     25e:	b0 e0       	ldi	r27, 0x00	; 0
     260:	e4 ef       	ldi	r30, 0xF4	; 244
     262:	fd e1       	ldi	r31, 0x1D	; 29
     264:	02 c0       	rjmp	.+4      	; 0x26a <__do_copy_data+0x10>
     266:	05 90       	lpm	r0, Z+
     268:	0d 92       	st	X+, r0
     26a:	a2 36       	cpi	r26, 0x62	; 98
     26c:	b1 07       	cpc	r27, r17
     26e:	d9 f7       	brne	.-10     	; 0x266 <__do_copy_data+0xc>

00000270 <__do_clear_bss>:
     270:	22 e0       	ldi	r18, 0x02	; 2
     272:	a2 e6       	ldi	r26, 0x62	; 98
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	01 c0       	rjmp	.+2      	; 0x27a <.do_clear_bss_start>

00000278 <.do_clear_bss_loop>:
     278:	1d 92       	st	X+, r1

0000027a <.do_clear_bss_start>:
     27a:	a0 3c       	cpi	r26, 0xC0	; 192
     27c:	b2 07       	cpc	r27, r18
     27e:	e1 f7       	brne	.-8      	; 0x278 <.do_clear_bss_loop>
     280:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <main>
     284:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <_exit>

00000288 <__bad_interrupt>:
     288:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028c <get_button>:

int16_t velocity = 10;
int16_t feedback_velocity;

uint8_t get_button(uint8_t keyid) {
	if ( (PINB & keyid) == 0) {
     28c:	96 b3       	in	r25, 0x16	; 22
     28e:	98 23       	and	r25, r24
     290:	21 f4       	brne	.+8      	; 0x29a <get_button+0xe>
		while ( (PINB & keyid) == 0);
     292:	96 b3       	in	r25, 0x16	; 22
     294:	98 23       	and	r25, r24
     296:	e9 f3       	breq	.-6      	; 0x292 <get_button+0x6>
     298:	02 c0       	rjmp	.+4      	; 0x29e <get_button+0x12>
		return 1;
	}
	return 0;
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	08 95       	ret
int16_t feedback_velocity;

uint8_t get_button(uint8_t keyid) {
	if ( (PINB & keyid) == 0) {
		while ( (PINB & keyid) == 0);
		return 1;
     29e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
     2a0:	08 95       	ret

000002a2 <servo>:

uint8_t get_switch() {
	return ~PINC & 0xf;
}

void servo(int delta) {
     2a2:	8a 36       	cpi	r24, 0x6A	; 106
     2a4:	2f ef       	ldi	r18, 0xFF	; 255
     2a6:	92 07       	cpc	r25, r18
     2a8:	14 f4       	brge	.+4      	; 0x2ae <servo+0xc>
     2aa:	8a e6       	ldi	r24, 0x6A	; 106
     2ac:	9f ef       	ldi	r25, 0xFF	; 255
     2ae:	87 39       	cpi	r24, 0x97	; 151
     2b0:	91 05       	cpc	r25, r1
     2b2:	14 f0       	brlt	.+4      	; 0x2b8 <servo+0x16>
     2b4:	86 e9       	ldi	r24, 0x96	; 150
     2b6:	90 e0       	ldi	r25, 0x00	; 0
	if (delta > 150) delta = 150;
	else if(delta < -150) delta = -150;
	OCR1A = SERVO_CENTER + delta*SERVO_STEP;
     2b8:	9c 01       	movw	r18, r24
     2ba:	22 0f       	add	r18, r18
     2bc:	33 1f       	adc	r19, r19
     2be:	82 0f       	add	r24, r18
     2c0:	93 1f       	adc	r25, r19
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	8e 54       	subi	r24, 0x4E	; 78
     2c8:	93 4f       	sbci	r25, 0xF3	; 243
     2ca:	9b bd       	out	0x2b, r25	; 43
     2cc:	8a bd       	out	0x2a, r24	; 42
     2ce:	08 95       	ret

000002d0 <fwd>:
}

void fwd(uint8_t left, uint8_t right) {
     2d0:	8f 92       	push	r8
     2d2:	9f 92       	push	r9
     2d4:	af 92       	push	r10
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	f6 2e       	mov	r15, r22
	left  = left  *  motor_ratio;
     2e2:	68 2f       	mov	r22, r24
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__floatsisf>
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	5f e3       	ldi	r21, 0x3F	; 63
     2f6:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     2fa:	4b 01       	movw	r8, r22
     2fc:	5c 01       	movw	r10, r24
	right = right *  motor_ratio;
     2fe:	6f 2d       	mov	r22, r15
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__floatsisf>
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	5f e3       	ldi	r21, 0x3F	; 63
     312:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
     316:	6b 01       	movw	r12, r22
     318:	7c 01       	movw	r14, r24
	if (left >= 0 ) {
		cbi(PORTD,DIR0);
     31a:	93 98       	cbi	0x12, 3	; 18
	else if(delta < -150) delta = -150;
	OCR1A = SERVO_CENTER + delta*SERVO_STEP;
}

void fwd(uint8_t left, uint8_t right) {
	left  = left  *  motor_ratio;
     31c:	c5 01       	movw	r24, r10
     31e:	b4 01       	movw	r22, r8
     320:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__fixunssfsi>
	right = right *  motor_ratio;
	if (left >= 0 ) {
		cbi(PORTD,DIR0);
		OCR1B=left*200;
     324:	28 ec       	ldi	r18, 0xC8	; 200
     326:	62 9f       	mul	r22, r18
     328:	b0 01       	movw	r22, r0
     32a:	11 24       	eor	r1, r1
     32c:	79 bd       	out	0x29, r23	; 41
     32e:	68 bd       	out	0x28, r22	; 40
		sbi(PORTD,DIR0);
		OCR1B=(100+left)*200;
	}
	
	if(right >= 0) {
		cbi(PORTD,DIR1);
     330:	96 98       	cbi	0x12, 6	; 18
	OCR1A = SERVO_CENTER + delta*SERVO_STEP;
}

void fwd(uint8_t left, uint8_t right) {
	left  = left  *  motor_ratio;
	right = right *  motor_ratio;
     332:	c7 01       	movw	r24, r14
     334:	b6 01       	movw	r22, r12
     336:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__fixunssfsi>
		OCR1B=(100+left)*200;
	}
	
	if(right >= 0) {
		cbi(PORTD,DIR1);
		OCR2=right*255/100;
     33a:	2f ef       	ldi	r18, 0xFF	; 255
     33c:	62 9f       	mul	r22, r18
     33e:	c0 01       	movw	r24, r0
     340:	11 24       	eor	r1, r1
     342:	64 e6       	ldi	r22, 0x64	; 100
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__divmodhi4>
     34a:	63 bd       	out	0x23, r22	; 35
	}
	else {
		sbi(PORTD,DIR1);
		OCR2=(100+right)*255/100;
	}
}
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	df 90       	pop	r13
     352:	cf 90       	pop	r12
     354:	bf 90       	pop	r11
     356:	af 90       	pop	r10
     358:	9f 90       	pop	r9
     35a:	8f 90       	pop	r8
     35c:	08 95       	ret

0000035e <SPI>:

void SPI(uint8_t data) { //transfer data using SPI
	SPDR = data;
     35e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//wait for it to complete
     360:	77 9b       	sbis	0x0e, 7	; 14
     362:	fe cf       	rjmp	.-4      	; 0x360 <SPI+0x2>
}
     364:	08 95       	ret

00000366 <set_led_data>:

void set_led_data(uint32_t num) {
     366:	4f 92       	push	r4
     368:	5f 92       	push	r5
     36a:	6f 92       	push	r6
     36c:	7f 92       	push	r7
     36e:	8f 92       	push	r8
     370:	9f 92       	push	r9
     372:	af 92       	push	r10
     374:	bf 92       	push	r11
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	6b 01       	movw	r12, r22
     380:	7c 01       	movw	r14, r24
	led_data.p_1 = (8<<4) | (num % 10);
     382:	0f 2e       	mov	r0, r31
     384:	fa e0       	ldi	r31, 0x0A	; 10
     386:	4f 2e       	mov	r4, r31
     388:	51 2c       	mov	r5, r1
     38a:	61 2c       	mov	r6, r1
     38c:	71 2c       	mov	r7, r1
     38e:	f0 2d       	mov	r31, r0
     390:	a3 01       	movw	r20, r6
     392:	92 01       	movw	r18, r4
     394:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__udivmodsi4>
     398:	60 68       	ori	r22, 0x80	; 128
     39a:	60 93 a2 02 	sts	0x02A2, r22
	led_data.p_10 = num % 100 / 10;
     39e:	0f 2e       	mov	r0, r31
     3a0:	f4 e6       	ldi	r31, 0x64	; 100
     3a2:	8f 2e       	mov	r8, r31
     3a4:	91 2c       	mov	r9, r1
     3a6:	a1 2c       	mov	r10, r1
     3a8:	b1 2c       	mov	r11, r1
     3aa:	f0 2d       	mov	r31, r0
     3ac:	c7 01       	movw	r24, r14
     3ae:	b6 01       	movw	r22, r12
     3b0:	a5 01       	movw	r20, r10
     3b2:	94 01       	movw	r18, r8
     3b4:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__udivmodsi4>
     3b8:	a3 01       	movw	r20, r6
     3ba:	92 01       	movw	r18, r4
     3bc:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__udivmodsi4>
     3c0:	72 2e       	mov	r7, r18
     3c2:	62 2e       	mov	r6, r18
	led_data.p_100 = num % 1000 / 100;
     3c4:	c7 01       	movw	r24, r14
     3c6:	b6 01       	movw	r22, r12
     3c8:	28 ee       	ldi	r18, 0xE8	; 232
     3ca:	33 e0       	ldi	r19, 0x03	; 3
     3cc:	40 e0       	ldi	r20, 0x00	; 0
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__udivmodsi4>
     3d4:	f2 2e       	mov	r15, r18
     3d6:	a5 01       	movw	r20, r10
     3d8:	94 01       	movw	r18, r8
     3da:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__udivmodsi4>
     3de:	92 2f       	mov	r25, r18
	led_data.p_1000 = num / 1000;
	led_data.p_1000 |= (led_data.p_1000 != 0) ? 1<<4 : 0;
     3e0:	ff 20       	and	r15, r15
     3e2:	11 f0       	breq	.+4      	; 0x3e8 <set_led_data+0x82>
     3e4:	80 e1       	ldi	r24, 0x10	; 16
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <set_led_data+0x84>
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	f8 2a       	or	r15, r24
     3ec:	f0 92 a5 02 	sts	0x02A5, r15
	led_data.p_100 |= (led_data.p_1000 != 0 || led_data.p_100 != 0) ? 2<<4 : 0;
     3f0:	f1 10       	cpse	r15, r1
     3f2:	16 c0       	rjmp	.+44     	; 0x420 <set_led_data+0xba>
     3f4:	91 11       	cpse	r25, r1
     3f6:	0d c0       	rjmp	.+26     	; 0x412 <set_led_data+0xac>
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	0c c0       	rjmp	.+24     	; 0x414 <set_led_data+0xae>
	led_data.p_10 |= (led_data.p_1000 != 0 || led_data.p_100 != 0 || led_data.p_10 != 0) ? 4<<4 : 0;
     3fc:	66 20       	and	r6, r6
     3fe:	11 f0       	breq	.+4      	; 0x404 <set_led_data+0x9e>
     400:	80 e4       	ldi	r24, 0x40	; 64
     402:	03 c0       	rjmp	.+6      	; 0x40a <set_led_data+0xa4>
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	01 c0       	rjmp	.+2      	; 0x40a <set_led_data+0xa4>
     408:	80 e4       	ldi	r24, 0x40	; 64
     40a:	78 2a       	or	r7, r24
     40c:	70 92 a3 02 	sts	0x02A3, r7
     410:	0c c0       	rjmp	.+24     	; 0x42a <set_led_data+0xc4>
	led_data.p_1 = (8<<4) | (num % 10);
	led_data.p_10 = num % 100 / 10;
	led_data.p_100 = num % 1000 / 100;
	led_data.p_1000 = num / 1000;
	led_data.p_1000 |= (led_data.p_1000 != 0) ? 1<<4 : 0;
	led_data.p_100 |= (led_data.p_1000 != 0 || led_data.p_100 != 0) ? 2<<4 : 0;
     412:	80 e2       	ldi	r24, 0x20	; 32
     414:	28 2b       	or	r18, r24
     416:	20 93 a4 02 	sts	0x02A4, r18
	led_data.p_10 |= (led_data.p_1000 != 0 || led_data.p_100 != 0 || led_data.p_10 != 0) ? 4<<4 : 0;
     41a:	22 23       	and	r18, r18
     41c:	79 f3       	breq	.-34     	; 0x3fc <set_led_data+0x96>
     41e:	f4 cf       	rjmp	.-24     	; 0x408 <set_led_data+0xa2>
	led_data.p_1 = (8<<4) | (num % 10);
	led_data.p_10 = num % 100 / 10;
	led_data.p_100 = num % 1000 / 100;
	led_data.p_1000 = num / 1000;
	led_data.p_1000 |= (led_data.p_1000 != 0) ? 1<<4 : 0;
	led_data.p_100 |= (led_data.p_1000 != 0 || led_data.p_100 != 0) ? 2<<4 : 0;
     420:	20 62       	ori	r18, 0x20	; 32
     422:	20 93 a4 02 	sts	0x02A4, r18
	led_data.p_10 |= (led_data.p_1000 != 0 || led_data.p_100 != 0 || led_data.p_10 != 0) ? 4<<4 : 0;
     426:	80 e4       	ldi	r24, 0x40	; 64
     428:	f0 cf       	rjmp	.-32     	; 0x40a <set_led_data+0xa4>
}
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	df 90       	pop	r13
     430:	cf 90       	pop	r12
     432:	bf 90       	pop	r11
     434:	af 90       	pop	r10
     436:	9f 90       	pop	r9
     438:	8f 90       	pop	r8
     43a:	7f 90       	pop	r7
     43c:	6f 90       	pop	r6
     43e:	5f 90       	pop	r5
     440:	4f 90       	pop	r4
     442:	08 95       	ret

00000444 <print>:

void print() {
     444:	cf 93       	push	r28
	uint8_t value = 0;

	if(led_data.i++ == 4) led_data.i=0;
     446:	e1 ea       	ldi	r30, 0xA1	; 161
     448:	f2 e0       	ldi	r31, 0x02	; 2
     44a:	90 81       	ld	r25, Z
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	89 0f       	add	r24, r25
     450:	80 83       	st	Z, r24
     452:	94 30       	cpi	r25, 0x04	; 4
     454:	19 f4       	brne	.+6      	; 0x45c <print+0x18>
     456:	10 92 a1 02 	sts	0x02A1, r1
     45a:	08 c0       	rjmp	.+16     	; 0x46c <__stack+0xd>
	switch(led_data.i) {
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	49 f0       	breq	.+18     	; 0x472 <__stack+0x13>
     460:	28 f0       	brcs	.+10     	; 0x46c <__stack+0xd>
     462:	82 30       	cpi	r24, 0x02	; 2
     464:	49 f0       	breq	.+18     	; 0x478 <__stack+0x19>
     466:	83 30       	cpi	r24, 0x03	; 3
     468:	51 f0       	breq	.+20     	; 0x47e <__stack+0x1f>
     46a:	0c c0       	rjmp	.+24     	; 0x484 <__stack+0x25>
		case 0: value = led_data.p_1000; break;
     46c:	c0 91 a5 02 	lds	r28, 0x02A5
     470:	0a c0       	rjmp	.+20     	; 0x486 <__stack+0x27>
		case 1: value = led_data.p_100;	break;
     472:	c0 91 a4 02 	lds	r28, 0x02A4
     476:	07 c0       	rjmp	.+14     	; 0x486 <__stack+0x27>
		case 2: value = led_data.p_10; break;
     478:	c0 91 a3 02 	lds	r28, 0x02A3
     47c:	04 c0       	rjmp	.+8      	; 0x486 <__stack+0x27>
		case 3: value = led_data.p_1; break;
     47e:	c0 91 a2 02 	lds	r28, 0x02A2
     482:	01 c0       	rjmp	.+2      	; 0x486 <__stack+0x27>
	led_data.p_100 |= (led_data.p_1000 != 0 || led_data.p_100 != 0) ? 2<<4 : 0;
	led_data.p_10 |= (led_data.p_1000 != 0 || led_data.p_100 != 0 || led_data.p_10 != 0) ? 4<<4 : 0;
}

void print() {
	uint8_t value = 0;
     484:	c0 e0       	ldi	r28, 0x00	; 0
		case 2: value = led_data.p_10; break;
		case 3: value = led_data.p_1; break;
		default: break;
	}

	SPI(~led_data.sensor_debug_output);
     486:	80 91 a6 02 	lds	r24, 0x02A6
     48a:	80 95       	com	r24
     48c:	0e 94 af 01 	call	0x35e	; 0x35e <SPI>
	SPI(value);
     490:	8c 2f       	mov	r24, r28
     492:	0e 94 af 01 	call	0x35e	; 0x35e <SPI>
	sbi(PORTB,LATCH);
     496:	c4 9a       	sbi	0x18, 4	; 24
	cbi(PORTB,LATCH);
     498:	c4 98       	cbi	0x18, 4	; 24
}
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <isr_0>:
}

void (*isr_ptr)(void) = &dummy;

void isr_0() {
	print();
     49e:	0e 94 22 02 	call	0x444	; 0x444 <print>
     4a2:	08 95       	ret

000004a4 <read_adc>:
void read_eeprom(void* dst, void* pointer_eeprom, size_t n) {
	while (!eeprom_is_ready());
	eeprom_read_block(dst, pointer_eeprom, n);
}
uint16_t read_adc(uint8_t channel) {
	ADMUX= (1<<REFS0) | channel; //selecting channel
     4a4:	80 64       	ori	r24, 0x40	; 64
     4a6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); //start conversion
     4a8:	36 9a       	sbi	0x06, 6	; 6
	loop_until_bit_is_set(ADCSRA, ADIF);
     4aa:	34 9b       	sbis	0x06, 4	; 6
     4ac:	fe cf       	rjmp	.-4      	; 0x4aa <read_adc+0x6>
	return ADCW;
     4ae:	84 b1       	in	r24, 0x04	; 4
     4b0:	95 b1       	in	r25, 0x05	; 5
}
     4b2:	08 95       	ret

000004b4 <read_sensor>:

uint8_t read_sensor() {
     4b4:	df 92       	push	r13
     4b6:	ef 92       	push	r14
     4b8:	ff 92       	push	r15
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	c0 e0       	ldi	r28, 0x00	; 0
     4c4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t adc_value = 0;
     4c6:	d1 2c       	mov	r13, r1
	uint16_t t = 0;
	
	for(uint8_t i=0; i<8; i++) {
		t = (read_adc(i) + read_adc(i)) / 2;
		if(t < LINE) sbi(adc_value, i);
		else cbi(adc_value, i);
     4c8:	ee 24       	eor	r14, r14
     4ca:	e3 94       	inc	r14
     4cc:	f1 2c       	mov	r15, r1
uint8_t read_sensor() {
	uint8_t adc_value = 0;
	uint16_t t = 0;
	
	for(uint8_t i=0; i<8; i++) {
		t = (read_adc(i) + read_adc(i)) / 2;
     4ce:	8c 2f       	mov	r24, r28
     4d0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <read_adc>
     4d4:	8c 01       	movw	r16, r24
     4d6:	8c 2f       	mov	r24, r28
     4d8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <read_adc>
     4dc:	80 0f       	add	r24, r16
     4de:	91 1f       	adc	r25, r17
		if(t < LINE) sbi(adc_value, i);
     4e0:	88 35       	cpi	r24, 0x58	; 88
     4e2:	92 40       	sbci	r25, 0x02	; 2
     4e4:	48 f4       	brcc	.+18     	; 0x4f8 <read_sensor+0x44>
     4e6:	97 01       	movw	r18, r14
     4e8:	0c 2e       	mov	r0, r28
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <read_sensor+0x3c>
     4ec:	22 0f       	add	r18, r18
     4ee:	33 1f       	adc	r19, r19
     4f0:	0a 94       	dec	r0
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <read_sensor+0x38>
     4f4:	d2 2a       	or	r13, r18
     4f6:	09 c0       	rjmp	.+18     	; 0x50a <read_sensor+0x56>
		else cbi(adc_value, i);
     4f8:	97 01       	movw	r18, r14
     4fa:	0c 2e       	mov	r0, r28
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <read_sensor+0x4e>
     4fe:	22 0f       	add	r18, r18
     500:	33 1f       	adc	r19, r19
     502:	0a 94       	dec	r0
     504:	e2 f7       	brpl	.-8      	; 0x4fe <read_sensor+0x4a>
     506:	20 95       	com	r18
     508:	d2 22       	and	r13, r18
     50a:	21 96       	adiw	r28, 0x01	; 1

uint8_t read_sensor() {
	uint8_t adc_value = 0;
	uint16_t t = 0;
	
	for(uint8_t i=0; i<8; i++) {
     50c:	c8 30       	cpi	r28, 0x08	; 8
     50e:	d1 05       	cpc	r29, r1
     510:	f1 f6       	brne	.-68     	; 0x4ce <read_sensor+0x1a>
		t = (read_adc(i) + read_adc(i)) / 2;
		if(t < LINE) sbi(adc_value, i);
		else cbi(adc_value, i);
	}
	led_data.sensor_debug_output = adc_value;
     512:	d0 92 a6 02 	sts	0x02A6, r13
	return (adc_value);
}
     516:	8d 2d       	mov	r24, r13
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	df 90       	pop	r13
     526:	08 95       	ret

00000528 <dummy>:
}

uint8_t off_lane = 0;

void dummy() {
	print();
     528:	0e 94 22 02 	call	0x444	; 0x444 <print>
	read_sensor();
     52c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     530:	08 95       	ret

00000532 <init>:

void init() {
	//ADC
	ADMUX = (1<<REFS0);	//reference voltage form avcc
     532:	80 e4       	ldi	r24, 0x40	; 64
     534:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //enable ADC and set prescaler = 8
     536:	87 e8       	ldi	r24, 0x87	; 135
     538:	86 b9       	out	0x06, r24	; 6

	//PORT
	DDRB  = 0b11110001;
     53a:	81 ef       	ldi	r24, 0xF1	; 241
     53c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111111;
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	88 bb       	out	0x18, r24	; 24
	DDRC  = 0b00000000;
     542:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b11111111;
     544:	85 bb       	out	0x15, r24	; 21
	DDRD  = 0b11111011;
     546:	8b ef       	ldi	r24, 0xFB	; 251
     548:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000;
     54a:	12 ba       	out	0x12, r1	; 18

	//SPI
	SPCR	= (1<<SPE) | (1<<MSTR); //enable SPI, master
     54c:	80 e5       	ldi	r24, 0x50	; 80
     54e:	8d b9       	out	0x0d, r24	; 13
	SPSR	= (1<<SPI2X); //SCK mode 2X: Fosc/2
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	8e b9       	out	0x0e, r24	; 14

	//timer
	TCCR0 = (1<<WGM01) | (1<<CS02); //mode 2 CTC,  prescaler = 256
     554:	8c e0       	ldi	r24, 0x0C	; 12
     556:	83 bf       	out	0x33, r24	; 51
	OCR0 = 62; //1ms
     558:	8e e3       	ldi	r24, 0x3E	; 62
     55a:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1<<OCIE0);
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	89 bf       	out	0x39, r24	; 57
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11); // set OCR1A & OCR1B at bottom, clear at compare match (non-invert), mode 14 fast pwm
     560:	8f b5       	in	r24, 0x2f	; 47
     562:	82 6a       	ori	r24, 0xA2	; 162
     564:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS11); //prescaler = 8
     566:	8e b5       	in	r24, 0x2e	; 46
     568:	8a 61       	ori	r24, 0x1A	; 26
     56a:	8e bd       	out	0x2e, r24	; 46
	ICR1 = SERVO_PWM_PERIOD; //time period = 10ms
     56c:	80 e2       	ldi	r24, 0x20	; 32
     56e:	9e e4       	ldi	r25, 0x4E	; 78
     570:	97 bd       	out	0x27, r25	; 39
     572:	86 bd       	out	0x26, r24	; 38
	TCCR2 = (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS22)|(1<<CS21)|(1<<CS20); //sest OC2 at bottom, clear OC2 on compare match, (non-invert), mode 3 fast pwm, prescaler = 1024
     574:	8f e6       	ldi	r24, 0x6F	; 111
     576:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0;
     578:	13 bc       	out	0x23, r1	; 35
	//enable interrupts
	sei();
     57a:	78 94       	sei

	//encoder
	MCUCR |= (1<<ISC11)|(1<<ISC01);
     57c:	85 b7       	in	r24, 0x35	; 53
     57e:	8a 60       	ori	r24, 0x0A	; 10
     580:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     582:	8b b7       	in	r24, 0x3b	; 59
     584:	80 64       	ori	r24, 0x40	; 64
     586:	8b bf       	out	0x3b, r24	; 59
     588:	08 95       	ret

0000058a <test_mode>:
}

void test_mode() {
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
	servo(0);
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
	uint8_t idx = 0;
     59c:	10 e0       	ldi	r17, 0x00	; 0
	while (1) {
		if (get_button(BTN0)) break;
		if (get_button(BTN1)) idx--;
		if (get_button(BTN2)) idx++;
		if (idx > 7 || idx < 0) idx = 0;
     59e:	f1 2c       	mov	r15, r1
		set_led_data(read_adc(idx));
		led_data.sensor_debug_output = 1 << idx;
     5a0:	c6 ea       	ldi	r28, 0xA6	; 166
     5a2:	d2 e0       	ldi	r29, 0x02	; 2
     5a4:	01 e0       	ldi	r16, 0x01	; 1

void test_mode() {
	servo(0);
	uint8_t idx = 0;
	while (1) {
		if (get_button(BTN0)) break;
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     5ac:	81 11       	cpse	r24, r1
     5ae:	1d c0       	rjmp	.+58     	; 0x5ea <test_mode+0x60>
		if (get_button(BTN1)) idx--;
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     5b6:	81 11       	cpse	r24, r1
     5b8:	11 50       	subi	r17, 0x01	; 1
		if (get_button(BTN2)) idx++;
     5ba:	88 e0       	ldi	r24, 0x08	; 8
     5bc:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     5c0:	81 11       	cpse	r24, r1
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
		if (idx > 7 || idx < 0) idx = 0;
     5c4:	18 30       	cpi	r17, 0x08	; 8
     5c6:	08 f0       	brcs	.+2      	; 0x5ca <test_mode+0x40>
     5c8:	1f 2d       	mov	r17, r15
		set_led_data(read_adc(idx));
     5ca:	81 2f       	mov	r24, r17
     5cc:	0e 94 52 02 	call	0x4a4	; 0x4a4 <read_adc>
     5d0:	bc 01       	movw	r22, r24
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
		led_data.sensor_debug_output = 1 << idx;
     5da:	80 2f       	mov	r24, r16
     5dc:	01 2e       	mov	r0, r17
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <test_mode+0x58>
     5e0:	88 0f       	add	r24, r24
     5e2:	0a 94       	dec	r0
     5e4:	ea f7       	brpl	.-6      	; 0x5e0 <test_mode+0x56>
     5e6:	88 83       	st	Y, r24
	}
     5e8:	de cf       	rjmp	.-68     	; 0x5a6 <test_mode+0x1c>
	
	motor_speed = eeprom_read_byte(&eeprom_motor_speed);
     5ea:	86 e0       	ldi	r24, 0x06	; 6
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__eerd_byte_m16a>
	if (motor_speed == 255) {
     5f2:	8f 3f       	cpi	r24, 0xFF	; 255
     5f4:	19 f0       	breq	.+6      	; 0x5fc <test_mode+0x72>
		if (idx > 7 || idx < 0) idx = 0;
		set_led_data(read_adc(idx));
		led_data.sensor_debug_output = 1 << idx;
	}
	
	motor_speed = eeprom_read_byte(&eeprom_motor_speed);
     5f6:	80 93 6e 00 	sts	0x006E, r24
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <test_mode+0x78>
	if (motor_speed == 255) {
		motor_speed = 80;
     5fc:	80 e5       	ldi	r24, 0x50	; 80
     5fe:	80 93 6e 00 	sts	0x006E, r24
	}
	while (1) {
		if (get_button(BTN0)) {
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     608:	88 23       	and	r24, r24
     60a:	79 f0       	breq	.+30     	; 0x62a <test_mode+0xa0>
			eeprom_write_byte(&eeprom_motor_speed, motor_speed);
     60c:	60 91 6e 00 	lds	r22, 0x006E
     610:	86 e0       	ldi	r24, 0x06	; 6
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__eewr_byte_m16a>
		if (get_button(BTN1)) motor_speed -= 10;
		if (get_button(BTN2)) motor_speed += 10;
		set_led_data(motor_speed);
	}
	
	m = eeprom_read_byte(&eeprom_m);
     618:	87 e0       	ldi	r24, 0x07	; 7
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__eerd_byte_m16a>
	if (m == 255) {
     620:	8f 3f       	cpi	r24, 0xFF	; 255
     622:	f9 f0       	breq	.+62     	; 0x662 <test_mode+0xd8>
		if (get_button(BTN1)) motor_speed -= 10;
		if (get_button(BTN2)) motor_speed += 10;
		set_led_data(motor_speed);
	}
	
	m = eeprom_read_byte(&eeprom_m);
     624:	80 93 bf 02 	sts	0x02BF, r24
     628:	1f c0       	rjmp	.+62     	; 0x668 <test_mode+0xde>
	while (1) {
		if (get_button(BTN0)) {
			eeprom_write_byte(&eeprom_motor_speed, motor_speed);
			break;
		}
		if (get_button(BTN1)) motor_speed -= 10;
     62a:	84 e0       	ldi	r24, 0x04	; 4
     62c:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     630:	88 23       	and	r24, r24
     632:	29 f0       	breq	.+10     	; 0x63e <test_mode+0xb4>
     634:	80 91 6e 00 	lds	r24, 0x006E
     638:	8a 50       	subi	r24, 0x0A	; 10
     63a:	80 93 6e 00 	sts	0x006E, r24
		if (get_button(BTN2)) motor_speed += 10;
     63e:	88 e0       	ldi	r24, 0x08	; 8
     640:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     644:	88 23       	and	r24, r24
     646:	29 f0       	breq	.+10     	; 0x652 <test_mode+0xc8>
     648:	80 91 6e 00 	lds	r24, 0x006E
     64c:	86 5f       	subi	r24, 0xF6	; 246
     64e:	80 93 6e 00 	sts	0x006E, r24
		set_led_data(motor_speed);
     652:	60 91 6e 00 	lds	r22, 0x006E
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
	}
     660:	d0 cf       	rjmp	.-96     	; 0x602 <test_mode+0x78>
	
	m = eeprom_read_byte(&eeprom_m);
	if (m == 255) {
		m = 50;
     662:	82 e3       	ldi	r24, 0x32	; 50
     664:	80 93 bf 02 	sts	0x02BF, r24
	}
	while (1) {
		if (get_button(BTN0)) {
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     66e:	88 23       	and	r24, r24
     670:	99 f0       	breq	.+38     	; 0x698 <test_mode+0x10e>
			eeprom_write_byte(&eeprom_m, m);
     672:	60 91 bf 02 	lds	r22, 0x02BF
     676:	87 e0       	ldi	r24, 0x07	; 7
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__eewr_byte_m16a>
		if (get_button(BTN1)) m -= 1;
		if (get_button(BTN2)) m += 1;
		set_led_data(m);
	}
	
	K_P = eeprom_read_word(&eeprom_KP);
     67e:	84 e0       	ldi	r24, 0x04	; 4
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__eerd_word_m16a>
	if (K_P == 65535UL) {
     686:	8f 3f       	cpi	r24, 0xFF	; 255
     688:	2f ef       	ldi	r18, 0xFF	; 255
     68a:	92 07       	cpc	r25, r18
     68c:	09 f1       	breq	.+66     	; 0x6d0 <test_mode+0x146>
		if (get_button(BTN1)) m -= 1;
		if (get_button(BTN2)) m += 1;
		set_led_data(m);
	}
	
	K_P = eeprom_read_word(&eeprom_KP);
     68e:	90 93 be 02 	sts	0x02BE, r25
     692:	80 93 bd 02 	sts	0x02BD, r24
     696:	22 c0       	rjmp	.+68     	; 0x6dc <test_mode+0x152>
	while (1) {
		if (get_button(BTN0)) {
			eeprom_write_byte(&eeprom_m, m);
			break;
		}
		if (get_button(BTN1)) m -= 1;
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     69e:	88 23       	and	r24, r24
     6a0:	29 f0       	breq	.+10     	; 0x6ac <test_mode+0x122>
     6a2:	80 91 bf 02 	lds	r24, 0x02BF
     6a6:	81 50       	subi	r24, 0x01	; 1
     6a8:	80 93 bf 02 	sts	0x02BF, r24
		if (get_button(BTN2)) m += 1;
     6ac:	88 e0       	ldi	r24, 0x08	; 8
     6ae:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     6b2:	88 23       	and	r24, r24
     6b4:	29 f0       	breq	.+10     	; 0x6c0 <test_mode+0x136>
     6b6:	80 91 bf 02 	lds	r24, 0x02BF
     6ba:	8f 5f       	subi	r24, 0xFF	; 255
     6bc:	80 93 bf 02 	sts	0x02BF, r24
		set_led_data(m);
     6c0:	60 91 bf 02 	lds	r22, 0x02BF
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
	}
     6ce:	cc cf       	rjmp	.-104    	; 0x668 <test_mode+0xde>
	
	K_P = eeprom_read_word(&eeprom_KP);
	if (K_P == 65535UL) {
		K_P = 105;
     6d0:	89 e6       	ldi	r24, 0x69	; 105
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	90 93 be 02 	sts	0x02BE, r25
     6d8:	80 93 bd 02 	sts	0x02BD, r24
	}
	while (1) {
		servo(0);
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
		if (get_button(BTN0)) {
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     6ea:	88 23       	and	r24, r24
     6ec:	a9 f0       	breq	.+42     	; 0x718 <test_mode+0x18e>
			eeprom_write_word(&eeprom_KP, K_P);
     6ee:	60 91 bd 02 	lds	r22, 0x02BD
     6f2:	70 91 be 02 	lds	r23, 0x02BE
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__eewr_word_m16a>
		if (get_button(BTN1)) K_P -= 10;
		if (get_button(BTN2)) K_P += 10;
		set_led_data(K_P);
	}
	
	K_I = eeprom_read_word(&eeprom_KI);
     6fe:	82 e0       	ldi	r24, 0x02	; 2
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__eerd_word_m16a>
	if (K_I == 65535UL) {
     706:	8f 3f       	cpi	r24, 0xFF	; 255
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	92 07       	cpc	r25, r18
     70c:	51 f1       	breq	.+84     	; 0x762 <test_mode+0x1d8>
		if (get_button(BTN1)) K_P -= 10;
		if (get_button(BTN2)) K_P += 10;
		set_led_data(K_P);
	}
	
	K_I = eeprom_read_word(&eeprom_KI);
     70e:	90 93 a8 02 	sts	0x02A8, r25
     712:	80 93 a7 02 	sts	0x02A7, r24
     716:	2b c0       	rjmp	.+86     	; 0x76e <test_mode+0x1e4>
		servo(0);
		if (get_button(BTN0)) {
			eeprom_write_word(&eeprom_KP, K_P);
			break;
		}
		if (get_button(BTN1)) K_P -= 10;
     718:	84 e0       	ldi	r24, 0x04	; 4
     71a:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     71e:	88 23       	and	r24, r24
     720:	49 f0       	breq	.+18     	; 0x734 <test_mode+0x1aa>
     722:	80 91 bd 02 	lds	r24, 0x02BD
     726:	90 91 be 02 	lds	r25, 0x02BE
     72a:	0a 97       	sbiw	r24, 0x0a	; 10
     72c:	90 93 be 02 	sts	0x02BE, r25
     730:	80 93 bd 02 	sts	0x02BD, r24
		if (get_button(BTN2)) K_P += 10;
     734:	88 e0       	ldi	r24, 0x08	; 8
     736:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     73a:	88 23       	and	r24, r24
     73c:	49 f0       	breq	.+18     	; 0x750 <test_mode+0x1c6>
     73e:	80 91 bd 02 	lds	r24, 0x02BD
     742:	90 91 be 02 	lds	r25, 0x02BE
     746:	0a 96       	adiw	r24, 0x0a	; 10
     748:	90 93 be 02 	sts	0x02BE, r25
     74c:	80 93 bd 02 	sts	0x02BD, r24
		set_led_data(K_P);
     750:	60 91 bd 02 	lds	r22, 0x02BD
     754:	70 91 be 02 	lds	r23, 0x02BE
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
	}
     760:	bd cf       	rjmp	.-134    	; 0x6dc <test_mode+0x152>
	
	K_I = eeprom_read_word(&eeprom_KI);
	if (K_I == 65535UL) {
		K_I = 1;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	90 93 a8 02 	sts	0x02A8, r25
     76a:	80 93 a7 02 	sts	0x02A7, r24
	}
	while (1) {
		if (get_button(BTN0)) {
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     774:	88 23       	and	r24, r24
     776:	a9 f0       	breq	.+42     	; 0x7a2 <test_mode+0x218>
			eeprom_write_word(&eeprom_KI, K_I);
     778:	60 91 a7 02 	lds	r22, 0x02A7
     77c:	70 91 a8 02 	lds	r23, 0x02A8
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__eewr_word_m16a>
		if (get_button(BTN1)) K_I -= 1;
		if (get_button(BTN2)) K_I += 1;
		set_led_data(K_I);
	}
	
	K_D = eeprom_read_word(&eeprom_KD);
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__eerd_word_m16a>
	if (K_D == 65535UL) {
     790:	8f 3f       	cpi	r24, 0xFF	; 255
     792:	2f ef       	ldi	r18, 0xFF	; 255
     794:	92 07       	cpc	r25, r18
     796:	51 f1       	breq	.+84     	; 0x7ec <test_mode+0x262>
		if (get_button(BTN1)) K_I -= 1;
		if (get_button(BTN2)) K_I += 1;
		set_led_data(K_I);
	}
	
	K_D = eeprom_read_word(&eeprom_KD);
     798:	90 93 aa 02 	sts	0x02AA, r25
     79c:	80 93 a9 02 	sts	0x02A9, r24
     7a0:	2b c0       	rjmp	.+86     	; 0x7f8 <test_mode+0x26e>
	while (1) {
		if (get_button(BTN0)) {
			eeprom_write_word(&eeprom_KI, K_I);
			break;
		}
		if (get_button(BTN1)) K_I -= 1;
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     7a8:	88 23       	and	r24, r24
     7aa:	49 f0       	breq	.+18     	; 0x7be <test_mode+0x234>
     7ac:	80 91 a7 02 	lds	r24, 0x02A7
     7b0:	90 91 a8 02 	lds	r25, 0x02A8
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	90 93 a8 02 	sts	0x02A8, r25
     7ba:	80 93 a7 02 	sts	0x02A7, r24
		if (get_button(BTN2)) K_I += 1;
     7be:	88 e0       	ldi	r24, 0x08	; 8
     7c0:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     7c4:	88 23       	and	r24, r24
     7c6:	49 f0       	breq	.+18     	; 0x7da <test_mode+0x250>
     7c8:	80 91 a7 02 	lds	r24, 0x02A7
     7cc:	90 91 a8 02 	lds	r25, 0x02A8
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	90 93 a8 02 	sts	0x02A8, r25
     7d6:	80 93 a7 02 	sts	0x02A7, r24
		set_led_data(K_I);
     7da:	60 91 a7 02 	lds	r22, 0x02A7
     7de:	70 91 a8 02 	lds	r23, 0x02A8
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
	}
     7ea:	c1 cf       	rjmp	.-126    	; 0x76e <test_mode+0x1e4>
	
	K_D = eeprom_read_word(&eeprom_KD);
	if (K_D == 65535UL) {
		K_D = 11;
     7ec:	8b e0       	ldi	r24, 0x0B	; 11
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	90 93 aa 02 	sts	0x02AA, r25
     7f4:	80 93 a9 02 	sts	0x02A9, r24
	}
	while (1) {
		if (get_button(BTN0)) {
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     7fe:	88 23       	and	r24, r24
     800:	49 f0       	breq	.+18     	; 0x814 <test_mode+0x28a>
			eeprom_write_word(&eeprom_KD, K_D);
     802:	60 91 a9 02 	lds	r22, 0x02A9
     806:	70 91 aa 02 	lds	r23, 0x02AA
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__eewr_word_m16a>
     812:	25 c0       	rjmp	.+74     	; 0x85e <test_mode+0x2d4>
			break;
		}
		if (get_button(BTN1)) K_D -= 10;
     814:	84 e0       	ldi	r24, 0x04	; 4
     816:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     81a:	88 23       	and	r24, r24
     81c:	49 f0       	breq	.+18     	; 0x830 <test_mode+0x2a6>
     81e:	80 91 a9 02 	lds	r24, 0x02A9
     822:	90 91 aa 02 	lds	r25, 0x02AA
     826:	0a 97       	sbiw	r24, 0x0a	; 10
     828:	90 93 aa 02 	sts	0x02AA, r25
     82c:	80 93 a9 02 	sts	0x02A9, r24
		if (get_button(BTN2)) K_D += 10;
     830:	88 e0       	ldi	r24, 0x08	; 8
     832:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     836:	88 23       	and	r24, r24
     838:	49 f0       	breq	.+18     	; 0x84c <test_mode+0x2c2>
     83a:	80 91 a9 02 	lds	r24, 0x02A9
     83e:	90 91 aa 02 	lds	r25, 0x02AA
     842:	0a 96       	adiw	r24, 0x0a	; 10
     844:	90 93 aa 02 	sts	0x02AA, r25
     848:	80 93 a9 02 	sts	0x02A9, r24
		set_led_data(K_D);
     84c:	60 91 a9 02 	lds	r22, 0x02A9
     850:	70 91 aa 02 	lds	r23, 0x02AA
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
	}
     85c:	cd cf       	rjmp	.-102    	; 0x7f8 <test_mode+0x26e>
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	08 95       	ret

0000086a <pid_Init>:
 *  \param i_factor  Integral term.  
 *  \param d_factor  Derivate term.  
 *  \param pid  Struct with PID status.  
 */ 
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
{
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	fb 01       	movw	r30, r22
     870:	e9 01       	movw	r28, r18
	 // Start values for PID controller
	 pid->sumError = 0;
     872:	1a 82       	std	Y+2, r1	; 0x02
     874:	1b 82       	std	Y+3, r1	; 0x03
     876:	1c 82       	std	Y+4, r1	; 0x04
     878:	1d 82       	std	Y+5, r1	; 0x05
	 pid->lastProcessValue = 0;
     87a:	19 82       	std	Y+1, r1	; 0x01
     87c:	18 82       	st	Y, r1
	 // Tuning constants for PID loop
	 pid->P_Factor = p_factor;
     87e:	9f 83       	std	Y+7, r25	; 0x07
     880:	8e 83       	std	Y+6, r24	; 0x06
	 pid->I_Factor = i_factor;
     882:	79 87       	std	Y+9, r23	; 0x09
     884:	68 87       	std	Y+8, r22	; 0x08
	 pid->D_Factor = d_factor;
     886:	5b 87       	std	Y+11, r21	; 0x0b
     888:	4a 87       	std	Y+10, r20	; 0x0a
	 // Limits to avoid overflow
	 pid->maxError = MAX_INT / (pid->P_Factor + 1);
     88a:	bc 01       	movw	r22, r24
     88c:	6f 5f       	subi	r22, 0xFF	; 255
     88e:	7f 4f       	sbci	r23, 0xFF	; 255
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	9f e7       	ldi	r25, 0x7F	; 127
     894:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__divmodhi4>
     898:	7d 87       	std	Y+13, r23	; 0x0d
     89a:	6c 87       	std	Y+12, r22	; 0x0c
	 pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
     89c:	9f 01       	movw	r18, r30
     89e:	2f 5f       	subi	r18, 0xFF	; 255
     8a0:	3f 4f       	sbci	r19, 0xFF	; 255
     8a2:	44 27       	eor	r20, r20
     8a4:	37 fd       	sbrc	r19, 7
     8a6:	40 95       	com	r20
     8a8:	54 2f       	mov	r21, r20
     8aa:	6f ef       	ldi	r22, 0xFF	; 255
     8ac:	7f ef       	ldi	r23, 0xFF	; 255
     8ae:	8f ef       	ldi	r24, 0xFF	; 255
     8b0:	9f e3       	ldi	r25, 0x3F	; 63
     8b2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__divmodsi4>
     8b6:	2e 87       	std	Y+14, r18	; 0x0e
     8b8:	3f 87       	std	Y+15, r19	; 0x0f
     8ba:	48 8b       	std	Y+16, r20	; 0x10
     8bc:	59 8b       	std	Y+17, r21	; 0x11
}
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <pid_Controller>:
 *  \param setPoint  Desired value.  
 *  \param processValue  Measured value.  
 *  \param pid_st  PID status struct.  
 */ 
int16_t pid_Controller(int16_t setPoint, int16_t processValue, struct PID_DATA *pid_st)
{
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	eb 01       	movw	r28, r22
     8ce:	fa 01       	movw	r30, r20
	int16_t error, p_term, d_term;
	int32_t i_term, ret, temp;
	
	error = setPoint - processValue;
     8d0:	86 1b       	sub	r24, r22
     8d2:	97 0b       	sbc	r25, r23
	// Calculate Pterm and limit error overflow
	if (error > pid_st->maxError){
     8d4:	24 85       	ldd	r18, Z+12	; 0x0c
     8d6:	35 85       	ldd	r19, Z+13	; 0x0d
     8d8:	28 17       	cp	r18, r24
     8da:	39 07       	cpc	r19, r25
     8dc:	84 f0       	brlt	.+32     	; 0x8fe <pid_Controller+0x3a>
		p_term = MAX_INT;
	}
	else if (error < -pid_st->maxError){
     8de:	31 95       	neg	r19
     8e0:	21 95       	neg	r18
     8e2:	31 09       	sbc	r19, r1
     8e4:	82 17       	cp	r24, r18
     8e6:	93 07       	cpc	r25, r19
     8e8:	6c f0       	brlt	.+26     	; 0x904 <pid_Controller+0x40>
		p_term = -MAX_INT;
	}
	else{
		p_term = pid_st->P_Factor * error;
     8ea:	26 81       	ldd	r18, Z+6	; 0x06
     8ec:	37 81       	ldd	r19, Z+7	; 0x07
     8ee:	82 9f       	mul	r24, r18
     8f0:	80 01       	movw	r16, r0
     8f2:	83 9f       	mul	r24, r19
     8f4:	10 0d       	add	r17, r0
     8f6:	92 9f       	mul	r25, r18
     8f8:	10 0d       	add	r17, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	05 c0       	rjmp	.+10     	; 0x908 <pid_Controller+0x44>
	int32_t i_term, ret, temp;
	
	error = setPoint - processValue;
	// Calculate Pterm and limit error overflow
	if (error > pid_st->maxError){
		p_term = MAX_INT;
     8fe:	0f ef       	ldi	r16, 0xFF	; 255
     900:	1f e7       	ldi	r17, 0x7F	; 127
     902:	02 c0       	rjmp	.+4      	; 0x908 <pid_Controller+0x44>
	}
	else if (error < -pid_st->maxError){
		p_term = -MAX_INT;
     904:	01 e0       	ldi	r16, 0x01	; 1
     906:	10 e8       	ldi	r17, 0x80	; 128
	else{
		p_term = pid_st->P_Factor * error;
	}
	
	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + error;
     908:	aa 27       	eor	r26, r26
     90a:	97 fd       	sbrc	r25, 7
     90c:	a0 95       	com	r26
     90e:	ba 2f       	mov	r27, r26
     910:	42 81       	ldd	r20, Z+2	; 0x02
     912:	53 81       	ldd	r21, Z+3	; 0x03
     914:	64 81       	ldd	r22, Z+4	; 0x04
     916:	75 81       	ldd	r23, Z+5	; 0x05
     918:	9a 01       	movw	r18, r20
     91a:	ab 01       	movw	r20, r22
     91c:	28 0f       	add	r18, r24
     91e:	39 1f       	adc	r19, r25
     920:	4a 1f       	adc	r20, r26
     922:	5b 1f       	adc	r21, r27
	if(temp > pid_st->maxSumError){
     924:	86 85       	ldd	r24, Z+14	; 0x0e
     926:	97 85       	ldd	r25, Z+15	; 0x0f
     928:	a0 89       	ldd	r26, Z+16	; 0x10
     92a:	b1 89       	ldd	r27, Z+17	; 0x11
     92c:	82 17       	cp	r24, r18
     92e:	93 07       	cpc	r25, r19
     930:	a4 07       	cpc	r26, r20
     932:	b5 07       	cpc	r27, r21
     934:	4c f4       	brge	.+18     	; 0x948 <pid_Controller+0x84>
		i_term = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
     936:	82 83       	std	Z+2, r24	; 0x02
     938:	93 83       	std	Z+3, r25	; 0x03
     93a:	a4 83       	std	Z+4, r26	; 0x04
     93c:	b5 83       	std	Z+5, r27	; 0x05
	}
	
	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + error;
	if(temp > pid_st->maxSumError){
		i_term = MAX_I_TERM;
     93e:	6f ef       	ldi	r22, 0xFF	; 255
     940:	7f ef       	ldi	r23, 0xFF	; 255
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	9f e3       	ldi	r25, 0x3F	; 63
     946:	1d c0       	rjmp	.+58     	; 0x982 <pid_Controller+0xbe>
		pid_st->sumError = pid_st->maxSumError;
	}
	else if(temp < -pid_st->maxSumError){
     948:	b0 95       	com	r27
     94a:	a0 95       	com	r26
     94c:	90 95       	com	r25
     94e:	81 95       	neg	r24
     950:	9f 4f       	sbci	r25, 0xFF	; 255
     952:	af 4f       	sbci	r26, 0xFF	; 255
     954:	bf 4f       	sbci	r27, 0xFF	; 255
     956:	28 17       	cp	r18, r24
     958:	39 07       	cpc	r19, r25
     95a:	4a 07       	cpc	r20, r26
     95c:	5b 07       	cpc	r21, r27
     95e:	4c f4       	brge	.+18     	; 0x972 <pid_Controller+0xae>
		i_term = -MAX_I_TERM;
		pid_st->sumError = -pid_st->maxSumError;
     960:	82 83       	std	Z+2, r24	; 0x02
     962:	93 83       	std	Z+3, r25	; 0x03
     964:	a4 83       	std	Z+4, r26	; 0x04
     966:	b5 83       	std	Z+5, r27	; 0x05
	if(temp > pid_st->maxSumError){
		i_term = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
	}
	else if(temp < -pid_st->maxSumError){
		i_term = -MAX_I_TERM;
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 ec       	ldi	r25, 0xC0	; 192
     970:	08 c0       	rjmp	.+16     	; 0x982 <pid_Controller+0xbe>
		pid_st->sumError = -pid_st->maxSumError;
	}
	else{
		pid_st->sumError = temp;
     972:	22 83       	std	Z+2, r18	; 0x02
     974:	33 83       	std	Z+3, r19	; 0x03
     976:	44 83       	std	Z+4, r20	; 0x04
     978:	55 83       	std	Z+5, r21	; 0x05
		i_term = pid_st->I_Factor * pid_st->sumError;
     97a:	a0 85       	ldd	r26, Z+8	; 0x08
     97c:	b1 85       	ldd	r27, Z+9	; 0x09
     97e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__mulshisi3>
	}
	
	// Calculate Dterm
	d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
     982:	40 81       	ld	r20, Z
     984:	51 81       	ldd	r21, Z+1	; 0x01
     986:	4c 1b       	sub	r20, r28
     988:	5d 0b       	sbc	r21, r29
     98a:	22 85       	ldd	r18, Z+10	; 0x0a
     98c:	33 85       	ldd	r19, Z+11	; 0x0b
     98e:	42 9f       	mul	r20, r18
     990:	d0 01       	movw	r26, r0
     992:	43 9f       	mul	r20, r19
     994:	b0 0d       	add	r27, r0
     996:	52 9f       	mul	r21, r18
     998:	b0 0d       	add	r27, r0
     99a:	11 24       	eor	r1, r1
	
	pid_st->lastProcessValue = processValue;
     99c:	d1 83       	std	Z+1, r29	; 0x01
     99e:	c0 83       	st	Z, r28
	ret = (p_term + i_term + d_term) / SCALING_FACTOR;
     9a0:	22 27       	eor	r18, r18
     9a2:	17 fd       	sbrc	r17, 7
     9a4:	20 95       	com	r18
     9a6:	32 2f       	mov	r19, r18
     9a8:	06 0f       	add	r16, r22
     9aa:	17 1f       	adc	r17, r23
     9ac:	28 1f       	adc	r18, r24
     9ae:	39 1f       	adc	r19, r25
     9b0:	cd 01       	movw	r24, r26
     9b2:	aa 27       	eor	r26, r26
     9b4:	97 fd       	sbrc	r25, 7
     9b6:	a0 95       	com	r26
     9b8:	ba 2f       	mov	r27, r26
     9ba:	08 0f       	add	r16, r24
     9bc:	19 1f       	adc	r17, r25
     9be:	2a 1f       	adc	r18, r26
     9c0:	3b 1f       	adc	r19, r27
     9c2:	d9 01       	movw	r26, r18
     9c4:	c8 01       	movw	r24, r16
     9c6:	33 23       	and	r19, r19
     9c8:	24 f4       	brge	.+8      	; 0x9d2 <pid_Controller+0x10e>
     9ca:	81 58       	subi	r24, 0x81	; 129
     9cc:	9f 4f       	sbci	r25, 0xFF	; 255
     9ce:	af 4f       	sbci	r26, 0xFF	; 255
     9d0:	bf 4f       	sbci	r27, 0xFF	; 255
     9d2:	68 94       	set
     9d4:	16 f8       	bld	r1, 6
     9d6:	b5 95       	asr	r27
     9d8:	a7 95       	ror	r26
     9da:	97 95       	ror	r25
     9dc:	87 95       	ror	r24
     9de:	16 94       	lsr	r1
     9e0:	d1 f7       	brne	.-12     	; 0x9d6 <pid_Controller+0x112>
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	20 e8       	ldi	r18, 0x80	; 128
     9e6:	92 07       	cpc	r25, r18
     9e8:	2f ef       	ldi	r18, 0xFF	; 255
     9ea:	a2 07       	cpc	r26, r18
     9ec:	b2 07       	cpc	r27, r18
     9ee:	24 f4       	brge	.+8      	; 0x9f8 <pid_Controller+0x134>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e8       	ldi	r25, 0x80	; 128
     9f4:	af ef       	ldi	r26, 0xFF	; 255
     9f6:	bf ef       	ldi	r27, 0xFF	; 255
     9f8:	81 15       	cp	r24, r1
     9fa:	20 e8       	ldi	r18, 0x80	; 128
     9fc:	92 07       	cpc	r25, r18
     9fe:	a1 05       	cpc	r26, r1
     a00:	b1 05       	cpc	r27, r1
     a02:	24 f0       	brlt	.+8      	; 0xa0c <pid_Controller+0x148>
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	9f e7       	ldi	r25, 0x7F	; 127
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
	else if(ret < -MAX_INT){
		ret = -MAX_INT;
	}
	
	return((int16_t)ret);
}
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	08 95       	ret

00000a16 <push_stack>:

uint8_t stack[max_size];
uint16_t stack_size = 0;

void push_stack(uint8_t val) {
	if (stack_size <= max_size - 1) {
     a16:	20 91 6c 00 	lds	r18, 0x006C
     a1a:	30 91 6d 00 	lds	r19, 0x006D
     a1e:	21 15       	cp	r18, r1
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	39 07       	cpc	r19, r25
     a24:	20 f0       	brcs	.+8      	; 0xa2e <push_stack+0x18>
		stack[stack_size] = val;
		stack_size += 1;
	} else {
		for(uint16_t i = 0; i < stack_size-1; i++) {
     a26:	21 30       	cpi	r18, 0x01	; 1
     a28:	31 05       	cpc	r19, r1
     a2a:	61 f4       	brne	.+24     	; 0xa44 <push_stack+0x2e>
     a2c:	16 c0       	rjmp	.+44     	; 0xa5a <push_stack+0x44>
uint8_t stack[max_size];
uint16_t stack_size = 0;

void push_stack(uint8_t val) {
	if (stack_size <= max_size - 1) {
		stack[stack_size] = val;
     a2e:	f9 01       	movw	r30, r18
     a30:	e1 57       	subi	r30, 0x71	; 113
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	80 83       	st	Z, r24
		stack_size += 1;
     a36:	2f 5f       	subi	r18, 0xFF	; 255
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	30 93 6d 00 	sts	0x006D, r19
     a3e:	20 93 6c 00 	sts	0x006C, r18
     a42:	0b c0       	rjmp	.+22     	; 0xa5a <push_stack+0x44>
     a44:	e0 e9       	ldi	r30, 0x90	; 144
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	af e8       	ldi	r26, 0x8F	; 143
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	21 57       	subi	r18, 0x71	; 113
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
	} else {
		for(uint16_t i = 0; i < stack_size-1; i++) {
			stack[i] = stack[i+1];
     a50:	91 91       	ld	r25, Z+
     a52:	9d 93       	st	X+, r25
void push_stack(uint8_t val) {
	if (stack_size <= max_size - 1) {
		stack[stack_size] = val;
		stack_size += 1;
	} else {
		for(uint16_t i = 0; i < stack_size-1; i++) {
     a54:	e2 17       	cp	r30, r18
     a56:	f3 07       	cpc	r31, r19
     a58:	d9 f7       	brne	.-10     	; 0xa50 <push_stack+0x3a>
			stack[i] = stack[i+1];
		}
	}
	stack[stack_size-1] = val;
     a5a:	e0 91 6c 00 	lds	r30, 0x006C
     a5e:	f0 91 6d 00 	lds	r31, 0x006D
     a62:	e2 57       	subi	r30, 0x72	; 114
     a64:	ff 4f       	sbci	r31, 0xFF	; 255
     a66:	80 83       	st	Z, r24
     a68:	08 95       	ret

00000a6a <get_stack>:
}

uint8_t get_stack(uint16_t idx) {
	if (idx < stack_size) return stack[idx];
     a6a:	20 91 6c 00 	lds	r18, 0x006C
     a6e:	30 91 6d 00 	lds	r19, 0x006D
     a72:	82 17       	cp	r24, r18
     a74:	93 07       	cpc	r25, r19
     a76:	28 f4       	brcc	.+10     	; 0xa82 <get_stack+0x18>
     a78:	fc 01       	movw	r30, r24
     a7a:	e1 57       	subi	r30, 0x71	; 113
     a7c:	ff 4f       	sbci	r31, 0xFF	; 255
     a7e:	80 81       	ld	r24, Z
     a80:	08 95       	ret
	else return 0;
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	08 95       	ret

00000a86 <lsb_first>:

int16_t lsb_first(int16_t sensor_val) {
	int16_t ret;
		
	for(uint8_t i = 0; i < 3; i++) {
		if ( (sensor_val & (1 << i)) != 0) {
     a86:	80 fd       	sbrc	r24, 0
     a88:	0a c0       	rjmp	.+20     	; 0xa9e <lsb_first+0x18>
     a8a:	81 fd       	sbrc	r24, 1
     a8c:	05 c0       	rjmp	.+10     	; 0xa98 <lsb_first+0x12>
     a8e:	82 ff       	sbrs	r24, 2
     a90:	17 c0       	rjmp	.+46     	; 0xac0 <lsb_first+0x3a>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	05 c0       	rjmp	.+10     	; 0xaa2 <lsb_first+0x1c>
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <lsb_first+0x1c>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
			ret = -(3*m - m*i);
     aa2:	03 97       	sbiw	r24, 0x03	; 3
     aa4:	40 91 bf 02 	lds	r20, 0x02BF
     aa8:	48 9f       	mul	r20, r24
     aaa:	90 01       	movw	r18, r0
     aac:	49 9f       	mul	r20, r25
     aae:	30 0d       	add	r19, r0
     ab0:	11 24       	eor	r1, r1
			last_cte = ret;
     ab2:	30 93 6b 00 	sts	0x006B, r19
     ab6:	20 93 6a 00 	sts	0x006A, r18
			return ret;
     aba:	82 2f       	mov	r24, r18
     abc:	93 2f       	mov	r25, r19
     abe:	08 95       	ret
		}
	}
}
     ac0:	08 95       	ret

00000ac2 <msb_first>:

int16_t msb_first(int16_t sensor_val) {
	int16_t ret;
	
	for(uint8_t i = 0; i < 3; i++) {
		if ( (sensor_val & (0b100 >> i)) != 0 ) {
     ac2:	82 fd       	sbrc	r24, 2
     ac4:	0a c0       	rjmp	.+20     	; 0xada <msb_first+0x18>
     ac6:	81 fd       	sbrc	r24, 1
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <msb_first+0x12>
     aca:	80 ff       	sbrs	r24, 0
     acc:	1c c0       	rjmp	.+56     	; 0xb06 <msb_first+0x44>
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	05 c0       	rjmp	.+10     	; 0xade <msb_first+0x1c>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	02 c0       	rjmp	.+4      	; 0xade <msb_first+0x1c>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
			ret = (3*m - m*i);
     ade:	23 e0       	ldi	r18, 0x03	; 3
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	a9 01       	movw	r20, r18
     ae4:	48 1b       	sub	r20, r24
     ae6:	59 0b       	sbc	r21, r25
     ae8:	ca 01       	movw	r24, r20
     aea:	40 91 bf 02 	lds	r20, 0x02BF
     aee:	48 9f       	mul	r20, r24
     af0:	90 01       	movw	r18, r0
     af2:	49 9f       	mul	r20, r25
     af4:	30 0d       	add	r19, r0
     af6:	11 24       	eor	r1, r1
			last_cte = ret; //using last cte in case the car is in the middle of two white lines
     af8:	30 93 6b 00 	sts	0x006B, r19
     afc:	20 93 6a 00 	sts	0x006A, r18
			return ret;
     b00:	82 2f       	mov	r24, r18
     b02:	93 2f       	mov	r25, r19
     b04:	08 95       	ret
		}
	}
}
     b06:	08 95       	ret

00000b08 <calc_cte>:

int16_t calc_cte(uint8_t sensor_val) { //calculate cross track error
	uint8_t t = 0;

	if (sensor_val == 0b00011000 || sensor_val == 0b00010000 || sensor_val == 0b00001000) { //if the car is in the middle of the track return 0
     b08:	80 31       	cpi	r24, 0x10	; 16
     b0a:	21 f0       	breq	.+8      	; 0xb14 <calc_cte+0xc>
     b0c:	98 2f       	mov	r25, r24
     b0e:	9f 7e       	andi	r25, 0xEF	; 239
     b10:	98 30       	cpi	r25, 0x08	; 8
     b12:	39 f4       	brne	.+14     	; 0xb22 <calc_cte+0x1a>
		last_cte = 0;
     b14:	10 92 6b 00 	sts	0x006B, r1
     b18:	10 92 6a 00 	sts	0x006A, r1
		return 0;
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 c0       	rjmp	.+128    	; 0xba2 <calc_cte+0x9a>
	}
	if ( (sensor_val & mask3_0) != 0) t += 1;
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	28 2f       	mov	r18, r24
     b26:	20 7e       	andi	r18, 0xE0	; 224
     b28:	09 f4       	brne	.+2      	; 0xb2c <calc_cte+0x24>
     b2a:	90 e0       	ldi	r25, 0x00	; 0
	if ( (sensor_val & mask0_3) != 0) t += 2;
     b2c:	28 2f       	mov	r18, r24
     b2e:	27 70       	andi	r18, 0x07	; 7
     b30:	09 f0       	breq	.+2      	; 0xb34 <calc_cte+0x2c>
     b32:	9e 5f       	subi	r25, 0xFE	; 254
	
	if (t == 1) { //right
     b34:	91 30       	cpi	r25, 0x01	; 1
     b36:	c1 f4       	brne	.+48     	; 0xb68 <calc_cte+0x60>
		if (last_cte >= 0) return msb_first(sensor_val >> 5);
     b38:	20 91 6a 00 	lds	r18, 0x006A
     b3c:	30 91 6b 00 	lds	r19, 0x006B
     b40:	33 23       	and	r19, r19
     b42:	44 f0       	brlt	.+16     	; 0xb54 <calc_cte+0x4c>
     b44:	82 95       	swap	r24
     b46:	86 95       	lsr	r24
     b48:	87 70       	andi	r24, 0x07	; 7
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 61 05 	call	0xac2	; 0xac2 <msb_first>
     b50:	9c 01       	movw	r18, r24
     b52:	27 c0       	rjmp	.+78     	; 0xba2 <calc_cte+0x9a>
		else return lsb_first(sensor_val >> 5) - 40; /* change from 50 -> 40*/
     b54:	82 95       	swap	r24
     b56:	86 95       	lsr	r24
     b58:	87 70       	andi	r24, 0x07	; 7
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 43 05 	call	0xa86	; 0xa86 <lsb_first>
     b60:	9c 01       	movw	r18, r24
     b62:	28 52       	subi	r18, 0x28	; 40
     b64:	31 09       	sbc	r19, r1
     b66:	1d c0       	rjmp	.+58     	; 0xba2 <calc_cte+0x9a>
	}
	
	if (t == 2) { //left
     b68:	92 30       	cpi	r25, 0x02	; 2
     b6a:	99 f4       	brne	.+38     	; 0xb92 <calc_cte+0x8a>
		if (last_cte <= 0) return lsb_first(sensor_val);
     b6c:	20 91 6a 00 	lds	r18, 0x006A
     b70:	30 91 6b 00 	lds	r19, 0x006B
     b74:	12 16       	cp	r1, r18
     b76:	13 06       	cpc	r1, r19
     b78:	2c f0       	brlt	.+10     	; 0xb84 <calc_cte+0x7c>
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 43 05 	call	0xa86	; 0xa86 <lsb_first>
     b80:	9c 01       	movw	r18, r24
     b82:	0f c0       	rjmp	.+30     	; 0xba2 <calc_cte+0x9a>
		else return msb_first(sensor_val) + 40; /* change from 50 -> 40*/
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 61 05 	call	0xac2	; 0xac2 <msb_first>
     b8a:	9c 01       	movw	r18, r24
     b8c:	28 5d       	subi	r18, 0xD8	; 216
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	08 c0       	rjmp	.+16     	; 0xba2 <calc_cte+0x9a>
	}
	
	if (t == 3) return last_cte;
     b92:	93 30       	cpi	r25, 0x03	; 3
     b94:	29 f4       	brne	.+10     	; 0xba0 <calc_cte+0x98>
     b96:	20 91 6a 00 	lds	r18, 0x006A
     b9a:	30 91 6b 00 	lds	r19, 0x006B
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <calc_cte+0x9a>
     ba0:	08 95       	ret
     ba2:	82 2f       	mov	r24, r18
     ba4:	93 2f       	mov	r25, r19
}
     ba6:	08 95       	ret

00000ba8 <check_crossline>:

uint8_t check_crossline() {
	if(( read_sensor() == 0b11111111) || ((read_sensor() & 0b01111110) == 0b01111110)) return 1;
     ba8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     bac:	8f 3f       	cpi	r24, 0xFF	; 255
     bae:	49 f0       	breq	.+18     	; 0xbc2 <check_crossline+0x1a>
     bb0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     bb4:	98 2f       	mov	r25, r24
     bb6:	9e 77       	andi	r25, 0x7E	; 126
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	9e 37       	cpi	r25, 0x7E	; 126
     bbc:	19 f0       	breq	.+6      	; 0xbc4 <check_crossline+0x1c>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	08 95       	ret
     bc2:	81 e0       	ldi	r24, 0x01	; 1
	return 0;
}
     bc4:	08 95       	ret

00000bc6 <back_trace>:
void isr_0() {
	print();
}

void back_trace() {
	uint16_t idx = stack_size - 1;
     bc6:	c0 91 6c 00 	lds	r28, 0x006C
     bca:	d0 91 6d 00 	lds	r29, 0x006D
     bce:	21 97       	sbiw	r28, 0x01	; 1
	isr_ptr = &dummy;
     bd0:	84 e9       	ldi	r24, 0x94	; 148
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	90 93 61 00 	sts	0x0061, r25
     bd8:	80 93 60 00 	sts	0x0060, r24
	while (1) {
		if (get_button(BTN1)) {
			if (stack_size > 0) idx -= 1;
			else idx = stack_size - 1;
     bdc:	ee 24       	eor	r14, r14
     bde:	ea 94       	dec	r14
     be0:	ff 24       	eor	r15, r15
     be2:	fa 94       	dec	r15
		}
		if (get_button(BTN2)) {
			if (stack_size < stack_size-1) idx += 1;
			else idx = 0;
     be4:	00 e0       	ldi	r16, 0x00	; 0
     be6:	10 e0       	ldi	r17, 0x00	; 0

void back_trace() {
	uint16_t idx = stack_size - 1;
	isr_ptr = &dummy;
	while (1) {
		if (get_button(BTN1)) {
     be8:	84 e0       	ldi	r24, 0x04	; 4
     bea:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     bee:	88 23       	and	r24, r24
     bf0:	51 f0       	breq	.+20     	; 0xc06 <back_trace+0x40>
			if (stack_size > 0) idx -= 1;
     bf2:	80 91 6c 00 	lds	r24, 0x006C
     bf6:	90 91 6d 00 	lds	r25, 0x006D
     bfa:	89 2b       	or	r24, r25
     bfc:	11 f0       	breq	.+4      	; 0xc02 <back_trace+0x3c>
     bfe:	21 97       	sbiw	r28, 0x01	; 1
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <back_trace+0x40>
			else idx = stack_size - 1;
     c02:	ce 2d       	mov	r28, r14
     c04:	df 2d       	mov	r29, r15
		}
		if (get_button(BTN2)) {
     c06:	88 e0       	ldi	r24, 0x08	; 8
     c08:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     c0c:	88 23       	and	r24, r24
     c0e:	71 f0       	breq	.+28     	; 0xc2c <back_trace+0x66>
			if (stack_size < stack_size-1) idx += 1;
     c10:	80 91 6c 00 	lds	r24, 0x006C
     c14:	90 91 6d 00 	lds	r25, 0x006D
     c18:	9c 01       	movw	r18, r24
     c1a:	21 50       	subi	r18, 0x01	; 1
     c1c:	31 09       	sbc	r19, r1
     c1e:	82 17       	cp	r24, r18
     c20:	93 07       	cpc	r25, r19
     c22:	10 f4       	brcc	.+4      	; 0xc28 <back_trace+0x62>
     c24:	21 96       	adiw	r28, 0x01	; 1
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <back_trace+0x66>
			else idx = 0;
     c28:	c0 2f       	mov	r28, r16
     c2a:	d1 2f       	mov	r29, r17
		}
		set_led_data(get_stack(idx));
     c2c:	ce 01       	movw	r24, r28
     c2e:	0e 94 35 05 	call	0xa6a	; 0xa6a <get_stack>
     c32:	68 2f       	mov	r22, r24
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
	}
     c3e:	d4 cf       	rjmp	.-88     	; 0xbe8 <back_trace+0x22>

00000c40 <isr_1>:
}

uint8_t my_timer = 0;

void isr_1() {
	my_timer += 1;
     c40:	80 91 68 00 	lds	r24, 0x0068
     c44:	8f 5f       	subi	r24, 0xFF	; 255
     c46:	80 93 68 00 	sts	0x0068, r24
	if (my_timer >= 100) {
     c4a:	84 36       	cpi	r24, 0x64	; 100
     c4c:	c0 f0       	brcs	.+48     	; 0xc7e <isr_1+0x3e>
		uint8_t t = read_sensor();
     c4e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
		if (t == 0 || t == 0xff) off_lane += 1;
     c52:	81 50       	subi	r24, 0x01	; 1
     c54:	8e 3f       	cpi	r24, 0xFE	; 254
     c56:	28 f0       	brcs	.+10     	; 0xc62 <isr_1+0x22>
     c58:	80 91 69 00 	lds	r24, 0x0069
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	80 93 69 00 	sts	0x0069, r24
		if (off_lane >= 20 ) {
     c62:	80 91 69 00 	lds	r24, 0x0069
     c66:	84 31       	cpi	r24, 0x14	; 20
     c68:	40 f0       	brcs	.+16     	; 0xc7a <isr_1+0x3a>
			off_lane = 0;
     c6a:	10 92 69 00 	sts	0x0069, r1
			fwd(0, 0);
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
			back_trace();
     c76:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <back_trace>
		}
		my_timer = 0;
     c7a:	10 92 68 00 	sts	0x0068, r1
	}
	print();
     c7e:	0e 94 22 02 	call	0x444	; 0x444 <print>
     c82:	08 95       	ret

00000c84 <old_school_main>:
uint16_t cnt1 = 0, pulse_v = 0, pulse_pid = 0;

void old_school_main() {
	uint8_t pattern;
	off_lane = 0;
     c84:	10 92 69 00 	sts	0x0069, r1
	my_timer = 0;
     c88:	10 92 68 00 	sts	0x0068, r1
	while(1) {
		if (get_button(BTN1)) break;
     c8c:	84 e0       	ldi	r24, 0x04	; 4
     c8e:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
     c92:	88 23       	and	r24, r24
     c94:	89 f0       	breq	.+34     	; 0xcb8 <old_school_main+0x34>
     c96:	c1 e0       	ldi	r28, 0x01	; 1
		while(1) {
			
			switch(pattern) {
				case 1:
					if(check_crossline()) { //90 degree turn
						pattern = 21;
     c98:	d5 e1       	ldi	r29, 0x15	; 21
		pattern = 1;
		while(1) {
			
			switch(pattern) {
				case 1:
					if(check_crossline()) { //90 degree turn
     c9a:	11 e0       	ldi	r17, 0x01	; 1
						if ( (pulse_v > 100 ) && (((read_sensor() & 0b11100000) == 0b11100000) || ((read_sensor() & 0b11110000) == 0b11110000))) {
							pattern = 23 ;
							break;
						}
						if (cnt1 > 50 || pulse_v > 10) {
							pattern = 27;
     c9c:	0f 2e       	mov	r0, r31
     c9e:	fb e1       	ldi	r31, 0x1B	; 27
     ca0:	df 2e       	mov	r13, r31
     ca2:	f0 2d       	mov	r31, r0
					
					case 25:
					//set_encoder(18);
					fwd(50,50);
						if ( (pulse_v > 100 ) && (((read_sensor() & 0b11100000) == 0b11100000) || ((read_sensor() & 0b11110000) == 0b11110000))) {
							pattern = 23 ;
     ca4:	07 e1       	ldi	r16, 0x17	; 23
					if ( (pulse_v > 100) && (((read_sensor() & 0b00000111) == 0b00000111) || ((read_sensor() & 0b00001111) == 0b00001111))) {
						pattern = 23 ;
						break;
					}
					if (cnt1 > 50 || pulse_v > 10) {
						pattern = 26;
     ca6:	0f 2e       	mov	r0, r31
     ca8:	fa e1       	ldi	r31, 0x1A	; 26
     caa:	ef 2e       	mov	r14, r31
     cac:	f0 2d       	mov	r31, r0
					#ifdef DEBUG
					push_stack(21);
					#endif
					servo(0);
					fwd(60 ,60);
					pattern = 22;
     cae:	0f 2e       	mov	r0, r31
     cb0:	f6 e1       	ldi	r31, 0x16	; 22
     cb2:	ff 2e       	mov	r15, r31
     cb4:	f0 2d       	mov	r31, r0
     cb6:	28 c0       	rjmp	.+80     	; 0xd08 <old_school_main+0x84>
	uint8_t pattern;
	off_lane = 0;
	my_timer = 0;
	while(1) {
		if (get_button(BTN1)) break;
		read_sensor();
     cb8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
	}
     cbc:	e7 cf       	rjmp	.-50     	; 0xc8c <old_school_main+0x8>
		pattern = 1;
		while(1) {
			
			switch(pattern) {
				case 1:
					if(check_crossline()) { //90 degree turn
     cbe:	c1 2f       	mov	r28, r17
     cc0:	23 c0       	rjmp	.+70     	; 0xd08 <old_school_main+0x84>
						pattern = 21;
     cc2:	cd 2f       	mov	r28, r29
     cc4:	21 c0       	rjmp	.+66     	; 0xd08 <old_school_main+0x84>
				
				case 24:
					//set_encoder(18);
					fwd(50, 50);
					if ( (pulse_v > 100) && (((read_sensor() & 0b00000111) == 0b00000111) || ((read_sensor() & 0b00001111) == 0b00001111))) {
						pattern = 23 ;
     cc6:	c0 2f       	mov	r28, r16
     cc8:	1f c0       	rjmp	.+62     	; 0xd08 <old_school_main+0x84>
     cca:	c0 2f       	mov	r28, r16
     ccc:	1d c0       	rjmp	.+58     	; 0xd08 <old_school_main+0x84>
						break;
					}
					if (cnt1 > 50 || pulse_v > 10) {
						pattern = 26;
     cce:	ce 2d       	mov	r28, r14
     cd0:	1b c0       	rjmp	.+54     	; 0xd08 <old_school_main+0x84>
     cd2:	ce 2d       	mov	r28, r14
     cd4:	19 c0       	rjmp	.+50     	; 0xd08 <old_school_main+0x84>
					
					case 25:
					//set_encoder(18);
					fwd(50,50);
						if ( (pulse_v > 100 ) && (((read_sensor() & 0b11100000) == 0b11100000) || ((read_sensor() & 0b11110000) == 0b11110000))) {
							pattern = 23 ;
     cd6:	c0 2f       	mov	r28, r16
     cd8:	17 c0       	rjmp	.+46     	; 0xd08 <old_school_main+0x84>
     cda:	c0 2f       	mov	r28, r16
     cdc:	15 c0       	rjmp	.+42     	; 0xd08 <old_school_main+0x84>
							break;
						}
						if (cnt1 > 50 || pulse_v > 10) {
							pattern = 27;
     cde:	cd 2d       	mov	r28, r13
     ce0:	13 c0       	rjmp	.+38     	; 0xd08 <old_school_main+0x84>
     ce2:	cd 2d       	mov	r28, r13
     ce4:	11 c0       	rjmp	.+34     	; 0xd08 <old_school_main+0x84>
				break;

				case 51:
					//set_encoder(20);
					if ((read_sensor(0b11100000) == 0b11100000) || (read_sensor(0b11110000) == 0b11110000)) {
						pattern = 21 ;
     ce6:	cd 2f       	mov	r28, r29
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <old_school_main+0x84>
     cea:	cd 2f       	mov	r28, r29
     cec:	0d c0       	rjmp	.+26     	; 0xd08 <old_school_main+0x84>
					if( cnt1 > 100 || pulse_v>10) {
						pattern = 53;
						cnt1 = 0;
					}
					if (((read_sensor() & 0b11100000) == 0b11100000) || ((read_sensor() & 0b11110000) == 0b11110000)) {
						pattern = 21 ;
     cee:	cd 2f       	mov	r28, r29
     cf0:	0b c0       	rjmp	.+22     	; 0xd08 <old_school_main+0x84>
     cf2:	cd 2f       	mov	r28, r29
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <old_school_main+0x84>
				break;

				case 61:
					//set_encoder(20);
					if ( ((read_sensor() & 0b00000111) == 0b00000111) || ((read_sensor() & 0b00001111) == 0b00001111) ) {
						pattern = 21 ;
     cf6:	cd 2f       	mov	r28, r29
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <old_school_main+0x84>
     cfa:	cd 2f       	mov	r28, r29
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <old_school_main+0x84>
					if( cnt1 > 100 || pulse_v > 10) {
						pattern = 63;
						cnt1 = 0;
					}
					if (((read_sensor() & 0b00000111) == 0b00000111) || ((read_sensor() & 0b00001111) == 0b00001111)) {
						pattern = 21 ;
     cfe:	cd 2f       	mov	r28, r29
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <old_school_main+0x84>
     d02:	cd 2f       	mov	r28, r29
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <old_school_main+0x84>
				
				case 73:
					servo(0);
					fwd(100, 100);
					if (read_sensor() > 0) {
						pattern = 1;
     d06:	c1 2f       	mov	r28, r17
	
	while(1) {
		pattern = 1;
		while(1) {
			
			switch(pattern) {
     d08:	4c 2f       	mov	r20, r28
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	fa 01       	movw	r30, r20
     d0e:	3b 97       	sbiw	r30, 0x0b	; 11
     d10:	ef 33       	cpi	r30, 0x3F	; 63
     d12:	f1 05       	cpc	r31, r1
     d14:	20 f4       	brcc	.+8      	; 0xd1e <old_school_main+0x9a>
     d16:	e6 5d       	subi	r30, 0xD6	; 214
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__tablejump2__>
				case 1:
					if(check_crossline()) { //90 degree turn
     d1e:	0e 94 d4 05 	call	0xba8	; 0xba8 <check_crossline>
     d22:	81 11       	cpse	r24, r1
     d24:	ce cf       	rjmp	.-100    	; 0xcc2 <old_school_main+0x3e>
     d26:	cb cf       	rjmp	.-106    	; 0xcbe <old_school_main+0x3a>
						break;
					}
				break;
				
				case 11:
					set_led_data(11);
     d28:	6b e0       	ldi	r22, 0x0B	; 11
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					#ifdef DEBUG
					push_stack(11);
     d34:	8b e0       	ldi	r24, 0x0B	; 11
     d36:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					//set_encoder(23);
					switch(read_sensor() & 0b11001100) {
     d3a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     d3e:	8c 7c       	andi	r24, 0xCC	; 204
     d40:	8c 30       	cpi	r24, 0x0C	; 12
     d42:	71 f1       	breq	.+92     	; 0xda0 <old_school_main+0x11c>
     d44:	28 f4       	brcc	.+10     	; 0xd50 <old_school_main+0xcc>
     d46:	88 23       	and	r24, r24
     d48:	c9 f0       	breq	.+50     	; 0xd7c <old_school_main+0xf8>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	01 f1       	breq	.+64     	; 0xd8e <old_school_main+0x10a>
     d4e:	dc cf       	rjmp	.-72     	; 0xd08 <old_school_main+0x84>
     d50:	80 38       	cpi	r24, 0x80	; 128
     d52:	59 f0       	breq	.+22     	; 0xd6a <old_school_main+0xe6>
     d54:	80 3c       	cpi	r24, 0xC0	; 192
     d56:	c1 f6       	brne	.-80     	; 0xd08 <old_school_main+0x84>
						case 0b11000000:
							fwd(80, -10);
     d58:	66 ef       	ldi	r22, 0xF6	; 246
     d5a:	80 e5       	ldi	r24, 0x50	; 80
     d5c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(70);
     d60:	86 e4       	ldi	r24, 0x46	; 70
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     d68:	cf cf       	rjmp	.-98     	; 0xd08 <old_school_main+0x84>
					
						case 0b10000000:
							fwd(80, 5);
     d6a:	65 e0       	ldi	r22, 0x05	; 5
     d6c:	80 e5       	ldi	r24, 0x50	; 80
     d6e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(47);
     d72:	8f e2       	ldi	r24, 0x2F	; 47
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     d7a:	c6 cf       	rjmp	.-116    	; 0xd08 <old_school_main+0x84>
					
						case 0b00000000:
							fwd(80, 10);
     d7c:	6a e0       	ldi	r22, 0x0A	; 10
     d7e:	80 e5       	ldi	r24, 0x50	; 80
     d80:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(45);
     d84:	8d e2       	ldi	r24, 0x2D	; 45
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     d8c:	bd cf       	rjmp	.-134    	; 0xd08 <old_school_main+0x84>
					
						case 0b00000100:
							fwd(80, 15);
     d8e:	6f e0       	ldi	r22, 0x0F	; 15
     d90:	80 e5       	ldi	r24, 0x50	; 80
     d92:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(34);
     d96:	82 e2       	ldi	r24, 0x22	; 34
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     d9e:	b4 cf       	rjmp	.-152    	; 0xd08 <old_school_main+0x84>
					
						case 0b00001100:
							fwd(80,20);
     da0:	64 e1       	ldi	r22, 0x14	; 20
     da2:	80 e5       	ldi	r24, 0x50	; 80
     da4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(26);
     da8:	8a e1       	ldi	r24, 0x1A	; 26
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
							pattern = 1;
     db0:	c1 2f       	mov	r28, r17
						break;
     db2:	aa cf       	rjmp	.-172    	; 0xd08 <old_school_main+0x84>
						break;
					}
				break;
				
				case 12:
					set_led_data(12);
     db4:	6c e0       	ldi	r22, 0x0C	; 12
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					//set_encoder(23);
					#ifdef DEBUG
					push_stack(12);
     dc0:	8c e0       	ldi	r24, 0x0C	; 12
     dc2:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					switch(read_sensor() & 0b00110011) {
     dc6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     dca:	83 73       	andi	r24, 0x33	; 51
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	59 f0       	breq	.+22     	; 0xde6 <old_school_main+0x162>
     dd0:	28 f4       	brcc	.+10     	; 0xddc <old_school_main+0x158>
     dd2:	88 23       	and	r24, r24
     dd4:	d1 f0       	breq	.+52     	; 0xe0a <old_school_main+0x186>
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	79 f0       	breq	.+30     	; 0xdf8 <old_school_main+0x174>
     dda:	96 cf       	rjmp	.-212    	; 0xd08 <old_school_main+0x84>
     ddc:	80 32       	cpi	r24, 0x20	; 32
     dde:	f1 f0       	breq	.+60     	; 0xe1c <old_school_main+0x198>
     de0:	80 33       	cpi	r24, 0x30	; 48
     de2:	29 f1       	breq	.+74     	; 0xe2e <old_school_main+0x1aa>
     de4:	91 cf       	rjmp	.-222    	; 0xd08 <old_school_main+0x84>
						case 0b00000011:
							fwd(-10, 80);
     de6:	60 e5       	ldi	r22, 0x50	; 80
     de8:	86 ef       	ldi	r24, 0xF6	; 246
     dea:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-100);
     dee:	8c e9       	ldi	r24, 0x9C	; 156
     df0:	9f ef       	ldi	r25, 0xFF	; 255
     df2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     df6:	88 cf       	rjmp	.-240    	; 0xd08 <old_school_main+0x84>
					
						case 0b00000001:
							fwd(5, 80);
     df8:	60 e5       	ldi	r22, 0x50	; 80
     dfa:	85 e0       	ldi	r24, 0x05	; 5
     dfc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-47);
     e00:	81 ed       	ldi	r24, 0xD1	; 209
     e02:	9f ef       	ldi	r25, 0xFF	; 255
     e04:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     e08:	7f cf       	rjmp	.-258    	; 0xd08 <old_school_main+0x84>
					
						case 0b00000000:
							fwd(10, 80);
     e0a:	60 e5       	ldi	r22, 0x50	; 80
     e0c:	8a e0       	ldi	r24, 0x0A	; 10
     e0e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-45);
     e12:	83 ed       	ldi	r24, 0xD3	; 211
     e14:	9f ef       	ldi	r25, 0xFF	; 255
     e16:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     e1a:	76 cf       	rjmp	.-276    	; 0xd08 <old_school_main+0x84>
					
						case 0b00100000:
							fwd(15, 80);
     e1c:	60 e5       	ldi	r22, 0x50	; 80
     e1e:	8f e0       	ldi	r24, 0x0F	; 15
     e20:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-34);
     e24:	8e ed       	ldi	r24, 0xDE	; 222
     e26:	9f ef       	ldi	r25, 0xFF	; 255
     e28:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     e2c:	6d cf       	rjmp	.-294    	; 0xd08 <old_school_main+0x84>
					
						case 0b00110000:
							fwd(20, 80);
     e2e:	60 e5       	ldi	r22, 0x50	; 80
     e30:	84 e1       	ldi	r24, 0x14	; 20
     e32:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-26);
     e36:	86 ee       	ldi	r24, 0xE6	; 230
     e38:	9f ef       	ldi	r25, 0xFF	; 255
     e3a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
							pattern = 1;
     e3e:	c1 2f       	mov	r28, r17
						break;
     e40:	63 cf       	rjmp	.-314    	; 0xd08 <old_school_main+0x84>
						break;
					}
				break;
				
				case 21:
					set_led_data(21);
     e42:	65 e1       	ldi	r22, 0x15	; 21
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					//set_encoder(20);
					#ifdef DEBUG
					push_stack(21);
     e4e:	8d 2f       	mov	r24, r29
     e50:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					servo(0);
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
					fwd(60 ,60);
     e5c:	6c e3       	ldi	r22, 0x3C	; 60
     e5e:	8c e3       	ldi	r24, 0x3C	; 60
     e60:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					pattern = 22;
					cnt1 = 0;
     e64:	10 92 67 00 	sts	0x0067, r1
     e68:	10 92 66 00 	sts	0x0066, r1
					pulse_v = 0;
     e6c:	10 92 65 00 	sts	0x0065, r1
     e70:	10 92 64 00 	sts	0x0064, r1
					#ifdef DEBUG
					push_stack(21);
					#endif
					servo(0);
					fwd(60 ,60);
					pattern = 22;
     e74:	cf 2d       	mov	r28, r15
					cnt1 = 0;
					pulse_v = 0;
				break;
     e76:	48 cf       	rjmp	.-368    	; 0xd08 <old_school_main+0x84>

				case 22:
					set_led_data(22);
     e78:	66 e1       	ldi	r22, 0x16	; 22
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					//set_encoder(20);
					#ifdef DEBUG
					push_stack(2);
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					servo(0);
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
					fwd(60 ,60);
     e92:	6c e3       	ldi	r22, 0x3C	; 60
     e94:	8c e3       	ldi	r24, 0x3C	; 60
     e96:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					if( cnt1 > 70 || pulse_v > 10 ) {
     e9a:	80 91 66 00 	lds	r24, 0x0066
     e9e:	90 91 67 00 	lds	r25, 0x0067
     ea2:	87 34       	cpi	r24, 0x47	; 71
     ea4:	91 05       	cpc	r25, r1
     ea6:	38 f4       	brcc	.+14     	; 0xeb6 <old_school_main+0x232>
     ea8:	80 91 64 00 	lds	r24, 0x0064
     eac:	90 91 65 00 	lds	r25, 0x0065
     eb0:	0b 97       	sbiw	r24, 0x0b	; 11
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <old_school_main+0x232>
     eb4:	29 cf       	rjmp	.-430    	; 0xd08 <old_school_main+0x84>
						pattern = 23;
						cnt1 = 0;
     eb6:	10 92 67 00 	sts	0x0067, r1
     eba:	10 92 66 00 	sts	0x0066, r1
						pulse_v = 0;
     ebe:	10 92 65 00 	sts	0x0065, r1
     ec2:	10 92 64 00 	sts	0x0064, r1
					push_stack(2);
					#endif
					servo(0);
					fwd(60 ,60);
					if( cnt1 > 70 || pulse_v > 10 ) {
						pattern = 23;
     ec6:	c0 2f       	mov	r28, r16
     ec8:	1f cf       	rjmp	.-450    	; 0xd08 <old_school_main+0x84>
						pulse_v = 0;
					}
				break;
				
				case 23:
					set_led_data(23);
     eca:	67 e1       	ldi	r22, 0x17	; 23
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					#ifdef DEBUG
					push_stack(23);
     ed6:	80 2f       	mov	r24, r16
     ed8:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					if( (pulse_v > 100) && ((read_sensor() == 0b11111000)  || (read_sensor()==0b11110000) || (read_sensor()==0b11100000) || (read_sensor() == 0b11111100))) {
     edc:	80 91 64 00 	lds	r24, 0x0064
     ee0:	90 91 65 00 	lds	r25, 0x0065
     ee4:	85 36       	cpi	r24, 0x65	; 101
     ee6:	91 05       	cpc	r25, r1
     ee8:	98 f1       	brcs	.+102    	; 0xf50 <old_school_main+0x2cc>
     eea:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     eee:	88 3f       	cpi	r24, 0xF8	; 248
     ef0:	61 f0       	breq	.+24     	; 0xf0a <old_school_main+0x286>
     ef2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     ef6:	80 3f       	cpi	r24, 0xF0	; 240
     ef8:	41 f0       	breq	.+16     	; 0xf0a <old_school_main+0x286>
     efa:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     efe:	80 3e       	cpi	r24, 0xE0	; 224
     f00:	21 f0       	breq	.+8      	; 0xf0a <old_school_main+0x286>
     f02:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     f06:	8c 3f       	cpi	r24, 0xFC	; 252
     f08:	31 f4       	brne	.+12     	; 0xf16 <old_school_main+0x292>
						pattern = 24;
						cnt1 = 0;
     f0a:	10 92 67 00 	sts	0x0067, r1
     f0e:	10 92 66 00 	sts	0x0066, r1
					set_led_data(23);
					#ifdef DEBUG
					push_stack(23);
					#endif
					if( (pulse_v > 100) && ((read_sensor() == 0b11111000)  || (read_sensor()==0b11110000) || (read_sensor()==0b11100000) || (read_sensor() == 0b11111100))) {
						pattern = 24;
     f12:	c8 e1       	ldi	r28, 0x18	; 24
						cnt1 = 0;
						break;
     f14:	f9 ce       	rjmp	.-526    	; 0xd08 <old_school_main+0x84>
					}
				
					if(  (pulse_v > 100) &&   ((read_sensor() == 0b00011111 ) || (read_sensor() == 0b00000111) || (read_sensor() == 0b00001111) || (read_sensor() == 0b00111111))) {
     f16:	80 91 64 00 	lds	r24, 0x0064
     f1a:	90 91 65 00 	lds	r25, 0x0065
     f1e:	85 36       	cpi	r24, 0x65	; 101
     f20:	91 05       	cpc	r25, r1
     f22:	b0 f0       	brcs	.+44     	; 0xf50 <old_school_main+0x2cc>
     f24:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     f28:	8f 31       	cpi	r24, 0x1F	; 31
     f2a:	61 f0       	breq	.+24     	; 0xf44 <old_school_main+0x2c0>
     f2c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     f30:	87 30       	cpi	r24, 0x07	; 7
     f32:	41 f0       	breq	.+16     	; 0xf44 <old_school_main+0x2c0>
     f34:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     f38:	8f 30       	cpi	r24, 0x0F	; 15
     f3a:	21 f0       	breq	.+8      	; 0xf44 <old_school_main+0x2c0>
     f3c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     f40:	8f 33       	cpi	r24, 0x3F	; 63
     f42:	31 f4       	brne	.+12     	; 0xf50 <old_school_main+0x2cc>
						pattern = 25;
						cnt1 = 0;
     f44:	10 92 67 00 	sts	0x0067, r1
     f48:	10 92 66 00 	sts	0x0066, r1
						cnt1 = 0;
						break;
					}
				
					if(  (pulse_v > 100) &&   ((read_sensor() == 0b00011111 ) || (read_sensor() == 0b00000111) || (read_sensor() == 0b00001111) || (read_sensor() == 0b00111111))) {
						pattern = 25;
     f4c:	c9 e1       	ldi	r28, 0x19	; 25
						cnt1 = 0;
						break;
     f4e:	dc ce       	rjmp	.-584    	; 0xd08 <old_school_main+0x84>
					}
				
					switch(read_sensor() & 0b01111110) {
     f50:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
     f54:	8e 77       	andi	r24, 0x7E	; 126
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	fc 01       	movw	r30, r24
     f5a:	32 97       	sbiw	r30, 0x02	; 2
     f5c:	ef 35       	cpi	r30, 0x5F	; 95
     f5e:	f1 05       	cpc	r31, r1
     f60:	08 f0       	brcs	.+2      	; 0xf64 <old_school_main+0x2e0>
     f62:	d2 ce       	rjmp	.-604    	; 0xd08 <old_school_main+0x84>
     f64:	e7 59       	subi	r30, 0x97	; 151
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__tablejump2__>
						case 0b00011000:
							servo(0);
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
							fwd(20, 20);
     f74:	64 e1       	ldi	r22, 0x14	; 20
     f76:	84 e1       	ldi	r24, 0x14	; 20
     f78:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
						break;
     f7c:	c5 ce       	rjmp	.-630    	; 0xd08 <old_school_main+0x84>
					
						case 0b00001000:
							fwd(23, 3);
     f7e:	63 e0       	ldi	r22, 0x03	; 3
     f80:	80 2f       	mov	r24, r16
     f82:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(8);
     f86:	88 e0       	ldi	r24, 0x08	; 8
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     f8e:	bc ce       	rjmp	.-648    	; 0xd08 <old_school_main+0x84>
					
						case 0b00001100:
							fwd(23,-3);
     f90:	6d ef       	ldi	r22, 0xFD	; 253
     f92:	80 2f       	mov	r24, r16
     f94:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(10);
     f98:	8a e0       	ldi	r24, 0x0A	; 10
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     fa0:	b3 ce       	rjmp	.-666    	; 0xd08 <old_school_main+0x84>
					
						case 0b00000100:
							fwd(23,-8);
     fa2:	68 ef       	ldi	r22, 0xF8	; 248
     fa4:	80 2f       	mov	r24, r16
     fa6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(13);
     faa:	8d e0       	ldi	r24, 0x0D	; 13
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     fb2:	aa ce       	rjmp	.-684    	; 0xd08 <old_school_main+0x84>
					
						case 0b00000110:
						case 0b00000010:
							fwd(23,-13);
     fb4:	63 ef       	ldi	r22, 0xF3	; 243
     fb6:	80 2f       	mov	r24, r16
     fb8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(18);
     fbc:	82 e1       	ldi	r24, 0x12	; 18
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     fc4:	a1 ce       	rjmp	.-702    	; 0xd08 <old_school_main+0x84>
					
						case 0b00010000:
							fwd(5,20);
     fc6:	64 e1       	ldi	r22, 0x14	; 20
     fc8:	85 e0       	ldi	r24, 0x05	; 5
     fca:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-8);
     fce:	88 ef       	ldi	r24, 0xF8	; 248
     fd0:	9f ef       	ldi	r25, 0xFF	; 255
     fd2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     fd6:	98 ce       	rjmp	.-720    	; 0xd08 <old_school_main+0x84>
					
						case 0b00110000:
							fwd(0, 20);
     fd8:	64 e1       	ldi	r22, 0x14	; 20
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-10);
     fe0:	86 ef       	ldi	r24, 0xF6	; 246
     fe2:	9f ef       	ldi	r25, 0xFF	; 255
     fe4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     fe8:	8f ce       	rjmp	.-738    	; 0xd08 <old_school_main+0x84>
					
						case 0b00100000:
							fwd(-5,20);
     fea:	64 e1       	ldi	r22, 0x14	; 20
     fec:	8b ef       	ldi	r24, 0xFB	; 251
     fee:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-13);
     ff2:	83 ef       	ldi	r24, 0xF3	; 243
     ff4:	9f ef       	ldi	r25, 0xFF	; 255
     ff6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
     ffa:	86 ce       	rjmp	.-756    	; 0xd08 <old_school_main+0x84>
					
						case 0b01100000:
						case 0b01000000:
							fwd(10,20);
     ffc:	64 e1       	ldi	r22, 0x14	; 20
     ffe:	8a e0       	ldi	r24, 0x0A	; 10
    1000:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-18);
    1004:	8e ee       	ldi	r24, 0xEE	; 238
    1006:	9f ef       	ldi	r25, 0xFF	; 255
    1008:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
    100c:	7d ce       	rjmp	.-774    	; 0xd08 <old_school_main+0x84>
					}
				break;
				
				case 24:
					//set_encoder(18);
					fwd(50, 50);
    100e:	62 e3       	ldi	r22, 0x32	; 50
    1010:	82 e3       	ldi	r24, 0x32	; 50
    1012:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					if ( (pulse_v > 100) && (((read_sensor() & 0b00000111) == 0b00000111) || ((read_sensor() & 0b00001111) == 0b00001111))) {
    1016:	80 91 64 00 	lds	r24, 0x0064
    101a:	90 91 65 00 	lds	r25, 0x0065
    101e:	85 36       	cpi	r24, 0x65	; 101
    1020:	91 05       	cpc	r25, r1
    1022:	60 f0       	brcs	.+24     	; 0x103c <old_school_main+0x3b8>
    1024:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    1028:	87 70       	andi	r24, 0x07	; 7
    102a:	87 30       	cpi	r24, 0x07	; 7
    102c:	09 f4       	brne	.+2      	; 0x1030 <old_school_main+0x3ac>
    102e:	4b ce       	rjmp	.-874    	; 0xcc6 <old_school_main+0x42>
    1030:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    1034:	8f 70       	andi	r24, 0x0F	; 15
    1036:	8f 30       	cpi	r24, 0x0F	; 15
    1038:	09 f4       	brne	.+2      	; 0x103c <old_school_main+0x3b8>
    103a:	47 ce       	rjmp	.-882    	; 0xcca <old_school_main+0x46>
						pattern = 23 ;
						break;
					}
					if (cnt1 > 50 || pulse_v > 10) {
    103c:	80 91 66 00 	lds	r24, 0x0066
    1040:	90 91 67 00 	lds	r25, 0x0067
    1044:	c3 97       	sbiw	r24, 0x33	; 51
    1046:	08 f0       	brcs	.+2      	; 0x104a <old_school_main+0x3c6>
    1048:	42 ce       	rjmp	.-892    	; 0xcce <old_school_main+0x4a>
    104a:	80 91 64 00 	lds	r24, 0x0064
    104e:	90 91 65 00 	lds	r25, 0x0065
    1052:	0b 97       	sbiw	r24, 0x0b	; 11
    1054:	08 f0       	brcs	.+2      	; 0x1058 <old_school_main+0x3d4>
    1056:	3d ce       	rjmp	.-902    	; 0xcd2 <old_school_main+0x4e>
    1058:	57 ce       	rjmp	.-850    	; 0xd08 <old_school_main+0x84>
					}
					break;
					
					case 25:
					//set_encoder(18);
					fwd(50,50);
    105a:	62 e3       	ldi	r22, 0x32	; 50
    105c:	82 e3       	ldi	r24, 0x32	; 50
    105e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
						if ( (pulse_v > 100 ) && (((read_sensor() & 0b11100000) == 0b11100000) || ((read_sensor() & 0b11110000) == 0b11110000))) {
    1062:	80 91 64 00 	lds	r24, 0x0064
    1066:	90 91 65 00 	lds	r25, 0x0065
    106a:	85 36       	cpi	r24, 0x65	; 101
    106c:	91 05       	cpc	r25, r1
    106e:	60 f0       	brcs	.+24     	; 0x1088 <old_school_main+0x404>
    1070:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    1074:	80 7e       	andi	r24, 0xE0	; 224
    1076:	80 3e       	cpi	r24, 0xE0	; 224
    1078:	09 f4       	brne	.+2      	; 0x107c <old_school_main+0x3f8>
    107a:	2d ce       	rjmp	.-934    	; 0xcd6 <old_school_main+0x52>
    107c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    1080:	80 7f       	andi	r24, 0xF0	; 240
    1082:	80 3f       	cpi	r24, 0xF0	; 240
    1084:	09 f4       	brne	.+2      	; 0x1088 <old_school_main+0x404>
    1086:	29 ce       	rjmp	.-942    	; 0xcda <old_school_main+0x56>
							pattern = 23 ;
							break;
						}
						if (cnt1 > 50 || pulse_v > 10) {
    1088:	80 91 66 00 	lds	r24, 0x0066
    108c:	90 91 67 00 	lds	r25, 0x0067
    1090:	c3 97       	sbiw	r24, 0x33	; 51
    1092:	08 f0       	brcs	.+2      	; 0x1096 <old_school_main+0x412>
    1094:	24 ce       	rjmp	.-952    	; 0xcde <old_school_main+0x5a>
    1096:	80 91 64 00 	lds	r24, 0x0064
    109a:	90 91 65 00 	lds	r25, 0x0065
    109e:	0b 97       	sbiw	r24, 0x0b	; 11
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <old_school_main+0x420>
    10a2:	1f ce       	rjmp	.-962    	; 0xce2 <old_school_main+0x5e>
    10a4:	31 ce       	rjmp	.-926    	; 0xd08 <old_school_main+0x84>
							break;
						}
					break;
				
				case 26:
					set_led_data(24);
    10a6:	68 e1       	ldi	r22, 0x18	; 24
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					servo(-150);
    10b2:	8a e6       	ldi	r24, 0x6A	; 106
    10b4:	9f ef       	ldi	r25, 0xFF	; 255
    10b6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
					//set_encoder(8);
					#ifdef DEBUG
					push_stack(24);
    10ba:	88 e1       	ldi	r24, 0x18	; 24
    10bc:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					fwd(-30, 90);
    10c0:	6a e5       	ldi	r22, 0x5A	; 90
    10c2:	82 ee       	ldi	r24, 0xE2	; 226
    10c4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					pattern = 31;
					cnt1 = 0;
    10c8:	10 92 67 00 	sts	0x0067, r1
    10cc:	10 92 66 00 	sts	0x0066, r1
					//set_encoder(8);
					#ifdef DEBUG
					push_stack(24);
					#endif
					fwd(-30, 90);
					pattern = 31;
    10d0:	cf e1       	ldi	r28, 0x1F	; 31
					cnt1 = 0;
				break;
    10d2:	1a ce       	rjmp	.-972    	; 0xd08 <old_school_main+0x84>
				
				case 27:
					set_led_data(25);
    10d4:	69 e1       	ldi	r22, 0x19	; 25
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					#ifdef DEBUG
					push_stack(25);
    10e0:	89 e1       	ldi	r24, 0x19	; 25
    10e2:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					servo(150);
    10e6:	86 e9       	ldi	r24, 0x96	; 150
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
					//set_encoder(8);
					fwd(90, -30);
    10ee:	62 ee       	ldi	r22, 0xE2	; 226
    10f0:	8a e5       	ldi	r24, 0x5A	; 90
    10f2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					pattern = 41;
					cnt1 = 0;
    10f6:	10 92 67 00 	sts	0x0067, r1
    10fa:	10 92 66 00 	sts	0x0066, r1
					push_stack(25);
					#endif
					servo(150);
					//set_encoder(8);
					fwd(90, -30);
					pattern = 41;
    10fe:	c9 e2       	ldi	r28, 0x29	; 41
					cnt1 = 0;
				break;
    1100:	03 ce       	rjmp	.-1018   	; 0xd08 <old_school_main+0x84>
				
				case 31:
					set_led_data(31);
    1102:	6f e1       	ldi	r22, 0x1F	; 31
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					#ifdef DEBUG
					push_stack(31);
    110e:	8f e1       	ldi	r24, 0x1F	; 31
    1110:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					if(cnt1 > 250) {
    1114:	80 91 66 00 	lds	r24, 0x0066
    1118:	90 91 67 00 	lds	r25, 0x0067
    111c:	8b 3f       	cpi	r24, 0xFB	; 251
    111e:	91 05       	cpc	r25, r1
    1120:	08 f4       	brcc	.+2      	; 0x1124 <old_school_main+0x4a0>
    1122:	f2 cd       	rjmp	.-1052   	; 0xd08 <old_school_main+0x84>
						pattern = 32;
						cnt1 = 0;
    1124:	10 92 67 00 	sts	0x0067, r1
    1128:	10 92 66 00 	sts	0x0066, r1
					set_led_data(31);
					#ifdef DEBUG
					push_stack(31);
					#endif
					if(cnt1 > 250) {
						pattern = 32;
    112c:	c0 e2       	ldi	r28, 0x20	; 32
    112e:	ec cd       	rjmp	.-1064   	; 0xd08 <old_school_main+0x84>
						cnt1 = 0;
					}
				break;
				
				case 32:
					set_led_data(32);
    1130:	60 e2       	ldi	r22, 0x20	; 32
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					#ifdef DEBUG
					push_stack(32);
    113c:	80 e2       	ldi	r24, 0x20	; 32
    113e:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					if( (read_sensor() & 0b11100111) == 0b00100000 ) {
    1142:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    1146:	87 7e       	andi	r24, 0xE7	; 231
    1148:	80 32       	cpi	r24, 0x20	; 32
    114a:	09 f0       	breq	.+2      	; 0x114e <old_school_main+0x4ca>
    114c:	dd cd       	rjmp	.-1094   	; 0xd08 <old_school_main+0x84>
						pattern = 1;
						cnt1 = 0;
    114e:	10 92 67 00 	sts	0x0067, r1
    1152:	10 92 66 00 	sts	0x0066, r1
					set_led_data(32);
					#ifdef DEBUG
					push_stack(32);
					#endif
					if( (read_sensor() & 0b11100111) == 0b00100000 ) {
						pattern = 1;
    1156:	c1 2f       	mov	r28, r17
    1158:	d7 cd       	rjmp	.-1106   	; 0xd08 <old_school_main+0x84>
						cnt1 = 0;
					}
				break;

				case 41:
					set_led_data(41);
    115a:	69 e2       	ldi	r22, 0x29	; 41
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					#ifdef DEBUG
					push_stack(41);
    1166:	89 e2       	ldi	r24, 0x29	; 41
    1168:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					if( cnt1 > 200 ) {
    116c:	80 91 66 00 	lds	r24, 0x0066
    1170:	90 91 67 00 	lds	r25, 0x0067
    1174:	89 3c       	cpi	r24, 0xC9	; 201
    1176:	91 05       	cpc	r25, r1
    1178:	08 f4       	brcc	.+2      	; 0x117c <old_school_main+0x4f8>
    117a:	c6 cd       	rjmp	.-1140   	; 0xd08 <old_school_main+0x84>
						pattern = 42;
						cnt1 = 0;
    117c:	10 92 67 00 	sts	0x0067, r1
    1180:	10 92 66 00 	sts	0x0066, r1
					set_led_data(41);
					#ifdef DEBUG
					push_stack(41);
					#endif
					if( cnt1 > 200 ) {
						pattern = 42;
    1184:	ca e2       	ldi	r28, 0x2A	; 42
    1186:	c0 cd       	rjmp	.-1152   	; 0xd08 <old_school_main+0x84>
						cnt1 = 0;
					}
				break;
				
				case 42:
					set_led_data(42);
    1188:	6a e2       	ldi	r22, 0x2A	; 42
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					#ifdef DEBUG
					push_stack(42);
    1194:	8a e2       	ldi	r24, 0x2A	; 42
    1196:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					if( (read_sensor() & 0b11100111) == 0b00000100 ) {
    119a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    119e:	87 7e       	andi	r24, 0xE7	; 231
    11a0:	84 30       	cpi	r24, 0x04	; 4
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <old_school_main+0x522>
    11a4:	b1 cd       	rjmp	.-1182   	; 0xd08 <old_school_main+0x84>
						pattern = 1;
						cnt1 = 0;
    11a6:	10 92 67 00 	sts	0x0067, r1
    11aa:	10 92 66 00 	sts	0x0066, r1
					set_led_data(42);
					#ifdef DEBUG
					push_stack(42);
					#endif
					if( (read_sensor() & 0b11100111) == 0b00000100 ) {
						pattern = 1;
    11ae:	c1 2f       	mov	r28, r17
    11b0:	ab cd       	rjmp	.-1194   	; 0xd08 <old_school_main+0x84>
					}
				break;

				case 51:
					//set_encoder(20);
					if ((read_sensor(0b11100000) == 0b11100000) || (read_sensor(0b11110000) == 0b11110000)) {
    11b2:	80 ee       	ldi	r24, 0xE0	; 224
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    11ba:	80 3e       	cpi	r24, 0xE0	; 224
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <old_school_main+0x53c>
    11be:	93 cd       	rjmp	.-1242   	; 0xce6 <old_school_main+0x62>
    11c0:	80 ef       	ldi	r24, 0xF0	; 240
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    11c8:	80 3f       	cpi	r24, 0xF0	; 240
    11ca:	09 f4       	brne	.+2      	; 0x11ce <old_school_main+0x54a>
    11cc:	8e cd       	rjmp	.-1252   	; 0xcea <old_school_main+0x66>
						pattern = 21 ;
						break;
					}
					set_led_data(51);
    11ce:	63 e3       	ldi	r22, 0x33	; 51
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					#ifdef DEBUG
					push_stack(51);
    11da:	83 e3       	ldi	r24, 0x33	; 51
    11dc:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					servo(0);
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
					fwd(70 , 70);
    11e8:	66 e4       	ldi	r22, 0x46	; 70
    11ea:	86 e4       	ldi	r24, 0x46	; 70
    11ec:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					pattern = 52;
					cnt1 = 0;
    11f0:	10 92 67 00 	sts	0x0067, r1
    11f4:	10 92 66 00 	sts	0x0066, r1
					pulse_v = 0;
    11f8:	10 92 65 00 	sts	0x0065, r1
    11fc:	10 92 64 00 	sts	0x0064, r1
					#ifdef DEBUG
					push_stack(51);
					#endif
					servo(0);
					fwd(70 , 70);
					pattern = 52;
    1200:	c4 e3       	ldi	r28, 0x34	; 52
					cnt1 = 0;
					pulse_v = 0;
				break;
    1202:	82 cd       	rjmp	.-1276   	; 0xd08 <old_school_main+0x84>

				case 52:
					if( cnt1 > 100 || pulse_v>10) {
    1204:	80 91 66 00 	lds	r24, 0x0066
    1208:	90 91 67 00 	lds	r25, 0x0067
    120c:	85 36       	cpi	r24, 0x65	; 101
    120e:	91 05       	cpc	r25, r1
    1210:	30 f4       	brcc	.+12     	; 0x121e <old_school_main+0x59a>
    1212:	80 91 64 00 	lds	r24, 0x0064
    1216:	90 91 65 00 	lds	r25, 0x0065
    121a:	0b 97       	sbiw	r24, 0x0b	; 11
    121c:	28 f0       	brcs	.+10     	; 0x1228 <old_school_main+0x5a4>
						pattern = 53;
						cnt1 = 0;
    121e:	10 92 67 00 	sts	0x0067, r1
    1222:	10 92 66 00 	sts	0x0066, r1
					pulse_v = 0;
				break;

				case 52:
					if( cnt1 > 100 || pulse_v>10) {
						pattern = 53;
    1226:	c5 e3       	ldi	r28, 0x35	; 53
						cnt1 = 0;
					}
					if (((read_sensor() & 0b11100000) == 0b11100000) || ((read_sensor() & 0b11110000) == 0b11110000)) {
    1228:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    122c:	80 7e       	andi	r24, 0xE0	; 224
    122e:	80 3e       	cpi	r24, 0xE0	; 224
    1230:	09 f4       	brne	.+2      	; 0x1234 <old_school_main+0x5b0>
    1232:	5d cd       	rjmp	.-1350   	; 0xcee <old_school_main+0x6a>
    1234:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    1238:	80 7f       	andi	r24, 0xF0	; 240
    123a:	80 3f       	cpi	r24, 0xF0	; 240
    123c:	09 f0       	breq	.+2      	; 0x1240 <old_school_main+0x5bc>
    123e:	64 cd       	rjmp	.-1336   	; 0xd08 <old_school_main+0x84>
    1240:	58 cd       	rjmp	.-1360   	; 0xcf2 <old_school_main+0x6e>
						break;
					}
				break;

				case 53:
				if( read_sensor() == 0b00000000 ) {
    1242:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    1246:	81 11       	cpse	r24, r1
    1248:	0e c0       	rjmp	.+28     	; 0x1266 <old_school_main+0x5e2>
					servo(70);
    124a:	86 e4       	ldi	r24, 0x46	; 70
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
					fwd(50, 60);
    1252:	6c e3       	ldi	r22, 0x3C	; 60
    1254:	82 e3       	ldi	r24, 0x32	; 50
    1256:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					pattern = 54;
					cnt1 = 0;
    125a:	10 92 67 00 	sts	0x0067, r1
    125e:	10 92 66 00 	sts	0x0066, r1

				case 53:
				if( read_sensor() == 0b00000000 ) {
					servo(70);
					fwd(50, 60);
					pattern = 54;
    1262:	c6 e3       	ldi	r28, 0x36	; 54
					cnt1 = 0;
					break;
    1264:	51 cd       	rjmp	.-1374   	; 0xd08 <old_school_main+0x84>
				}
				switch( read_sensor() & 0b11100111 ) {
    1266:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    126a:	87 7e       	andi	r24, 0xE7	; 231
    126c:	88 30       	cpi	r24, 0x08	; 8
    126e:	48 f4       	brcc	.+18     	; 0x1282 <old_school_main+0x5fe>
    1270:	86 30       	cpi	r24, 0x06	; 6
    1272:	d8 f4       	brcc	.+54     	; 0x12aa <old_school_main+0x626>
    1274:	88 23       	and	r24, r24
    1276:	81 f0       	breq	.+32     	; 0x1298 <old_school_main+0x614>
    1278:	83 50       	subi	r24, 0x03	; 3
    127a:	82 30       	cpi	r24, 0x02	; 2
    127c:	08 f0       	brcs	.+2      	; 0x1280 <old_school_main+0x5fc>
    127e:	44 cd       	rjmp	.-1400   	; 0xd08 <old_school_main+0x84>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <old_school_main+0x626>
    1282:	80 36       	cpi	r24, 0x60	; 96
    1284:	d9 f0       	breq	.+54     	; 0x12bc <old_school_main+0x638>
    1286:	18 f4       	brcc	.+6      	; 0x128e <old_school_main+0x60a>
    1288:	80 32       	cpi	r24, 0x20	; 32
    128a:	c1 f0       	breq	.+48     	; 0x12bc <old_school_main+0x638>
    128c:	3d cd       	rjmp	.-1414   	; 0xd08 <old_school_main+0x84>
    128e:	80 3c       	cpi	r24, 0xC0	; 192
    1290:	a9 f0       	breq	.+42     	; 0x12bc <old_school_main+0x638>
    1292:	80 3e       	cpi	r24, 0xE0	; 224
    1294:	99 f0       	breq	.+38     	; 0x12bc <old_school_main+0x638>
    1296:	38 cd       	rjmp	.-1424   	; 0xd08 <old_school_main+0x84>
					case 0:
						servo( 0 );
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						fwd( 30 ,30 );
    12a0:	6e e1       	ldi	r22, 0x1E	; 30
    12a2:	8e e1       	ldi	r24, 0x1E	; 30
    12a4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
						break;
    12a8:	2f cd       	rjmp	.-1442   	; 0xd08 <old_school_main+0x84>
						case 4:
						case 6:
						case 7:
						case 3:
						servo(15);
    12aa:	8f e0       	ldi	r24, 0x0F	; 15
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						fwd(30, 20);
    12b2:	64 e1       	ldi	r22, 0x14	; 20
    12b4:	8e e1       	ldi	r24, 0x1E	; 30
    12b6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					break;
    12ba:	26 cd       	rjmp	.-1460   	; 0xd08 <old_school_main+0x84>
					case 0x20:
					case 0x60:
					case 0xe0:
					case 0xc0:
						servo(-15);
    12bc:	81 ef       	ldi	r24, 0xF1	; 241
    12be:	9f ef       	ldi	r25, 0xFF	; 255
    12c0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						fwd(20, 30);
    12c4:	6e e1       	ldi	r22, 0x1E	; 30
    12c6:	84 e1       	ldi	r24, 0x14	; 20
    12c8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					break;
    12cc:	1d cd       	rjmp	.-1478   	; 0xd08 <old_school_main+0x84>
					break;
				}
				break;

				case 54:
					if( (read_sensor() & 0b00001100) == 0b00001100 ) {
    12ce:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    12d2:	8c 70       	andi	r24, 0x0C	; 12
    12d4:	8c 30       	cpi	r24, 0x0C	; 12
    12d6:	09 f0       	breq	.+2      	; 0x12da <old_school_main+0x656>
    12d8:	17 cd       	rjmp	.-1490   	; 0xd08 <old_school_main+0x84>
						pattern = 1;
						cnt1 = 0;
    12da:	10 92 67 00 	sts	0x0067, r1
    12de:	10 92 66 00 	sts	0x0066, r1
				}
				break;

				case 54:
					if( (read_sensor() & 0b00001100) == 0b00001100 ) {
						pattern = 1;
    12e2:	c1 2f       	mov	r28, r17
    12e4:	11 cd       	rjmp	.-1502   	; 0xd08 <old_school_main+0x84>
					}
				break;

				case 61:
					//set_encoder(20);
					if ( ((read_sensor() & 0b00000111) == 0b00000111) || ((read_sensor() & 0b00001111) == 0b00001111) ) {
    12e6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    12ea:	87 70       	andi	r24, 0x07	; 7
    12ec:	87 30       	cpi	r24, 0x07	; 7
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <old_school_main+0x66e>
    12f0:	02 cd       	rjmp	.-1532   	; 0xcf6 <old_school_main+0x72>
    12f2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    12f6:	8f 70       	andi	r24, 0x0F	; 15
    12f8:	8f 30       	cpi	r24, 0x0F	; 15
    12fa:	09 f4       	brne	.+2      	; 0x12fe <old_school_main+0x67a>
    12fc:	fe cc       	rjmp	.-1540   	; 0xcfa <old_school_main+0x76>
						pattern = 21 ;
						break;
					}
					set_led_data(61);
    12fe:	6d e3       	ldi	r22, 0x3D	; 61
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					#ifdef DEBUG
					push_stack(61);
    130a:	8d e3       	ldi	r24, 0x3D	; 61
    130c:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					servo(0);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
					fwd(90, 90);
    1318:	6a e5       	ldi	r22, 0x5A	; 90
    131a:	8a e5       	ldi	r24, 0x5A	; 90
    131c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					pattern = 62;
					cnt1 = 0;
    1320:	10 92 67 00 	sts	0x0067, r1
    1324:	10 92 66 00 	sts	0x0066, r1
					pulse_v = 0;
    1328:	10 92 65 00 	sts	0x0065, r1
    132c:	10 92 64 00 	sts	0x0064, r1
					#ifdef DEBUG
					push_stack(61);
					#endif
					servo(0);
					fwd(90, 90);
					pattern = 62;
    1330:	ce e3       	ldi	r28, 0x3E	; 62
					cnt1 = 0;
					pulse_v = 0;
				break;
    1332:	ea cc       	rjmp	.-1580   	; 0xd08 <old_school_main+0x84>

				case 62:
					if( cnt1 > 100 || pulse_v > 10) {
    1334:	80 91 66 00 	lds	r24, 0x0066
    1338:	90 91 67 00 	lds	r25, 0x0067
    133c:	85 36       	cpi	r24, 0x65	; 101
    133e:	91 05       	cpc	r25, r1
    1340:	30 f4       	brcc	.+12     	; 0x134e <old_school_main+0x6ca>
    1342:	80 91 64 00 	lds	r24, 0x0064
    1346:	90 91 65 00 	lds	r25, 0x0065
    134a:	0b 97       	sbiw	r24, 0x0b	; 11
    134c:	28 f0       	brcs	.+10     	; 0x1358 <old_school_main+0x6d4>
						pattern = 63;
						cnt1 = 0;
    134e:	10 92 67 00 	sts	0x0067, r1
    1352:	10 92 66 00 	sts	0x0066, r1
					pulse_v = 0;
				break;

				case 62:
					if( cnt1 > 100 || pulse_v > 10) {
						pattern = 63;
    1356:	cf e3       	ldi	r28, 0x3F	; 63
						cnt1 = 0;
					}
					if (((read_sensor() & 0b00000111) == 0b00000111) || ((read_sensor() & 0b00001111) == 0b00001111)) {
    1358:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    135c:	87 70       	andi	r24, 0x07	; 7
    135e:	87 30       	cpi	r24, 0x07	; 7
    1360:	09 f4       	brne	.+2      	; 0x1364 <old_school_main+0x6e0>
    1362:	cd cc       	rjmp	.-1638   	; 0xcfe <old_school_main+0x7a>
    1364:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    1368:	8f 70       	andi	r24, 0x0F	; 15
    136a:	8f 30       	cpi	r24, 0x0F	; 15
    136c:	09 f0       	breq	.+2      	; 0x1370 <old_school_main+0x6ec>
    136e:	cc cc       	rjmp	.-1640   	; 0xd08 <old_school_main+0x84>
    1370:	c8 cc       	rjmp	.-1648   	; 0xd02 <old_school_main+0x7e>
						break;
					}
				break;

				case 63:
					if( read_sensor() == 0 ) {
    1372:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    1376:	81 11       	cpse	r24, r1
    1378:	c7 cc       	rjmp	.-1650   	; 0xd08 <old_school_main+0x84>
						servo(-70);
    137a:	8a eb       	ldi	r24, 0xBA	; 186
    137c:	9f ef       	ldi	r25, 0xFF	; 255
    137e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						fwd(60, 40);
    1382:	68 e2       	ldi	r22, 0x28	; 40
    1384:	8c e3       	ldi	r24, 0x3C	; 60
    1386:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
						pattern = 64;
						cnt1 = 0;
    138a:	10 92 67 00 	sts	0x0067, r1
    138e:	10 92 66 00 	sts	0x0066, r1

				case 63:
					if( read_sensor() == 0 ) {
						servo(-70);
						fwd(60, 40);
						pattern = 64;
    1392:	c0 e4       	ldi	r28, 0x40	; 64
    1394:	b9 cc       	rjmp	.-1678   	; 0xd08 <old_school_main+0x84>
					break;
				}
				break;

				case 64:
					if( (read_sensor() & 0b00110000) == 0b00110000 ) {
    1396:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    139a:	80 73       	andi	r24, 0x30	; 48
    139c:	80 33       	cpi	r24, 0x30	; 48
    139e:	09 f0       	breq	.+2      	; 0x13a2 <old_school_main+0x71e>
    13a0:	b3 cc       	rjmp	.-1690   	; 0xd08 <old_school_main+0x84>
						pattern = 1;
						cnt1 = 0;
    13a2:	10 92 67 00 	sts	0x0067, r1
    13a6:	10 92 66 00 	sts	0x0066, r1
				}
				break;

				case 64:
					if( (read_sensor() & 0b00110000) == 0b00110000 ) {
						pattern = 1;
    13aa:	c1 2f       	mov	r28, r17
    13ac:	ad cc       	rjmp	.-1702   	; 0xd08 <old_school_main+0x84>
					}
				break;
				
				case 71:
					//set_encoder(30);
					set_led_data(71);
    13ae:	67 e4       	ldi	r22, 0x47	; 71
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
					#ifdef DEBUG
					push_stack(71);
    13ba:	87 e4       	ldi	r24, 0x47	; 71
    13bc:	0e 94 0b 05 	call	0xa16	; 0xa16 <push_stack>
					#endif
					fwd(100, 100);
    13c0:	64 e6       	ldi	r22, 0x64	; 100
    13c2:	84 e6       	ldi	r24, 0x64	; 100
    13c4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					if( cnt1 > 100 || pulse_v > 10) {
    13c8:	80 91 66 00 	lds	r24, 0x0066
    13cc:	90 91 67 00 	lds	r25, 0x0067
    13d0:	85 36       	cpi	r24, 0x65	; 101
    13d2:	91 05       	cpc	r25, r1
    13d4:	38 f4       	brcc	.+14     	; 0x13e4 <old_school_main+0x760>
    13d6:	80 91 64 00 	lds	r24, 0x0064
    13da:	90 91 65 00 	lds	r25, 0x0065
    13de:	0b 97       	sbiw	r24, 0x0b	; 11
    13e0:	08 f4       	brcc	.+2      	; 0x13e4 <old_school_main+0x760>
    13e2:	92 cc       	rjmp	.-1756   	; 0xd08 <old_school_main+0x84>
						pattern = 72;
						cnt1 = 0;
    13e4:	10 92 67 00 	sts	0x0067, r1
    13e8:	10 92 66 00 	sts	0x0066, r1
					#ifdef DEBUG
					push_stack(71);
					#endif
					fwd(100, 100);
					if( cnt1 > 100 || pulse_v > 10) {
						pattern = 72;
    13ec:	c8 e4       	ldi	r28, 0x48	; 72
    13ee:	8c cc       	rjmp	.-1768   	; 0xd08 <old_school_main+0x84>
						cnt1 = 0;
					}
				break;
				
				case 72:
					if (read_sensor() == 0b00000000) {
    13f0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    13f4:	81 11       	cpse	r24, r1
    13f6:	0a c0       	rjmp	.+20     	; 0x140c <old_school_main+0x788>
						servo(0);
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						fwd(100,100);
    1400:	64 e6       	ldi	r22, 0x64	; 100
    1402:	84 e6       	ldi	r24, 0x64	; 100
    1404:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
						pattern=73;
    1408:	c9 e4       	ldi	r28, 0x49	; 73
						break;
    140a:	7e cc       	rjmp	.-1796   	; 0xd08 <old_school_main+0x84>
					}
				
					switch(read_sensor() & 0b01111110) {
    140c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    1410:	8e 77       	andi	r24, 0x7E	; 126
    1412:	48 2f       	mov	r20, r24
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	fa 01       	movw	r30, r20
    1418:	32 97       	sbiw	r30, 0x02	; 2
    141a:	ef 35       	cpi	r30, 0x5F	; 95
    141c:	f1 05       	cpc	r31, r1
    141e:	08 f0       	brcs	.+2      	; 0x1422 <old_school_main+0x79e>
    1420:	73 cc       	rjmp	.-1818   	; 0xd08 <old_school_main+0x84>
    1422:	e8 53       	subi	r30, 0x38	; 56
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__tablejump2__>
						case 0b00011000:
							servo(0);
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
							fwd(100,100 );
    1432:	64 e6       	ldi	r22, 0x64	; 100
    1434:	84 e6       	ldi	r24, 0x64	; 100
    1436:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
						break;
    143a:	66 cc       	rjmp	.-1844   	; 0xd08 <old_school_main+0x84>
					
						case 0b00001000:
							fwd(90,17);
    143c:	61 e1       	ldi	r22, 0x11	; 17
    143e:	8a e5       	ldi	r24, 0x5A	; 90
    1440:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
						servo(8);
    1444:	88 e0       	ldi	r24, 0x08	; 8
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
    144c:	5d cc       	rjmp	.-1862   	; 0xd08 <old_school_main+0x84>
					
						case 0b00001100:
							fwd(90,70);
    144e:	66 e4       	ldi	r22, 0x46	; 70
    1450:	8a e5       	ldi	r24, 0x5A	; 90
    1452:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(13);
    1456:	8d e0       	ldi	r24, 0x0D	; 13
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
    145e:	54 cc       	rjmp	.-1880   	; 0xd08 <old_school_main+0x84>
					
						case 0b00000100:
							fwd(90,65);
    1460:	61 e4       	ldi	r22, 0x41	; 65
    1462:	8a e5       	ldi	r24, 0x5A	; 90
    1464:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(18);
    1468:	82 e1       	ldi	r24, 0x12	; 18
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
    1470:	4b cc       	rjmp	.-1898   	; 0xd08 <old_school_main+0x84>
					
						case 0b00000110:
						case 0b00000010:
							fwd(90,60);
    1472:	6c e3       	ldi	r22, 0x3C	; 60
    1474:	8a e5       	ldi	r24, 0x5A	; 90
    1476:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(26);
    147a:	8a e1       	ldi	r24, 0x1A	; 26
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
    1482:	42 cc       	rjmp	.-1916   	; 0xd08 <old_school_main+0x84>
					
						case 0b00010000:
							fwd(75,90);
    1484:	6a e5       	ldi	r22, 0x5A	; 90
    1486:	8b e4       	ldi	r24, 0x4B	; 75
    1488:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-8);
    148c:	88 ef       	ldi	r24, 0xF8	; 248
    148e:	9f ef       	ldi	r25, 0xFF	; 255
    1490:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
    1494:	39 cc       	rjmp	.-1934   	; 0xd08 <old_school_main+0x84>
						case 0b00110000:
							fwd(70,90);
    1496:	6a e5       	ldi	r22, 0x5A	; 90
    1498:	86 e4       	ldi	r24, 0x46	; 70
    149a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-13);
    149e:	83 ef       	ldi	r24, 0xF3	; 243
    14a0:	9f ef       	ldi	r25, 0xFF	; 255
    14a2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
    14a6:	30 cc       	rjmp	.-1952   	; 0xd08 <old_school_main+0x84>
					
						case 0b00100000:
							fwd(65,90);
    14a8:	6a e5       	ldi	r22, 0x5A	; 90
    14aa:	81 e4       	ldi	r24, 0x41	; 65
    14ac:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-18);
    14b0:	8e ee       	ldi	r24, 0xEE	; 238
    14b2:	9f ef       	ldi	r25, 0xFF	; 255
    14b4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
    14b8:	27 cc       	rjmp	.-1970   	; 0xd08 <old_school_main+0x84>
					
						case 0b01100000:
						case 0b01000000:
							fwd(60,90);
    14ba:	6a e5       	ldi	r22, 0x5A	; 90
    14bc:	8c e3       	ldi	r24, 0x3C	; 60
    14be:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
							servo(-26);
    14c2:	86 ee       	ldi	r24, 0xE6	; 230
    14c4:	9f ef       	ldi	r25, 0xFF	; 255
    14c6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
						break;
    14ca:	1e cc       	rjmp	.-1988   	; 0xd08 <old_school_main+0x84>
						break;
				}
				break;
				
				case 73:
					servo(0);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
					fwd(100, 100);
    14d4:	64 e6       	ldi	r22, 0x64	; 100
    14d6:	84 e6       	ldi	r24, 0x64	; 100
    14d8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
					if (read_sensor() > 0) {
    14dc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    14e0:	81 11       	cpse	r24, r1
    14e2:	11 cc       	rjmp	.-2014   	; 0xd06 <old_school_main+0x82>
    14e4:	11 cc       	rjmp	.-2014   	; 0xd08 <old_school_main+0x84>

000014e6 <do_switch_lane>:
pidData_t steer;
void old_school_main();
void pid_main();

#define  switch_lane_constant 100
void do_switch_lane(uint8_t switch_lane) {
    14e6:	cf 93       	push	r28
    14e8:	c8 2f       	mov	r28, r24
	int16_t servo_pos;
	
	fwd(motor_speed/2, motor_speed/2);
    14ea:	80 91 6e 00 	lds	r24, 0x006E
    14ee:	86 95       	lsr	r24
    14f0:	68 2f       	mov	r22, r24
    14f2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
	if (switch_lane == 1) servo_pos = switch_lane_constant;
    14f6:	c1 30       	cpi	r28, 0x01	; 1
    14f8:	19 f4       	brne	.+6      	; 0x1500 <do_switch_lane+0x1a>
    14fa:	84 e6       	ldi	r24, 0x64	; 100
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <do_switch_lane+0x1e>
	else servo_pos = -switch_lane_constant;
    1500:	8c e9       	ldi	r24, 0x9C	; 156
    1502:	9f ef       	ldi	r25, 0xFF	; 255
	servo(servo_pos);
    1504:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
	switch_lane = 0;
	last_cte = 0;
    1508:	10 92 6b 00 	sts	0x006B, r1
    150c:	10 92 6a 00 	sts	0x006A, r1
	while ((read_sensor() == 0));
    1510:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
    1514:	88 23       	and	r24, r24
    1516:	e1 f3       	breq	.-8      	; 0x1510 <do_switch_lane+0x2a>
}
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <calc_motor_speed>:
	
}

#define pid_speed_ratio 0.15

int16_t calc_motor_speed(int16_t cte) {
    151c:	8f 92       	push	r8
    151e:	9f 92       	push	r9
    1520:	af 92       	push	r10
    1522:	bf 92       	push	r11
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	5c 01       	movw	r10, r24
	uint8_t pid_motor_speed;
	
	if (abs(cte) == 3*m) return (int16_t)(motor_speed - (motor_speed / 3));
    1532:	c0 91 bf 02 	lds	r28, 0x02BF
    1536:	d0 e0       	ldi	r29, 0x00	; 0
    1538:	4e 01       	movw	r8, r28
    153a:	88 0c       	add	r8, r8
    153c:	99 1c       	adc	r9, r9
    153e:	8c 0e       	add	r8, r28
    1540:	9d 1e       	adc	r9, r29
    1542:	9c 01       	movw	r18, r24
    1544:	99 23       	and	r25, r25
    1546:	24 f4       	brge	.+8      	; 0x1550 <calc_motor_speed+0x34>
    1548:	22 27       	eor	r18, r18
    154a:	33 27       	eor	r19, r19
    154c:	28 1b       	sub	r18, r24
    154e:	39 0b       	sbc	r19, r25
    1550:	28 15       	cp	r18, r8
    1552:	39 05       	cpc	r19, r9
    1554:	61 f4       	brne	.+24     	; 0x156e <calc_motor_speed+0x52>
    1556:	20 91 6e 00 	lds	r18, 0x006E
    155a:	82 2f       	mov	r24, r18
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	3b ea       	ldi	r19, 0xAB	; 171
    1560:	23 9f       	mul	r18, r19
    1562:	21 2d       	mov	r18, r1
    1564:	11 24       	eor	r1, r1
    1566:	26 95       	lsr	r18
    1568:	82 1b       	sub	r24, r18
    156a:	91 09       	sbc	r25, r1
    156c:	a0 c0       	rjmp	.+320    	; 0x16ae <calc_motor_speed+0x192>
	if (cte == 0) return motor_speed;//*2;
    156e:	a1 14       	cp	r10, r1
    1570:	b1 04       	cpc	r11, r1
    1572:	21 f4       	brne	.+8      	; 0x157c <calc_motor_speed+0x60>
    1574:	80 91 6e 00 	lds	r24, 0x006E
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	99 c0       	rjmp	.+306    	; 0x16ae <calc_motor_speed+0x192>
	if (cte > 0) {
    157c:	1a 14       	cp	r1, r10
    157e:	1b 04       	cpc	r1, r11
    1580:	0c f0       	brlt	.+2      	; 0x1584 <calc_motor_speed+0x68>
    1582:	45 c0       	rjmp	.+138    	; 0x160e <calc_motor_speed+0xf2>
		pid_motor_speed = (int16_t)(motor_speed * ((3*m - cte)/3.0*m));
    1584:	60 91 6e 00 	lds	r22, 0x006E
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__floatsisf>
    1592:	6b 01       	movw	r12, r22
    1594:	7c 01       	movw	r14, r24
    1596:	b4 01       	movw	r22, r8
    1598:	6a 19       	sub	r22, r10
    159a:	7b 09       	sbc	r23, r11
    159c:	88 27       	eor	r24, r24
    159e:	77 fd       	sbrc	r23, 7
    15a0:	80 95       	com	r24
    15a2:	98 2f       	mov	r25, r24
    15a4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__floatsisf>
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e4       	ldi	r20, 0x40	; 64
    15ae:	50 e4       	ldi	r21, 0x40	; 64
    15b0:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divsf3>
    15b4:	4b 01       	movw	r8, r22
    15b6:	5c 01       	movw	r10, r24
    15b8:	be 01       	movw	r22, r28
    15ba:	88 27       	eor	r24, r24
    15bc:	77 fd       	sbrc	r23, 7
    15be:	80 95       	com	r24
    15c0:	98 2f       	mov	r25, r24
    15c2:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__floatsisf>
    15c6:	9b 01       	movw	r18, r22
    15c8:	ac 01       	movw	r20, r24
    15ca:	c5 01       	movw	r24, r10
    15cc:	b4 01       	movw	r22, r8
    15ce:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
    15d6:	c7 01       	movw	r24, r14
    15d8:	b6 01       	movw	r22, r12
    15da:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    15de:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__fixsfsi>
		pid_motor_speed = (int16_t)(motor_speed - (pid_speed_ratio*pid_motor_speed));
    15e2:	77 27       	eor	r23, r23
    15e4:	88 27       	eor	r24, r24
    15e6:	77 fd       	sbrc	r23, 7
    15e8:	80 95       	com	r24
    15ea:	98 2f       	mov	r25, r24
    15ec:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__floatsisf>
    15f0:	2a e9       	ldi	r18, 0x9A	; 154
    15f2:	39 e9       	ldi	r19, 0x99	; 153
    15f4:	49 e1       	ldi	r20, 0x19	; 25
    15f6:	5e e3       	ldi	r21, 0x3E	; 62
    15f8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    15fc:	9b 01       	movw	r18, r22
    15fe:	ac 01       	movw	r20, r24
    1600:	c7 01       	movw	r24, r14
    1602:	b6 01       	movw	r22, r12
    1604:	0e 94 48 0c 	call	0x1890	; 0x1890 <__subsf3>
    1608:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__fixsfsi>
    160c:	4e c0       	rjmp	.+156    	; 0x16aa <calc_motor_speed+0x18e>
	}
	else if(cte < 0) {
    160e:	bb 20       	and	r11, r11
    1610:	0c f0       	brlt	.+2      	; 0x1614 <calc_motor_speed+0xf8>
    1612:	4b c0       	rjmp	.+150    	; 0x16aa <calc_motor_speed+0x18e>
		pid_motor_speed = (int16_t)(motor_speed * ((-3*m-cte)/-3.0*m));
    1614:	60 91 6e 00 	lds	r22, 0x006E
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__floatsisf>
    1622:	6b 01       	movw	r12, r22
    1624:	7c 01       	movw	r14, r24
    1626:	be 01       	movw	r22, r28
    1628:	66 0f       	add	r22, r22
    162a:	77 1f       	adc	r23, r23
    162c:	6c 0f       	add	r22, r28
    162e:	7d 1f       	adc	r23, r29
    1630:	71 95       	neg	r23
    1632:	61 95       	neg	r22
    1634:	71 09       	sbc	r23, r1
    1636:	6a 19       	sub	r22, r10
    1638:	7b 09       	sbc	r23, r11
    163a:	88 27       	eor	r24, r24
    163c:	77 fd       	sbrc	r23, 7
    163e:	80 95       	com	r24
    1640:	98 2f       	mov	r25, r24
    1642:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__floatsisf>
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e4       	ldi	r20, 0x40	; 64
    164c:	50 ec       	ldi	r21, 0xC0	; 192
    164e:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divsf3>
    1652:	4b 01       	movw	r8, r22
    1654:	5c 01       	movw	r10, r24
    1656:	be 01       	movw	r22, r28
    1658:	88 27       	eor	r24, r24
    165a:	77 fd       	sbrc	r23, 7
    165c:	80 95       	com	r24
    165e:	98 2f       	mov	r25, r24
    1660:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__floatsisf>
    1664:	9b 01       	movw	r18, r22
    1666:	ac 01       	movw	r20, r24
    1668:	c5 01       	movw	r24, r10
    166a:	b4 01       	movw	r22, r8
    166c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	c7 01       	movw	r24, r14
    1676:	b6 01       	movw	r22, r12
    1678:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    167c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__fixsfsi>
		pid_motor_speed = (int16_t)(motor_speed - (pid_speed_ratio*pid_motor_speed));
    1680:	77 27       	eor	r23, r23
    1682:	88 27       	eor	r24, r24
    1684:	77 fd       	sbrc	r23, 7
    1686:	80 95       	com	r24
    1688:	98 2f       	mov	r25, r24
    168a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__floatsisf>
    168e:	2a e9       	ldi	r18, 0x9A	; 154
    1690:	39 e9       	ldi	r19, 0x99	; 153
    1692:	49 e1       	ldi	r20, 0x19	; 25
    1694:	5e e3       	ldi	r21, 0x3E	; 62
    1696:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsf3>
    169a:	9b 01       	movw	r18, r22
    169c:	ac 01       	movw	r20, r24
    169e:	c7 01       	movw	r24, r14
    16a0:	b6 01       	movw	r22, r12
    16a2:	0e 94 48 0c 	call	0x1890	; 0x1890 <__subsf3>
    16a6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__fixsfsi>
	}
	return pid_motor_speed;
    16aa:	86 2f       	mov	r24, r22
    16ac:	90 e0       	ldi	r25, 0x00	; 0
	return motor_speed;
}
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	cf 90       	pop	r12
    16ba:	bf 90       	pop	r11
    16bc:	af 90       	pop	r10
    16be:	9f 90       	pop	r9
    16c0:	8f 90       	pop	r8
    16c2:	08 95       	ret

000016c4 <pid_main>:

void pid_main() {
    16c4:	df 92       	push	r13
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
	int16_t cte;
	int16_t pid_output;
	uint8_t sensor_val;
	uint8_t pid_motor_speed;
	uint8_t switch_lane = 0;
	off_lane = 0;
    16d2:	10 92 69 00 	sts	0x0069, r1
	test_mode();
    16d6:	0e 94 c5 02 	call	0x58a	; 0x58a <test_mode>
	pid_Init(K_P, K_I, K_D, &steer);
    16da:	40 91 a9 02 	lds	r20, 0x02A9
    16de:	50 91 aa 02 	lds	r21, 0x02AA
    16e2:	60 91 a7 02 	lds	r22, 0x02A7
    16e6:	70 91 a8 02 	lds	r23, 0x02A8
    16ea:	2b ea       	ldi	r18, 0xAB	; 171
    16ec:	32 e0       	ldi	r19, 0x02	; 2
    16ee:	80 91 bd 02 	lds	r24, 0x02BD
    16f2:	90 91 be 02 	lds	r25, 0x02BE
    16f6:	0e 94 35 04 	call	0x86a	; 0x86a <pid_Init>
	
	fwd(motor_speed, motor_speed);
    16fa:	80 91 6e 00 	lds	r24, 0x006E
    16fe:	68 2f       	mov	r22, r24
    1700:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
	while (1) {
		if (off_lane == 100) {
    1704:	80 91 69 00 	lds	r24, 0x0069
    1708:	84 36       	cpi	r24, 0x64	; 100
    170a:	29 f4       	brne	.+10     	; 0x1716 <pid_main+0x52>
			fwd(0, 0);
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
    1714:	48 c0       	rjmp	.+144    	; 0x17a6 <pid_main+0xe2>
void pid_main() {
	int16_t cte;
	int16_t pid_output;
	uint8_t sensor_val;
	uint8_t pid_motor_speed;
	uint8_t switch_lane = 0;
    1716:	f1 2c       	mov	r15, r1
		sensor_val = read_sensor();
		if (sensor_val == 0 || sensor_val == 0xff) {
			off_lane += 1;
			if (switch_lane) do_switch_lane(switch_lane);
		} 
		else if ((sensor_val & 0b00001111) == 0b00001111) switch_lane = 1; //right switch
    1718:	dd 24       	eor	r13, r13
    171a:	d3 94       	inc	r13
		else if ((sensor_val & 0b11110000) == 0b11110000) switch_lane = 2; //left switch
    171c:	68 94       	set
    171e:	ee 24       	eor	r14, r14
    1720:	e1 f8       	bld	r14, 1
	while (1) {
		if (off_lane == 100) {
			fwd(0, 0);
			break;
		}
		sensor_val = read_sensor();
    1722:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <read_sensor>
		if (sensor_val == 0 || sensor_val == 0xff) {
    1726:	9f ef       	ldi	r25, 0xFF	; 255
    1728:	98 0f       	add	r25, r24
    172a:	9e 3f       	cpi	r25, 0xFE	; 254
    172c:	58 f0       	brcs	.+22     	; 0x1744 <pid_main+0x80>
			off_lane += 1;
    172e:	80 91 69 00 	lds	r24, 0x0069
    1732:	8f 5f       	subi	r24, 0xFF	; 255
    1734:	80 93 69 00 	sts	0x0069, r24
			if (switch_lane) do_switch_lane(switch_lane);
    1738:	ff 20       	and	r15, r15
    173a:	49 f1       	breq	.+82     	; 0x178e <pid_main+0xca>
    173c:	8f 2d       	mov	r24, r15
    173e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <do_switch_lane>
    1742:	25 c0       	rjmp	.+74     	; 0x178e <pid_main+0xca>
		} 
		else if ((sensor_val & 0b00001111) == 0b00001111) switch_lane = 1; //right switch
    1744:	98 2f       	mov	r25, r24
    1746:	9f 70       	andi	r25, 0x0F	; 15
    1748:	9f 30       	cpi	r25, 0x0F	; 15
    174a:	f1 f0       	breq	.+60     	; 0x1788 <pid_main+0xc4>
		else if ((sensor_val & 0b11110000) == 0b11110000) switch_lane = 2; //left switch
    174c:	98 2f       	mov	r25, r24
    174e:	90 7f       	andi	r25, 0xF0	; 240
    1750:	90 3f       	cpi	r25, 0xF0	; 240
    1752:	e1 f0       	breq	.+56     	; 0x178c <pid_main+0xc8>
		else {
			cte = calc_cte(sensor_val);
    1754:	0e 94 84 05 	call	0xb08	; 0xb08 <calc_cte>
    1758:	ec 01       	movw	r28, r24
			pid_output = pid_Controller(0, cte, &steer);
    175a:	4b ea       	ldi	r20, 0xAB	; 171
    175c:	52 e0       	ldi	r21, 0x02	; 2
    175e:	bc 01       	movw	r22, r24
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 62 04 	call	0x8c4	; 0x8c4 <pid_Controller>
    1768:	8c 01       	movw	r16, r24
			pid_motor_speed = calc_motor_speed(cte);
    176a:	ce 01       	movw	r24, r28
    176c:	0e 94 8e 0a 	call	0x151c	; 0x151c <calc_motor_speed>
			fwd(pid_motor_speed, pid_motor_speed);
    1770:	68 2f       	mov	r22, r24
    1772:	0e 94 68 01 	call	0x2d0	; 0x2d0 <fwd>
			servo(pid_output/2);
    1776:	c8 01       	movw	r24, r16
    1778:	99 23       	and	r25, r25
    177a:	0c f4       	brge	.+2      	; 0x177e <pid_main+0xba>
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	95 95       	asr	r25
    1780:	87 95       	ror	r24
    1782:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
    1786:	03 c0       	rjmp	.+6      	; 0x178e <pid_main+0xca>
		sensor_val = read_sensor();
		if (sensor_val == 0 || sensor_val == 0xff) {
			off_lane += 1;
			if (switch_lane) do_switch_lane(switch_lane);
		} 
		else if ((sensor_val & 0b00001111) == 0b00001111) switch_lane = 1; //right switch
    1788:	fd 2c       	mov	r15, r13
    178a:	01 c0       	rjmp	.+2      	; 0x178e <pid_main+0xca>
		else if ((sensor_val & 0b11110000) == 0b11110000) switch_lane = 2; //left switch
    178c:	fe 2c       	mov	r15, r14
			pid_output = pid_Controller(0, cte, &steer);
			pid_motor_speed = calc_motor_speed(cte);
			fwd(pid_motor_speed, pid_motor_speed);
			servo(pid_output/2);
		}
		set_led_data(switch_lane);
    178e:	6f 2d       	mov	r22, r15
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
	test_mode();
	pid_Init(K_P, K_I, K_D, &steer);
	
	fwd(motor_speed, motor_speed);
	while (1) {
		if (off_lane == 100) {
    179a:	80 91 69 00 	lds	r24, 0x0069
    179e:	84 36       	cpi	r24, 0x64	; 100
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <pid_main+0xe0>
    17a2:	bf cf       	rjmp	.-130    	; 0x1722 <pid_main+0x5e>
    17a4:	b3 cf       	rjmp	.-154    	; 0x170c <pid_main+0x48>
			servo(pid_output/2);
		}
		set_led_data(switch_lane);
		//set_led_data(abs(pid_output));
	}	
}
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	df 90       	pop	r13
    17b4:	08 95       	ret

000017b6 <main>:
	last_cte = 0;
	while ((read_sensor() == 0));
}

int main() {
	init();
    17b6:	0e 94 99 02 	call	0x532	; 0x532 <init>
	set_led_data(8888);
    17ba:	68 eb       	ldi	r22, 0xB8	; 184
    17bc:	72 e2       	ldi	r23, 0x22	; 34
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 b3 01 	call	0x366	; 0x366 <set_led_data>
	servo(0);
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 51 01 	call	0x2a2	; 0x2a2 <servo>
	while (1) {
		if (get_button(BTN0)) {
			isr_ptr = isr_0;
    17ce:	cf e4       	ldi	r28, 0x4F	; 79
    17d0:	d2 e0       	ldi	r29, 0x02	; 2
int main() {
	init();
	set_led_data(8888);
	servo(0);
	while (1) {
		if (get_button(BTN0)) {
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
    17d8:	88 23       	and	r24, r24
    17da:	31 f0       	breq	.+12     	; 0x17e8 <main+0x32>
			isr_ptr = isr_0;
    17dc:	d0 93 61 00 	sts	0x0061, r29
    17e0:	c0 93 60 00 	sts	0x0060, r28
			pid_main();
    17e4:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <pid_main>
		}
		if (get_button(BTN1)) {
    17e8:	84 e0       	ldi	r24, 0x04	; 4
    17ea:	0e 94 46 01 	call	0x28c	; 0x28c <get_button>
    17ee:	88 23       	and	r24, r24
    17f0:	81 f3       	breq	.-32     	; 0x17d2 <main+0x1c>
			isr_ptr = isr_1;
    17f2:	80 e2       	ldi	r24, 0x20	; 32
    17f4:	96 e0       	ldi	r25, 0x06	; 6
    17f6:	90 93 61 00 	sts	0x0061, r25
    17fa:	80 93 60 00 	sts	0x0060, r24
			old_school_main();
    17fe:	0e 94 42 06 	call	0xc84	; 0xc84 <old_school_main>

00001802 <__vector_19>:
		set_led_data(switch_lane);
		//set_led_data(abs(pid_output));
	}	
}

ISR(TIMER0_COMP_vect) {
    1802:	1f 92       	push	r1
    1804:	0f 92       	push	r0
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	0f 92       	push	r0
    180a:	11 24       	eor	r1, r1
    180c:	2f 93       	push	r18
    180e:	3f 93       	push	r19
    1810:	4f 93       	push	r20
    1812:	5f 93       	push	r21
    1814:	6f 93       	push	r22
    1816:	7f 93       	push	r23
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
    1820:	ef 93       	push	r30
    1822:	ff 93       	push	r31
	isr_ptr();
    1824:	e0 91 60 00 	lds	r30, 0x0060
    1828:	f0 91 61 00 	lds	r31, 0x0061
    182c:	09 95       	icall
}
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	bf 91       	pop	r27
    1834:	af 91       	pop	r26
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	7f 91       	pop	r23
    183c:	6f 91       	pop	r22
    183e:	5f 91       	pop	r21
    1840:	4f 91       	pop	r20
    1842:	3f 91       	pop	r19
    1844:	2f 91       	pop	r18
    1846:	0f 90       	pop	r0
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	0f 90       	pop	r0
    184c:	1f 90       	pop	r1
    184e:	18 95       	reti

00001850 <__vector_1>:

ISR(INT0_vect) {
    1850:	1f 92       	push	r1
    1852:	0f 92       	push	r0
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	0f 92       	push	r0
    1858:	11 24       	eor	r1, r1
    185a:	8f 93       	push	r24
    185c:	9f 93       	push	r25
	pulse_v++;
    185e:	80 91 64 00 	lds	r24, 0x0064
    1862:	90 91 65 00 	lds	r25, 0x0065
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	90 93 65 00 	sts	0x0065, r25
    186c:	80 93 64 00 	sts	0x0064, r24
	pulse_pid++;
    1870:	80 91 62 00 	lds	r24, 0x0062
    1874:	90 91 63 00 	lds	r25, 0x0063
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	90 93 63 00 	sts	0x0063, r25
    187e:	80 93 62 00 	sts	0x0062, r24
    1882:	9f 91       	pop	r25
    1884:	8f 91       	pop	r24
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__subsf3>:
    1890:	50 58       	subi	r21, 0x80	; 128

00001892 <__addsf3>:
    1892:	bb 27       	eor	r27, r27
    1894:	aa 27       	eor	r26, r26
    1896:	0e d0       	rcall	.+28     	; 0x18b4 <__addsf3x>
    1898:	4d c1       	rjmp	.+666    	; 0x1b34 <__fp_round>
    189a:	3e d1       	rcall	.+636    	; 0x1b18 <__fp_pscA>
    189c:	30 f0       	brcs	.+12     	; 0x18aa <__addsf3+0x18>
    189e:	43 d1       	rcall	.+646    	; 0x1b26 <__fp_pscB>
    18a0:	20 f0       	brcs	.+8      	; 0x18aa <__addsf3+0x18>
    18a2:	31 f4       	brne	.+12     	; 0x18b0 <__addsf3+0x1e>
    18a4:	9f 3f       	cpi	r25, 0xFF	; 255
    18a6:	11 f4       	brne	.+4      	; 0x18ac <__addsf3+0x1a>
    18a8:	1e f4       	brtc	.+6      	; 0x18b0 <__addsf3+0x1e>
    18aa:	33 c1       	rjmp	.+614    	; 0x1b12 <__fp_nan>
    18ac:	0e f4       	brtc	.+2      	; 0x18b0 <__addsf3+0x1e>
    18ae:	e0 95       	com	r30
    18b0:	e7 fb       	bst	r30, 7
    18b2:	29 c1       	rjmp	.+594    	; 0x1b06 <__fp_inf>

000018b4 <__addsf3x>:
    18b4:	e9 2f       	mov	r30, r25
    18b6:	4f d1       	rcall	.+670    	; 0x1b56 <__fp_split3>
    18b8:	80 f3       	brcs	.-32     	; 0x189a <__addsf3+0x8>
    18ba:	ba 17       	cp	r27, r26
    18bc:	62 07       	cpc	r22, r18
    18be:	73 07       	cpc	r23, r19
    18c0:	84 07       	cpc	r24, r20
    18c2:	95 07       	cpc	r25, r21
    18c4:	18 f0       	brcs	.+6      	; 0x18cc <__addsf3x+0x18>
    18c6:	71 f4       	brne	.+28     	; 0x18e4 <__addsf3x+0x30>
    18c8:	9e f5       	brtc	.+102    	; 0x1930 <__addsf3x+0x7c>
    18ca:	67 c1       	rjmp	.+718    	; 0x1b9a <__fp_zero>
    18cc:	0e f4       	brtc	.+2      	; 0x18d0 <__addsf3x+0x1c>
    18ce:	e0 95       	com	r30
    18d0:	0b 2e       	mov	r0, r27
    18d2:	ba 2f       	mov	r27, r26
    18d4:	a0 2d       	mov	r26, r0
    18d6:	0b 01       	movw	r0, r22
    18d8:	b9 01       	movw	r22, r18
    18da:	90 01       	movw	r18, r0
    18dc:	0c 01       	movw	r0, r24
    18de:	ca 01       	movw	r24, r20
    18e0:	a0 01       	movw	r20, r0
    18e2:	11 24       	eor	r1, r1
    18e4:	ff 27       	eor	r31, r31
    18e6:	59 1b       	sub	r21, r25
    18e8:	99 f0       	breq	.+38     	; 0x1910 <__addsf3x+0x5c>
    18ea:	59 3f       	cpi	r21, 0xF9	; 249
    18ec:	50 f4       	brcc	.+20     	; 0x1902 <__addsf3x+0x4e>
    18ee:	50 3e       	cpi	r21, 0xE0	; 224
    18f0:	68 f1       	brcs	.+90     	; 0x194c <__addsf3x+0x98>
    18f2:	1a 16       	cp	r1, r26
    18f4:	f0 40       	sbci	r31, 0x00	; 0
    18f6:	a2 2f       	mov	r26, r18
    18f8:	23 2f       	mov	r18, r19
    18fa:	34 2f       	mov	r19, r20
    18fc:	44 27       	eor	r20, r20
    18fe:	58 5f       	subi	r21, 0xF8	; 248
    1900:	f3 cf       	rjmp	.-26     	; 0x18e8 <__addsf3x+0x34>
    1902:	46 95       	lsr	r20
    1904:	37 95       	ror	r19
    1906:	27 95       	ror	r18
    1908:	a7 95       	ror	r26
    190a:	f0 40       	sbci	r31, 0x00	; 0
    190c:	53 95       	inc	r21
    190e:	c9 f7       	brne	.-14     	; 0x1902 <__addsf3x+0x4e>
    1910:	7e f4       	brtc	.+30     	; 0x1930 <__addsf3x+0x7c>
    1912:	1f 16       	cp	r1, r31
    1914:	ba 0b       	sbc	r27, r26
    1916:	62 0b       	sbc	r22, r18
    1918:	73 0b       	sbc	r23, r19
    191a:	84 0b       	sbc	r24, r20
    191c:	ba f0       	brmi	.+46     	; 0x194c <__addsf3x+0x98>
    191e:	91 50       	subi	r25, 0x01	; 1
    1920:	a1 f0       	breq	.+40     	; 0x194a <__addsf3x+0x96>
    1922:	ff 0f       	add	r31, r31
    1924:	bb 1f       	adc	r27, r27
    1926:	66 1f       	adc	r22, r22
    1928:	77 1f       	adc	r23, r23
    192a:	88 1f       	adc	r24, r24
    192c:	c2 f7       	brpl	.-16     	; 0x191e <__addsf3x+0x6a>
    192e:	0e c0       	rjmp	.+28     	; 0x194c <__addsf3x+0x98>
    1930:	ba 0f       	add	r27, r26
    1932:	62 1f       	adc	r22, r18
    1934:	73 1f       	adc	r23, r19
    1936:	84 1f       	adc	r24, r20
    1938:	48 f4       	brcc	.+18     	; 0x194c <__addsf3x+0x98>
    193a:	87 95       	ror	r24
    193c:	77 95       	ror	r23
    193e:	67 95       	ror	r22
    1940:	b7 95       	ror	r27
    1942:	f7 95       	ror	r31
    1944:	9e 3f       	cpi	r25, 0xFE	; 254
    1946:	08 f0       	brcs	.+2      	; 0x194a <__addsf3x+0x96>
    1948:	b3 cf       	rjmp	.-154    	; 0x18b0 <__addsf3+0x1e>
    194a:	93 95       	inc	r25
    194c:	88 0f       	add	r24, r24
    194e:	08 f0       	brcs	.+2      	; 0x1952 <__addsf3x+0x9e>
    1950:	99 27       	eor	r25, r25
    1952:	ee 0f       	add	r30, r30
    1954:	97 95       	ror	r25
    1956:	87 95       	ror	r24
    1958:	08 95       	ret

0000195a <__divsf3>:
    195a:	0c d0       	rcall	.+24     	; 0x1974 <__divsf3x>
    195c:	eb c0       	rjmp	.+470    	; 0x1b34 <__fp_round>
    195e:	e3 d0       	rcall	.+454    	; 0x1b26 <__fp_pscB>
    1960:	40 f0       	brcs	.+16     	; 0x1972 <__divsf3+0x18>
    1962:	da d0       	rcall	.+436    	; 0x1b18 <__fp_pscA>
    1964:	30 f0       	brcs	.+12     	; 0x1972 <__divsf3+0x18>
    1966:	21 f4       	brne	.+8      	; 0x1970 <__divsf3+0x16>
    1968:	5f 3f       	cpi	r21, 0xFF	; 255
    196a:	19 f0       	breq	.+6      	; 0x1972 <__divsf3+0x18>
    196c:	cc c0       	rjmp	.+408    	; 0x1b06 <__fp_inf>
    196e:	51 11       	cpse	r21, r1
    1970:	15 c1       	rjmp	.+554    	; 0x1b9c <__fp_szero>
    1972:	cf c0       	rjmp	.+414    	; 0x1b12 <__fp_nan>

00001974 <__divsf3x>:
    1974:	f0 d0       	rcall	.+480    	; 0x1b56 <__fp_split3>
    1976:	98 f3       	brcs	.-26     	; 0x195e <__divsf3+0x4>

00001978 <__divsf3_pse>:
    1978:	99 23       	and	r25, r25
    197a:	c9 f3       	breq	.-14     	; 0x196e <__divsf3+0x14>
    197c:	55 23       	and	r21, r21
    197e:	b1 f3       	breq	.-20     	; 0x196c <__divsf3+0x12>
    1980:	95 1b       	sub	r25, r21
    1982:	55 0b       	sbc	r21, r21
    1984:	bb 27       	eor	r27, r27
    1986:	aa 27       	eor	r26, r26
    1988:	62 17       	cp	r22, r18
    198a:	73 07       	cpc	r23, r19
    198c:	84 07       	cpc	r24, r20
    198e:	38 f0       	brcs	.+14     	; 0x199e <__divsf3_pse+0x26>
    1990:	9f 5f       	subi	r25, 0xFF	; 255
    1992:	5f 4f       	sbci	r21, 0xFF	; 255
    1994:	22 0f       	add	r18, r18
    1996:	33 1f       	adc	r19, r19
    1998:	44 1f       	adc	r20, r20
    199a:	aa 1f       	adc	r26, r26
    199c:	a9 f3       	breq	.-22     	; 0x1988 <__divsf3_pse+0x10>
    199e:	33 d0       	rcall	.+102    	; 0x1a06 <__divsf3_pse+0x8e>
    19a0:	0e 2e       	mov	r0, r30
    19a2:	3a f0       	brmi	.+14     	; 0x19b2 <__divsf3_pse+0x3a>
    19a4:	e0 e8       	ldi	r30, 0x80	; 128
    19a6:	30 d0       	rcall	.+96     	; 0x1a08 <__divsf3_pse+0x90>
    19a8:	91 50       	subi	r25, 0x01	; 1
    19aa:	50 40       	sbci	r21, 0x00	; 0
    19ac:	e6 95       	lsr	r30
    19ae:	00 1c       	adc	r0, r0
    19b0:	ca f7       	brpl	.-14     	; 0x19a4 <__divsf3_pse+0x2c>
    19b2:	29 d0       	rcall	.+82     	; 0x1a06 <__divsf3_pse+0x8e>
    19b4:	fe 2f       	mov	r31, r30
    19b6:	27 d0       	rcall	.+78     	; 0x1a06 <__divsf3_pse+0x8e>
    19b8:	66 0f       	add	r22, r22
    19ba:	77 1f       	adc	r23, r23
    19bc:	88 1f       	adc	r24, r24
    19be:	bb 1f       	adc	r27, r27
    19c0:	26 17       	cp	r18, r22
    19c2:	37 07       	cpc	r19, r23
    19c4:	48 07       	cpc	r20, r24
    19c6:	ab 07       	cpc	r26, r27
    19c8:	b0 e8       	ldi	r27, 0x80	; 128
    19ca:	09 f0       	breq	.+2      	; 0x19ce <__divsf3_pse+0x56>
    19cc:	bb 0b       	sbc	r27, r27
    19ce:	80 2d       	mov	r24, r0
    19d0:	bf 01       	movw	r22, r30
    19d2:	ff 27       	eor	r31, r31
    19d4:	93 58       	subi	r25, 0x83	; 131
    19d6:	5f 4f       	sbci	r21, 0xFF	; 255
    19d8:	2a f0       	brmi	.+10     	; 0x19e4 <__divsf3_pse+0x6c>
    19da:	9e 3f       	cpi	r25, 0xFE	; 254
    19dc:	51 05       	cpc	r21, r1
    19de:	68 f0       	brcs	.+26     	; 0x19fa <__divsf3_pse+0x82>
    19e0:	92 c0       	rjmp	.+292    	; 0x1b06 <__fp_inf>
    19e2:	dc c0       	rjmp	.+440    	; 0x1b9c <__fp_szero>
    19e4:	5f 3f       	cpi	r21, 0xFF	; 255
    19e6:	ec f3       	brlt	.-6      	; 0x19e2 <__divsf3_pse+0x6a>
    19e8:	98 3e       	cpi	r25, 0xE8	; 232
    19ea:	dc f3       	brlt	.-10     	; 0x19e2 <__divsf3_pse+0x6a>
    19ec:	86 95       	lsr	r24
    19ee:	77 95       	ror	r23
    19f0:	67 95       	ror	r22
    19f2:	b7 95       	ror	r27
    19f4:	f7 95       	ror	r31
    19f6:	9f 5f       	subi	r25, 0xFF	; 255
    19f8:	c9 f7       	brne	.-14     	; 0x19ec <__divsf3_pse+0x74>
    19fa:	88 0f       	add	r24, r24
    19fc:	91 1d       	adc	r25, r1
    19fe:	96 95       	lsr	r25
    1a00:	87 95       	ror	r24
    1a02:	97 f9       	bld	r25, 7
    1a04:	08 95       	ret
    1a06:	e1 e0       	ldi	r30, 0x01	; 1
    1a08:	66 0f       	add	r22, r22
    1a0a:	77 1f       	adc	r23, r23
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	bb 1f       	adc	r27, r27
    1a10:	62 17       	cp	r22, r18
    1a12:	73 07       	cpc	r23, r19
    1a14:	84 07       	cpc	r24, r20
    1a16:	ba 07       	cpc	r27, r26
    1a18:	20 f0       	brcs	.+8      	; 0x1a22 <__divsf3_pse+0xaa>
    1a1a:	62 1b       	sub	r22, r18
    1a1c:	73 0b       	sbc	r23, r19
    1a1e:	84 0b       	sbc	r24, r20
    1a20:	ba 0b       	sbc	r27, r26
    1a22:	ee 1f       	adc	r30, r30
    1a24:	88 f7       	brcc	.-30     	; 0x1a08 <__divsf3_pse+0x90>
    1a26:	e0 95       	com	r30
    1a28:	08 95       	ret

00001a2a <__fixsfsi>:
    1a2a:	04 d0       	rcall	.+8      	; 0x1a34 <__fixunssfsi>
    1a2c:	68 94       	set
    1a2e:	b1 11       	cpse	r27, r1
    1a30:	b5 c0       	rjmp	.+362    	; 0x1b9c <__fp_szero>
    1a32:	08 95       	ret

00001a34 <__fixunssfsi>:
    1a34:	98 d0       	rcall	.+304    	; 0x1b66 <__fp_splitA>
    1a36:	88 f0       	brcs	.+34     	; 0x1a5a <__fixunssfsi+0x26>
    1a38:	9f 57       	subi	r25, 0x7F	; 127
    1a3a:	90 f0       	brcs	.+36     	; 0x1a60 <__fixunssfsi+0x2c>
    1a3c:	b9 2f       	mov	r27, r25
    1a3e:	99 27       	eor	r25, r25
    1a40:	b7 51       	subi	r27, 0x17	; 23
    1a42:	a0 f0       	brcs	.+40     	; 0x1a6c <__fixunssfsi+0x38>
    1a44:	d1 f0       	breq	.+52     	; 0x1a7a <__fixunssfsi+0x46>
    1a46:	66 0f       	add	r22, r22
    1a48:	77 1f       	adc	r23, r23
    1a4a:	88 1f       	adc	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	1a f0       	brmi	.+6      	; 0x1a56 <__fixunssfsi+0x22>
    1a50:	ba 95       	dec	r27
    1a52:	c9 f7       	brne	.-14     	; 0x1a46 <__fixunssfsi+0x12>
    1a54:	12 c0       	rjmp	.+36     	; 0x1a7a <__fixunssfsi+0x46>
    1a56:	b1 30       	cpi	r27, 0x01	; 1
    1a58:	81 f0       	breq	.+32     	; 0x1a7a <__fixunssfsi+0x46>
    1a5a:	9f d0       	rcall	.+318    	; 0x1b9a <__fp_zero>
    1a5c:	b1 e0       	ldi	r27, 0x01	; 1
    1a5e:	08 95       	ret
    1a60:	9c c0       	rjmp	.+312    	; 0x1b9a <__fp_zero>
    1a62:	67 2f       	mov	r22, r23
    1a64:	78 2f       	mov	r23, r24
    1a66:	88 27       	eor	r24, r24
    1a68:	b8 5f       	subi	r27, 0xF8	; 248
    1a6a:	39 f0       	breq	.+14     	; 0x1a7a <__fixunssfsi+0x46>
    1a6c:	b9 3f       	cpi	r27, 0xF9	; 249
    1a6e:	cc f3       	brlt	.-14     	; 0x1a62 <__fixunssfsi+0x2e>
    1a70:	86 95       	lsr	r24
    1a72:	77 95       	ror	r23
    1a74:	67 95       	ror	r22
    1a76:	b3 95       	inc	r27
    1a78:	d9 f7       	brne	.-10     	; 0x1a70 <__fixunssfsi+0x3c>
    1a7a:	3e f4       	brtc	.+14     	; 0x1a8a <__fixunssfsi+0x56>
    1a7c:	90 95       	com	r25
    1a7e:	80 95       	com	r24
    1a80:	70 95       	com	r23
    1a82:	61 95       	neg	r22
    1a84:	7f 4f       	sbci	r23, 0xFF	; 255
    1a86:	8f 4f       	sbci	r24, 0xFF	; 255
    1a88:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8a:	08 95       	ret

00001a8c <__floatunsisf>:
    1a8c:	e8 94       	clt
    1a8e:	09 c0       	rjmp	.+18     	; 0x1aa2 <__floatsisf+0x12>

00001a90 <__floatsisf>:
    1a90:	97 fb       	bst	r25, 7
    1a92:	3e f4       	brtc	.+14     	; 0x1aa2 <__floatsisf+0x12>
    1a94:	90 95       	com	r25
    1a96:	80 95       	com	r24
    1a98:	70 95       	com	r23
    1a9a:	61 95       	neg	r22
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	99 23       	and	r25, r25
    1aa4:	a9 f0       	breq	.+42     	; 0x1ad0 <__floatsisf+0x40>
    1aa6:	f9 2f       	mov	r31, r25
    1aa8:	96 e9       	ldi	r25, 0x96	; 150
    1aaa:	bb 27       	eor	r27, r27
    1aac:	93 95       	inc	r25
    1aae:	f6 95       	lsr	r31
    1ab0:	87 95       	ror	r24
    1ab2:	77 95       	ror	r23
    1ab4:	67 95       	ror	r22
    1ab6:	b7 95       	ror	r27
    1ab8:	f1 11       	cpse	r31, r1
    1aba:	f8 cf       	rjmp	.-16     	; 0x1aac <__floatsisf+0x1c>
    1abc:	fa f4       	brpl	.+62     	; 0x1afc <__floatsisf+0x6c>
    1abe:	bb 0f       	add	r27, r27
    1ac0:	11 f4       	brne	.+4      	; 0x1ac6 <__floatsisf+0x36>
    1ac2:	60 ff       	sbrs	r22, 0
    1ac4:	1b c0       	rjmp	.+54     	; 0x1afc <__floatsisf+0x6c>
    1ac6:	6f 5f       	subi	r22, 0xFF	; 255
    1ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aca:	8f 4f       	sbci	r24, 0xFF	; 255
    1acc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ace:	16 c0       	rjmp	.+44     	; 0x1afc <__floatsisf+0x6c>
    1ad0:	88 23       	and	r24, r24
    1ad2:	11 f0       	breq	.+4      	; 0x1ad8 <__floatsisf+0x48>
    1ad4:	96 e9       	ldi	r25, 0x96	; 150
    1ad6:	11 c0       	rjmp	.+34     	; 0x1afa <__floatsisf+0x6a>
    1ad8:	77 23       	and	r23, r23
    1ada:	21 f0       	breq	.+8      	; 0x1ae4 <__floatsisf+0x54>
    1adc:	9e e8       	ldi	r25, 0x8E	; 142
    1ade:	87 2f       	mov	r24, r23
    1ae0:	76 2f       	mov	r23, r22
    1ae2:	05 c0       	rjmp	.+10     	; 0x1aee <__floatsisf+0x5e>
    1ae4:	66 23       	and	r22, r22
    1ae6:	71 f0       	breq	.+28     	; 0x1b04 <__floatsisf+0x74>
    1ae8:	96 e8       	ldi	r25, 0x86	; 134
    1aea:	86 2f       	mov	r24, r22
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	2a f0       	brmi	.+10     	; 0x1afc <__floatsisf+0x6c>
    1af2:	9a 95       	dec	r25
    1af4:	66 0f       	add	r22, r22
    1af6:	77 1f       	adc	r23, r23
    1af8:	88 1f       	adc	r24, r24
    1afa:	da f7       	brpl	.-10     	; 0x1af2 <__floatsisf+0x62>
    1afc:	88 0f       	add	r24, r24
    1afe:	96 95       	lsr	r25
    1b00:	87 95       	ror	r24
    1b02:	97 f9       	bld	r25, 7
    1b04:	08 95       	ret

00001b06 <__fp_inf>:
    1b06:	97 f9       	bld	r25, 7
    1b08:	9f 67       	ori	r25, 0x7F	; 127
    1b0a:	80 e8       	ldi	r24, 0x80	; 128
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	08 95       	ret

00001b12 <__fp_nan>:
    1b12:	9f ef       	ldi	r25, 0xFF	; 255
    1b14:	80 ec       	ldi	r24, 0xC0	; 192
    1b16:	08 95       	ret

00001b18 <__fp_pscA>:
    1b18:	00 24       	eor	r0, r0
    1b1a:	0a 94       	dec	r0
    1b1c:	16 16       	cp	r1, r22
    1b1e:	17 06       	cpc	r1, r23
    1b20:	18 06       	cpc	r1, r24
    1b22:	09 06       	cpc	r0, r25
    1b24:	08 95       	ret

00001b26 <__fp_pscB>:
    1b26:	00 24       	eor	r0, r0
    1b28:	0a 94       	dec	r0
    1b2a:	12 16       	cp	r1, r18
    1b2c:	13 06       	cpc	r1, r19
    1b2e:	14 06       	cpc	r1, r20
    1b30:	05 06       	cpc	r0, r21
    1b32:	08 95       	ret

00001b34 <__fp_round>:
    1b34:	09 2e       	mov	r0, r25
    1b36:	03 94       	inc	r0
    1b38:	00 0c       	add	r0, r0
    1b3a:	11 f4       	brne	.+4      	; 0x1b40 <__fp_round+0xc>
    1b3c:	88 23       	and	r24, r24
    1b3e:	52 f0       	brmi	.+20     	; 0x1b54 <__fp_round+0x20>
    1b40:	bb 0f       	add	r27, r27
    1b42:	40 f4       	brcc	.+16     	; 0x1b54 <__fp_round+0x20>
    1b44:	bf 2b       	or	r27, r31
    1b46:	11 f4       	brne	.+4      	; 0x1b4c <__fp_round+0x18>
    1b48:	60 ff       	sbrs	r22, 0
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <__fp_round+0x20>
    1b4c:	6f 5f       	subi	r22, 0xFF	; 255
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b50:	8f 4f       	sbci	r24, 0xFF	; 255
    1b52:	9f 4f       	sbci	r25, 0xFF	; 255
    1b54:	08 95       	ret

00001b56 <__fp_split3>:
    1b56:	57 fd       	sbrc	r21, 7
    1b58:	90 58       	subi	r25, 0x80	; 128
    1b5a:	44 0f       	add	r20, r20
    1b5c:	55 1f       	adc	r21, r21
    1b5e:	59 f0       	breq	.+22     	; 0x1b76 <__fp_splitA+0x10>
    1b60:	5f 3f       	cpi	r21, 0xFF	; 255
    1b62:	71 f0       	breq	.+28     	; 0x1b80 <__fp_splitA+0x1a>
    1b64:	47 95       	ror	r20

00001b66 <__fp_splitA>:
    1b66:	88 0f       	add	r24, r24
    1b68:	97 fb       	bst	r25, 7
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	61 f0       	breq	.+24     	; 0x1b86 <__fp_splitA+0x20>
    1b6e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b70:	79 f0       	breq	.+30     	; 0x1b90 <__fp_splitA+0x2a>
    1b72:	87 95       	ror	r24
    1b74:	08 95       	ret
    1b76:	12 16       	cp	r1, r18
    1b78:	13 06       	cpc	r1, r19
    1b7a:	14 06       	cpc	r1, r20
    1b7c:	55 1f       	adc	r21, r21
    1b7e:	f2 cf       	rjmp	.-28     	; 0x1b64 <__fp_split3+0xe>
    1b80:	46 95       	lsr	r20
    1b82:	f1 df       	rcall	.-30     	; 0x1b66 <__fp_splitA>
    1b84:	08 c0       	rjmp	.+16     	; 0x1b96 <__fp_splitA+0x30>
    1b86:	16 16       	cp	r1, r22
    1b88:	17 06       	cpc	r1, r23
    1b8a:	18 06       	cpc	r1, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	f1 cf       	rjmp	.-30     	; 0x1b72 <__fp_splitA+0xc>
    1b90:	86 95       	lsr	r24
    1b92:	71 05       	cpc	r23, r1
    1b94:	61 05       	cpc	r22, r1
    1b96:	08 94       	sec
    1b98:	08 95       	ret

00001b9a <__fp_zero>:
    1b9a:	e8 94       	clt

00001b9c <__fp_szero>:
    1b9c:	bb 27       	eor	r27, r27
    1b9e:	66 27       	eor	r22, r22
    1ba0:	77 27       	eor	r23, r23
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	97 f9       	bld	r25, 7
    1ba6:	08 95       	ret

00001ba8 <__mulsf3>:
    1ba8:	0b d0       	rcall	.+22     	; 0x1bc0 <__mulsf3x>
    1baa:	c4 cf       	rjmp	.-120    	; 0x1b34 <__fp_round>
    1bac:	b5 df       	rcall	.-150    	; 0x1b18 <__fp_pscA>
    1bae:	28 f0       	brcs	.+10     	; 0x1bba <__mulsf3+0x12>
    1bb0:	ba df       	rcall	.-140    	; 0x1b26 <__fp_pscB>
    1bb2:	18 f0       	brcs	.+6      	; 0x1bba <__mulsf3+0x12>
    1bb4:	95 23       	and	r25, r21
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <__mulsf3+0x12>
    1bb8:	a6 cf       	rjmp	.-180    	; 0x1b06 <__fp_inf>
    1bba:	ab cf       	rjmp	.-170    	; 0x1b12 <__fp_nan>
    1bbc:	11 24       	eor	r1, r1
    1bbe:	ee cf       	rjmp	.-36     	; 0x1b9c <__fp_szero>

00001bc0 <__mulsf3x>:
    1bc0:	ca df       	rcall	.-108    	; 0x1b56 <__fp_split3>
    1bc2:	a0 f3       	brcs	.-24     	; 0x1bac <__mulsf3+0x4>

00001bc4 <__mulsf3_pse>:
    1bc4:	95 9f       	mul	r25, r21
    1bc6:	d1 f3       	breq	.-12     	; 0x1bbc <__mulsf3+0x14>
    1bc8:	95 0f       	add	r25, r21
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	55 1f       	adc	r21, r21
    1bce:	62 9f       	mul	r22, r18
    1bd0:	f0 01       	movw	r30, r0
    1bd2:	72 9f       	mul	r23, r18
    1bd4:	bb 27       	eor	r27, r27
    1bd6:	f0 0d       	add	r31, r0
    1bd8:	b1 1d       	adc	r27, r1
    1bda:	63 9f       	mul	r22, r19
    1bdc:	aa 27       	eor	r26, r26
    1bde:	f0 0d       	add	r31, r0
    1be0:	b1 1d       	adc	r27, r1
    1be2:	aa 1f       	adc	r26, r26
    1be4:	64 9f       	mul	r22, r20
    1be6:	66 27       	eor	r22, r22
    1be8:	b0 0d       	add	r27, r0
    1bea:	a1 1d       	adc	r26, r1
    1bec:	66 1f       	adc	r22, r22
    1bee:	82 9f       	mul	r24, r18
    1bf0:	22 27       	eor	r18, r18
    1bf2:	b0 0d       	add	r27, r0
    1bf4:	a1 1d       	adc	r26, r1
    1bf6:	62 1f       	adc	r22, r18
    1bf8:	73 9f       	mul	r23, r19
    1bfa:	b0 0d       	add	r27, r0
    1bfc:	a1 1d       	adc	r26, r1
    1bfe:	62 1f       	adc	r22, r18
    1c00:	83 9f       	mul	r24, r19
    1c02:	a0 0d       	add	r26, r0
    1c04:	61 1d       	adc	r22, r1
    1c06:	22 1f       	adc	r18, r18
    1c08:	74 9f       	mul	r23, r20
    1c0a:	33 27       	eor	r19, r19
    1c0c:	a0 0d       	add	r26, r0
    1c0e:	61 1d       	adc	r22, r1
    1c10:	23 1f       	adc	r18, r19
    1c12:	84 9f       	mul	r24, r20
    1c14:	60 0d       	add	r22, r0
    1c16:	21 1d       	adc	r18, r1
    1c18:	82 2f       	mov	r24, r18
    1c1a:	76 2f       	mov	r23, r22
    1c1c:	6a 2f       	mov	r22, r26
    1c1e:	11 24       	eor	r1, r1
    1c20:	9f 57       	subi	r25, 0x7F	; 127
    1c22:	50 40       	sbci	r21, 0x00	; 0
    1c24:	8a f0       	brmi	.+34     	; 0x1c48 <__mulsf3_pse+0x84>
    1c26:	e1 f0       	breq	.+56     	; 0x1c60 <__mulsf3_pse+0x9c>
    1c28:	88 23       	and	r24, r24
    1c2a:	4a f0       	brmi	.+18     	; 0x1c3e <__mulsf3_pse+0x7a>
    1c2c:	ee 0f       	add	r30, r30
    1c2e:	ff 1f       	adc	r31, r31
    1c30:	bb 1f       	adc	r27, r27
    1c32:	66 1f       	adc	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	88 1f       	adc	r24, r24
    1c38:	91 50       	subi	r25, 0x01	; 1
    1c3a:	50 40       	sbci	r21, 0x00	; 0
    1c3c:	a9 f7       	brne	.-22     	; 0x1c28 <__mulsf3_pse+0x64>
    1c3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c40:	51 05       	cpc	r21, r1
    1c42:	70 f0       	brcs	.+28     	; 0x1c60 <__mulsf3_pse+0x9c>
    1c44:	60 cf       	rjmp	.-320    	; 0x1b06 <__fp_inf>
    1c46:	aa cf       	rjmp	.-172    	; 0x1b9c <__fp_szero>
    1c48:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4a:	ec f3       	brlt	.-6      	; 0x1c46 <__mulsf3_pse+0x82>
    1c4c:	98 3e       	cpi	r25, 0xE8	; 232
    1c4e:	dc f3       	brlt	.-10     	; 0x1c46 <__mulsf3_pse+0x82>
    1c50:	86 95       	lsr	r24
    1c52:	77 95       	ror	r23
    1c54:	67 95       	ror	r22
    1c56:	b7 95       	ror	r27
    1c58:	f7 95       	ror	r31
    1c5a:	e7 95       	ror	r30
    1c5c:	9f 5f       	subi	r25, 0xFF	; 255
    1c5e:	c1 f7       	brne	.-16     	; 0x1c50 <__mulsf3_pse+0x8c>
    1c60:	fe 2b       	or	r31, r30
    1c62:	88 0f       	add	r24, r24
    1c64:	91 1d       	adc	r25, r1
    1c66:	96 95       	lsr	r25
    1c68:	87 95       	ror	r24
    1c6a:	97 f9       	bld	r25, 7
    1c6c:	08 95       	ret

00001c6e <__divmodhi4>:
    1c6e:	97 fb       	bst	r25, 7
    1c70:	07 2e       	mov	r0, r23
    1c72:	16 f4       	brtc	.+4      	; 0x1c78 <__divmodhi4+0xa>
    1c74:	00 94       	com	r0
    1c76:	07 d0       	rcall	.+14     	; 0x1c86 <__divmodhi4_neg1>
    1c78:	77 fd       	sbrc	r23, 7
    1c7a:	09 d0       	rcall	.+18     	; 0x1c8e <__divmodhi4_neg2>
    1c7c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__udivmodhi4>
    1c80:	07 fc       	sbrc	r0, 7
    1c82:	05 d0       	rcall	.+10     	; 0x1c8e <__divmodhi4_neg2>
    1c84:	3e f4       	brtc	.+14     	; 0x1c94 <__divmodhi4_exit>

00001c86 <__divmodhi4_neg1>:
    1c86:	90 95       	com	r25
    1c88:	81 95       	neg	r24
    1c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8c:	08 95       	ret

00001c8e <__divmodhi4_neg2>:
    1c8e:	70 95       	com	r23
    1c90:	61 95       	neg	r22
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255

00001c94 <__divmodhi4_exit>:
    1c94:	08 95       	ret

00001c96 <__udivmodsi4>:
    1c96:	a1 e2       	ldi	r26, 0x21	; 33
    1c98:	1a 2e       	mov	r1, r26
    1c9a:	aa 1b       	sub	r26, r26
    1c9c:	bb 1b       	sub	r27, r27
    1c9e:	fd 01       	movw	r30, r26
    1ca0:	0d c0       	rjmp	.+26     	; 0x1cbc <__udivmodsi4_ep>

00001ca2 <__udivmodsi4_loop>:
    1ca2:	aa 1f       	adc	r26, r26
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	ee 1f       	adc	r30, r30
    1ca8:	ff 1f       	adc	r31, r31
    1caa:	a2 17       	cp	r26, r18
    1cac:	b3 07       	cpc	r27, r19
    1cae:	e4 07       	cpc	r30, r20
    1cb0:	f5 07       	cpc	r31, r21
    1cb2:	20 f0       	brcs	.+8      	; 0x1cbc <__udivmodsi4_ep>
    1cb4:	a2 1b       	sub	r26, r18
    1cb6:	b3 0b       	sbc	r27, r19
    1cb8:	e4 0b       	sbc	r30, r20
    1cba:	f5 0b       	sbc	r31, r21

00001cbc <__udivmodsi4_ep>:
    1cbc:	66 1f       	adc	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	1a 94       	dec	r1
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <__udivmodsi4_loop>
    1cc8:	60 95       	com	r22
    1cca:	70 95       	com	r23
    1ccc:	80 95       	com	r24
    1cce:	90 95       	com	r25
    1cd0:	9b 01       	movw	r18, r22
    1cd2:	ac 01       	movw	r20, r24
    1cd4:	bd 01       	movw	r22, r26
    1cd6:	cf 01       	movw	r24, r30
    1cd8:	08 95       	ret

00001cda <__divmodsi4>:
    1cda:	05 2e       	mov	r0, r21
    1cdc:	97 fb       	bst	r25, 7
    1cde:	1e f4       	brtc	.+6      	; 0x1ce6 <__divmodsi4+0xc>
    1ce0:	00 94       	com	r0
    1ce2:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__negsi2>
    1ce6:	57 fd       	sbrc	r21, 7
    1ce8:	07 d0       	rcall	.+14     	; 0x1cf8 <__divmodsi4_neg2>
    1cea:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__udivmodsi4>
    1cee:	07 fc       	sbrc	r0, 7
    1cf0:	03 d0       	rcall	.+6      	; 0x1cf8 <__divmodsi4_neg2>
    1cf2:	4e f4       	brtc	.+18     	; 0x1d06 <__divmodsi4_exit>
    1cf4:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__negsi2>

00001cf8 <__divmodsi4_neg2>:
    1cf8:	50 95       	com	r21
    1cfa:	40 95       	com	r20
    1cfc:	30 95       	com	r19
    1cfe:	21 95       	neg	r18
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	4f 4f       	sbci	r20, 0xFF	; 255
    1d04:	5f 4f       	sbci	r21, 0xFF	; 255

00001d06 <__divmodsi4_exit>:
    1d06:	08 95       	ret

00001d08 <__negsi2>:
    1d08:	90 95       	com	r25
    1d0a:	80 95       	com	r24
    1d0c:	70 95       	com	r23
    1d0e:	61 95       	neg	r22
    1d10:	7f 4f       	sbci	r23, 0xFF	; 255
    1d12:	8f 4f       	sbci	r24, 0xFF	; 255
    1d14:	9f 4f       	sbci	r25, 0xFF	; 255
    1d16:	08 95       	ret

00001d18 <__tablejump2__>:
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31

00001d1c <__tablejump__>:
    1d1c:	05 90       	lpm	r0, Z+
    1d1e:	f4 91       	lpm	r31, Z
    1d20:	e0 2d       	mov	r30, r0
    1d22:	09 94       	ijmp

00001d24 <__mulshisi3>:
    1d24:	b7 ff       	sbrs	r27, 7
    1d26:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__muluhisi3>

00001d2a <__mulohisi3>:
    1d2a:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__muluhisi3>
    1d2e:	82 1b       	sub	r24, r18
    1d30:	93 0b       	sbc	r25, r19
    1d32:	08 95       	ret

00001d34 <__udivmodhi4>:
    1d34:	aa 1b       	sub	r26, r26
    1d36:	bb 1b       	sub	r27, r27
    1d38:	51 e1       	ldi	r21, 0x11	; 17
    1d3a:	07 c0       	rjmp	.+14     	; 0x1d4a <__udivmodhi4_ep>

00001d3c <__udivmodhi4_loop>:
    1d3c:	aa 1f       	adc	r26, r26
    1d3e:	bb 1f       	adc	r27, r27
    1d40:	a6 17       	cp	r26, r22
    1d42:	b7 07       	cpc	r27, r23
    1d44:	10 f0       	brcs	.+4      	; 0x1d4a <__udivmodhi4_ep>
    1d46:	a6 1b       	sub	r26, r22
    1d48:	b7 0b       	sbc	r27, r23

00001d4a <__udivmodhi4_ep>:
    1d4a:	88 1f       	adc	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	5a 95       	dec	r21
    1d50:	a9 f7       	brne	.-22     	; 0x1d3c <__udivmodhi4_loop>
    1d52:	80 95       	com	r24
    1d54:	90 95       	com	r25
    1d56:	bc 01       	movw	r22, r24
    1d58:	cd 01       	movw	r24, r26
    1d5a:	08 95       	ret

00001d5c <__muluhisi3>:
    1d5c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__umulhisi3>
    1d60:	a5 9f       	mul	r26, r21
    1d62:	90 0d       	add	r25, r0
    1d64:	b4 9f       	mul	r27, r20
    1d66:	90 0d       	add	r25, r0
    1d68:	a4 9f       	mul	r26, r20
    1d6a:	80 0d       	add	r24, r0
    1d6c:	91 1d       	adc	r25, r1
    1d6e:	11 24       	eor	r1, r1
    1d70:	08 95       	ret

00001d72 <__umulhisi3>:
    1d72:	a2 9f       	mul	r26, r18
    1d74:	b0 01       	movw	r22, r0
    1d76:	b3 9f       	mul	r27, r19
    1d78:	c0 01       	movw	r24, r0
    1d7a:	a3 9f       	mul	r26, r19
    1d7c:	70 0d       	add	r23, r0
    1d7e:	81 1d       	adc	r24, r1
    1d80:	11 24       	eor	r1, r1
    1d82:	91 1d       	adc	r25, r1
    1d84:	b2 9f       	mul	r27, r18
    1d86:	70 0d       	add	r23, r0
    1d88:	81 1d       	adc	r24, r1
    1d8a:	11 24       	eor	r1, r1
    1d8c:	91 1d       	adc	r25, r1
    1d8e:	08 95       	ret

00001d90 <__eerd_block_m16a>:
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22

00001d94 <__eerd_blraw_m16a>:
    1d94:	fc 01       	movw	r30, r24
    1d96:	e1 99       	sbic	0x1c, 1	; 28
    1d98:	fe cf       	rjmp	.-4      	; 0x1d96 <__eerd_blraw_m16a+0x2>
    1d9a:	06 c0       	rjmp	.+12     	; 0x1da8 <__eerd_blraw_m16a+0x14>
    1d9c:	ff bb       	out	0x1f, r31	; 31
    1d9e:	ee bb       	out	0x1e, r30	; 30
    1da0:	e0 9a       	sbi	0x1c, 0	; 28
    1da2:	31 96       	adiw	r30, 0x01	; 1
    1da4:	0d b2       	in	r0, 0x1d	; 29
    1da6:	0d 92       	st	X+, r0
    1da8:	41 50       	subi	r20, 0x01	; 1
    1daa:	50 40       	sbci	r21, 0x00	; 0
    1dac:	b8 f7       	brcc	.-18     	; 0x1d9c <__eerd_blraw_m16a+0x8>
    1dae:	08 95       	ret

00001db0 <__eerd_byte_m16a>:
    1db0:	e1 99       	sbic	0x1c, 1	; 28
    1db2:	fe cf       	rjmp	.-4      	; 0x1db0 <__eerd_byte_m16a>
    1db4:	9f bb       	out	0x1f, r25	; 31
    1db6:	8e bb       	out	0x1e, r24	; 30
    1db8:	e0 9a       	sbi	0x1c, 0	; 28
    1dba:	99 27       	eor	r25, r25
    1dbc:	8d b3       	in	r24, 0x1d	; 29
    1dbe:	08 95       	ret

00001dc0 <__eerd_word_m16a>:
    1dc0:	a8 e1       	ldi	r26, 0x18	; 24
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	42 e0       	ldi	r20, 0x02	; 2
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__eerd_blraw_m16a>

00001dcc <__eewr_byte_m16a>:
    1dcc:	26 2f       	mov	r18, r22

00001dce <__eewr_r18_m16a>:
    1dce:	e1 99       	sbic	0x1c, 1	; 28
    1dd0:	fe cf       	rjmp	.-4      	; 0x1dce <__eewr_r18_m16a>
    1dd2:	9f bb       	out	0x1f, r25	; 31
    1dd4:	8e bb       	out	0x1e, r24	; 30
    1dd6:	2d bb       	out	0x1d, r18	; 29
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	e2 9a       	sbi	0x1c, 2	; 28
    1dde:	e1 9a       	sbi	0x1c, 1	; 28
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	08 95       	ret

00001de6 <__eewr_word_m16a>:
    1de6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__eewr_byte_m16a>
    1dea:	27 2f       	mov	r18, r23
    1dec:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__eewr_r18_m16a>

00001df0 <_exit>:
    1df0:	f8 94       	cli

00001df2 <__stop_program>:
    1df2:	ff cf       	rjmp	.-2      	; 0x1df2 <__stop_program>
