
XE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000824  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000824  000008d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800062  00800062  000008da  2**0
                  ALLOC
  3 .eeprom       00000020  00810000  00810000  000008da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bbd  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000038d  00000000  00000000  000015d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bb  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00001e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3b  00000000  00000000  000024fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ac 03 	jmp	0x758	; 0x758 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3a       	cpi	r26, 0xA6	; 166
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ee 02 	call	0x5dc	; 0x5dc <main>
  8a:	0c 94 10 04 	jmp	0x820	; 0x820 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pid_Controller>:
 *  \param setPoint  Desired value.  
 *  \param processValue  Measured value.  
 *  \param pid_st  PID status struct.  
 */ 
int16_t pid_Controller(int16_t setPoint, int16_t processValue, struct PID_DATA *pid_st)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	eb 01       	movw	r28, r22
  9c:	fa 01       	movw	r30, r20
	int16_t error, p_term, d_term;
	int32_t i_term, ret, temp;
	
	error = setPoint - processValue;
  9e:	86 1b       	sub	r24, r22
  a0:	97 0b       	sbc	r25, r23
	
	// Calculate Pterm and limit error overflow
	if (error > pid_st->maxError){
  a2:	24 85       	ldd	r18, Z+12	; 0x0c
  a4:	35 85       	ldd	r19, Z+13	; 0x0d
  a6:	28 17       	cp	r18, r24
  a8:	39 07       	cpc	r19, r25
  aa:	84 f0       	brlt	.+32     	; 0xcc <pid_Controller+0x3a>
		p_term = MAX_INT;
	}
	else if (error < -pid_st->maxError){
  ac:	31 95       	neg	r19
  ae:	21 95       	neg	r18
  b0:	31 09       	sbc	r19, r1
  b2:	82 17       	cp	r24, r18
  b4:	93 07       	cpc	r25, r19
  b6:	6c f0       	brlt	.+26     	; 0xd2 <pid_Controller+0x40>
		p_term = -MAX_INT;
	}
	else{
		p_term = pid_st->P_Factor * error;
  b8:	26 81       	ldd	r18, Z+6	; 0x06
  ba:	37 81       	ldd	r19, Z+7	; 0x07
  bc:	82 9f       	mul	r24, r18
  be:	80 01       	movw	r16, r0
  c0:	83 9f       	mul	r24, r19
  c2:	10 0d       	add	r17, r0
  c4:	92 9f       	mul	r25, r18
  c6:	10 0d       	add	r17, r0
  c8:	11 24       	eor	r1, r1
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <pid_Controller+0x44>
	
	error = setPoint - processValue;
	
	// Calculate Pterm and limit error overflow
	if (error > pid_st->maxError){
		p_term = MAX_INT;
  cc:	0f ef       	ldi	r16, 0xFF	; 255
  ce:	1f e7       	ldi	r17, 0x7F	; 127
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <pid_Controller+0x44>
	}
	else if (error < -pid_st->maxError){
		p_term = -MAX_INT;
  d2:	01 e0       	ldi	r16, 0x01	; 1
  d4:	10 e8       	ldi	r17, 0x80	; 128
	else{
		p_term = pid_st->P_Factor * error;
	}
	
	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + error;
  d6:	aa 27       	eor	r26, r26
  d8:	97 fd       	sbrc	r25, 7
  da:	a0 95       	com	r26
  dc:	ba 2f       	mov	r27, r26
  de:	42 81       	ldd	r20, Z+2	; 0x02
  e0:	53 81       	ldd	r21, Z+3	; 0x03
  e2:	64 81       	ldd	r22, Z+4	; 0x04
  e4:	75 81       	ldd	r23, Z+5	; 0x05
  e6:	9a 01       	movw	r18, r20
  e8:	ab 01       	movw	r20, r22
  ea:	28 0f       	add	r18, r24
  ec:	39 1f       	adc	r19, r25
  ee:	4a 1f       	adc	r20, r26
  f0:	5b 1f       	adc	r21, r27
	if(temp > pid_st->maxSumError){
  f2:	86 85       	ldd	r24, Z+14	; 0x0e
  f4:	97 85       	ldd	r25, Z+15	; 0x0f
  f6:	a0 89       	ldd	r26, Z+16	; 0x10
  f8:	b1 89       	ldd	r27, Z+17	; 0x11
  fa:	82 17       	cp	r24, r18
  fc:	93 07       	cpc	r25, r19
  fe:	a4 07       	cpc	r26, r20
 100:	b5 07       	cpc	r27, r21
 102:	4c f4       	brge	.+18     	; 0x116 <pid_Controller+0x84>
		i_term = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
 104:	82 83       	std	Z+2, r24	; 0x02
 106:	93 83       	std	Z+3, r25	; 0x03
 108:	a4 83       	std	Z+4, r26	; 0x04
 10a:	b5 83       	std	Z+5, r27	; 0x05
	}
	
	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + error;
	if(temp > pid_st->maxSumError){
		i_term = MAX_I_TERM;
 10c:	6f ef       	ldi	r22, 0xFF	; 255
 10e:	7f ef       	ldi	r23, 0xFF	; 255
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	9f e3       	ldi	r25, 0x3F	; 63
 114:	1d c0       	rjmp	.+58     	; 0x150 <pid_Controller+0xbe>
		pid_st->sumError = pid_st->maxSumError;
	}
	else if(temp < -pid_st->maxSumError){
 116:	b0 95       	com	r27
 118:	a0 95       	com	r26
 11a:	90 95       	com	r25
 11c:	81 95       	neg	r24
 11e:	9f 4f       	sbci	r25, 0xFF	; 255
 120:	af 4f       	sbci	r26, 0xFF	; 255
 122:	bf 4f       	sbci	r27, 0xFF	; 255
 124:	28 17       	cp	r18, r24
 126:	39 07       	cpc	r19, r25
 128:	4a 07       	cpc	r20, r26
 12a:	5b 07       	cpc	r21, r27
 12c:	4c f4       	brge	.+18     	; 0x140 <pid_Controller+0xae>
		i_term = -MAX_I_TERM;
		pid_st->sumError = -pid_st->maxSumError;
 12e:	82 83       	std	Z+2, r24	; 0x02
 130:	93 83       	std	Z+3, r25	; 0x03
 132:	a4 83       	std	Z+4, r26	; 0x04
 134:	b5 83       	std	Z+5, r27	; 0x05
	if(temp > pid_st->maxSumError){
		i_term = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
	}
	else if(temp < -pid_st->maxSumError){
		i_term = -MAX_I_TERM;
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 ec       	ldi	r25, 0xC0	; 192
 13e:	08 c0       	rjmp	.+16     	; 0x150 <pid_Controller+0xbe>
		pid_st->sumError = -pid_st->maxSumError;
	}
	else{
		pid_st->sumError = temp;
 140:	22 83       	std	Z+2, r18	; 0x02
 142:	33 83       	std	Z+3, r19	; 0x03
 144:	44 83       	std	Z+4, r20	; 0x04
 146:	55 83       	std	Z+5, r21	; 0x05
		i_term = pid_st->I_Factor * pid_st->sumError;
 148:	a0 85       	ldd	r26, Z+8	; 0x08
 14a:	b1 85       	ldd	r27, Z+9	; 0x09
 14c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__mulshisi3>
	}
	
	// Calculate Dterm
	d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
 150:	40 81       	ld	r20, Z
 152:	51 81       	ldd	r21, Z+1	; 0x01
 154:	4c 1b       	sub	r20, r28
 156:	5d 0b       	sbc	r21, r29
 158:	22 85       	ldd	r18, Z+10	; 0x0a
 15a:	33 85       	ldd	r19, Z+11	; 0x0b
 15c:	42 9f       	mul	r20, r18
 15e:	d0 01       	movw	r26, r0
 160:	43 9f       	mul	r20, r19
 162:	b0 0d       	add	r27, r0
 164:	52 9f       	mul	r21, r18
 166:	b0 0d       	add	r27, r0
 168:	11 24       	eor	r1, r1
	
	pid_st->lastProcessValue = processValue;
 16a:	d1 83       	std	Z+1, r29	; 0x01
 16c:	c0 83       	st	Z, r28
	
	ret = (p_term + i_term + d_term) / SCALING_FACTOR;
 16e:	22 27       	eor	r18, r18
 170:	17 fd       	sbrc	r17, 7
 172:	20 95       	com	r18
 174:	32 2f       	mov	r19, r18
 176:	06 0f       	add	r16, r22
 178:	17 1f       	adc	r17, r23
 17a:	28 1f       	adc	r18, r24
 17c:	39 1f       	adc	r19, r25
 17e:	cd 01       	movw	r24, r26
 180:	aa 27       	eor	r26, r26
 182:	97 fd       	sbrc	r25, 7
 184:	a0 95       	com	r26
 186:	ba 2f       	mov	r27, r26
 188:	08 0f       	add	r16, r24
 18a:	19 1f       	adc	r17, r25
 18c:	2a 1f       	adc	r18, r26
 18e:	3b 1f       	adc	r19, r27
 190:	d9 01       	movw	r26, r18
 192:	c8 01       	movw	r24, r16
 194:	33 23       	and	r19, r19
 196:	24 f4       	brge	.+8      	; 0x1a0 <pid_Controller+0x10e>
 198:	81 58       	subi	r24, 0x81	; 129
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
 19c:	af 4f       	sbci	r26, 0xFF	; 255
 19e:	bf 4f       	sbci	r27, 0xFF	; 255
 1a0:	68 94       	set
 1a2:	16 f8       	bld	r1, 6
 1a4:	b5 95       	asr	r27
 1a6:	a7 95       	ror	r26
 1a8:	97 95       	ror	r25
 1aa:	87 95       	ror	r24
 1ac:	16 94       	lsr	r1
 1ae:	d1 f7       	brne	.-12     	; 0x1a4 <pid_Controller+0x112>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	20 e8       	ldi	r18, 0x80	; 128
 1b4:	92 07       	cpc	r25, r18
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	a2 07       	cpc	r26, r18
 1ba:	b2 07       	cpc	r27, r18
 1bc:	24 f4       	brge	.+8      	; 0x1c6 <pid_Controller+0x134>
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e8       	ldi	r25, 0x80	; 128
 1c2:	af ef       	ldi	r26, 0xFF	; 255
 1c4:	bf ef       	ldi	r27, 0xFF	; 255
 1c6:	81 15       	cp	r24, r1
 1c8:	20 e8       	ldi	r18, 0x80	; 128
 1ca:	92 07       	cpc	r25, r18
 1cc:	a1 05       	cpc	r26, r1
 1ce:	b1 05       	cpc	r27, r1
 1d0:	24 f0       	brlt	.+8      	; 0x1da <pid_Controller+0x148>
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	9f e7       	ldi	r25, 0x7F	; 127
 1d6:	a0 e0       	ldi	r26, 0x00	; 0
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
	else if(ret < -MAX_INT){
		ret = -MAX_INT;
	}
	
	return((int16_t)ret);
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <get_button>:

int16_t velocity = 10;
int16_t feedback_velocity;

uint8_t get_button(uint8_t keyid) {
	if ( (PINB & keyid) == 0) {
 1e4:	96 b3       	in	r25, 0x16	; 22
 1e6:	98 23       	and	r25, r24
 1e8:	21 f4       	brne	.+8      	; 0x1f2 <get_button+0xe>
		while ( (PINB & keyid) == 0);
 1ea:	96 b3       	in	r25, 0x16	; 22
 1ec:	98 23       	and	r25, r24
 1ee:	e9 f3       	breq	.-6      	; 0x1ea <get_button+0x6>
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <get_button+0x12>
			return 1;
	}
	return 0;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret
int16_t feedback_velocity;

uint8_t get_button(uint8_t keyid) {
	if ( (PINB & keyid) == 0) {
		while ( (PINB & keyid) == 0);
			return 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
 1f8:	08 95       	ret

000001fa <servo>:

void pid() {
	;
}

void servo(int delta) {
 1fa:	8a 36       	cpi	r24, 0x6A	; 106
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	92 07       	cpc	r25, r18
 200:	14 f4       	brge	.+4      	; 0x206 <servo+0xc>
 202:	8a e6       	ldi	r24, 0x6A	; 106
 204:	9f ef       	ldi	r25, 0xFF	; 255
 206:	87 39       	cpi	r24, 0x97	; 151
 208:	91 05       	cpc	r25, r1
 20a:	14 f0       	brlt	.+4      	; 0x210 <servo+0x16>
 20c:	86 e9       	ldi	r24, 0x96	; 150
 20e:	90 e0       	ldi	r25, 0x00	; 0
	if (delta > 150) delta = 150;
	else if(delta < -150) delta = -150;
	OCR1A = SERVO_CENTER + delta*SERVO_STEP;
 210:	9c 01       	movw	r18, r24
 212:	22 0f       	add	r18, r18
 214:	33 1f       	adc	r19, r19
 216:	82 0f       	add	r24, r18
 218:	93 1f       	adc	r25, r19
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	8e 54       	subi	r24, 0x4E	; 78
 220:	93 4f       	sbci	r25, 0xF3	; 243
 222:	9b bd       	out	0x2b, r25	; 43
 224:	8a bd       	out	0x2a, r24	; 42
 226:	08 95       	ret

00000228 <fwd>:
}

void fwd(uint16_t left, uint16_t right) {
	if(left >= 0) {
		cbi(PORTD,DIR0);
 228:	93 98       	cbi	0x12, 3	; 18
		OCR1B=left*200;
 22a:	28 ec       	ldi	r18, 0xC8	; 200
 22c:	ac 01       	movw	r20, r24
 22e:	24 9f       	mul	r18, r20
 230:	c0 01       	movw	r24, r0
 232:	25 9f       	mul	r18, r21
 234:	90 0d       	add	r25, r0
 236:	11 24       	eor	r1, r1
 238:	99 bd       	out	0x29, r25	; 41
 23a:	88 bd       	out	0x28, r24	; 40
		sbi(PORTD,DIR0);
		OCR1B=(100-(-left))*200;
	}

	if(right >= 0) {
		cbi(PORTD,DIR1);
 23c:	96 98       	cbi	0x12, 6	; 18
		OCR2=right*255/100;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	86 9f       	mul	r24, r22
 242:	90 01       	movw	r18, r0
 244:	87 9f       	mul	r24, r23
 246:	30 0d       	add	r19, r0
 248:	11 24       	eor	r1, r1
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	ab e7       	ldi	r26, 0x7B	; 123
 254:	b4 e1       	ldi	r27, 0x14	; 20
 256:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__umulhisi3>
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	83 bd       	out	0x23, r24	; 35
 260:	08 95       	ret

00000262 <SPI>:
void set_encoder(int16_t veloc) {
	velocity=veloc;
}

void SPI(uint8_t data) { //transfer data using SPI
	SPDR = data;
 262:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//wait for it to complete
 264:	77 9b       	sbis	0x0e, 7	; 14
 266:	fe cf       	rjmp	.-4      	; 0x264 <SPI+0x2>
}
 268:	08 95       	ret

0000026a <set_led_data>:

void set_led_data(uint32_t num) {
 26a:	4f 92       	push	r4
 26c:	5f 92       	push	r5
 26e:	6f 92       	push	r6
 270:	7f 92       	push	r7
 272:	8f 92       	push	r8
 274:	9f 92       	push	r9
 276:	af 92       	push	r10
 278:	bf 92       	push	r11
 27a:	cf 92       	push	r12
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	6b 01       	movw	r12, r22
 284:	7c 01       	movw	r14, r24
	led_data.p_1 = (8<<4) | (num % 10);
 286:	0f 2e       	mov	r0, r31
 288:	fa e0       	ldi	r31, 0x0A	; 10
 28a:	4f 2e       	mov	r4, r31
 28c:	51 2c       	mov	r5, r1
 28e:	61 2c       	mov	r6, r1
 290:	71 2c       	mov	r7, r1
 292:	f0 2d       	mov	r31, r0
 294:	a3 01       	movw	r20, r6
 296:	92 01       	movw	r18, r4
 298:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodsi4>
 29c:	60 68       	ori	r22, 0x80	; 128
 29e:	60 93 9d 00 	sts	0x009D, r22
	led_data.p_10 = num % 100 / 10;
 2a2:	0f 2e       	mov	r0, r31
 2a4:	f4 e6       	ldi	r31, 0x64	; 100
 2a6:	8f 2e       	mov	r8, r31
 2a8:	91 2c       	mov	r9, r1
 2aa:	a1 2c       	mov	r10, r1
 2ac:	b1 2c       	mov	r11, r1
 2ae:	f0 2d       	mov	r31, r0
 2b0:	c7 01       	movw	r24, r14
 2b2:	b6 01       	movw	r22, r12
 2b4:	a5 01       	movw	r20, r10
 2b6:	94 01       	movw	r18, r8
 2b8:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodsi4>
 2bc:	a3 01       	movw	r20, r6
 2be:	92 01       	movw	r18, r4
 2c0:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodsi4>
 2c4:	72 2e       	mov	r7, r18
 2c6:	62 2e       	mov	r6, r18
	led_data.p_100 = num % 1000 / 100;
 2c8:	c7 01       	movw	r24, r14
 2ca:	b6 01       	movw	r22, r12
 2cc:	28 ee       	ldi	r18, 0xE8	; 232
 2ce:	33 e0       	ldi	r19, 0x03	; 3
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodsi4>
 2d8:	f2 2e       	mov	r15, r18
 2da:	a5 01       	movw	r20, r10
 2dc:	94 01       	movw	r18, r8
 2de:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodsi4>
 2e2:	92 2f       	mov	r25, r18
	led_data.p_1000 = num / 1000;
	led_data.p_1000 |= (led_data.p_1000 != 0) ? 1<<4 : 0;
 2e4:	ff 20       	and	r15, r15
 2e6:	11 f0       	breq	.+4      	; 0x2ec <set_led_data+0x82>
 2e8:	80 e1       	ldi	r24, 0x10	; 16
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <set_led_data+0x84>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	f8 2a       	or	r15, r24
 2f0:	f0 92 a0 00 	sts	0x00A0, r15
	led_data.p_100 |= (led_data.p_1000 != 0 || led_data.p_100 != 0) ? 2<<4 : 0;
 2f4:	f1 10       	cpse	r15, r1
 2f6:	16 c0       	rjmp	.+44     	; 0x324 <set_led_data+0xba>
 2f8:	91 11       	cpse	r25, r1
 2fa:	0d c0       	rjmp	.+26     	; 0x316 <set_led_data+0xac>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0c c0       	rjmp	.+24     	; 0x318 <set_led_data+0xae>
	led_data.p_10 |= (led_data.p_1000 != 0 || led_data.p_100 != 0 || led_data.p_10 != 0) ? 4<<4 : 0;
 300:	66 20       	and	r6, r6
 302:	11 f0       	breq	.+4      	; 0x308 <set_led_data+0x9e>
 304:	80 e4       	ldi	r24, 0x40	; 64
 306:	03 c0       	rjmp	.+6      	; 0x30e <set_led_data+0xa4>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	01 c0       	rjmp	.+2      	; 0x30e <set_led_data+0xa4>
 30c:	80 e4       	ldi	r24, 0x40	; 64
 30e:	78 2a       	or	r7, r24
 310:	70 92 9e 00 	sts	0x009E, r7
 314:	0c c0       	rjmp	.+24     	; 0x32e <set_led_data+0xc4>
	led_data.p_1 = (8<<4) | (num % 10);
	led_data.p_10 = num % 100 / 10;
	led_data.p_100 = num % 1000 / 100;
	led_data.p_1000 = num / 1000;
	led_data.p_1000 |= (led_data.p_1000 != 0) ? 1<<4 : 0;
	led_data.p_100 |= (led_data.p_1000 != 0 || led_data.p_100 != 0) ? 2<<4 : 0;
 316:	80 e2       	ldi	r24, 0x20	; 32
 318:	28 2b       	or	r18, r24
 31a:	20 93 9f 00 	sts	0x009F, r18
	led_data.p_10 |= (led_data.p_1000 != 0 || led_data.p_100 != 0 || led_data.p_10 != 0) ? 4<<4 : 0;
 31e:	22 23       	and	r18, r18
 320:	79 f3       	breq	.-34     	; 0x300 <set_led_data+0x96>
 322:	f4 cf       	rjmp	.-24     	; 0x30c <set_led_data+0xa2>
	led_data.p_1 = (8<<4) | (num % 10);
	led_data.p_10 = num % 100 / 10;
	led_data.p_100 = num % 1000 / 100;
	led_data.p_1000 = num / 1000;
	led_data.p_1000 |= (led_data.p_1000 != 0) ? 1<<4 : 0;
	led_data.p_100 |= (led_data.p_1000 != 0 || led_data.p_100 != 0) ? 2<<4 : 0;
 324:	20 62       	ori	r18, 0x20	; 32
 326:	20 93 9f 00 	sts	0x009F, r18
	led_data.p_10 |= (led_data.p_1000 != 0 || led_data.p_100 != 0 || led_data.p_10 != 0) ? 4<<4 : 0;
 32a:	80 e4       	ldi	r24, 0x40	; 64
 32c:	f0 cf       	rjmp	.-32     	; 0x30e <set_led_data+0xa4>
}
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	df 90       	pop	r13
 334:	cf 90       	pop	r12
 336:	bf 90       	pop	r11
 338:	af 90       	pop	r10
 33a:	9f 90       	pop	r9
 33c:	8f 90       	pop	r8
 33e:	7f 90       	pop	r7
 340:	6f 90       	pop	r6
 342:	5f 90       	pop	r5
 344:	4f 90       	pop	r4
 346:	08 95       	ret

00000348 <print>:

void print() {
 348:	cf 93       	push	r28
	uint8_t value = 0;

	if(led_data.i++ == 4) led_data.i=0;
 34a:	ec e9       	ldi	r30, 0x9C	; 156
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	90 81       	ld	r25, Z
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	89 0f       	add	r24, r25
 354:	80 83       	st	Z, r24
 356:	94 30       	cpi	r25, 0x04	; 4
 358:	19 f4       	brne	.+6      	; 0x360 <print+0x18>
 35a:	10 92 9c 00 	sts	0x009C, r1
 35e:	08 c0       	rjmp	.+16     	; 0x370 <print+0x28>
	switch(led_data.i) {
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	49 f0       	breq	.+18     	; 0x376 <print+0x2e>
 364:	28 f0       	brcs	.+10     	; 0x370 <print+0x28>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	49 f0       	breq	.+18     	; 0x37c <print+0x34>
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	51 f0       	breq	.+20     	; 0x382 <print+0x3a>
 36e:	0c c0       	rjmp	.+24     	; 0x388 <print+0x40>
		case 0: value = led_data.p_1000; break;
 370:	c0 91 a0 00 	lds	r28, 0x00A0
 374:	0a c0       	rjmp	.+20     	; 0x38a <print+0x42>
		case 1: value = led_data.p_100;	break;
 376:	c0 91 9f 00 	lds	r28, 0x009F
 37a:	07 c0       	rjmp	.+14     	; 0x38a <print+0x42>
		case 2: value = led_data.p_10; break;
 37c:	c0 91 9e 00 	lds	r28, 0x009E
 380:	04 c0       	rjmp	.+8      	; 0x38a <print+0x42>
		case 3: value = led_data.p_1; break;
 382:	c0 91 9d 00 	lds	r28, 0x009D
 386:	01 c0       	rjmp	.+2      	; 0x38a <print+0x42>
	led_data.p_100 |= (led_data.p_1000 != 0 || led_data.p_100 != 0) ? 2<<4 : 0;
	led_data.p_10 |= (led_data.p_1000 != 0 || led_data.p_100 != 0 || led_data.p_10 != 0) ? 4<<4 : 0;
}

void print() {
	uint8_t value = 0;
 388:	c0 e0       	ldi	r28, 0x00	; 0
		case 2: value = led_data.p_10; break;
		case 3: value = led_data.p_1; break;
		default: break;
	}

	SPI(~led_data.sensor_debug_output);
 38a:	80 91 a1 00 	lds	r24, 0x00A1
 38e:	80 95       	com	r24
 390:	0e 94 31 01 	call	0x262	; 0x262 <SPI>
	SPI(value);
 394:	8c 2f       	mov	r24, r28
 396:	0e 94 31 01 	call	0x262	; 0x262 <SPI>
	sbi(PORTB,LATCH);
 39a:	c4 9a       	sbi	0x18, 4	; 24
	cbi(PORTB,LATCH);
 39c:	c4 98       	cbi	0x18, 4	; 24
}
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <adc_read>:
void read_eeprom(void* dst, void* pointer_eeprom, size_t n) {
	while (!eeprom_is_ready());
	eeprom_read_block(dst, pointer_eeprom, n);
}
uint16_t adc_read(uint8_t channel) {
	ADMUX= (1<<REFS0) | channel; //selecting channel
 3a2:	80 64       	ori	r24, 0x40	; 64
 3a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); //start conversion
 3a6:	36 9a       	sbi	0x06, 6	; 6
	loop_until_bit_is_set(ADCSRA, ADIF);
 3a8:	34 9b       	sbis	0x06, 4	; 6
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <adc_read+0x6>
	return ADCW;
 3ac:	84 b1       	in	r24, 0x04	; 4
 3ae:	95 b1       	in	r25, 0x05	; 5
}
 3b0:	08 95       	ret

000003b2 <read_sensor>:

uint8_t read_sensor() {
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	c0 e0       	ldi	r28, 0x00	; 0
 3c2:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t adc_value = 0;
 3c4:	d1 2c       	mov	r13, r1
	uint16_t t = 0;
	
	for(uint8_t i=0; i<8; i++) {
		t = (adc_read(i) + adc_read(i) + adc_read(i) + adc_read(i)) / 4;
		if(t < LINE) sbi(adc_value, i);
		else cbi(adc_value, i);
 3c6:	ee 24       	eor	r14, r14
 3c8:	e3 94       	inc	r14
 3ca:	f1 2c       	mov	r15, r1
uint8_t read_sensor() {
	uint8_t adc_value = 0;
	uint16_t t = 0;
	
	for(uint8_t i=0; i<8; i++) {
		t = (adc_read(i) + adc_read(i) + adc_read(i) + adc_read(i)) / 4;
 3cc:	8c 2f       	mov	r24, r28
 3ce:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <adc_read>
 3d2:	8c 01       	movw	r16, r24
 3d4:	8c 2f       	mov	r24, r28
 3d6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <adc_read>
 3da:	08 0f       	add	r16, r24
 3dc:	19 1f       	adc	r17, r25
 3de:	8c 2f       	mov	r24, r28
 3e0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <adc_read>
 3e4:	08 0f       	add	r16, r24
 3e6:	19 1f       	adc	r17, r25
 3e8:	8c 2f       	mov	r24, r28
 3ea:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <adc_read>
 3ee:	80 0f       	add	r24, r16
 3f0:	91 1f       	adc	r25, r17
		if(t < LINE) sbi(adc_value, i);
 3f2:	88 33       	cpi	r24, 0x38	; 56
 3f4:	9e 40       	sbci	r25, 0x0E	; 14
 3f6:	48 f4       	brcc	.+18     	; 0x40a <read_sensor+0x58>
 3f8:	97 01       	movw	r18, r14
 3fa:	0c 2e       	mov	r0, r28
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <read_sensor+0x50>
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <read_sensor+0x4c>
 406:	d2 2a       	or	r13, r18
 408:	09 c0       	rjmp	.+18     	; 0x41c <read_sensor+0x6a>
		else cbi(adc_value, i);
 40a:	97 01       	movw	r18, r14
 40c:	0c 2e       	mov	r0, r28
 40e:	02 c0       	rjmp	.+4      	; 0x414 <read_sensor+0x62>
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <read_sensor+0x5e>
 418:	20 95       	com	r18
 41a:	d2 22       	and	r13, r18
 41c:	21 96       	adiw	r28, 0x01	; 1

uint8_t read_sensor() {
	uint8_t adc_value = 0;
	uint16_t t = 0;
	
	for(uint8_t i=0; i<8; i++) {
 41e:	c8 30       	cpi	r28, 0x08	; 8
 420:	d1 05       	cpc	r29, r1
 422:	a1 f6       	brne	.-88     	; 0x3cc <read_sensor+0x1a>
		t = (adc_read(i) + adc_read(i) + adc_read(i) + adc_read(i)) / 4;
		if(t < LINE) sbi(adc_value, i);
		else cbi(adc_value, i);
	}
	
	led_data.sensor_debug_output = adc_value;
 424:	d0 92 a1 00 	sts	0x00A1, r13
	return (adc_value);
}
 428:	8d 2d       	mov	r24, r13
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	08 95       	ret

0000043a <init>:
}


void init() {
	//ADC
	ADMUX = (1<<REFS0);	//reference voltage form avcc
 43a:	80 e4       	ldi	r24, 0x40	; 64
 43c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //enable ADC and set prescaler = 8
 43e:	87 e8       	ldi	r24, 0x87	; 135
 440:	86 b9       	out	0x06, r24	; 6

	//PORT
	DDRB  = 0b11110001;
 442:	81 ef       	ldi	r24, 0xF1	; 241
 444:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111111;
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	88 bb       	out	0x18, r24	; 24
	DDRC  = 0b00000000;
 44a:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b11111111;
 44c:	85 bb       	out	0x15, r24	; 21
	DDRD  = 0b11111011;
 44e:	8b ef       	ldi	r24, 0xFB	; 251
 450:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000000;
 452:	12 ba       	out	0x12, r1	; 18

	//SPI
	SPCR	= (1<<SPE) | (1<<MSTR); //enable SPI, master
 454:	80 e5       	ldi	r24, 0x50	; 80
 456:	8d b9       	out	0x0d, r24	; 13
	SPSR	= (1<<SPI2X); //SCK mode 2X: Fosc/2
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	8e b9       	out	0x0e, r24	; 14

	//timer
	TCCR0 = (1<<WGM01) | (1<<CS02); //mode 2 CTC,  prescaler = 256
 45c:	8c e0       	ldi	r24, 0x0C	; 12
 45e:	83 bf       	out	0x33, r24	; 51
	OCR0 = 62; //1ms
 460:	8e e3       	ldi	r24, 0x3E	; 62
 462:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1<<OCIE0);
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	89 bf       	out	0x39, r24	; 57
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11); // set OCR1A & OCR1B at bottom, clear at compare match (non-invert), mode 14 fast pwm
 468:	8f b5       	in	r24, 0x2f	; 47
 46a:	82 6a       	ori	r24, 0xA2	; 162
 46c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS11); //prescaler = 8
 46e:	8e b5       	in	r24, 0x2e	; 46
 470:	8a 61       	ori	r24, 0x1A	; 26
 472:	8e bd       	out	0x2e, r24	; 46
	ICR1 = SERVO_PWM_PERIOD; //time period = 20ms
 474:	80 e2       	ldi	r24, 0x20	; 32
 476:	9e e4       	ldi	r25, 0x4E	; 78
 478:	97 bd       	out	0x27, r25	; 39
 47a:	86 bd       	out	0x26, r24	; 38
	TCCR2 = (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS22)|(1<<CS21)|(1<<CS20); //sest OC2 at bottom, clear OC2 on compare match, (non-invert), mode 3 fast pwm, prescaler = 1024
 47c:	8f e6       	ldi	r24, 0x6F	; 111
 47e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0;
 480:	13 bc       	out	0x23, r1	; 35
	//enable interrupts
	sei();
 482:	78 94       	sei

	//encoder
	MCUCR |= (1<<ISC11)|(1<<ISC01);
 484:	85 b7       	in	r24, 0x35	; 53
 486:	8a 60       	ori	r24, 0x0A	; 10
 488:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
 48a:	8b b7       	in	r24, 0x3b	; 59
 48c:	80 64       	ori	r24, 0x40	; 64
 48e:	8b bf       	out	0x3b, r24	; 59
void bwd(uint16_t left, uint16_t right) {
	;
}

void set_encoder(int16_t veloc) {
	velocity=veloc;
 490:	83 e1       	ldi	r24, 0x13	; 19
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	90 93 61 00 	sts	0x0061, r25
 498:	80 93 60 00 	sts	0x0060, r24
 49c:	08 95       	ret

0000049e <test_mode>:
	MCUCR |= (1<<ISC11)|(1<<ISC01);
	GICR |= (1<<INT0);
	set_encoder(19);
}

void test_mode() {
 49e:	1f 93       	push	r17
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
	uint8_t s = 0, m = 0;
	uint8_t idx = 0;
	set_led_data(8888);
 4a4:	68 eb       	ldi	r22, 0xB8	; 184
 4a6:	72 e2       	ldi	r23, 0x22	; 34
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 35 01 	call	0x26a	; 0x26a <set_led_data>
	GICR |= (1<<INT0);
	set_encoder(19);
}

void test_mode() {
	uint8_t s = 0, m = 0;
 4b0:	d0 e0       	ldi	r29, 0x00	; 0
 4b2:	c0 e0       	ldi	r28, 0x00	; 0
		if (get_button(BTN0)) break;
		if (get_button(BTN1)) m += 1;
		if (get_button(BTN2)) s += 1;
		
		m %= 2;
		s %= 3;
 4b4:	1b ea       	ldi	r17, 0xAB	; 171
		led_data.sensor_debug_output = 1 << idx;
		
	}*/
	
	while (1) {
		read_sensor();
 4b6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <read_sensor>
		if (get_button(BTN0)) break;
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <get_button>
 4c0:	81 11       	cpse	r24, r1
 4c2:	3a c0       	rjmp	.+116    	; 0x538 <test_mode+0x9a>
		if (get_button(BTN1)) m += 1;
 4c4:	84 e0       	ldi	r24, 0x04	; 4
 4c6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <get_button>
 4ca:	81 11       	cpse	r24, r1
 4cc:	df 5f       	subi	r29, 0xFF	; 255
		if (get_button(BTN2)) s += 1;
 4ce:	88 e0       	ldi	r24, 0x08	; 8
 4d0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <get_button>
 4d4:	81 11       	cpse	r24, r1
 4d6:	cf 5f       	subi	r28, 0xFF	; 255
		
		m %= 2;
 4d8:	d1 70       	andi	r29, 0x01	; 1
		s %= 3;
 4da:	c1 9f       	mul	r28, r17
 4dc:	81 2d       	mov	r24, r1
 4de:	11 24       	eor	r1, r1
 4e0:	86 95       	lsr	r24
 4e2:	98 2f       	mov	r25, r24
 4e4:	99 0f       	add	r25, r25
 4e6:	89 0f       	add	r24, r25
 4e8:	c8 1b       	sub	r28, r24
		
		switch (m) {
 4ea:	dd 23       	and	r29, r29
 4ec:	19 f0       	breq	.+6      	; 0x4f4 <test_mode+0x56>
 4ee:	d1 30       	cpi	r29, 0x01	; 1
 4f0:	41 f0       	breq	.+16     	; 0x502 <test_mode+0x64>
 4f2:	0d c0       	rjmp	.+26     	; 0x50e <test_mode+0x70>
			case 0:
				fwd(0, 0);
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 14 01 	call	0x228	; 0x228 <fwd>
				break;
 500:	06 c0       	rjmp	.+12     	; 0x50e <test_mode+0x70>
			case 1:
				fwd(50, 50);
 502:	62 e3       	ldi	r22, 0x32	; 50
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	82 e3       	ldi	r24, 0x32	; 50
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 14 01 	call	0x228	; 0x228 <fwd>
			case 2:
				bwd(-50, -50);
				break;
		}
		
		switch (s) {
 50e:	c1 30       	cpi	r28, 0x01	; 1
 510:	49 f0       	breq	.+18     	; 0x524 <test_mode+0x86>
 512:	18 f0       	brcs	.+6      	; 0x51a <test_mode+0x7c>
 514:	c2 30       	cpi	r28, 0x02	; 2
 516:	59 f0       	breq	.+22     	; 0x52e <test_mode+0x90>
 518:	ce cf       	rjmp	.-100    	; 0x4b6 <test_mode+0x18>
			case 0:
				servo(0);
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <servo>
				break;
 522:	c9 cf       	rjmp	.-110    	; 0x4b6 <test_mode+0x18>
			case 1:
				servo(150);
 524:	86 e9       	ldi	r24, 0x96	; 150
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 fd 00 	call	0x1fa	; 0x1fa <servo>
				break;
 52c:	c4 cf       	rjmp	.-120    	; 0x4b6 <test_mode+0x18>
			case 2:
				servo(-150);
 52e:	8a e6       	ldi	r24, 0x6A	; 106
 530:	9f ef       	ldi	r25, 0xFF	; 255
 532:	0e 94 fd 00 	call	0x1fa	; 0x1fa <servo>
				break;
 536:	bf cf       	rjmp	.-130    	; 0x4b6 <test_mode+0x18>
		}
	}
}
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	1f 91       	pop	r17
 53e:	08 95       	ret

00000540 <calc_current_pos>:

int16_t calc_current_pos() {
	uint8_t t;
	int16_t r = 0;
	
	t = read_sensor();// shitty function this shit actually works !! :v wtf !!!
 540:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <read_sensor>
	if ((t == 0xff) || (t == 0)) off_lane++;
 544:	9f ef       	ldi	r25, 0xFF	; 255
 546:	98 0f       	add	r25, r24
 548:	9e 3f       	cpi	r25, 0xFE	; 254
 54a:	28 f0       	brcs	.+10     	; 0x556 <calc_current_pos+0x16>
 54c:	90 91 62 00 	lds	r25, 0x0062
 550:	9f 5f       	subi	r25, 0xFF	; 255
 552:	90 93 62 00 	sts	0x0062, r25
	if ( (t & mask3_0) != 0 && (t & mask0_3) != 0 ) {return last_current_pos;}
 556:	98 2f       	mov	r25, r24
 558:	90 7e       	andi	r25, 0xE0	; 224
 55a:	41 f0       	breq	.+16     	; 0x56c <calc_current_pos+0x2c>
 55c:	98 2f       	mov	r25, r24
 55e:	97 70       	andi	r25, 0x07	; 7
 560:	29 f0       	breq	.+10     	; 0x56c <calc_current_pos+0x2c>
 562:	80 91 63 00 	lds	r24, 0x0063
 566:	90 91 64 00 	lds	r25, 0x0064
 56a:	08 95       	ret
	else {
		last_current_pos = t;
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	30 93 64 00 	sts	0x0064, r19
 574:	20 93 63 00 	sts	0x0063, r18
		for(int i = 0; i < 3; i++) {
			if ((t >> i) & 1) {
 578:	80 fd       	sbrc	r24, 0
 57a:	0a c0       	rjmp	.+20     	; 0x590 <calc_current_pos+0x50>
 57c:	81 fd       	sbrc	r24, 1
 57e:	05 c0       	rjmp	.+10     	; 0x58a <calc_current_pos+0x4a>
 580:	82 ff       	sbrs	r24, 2
 582:	11 c0       	rjmp	.+34     	; 0x5a6 <calc_current_pos+0x66>
	t = read_sensor();// shitty function this shit actually works !! :v wtf !!!
	if ((t == 0xff) || (t == 0)) off_lane++;
	if ( (t & mask3_0) != 0 && (t & mask0_3) != 0 ) {return last_current_pos;}
	else {
		last_current_pos = t;
		for(int i = 0; i < 3; i++) {
 584:	22 e0       	ldi	r18, 0x02	; 2
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	05 c0       	rjmp	.+10     	; 0x594 <calc_current_pos+0x54>
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <calc_current_pos+0x54>
 590:	20 e0       	ldi	r18, 0x00	; 0
 592:	30 e0       	ldi	r19, 0x00	; 0
			if ((t >> i) & 1) {
				return (300 - i*100);
 594:	4c e9       	ldi	r20, 0x9C	; 156
 596:	42 03       	mulsu	r20, r18
 598:	c0 01       	movw	r24, r0
 59a:	43 9f       	mul	r20, r19
 59c:	90 0d       	add	r25, r0
 59e:	11 24       	eor	r1, r1
 5a0:	84 5d       	subi	r24, 0xD4	; 212
 5a2:	9e 4f       	sbci	r25, 0xFE	; 254
 5a4:	08 95       	ret
			}
		}
			
		t >>= 5;
 5a6:	82 95       	swap	r24
 5a8:	86 95       	lsr	r24
 5aa:	87 70       	andi	r24, 0x07	; 7
		for(int i = 0; i < 3; i++) {
			if ((t >> i) & 1) {
 5ac:	28 2f       	mov	r18, r24
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	80 ff       	sbrs	r24, 0
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <calc_current_pos+0x7a>
				r =  (-((i+1)*100));
 5b4:	5c e9       	ldi	r21, 0x9C	; 156
 5b6:	4f ef       	ldi	r20, 0xFF	; 255
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <calc_current_pos+0x7e>
uint8_t off_lane = 0;
uint8_t tricky = 0;

int16_t calc_current_pos() {
	uint8_t t;
	int16_t r = 0;
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
			
		t >>= 5;
		for(int i = 0; i < 3; i++) {
			if ((t >> i) & 1) {
 5be:	21 ff       	sbrs	r18, 1
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <calc_current_pos+0x86>
				r =  (-((i+1)*100));
 5c2:	58 e3       	ldi	r21, 0x38	; 56
 5c4:	4f ef       	ldi	r20, 0xFF	; 255
			}
		}
			
		t >>= 5;
		for(int i = 0; i < 3; i++) {
			if ((t >> i) & 1) {
 5c6:	36 95       	lsr	r19
 5c8:	27 95       	ror	r18
 5ca:	36 95       	lsr	r19
 5cc:	27 95       	ror	r18
 5ce:	23 2b       	or	r18, r19
 5d0:	11 f0       	breq	.+4      	; 0x5d6 <calc_current_pos+0x96>
				r =  (-((i+1)*100));
 5d2:	54 ed       	ldi	r21, 0xD4	; 212
 5d4:	4e ef       	ldi	r20, 0xFE	; 254
 5d6:	85 2f       	mov	r24, r21
 5d8:	94 2f       	mov	r25, r20
			}
		}
		return r;
	}
	return last_current_pos;
}
 5da:	08 95       	ret

000005dc <main>:

int main(void) {
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	62 97       	sbiw	r28, 0x12	; 18
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	f8 94       	cli
 5ee:	de bf       	out	0x3e, r29	; 62
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	cd bf       	out	0x3d, r28	; 61
	init();
 5f4:	0e 94 1d 02 	call	0x43a	; 0x43a <init>
	test_mode();
 5f8:	0e 94 4f 02 	call	0x49e	; 0x49e <test_mode>
	
	pidData_t steer; 
	int16_t t;
	int16_t o;
	
	set_led_data(1338);
 5fc:	6a e3       	ldi	r22, 0x3A	; 58
 5fe:	75 e0       	ldi	r23, 0x05	; 5
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 35 01 	call	0x26a	; 0x26a <set_led_data>
 *  \param pid  Struct with PID status.  
 */ 
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
{
	 // Start values for PID controller
	 pid->sumError = 0;
 608:	1b 82       	std	Y+3, r1	; 0x03
 60a:	1c 82       	std	Y+4, r1	; 0x04
 60c:	1d 82       	std	Y+5, r1	; 0x05
 60e:	1e 82       	std	Y+6, r1	; 0x06
	 pid->lastProcessValue = 0;
 610:	1a 82       	std	Y+2, r1	; 0x02
 612:	19 82       	std	Y+1, r1	; 0x01
	 // Tuning constants for PID loop
	 pid->P_Factor = p_factor;
 614:	88 e0       	ldi	r24, 0x08	; 8
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	98 87       	std	Y+8, r25	; 0x08
 61a:	8f 83       	std	Y+7, r24	; 0x07
	 pid->I_Factor = i_factor;
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	9a 87       	std	Y+10, r25	; 0x0a
 622:	89 87       	std	Y+9, r24	; 0x09
	 pid->D_Factor = d_factor;
 624:	9c 87       	std	Y+12, r25	; 0x0c
 626:	8b 87       	std	Y+11, r24	; 0x0b
	 // Limits to avoid overflow
	 pid->maxError = MAX_INT / (pid->P_Factor + 1);
 628:	88 e3       	ldi	r24, 0x38	; 56
 62a:	9e e0       	ldi	r25, 0x0E	; 14
 62c:	9e 87       	std	Y+14, r25	; 0x0e
 62e:	8d 87       	std	Y+13, r24	; 0x0d
	 pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	9f ef       	ldi	r25, 0xFF	; 255
 634:	af ef       	ldi	r26, 0xFF	; 255
 636:	bf e1       	ldi	r27, 0x1F	; 31
 638:	8f 87       	std	Y+15, r24	; 0x0f
 63a:	98 8b       	std	Y+16, r25	; 0x10
 63c:	a9 8b       	std	Y+17, r26	; 0x11
 63e:	ba 8b       	std	Y+18, r27	; 0x12
	pid_Init(K_P, K_I, K_D, &steer);
	fwd(motor_speed, motor_speed);
 640:	62 e3       	ldi	r22, 0x32	; 50
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	82 e3       	ldi	r24, 0x32	; 50
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 14 01 	call	0x228	; 0x228 <fwd>
	while (1) {
		if (off_lane == 50) {
 64c:	80 91 62 00 	lds	r24, 0x0062
 650:	82 33       	cpi	r24, 0x32	; 50
 652:	11 f1       	breq	.+68     	; 0x698 <main+0xbc>
			fwd(0, 0);
			break;
		}
		t = calc_current_pos();
 654:	0e 94 a0 02 	call	0x540	; 0x540 <calc_current_pos>
		o = pid_Controller(setPoint, t, &steer);
 658:	ae 01       	movw	r20, r28
 65a:	4f 5f       	subi	r20, 0xFF	; 255
 65c:	5f 4f       	sbci	r21, 0xFF	; 255
 65e:	bc 01       	movw	r22, r24
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e 94 49 00 	call	0x92	; 0x92 <pid_Controller>
 668:	8c 01       	movw	r16, r24
		servo(-(o));
 66a:	88 27       	eor	r24, r24
 66c:	99 27       	eor	r25, r25
 66e:	80 1b       	sub	r24, r16
 670:	91 0b       	sbc	r25, r17
 672:	0e 94 fd 00 	call	0x1fa	; 0x1fa <servo>
			fwd((int)speed, (int)speed);	
		}
		
		set_led_data(abs((int)speed));
		*/
		set_led_data(abs(o));
 676:	b8 01       	movw	r22, r16
 678:	11 23       	and	r17, r17
 67a:	24 f4       	brge	.+8      	; 0x684 <main+0xa8>
 67c:	66 27       	eor	r22, r22
 67e:	77 27       	eor	r23, r23
 680:	60 1b       	sub	r22, r16
 682:	71 0b       	sbc	r23, r17
 684:	88 27       	eor	r24, r24
 686:	77 fd       	sbrc	r23, 7
 688:	80 95       	com	r24
 68a:	98 2f       	mov	r25, r24
 68c:	0e 94 35 01 	call	0x26a	; 0x26a <set_led_data>
	
	set_led_data(1338);
	pid_Init(K_P, K_I, K_D, &steer);
	fwd(motor_speed, motor_speed);
	while (1) {
		if (off_lane == 50) {
 690:	80 91 62 00 	lds	r24, 0x0062
 694:	82 33       	cpi	r24, 0x32	; 50
 696:	f1 f6       	brne	.-68     	; 0x654 <main+0x78>
			fwd(0, 0);
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 14 01 	call	0x228	; 0x228 <fwd>
		*/
		set_led_data(abs(o));
		
	}
	return 0;
}
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	62 96       	adiw	r28, 0x12	; 18
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	f8 94       	cli
 6ae:	de bf       	out	0x3e, r29	; 62
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	cd bf       	out	0x3d, r28	; 61
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	08 95       	ret

000006be <__vector_19>:

ISR(TIMER0_COMP_vect) {
 6be:	1f 92       	push	r1
 6c0:	0f 92       	push	r0
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	0f 92       	push	r0
 6c6:	11 24       	eor	r1, r1
 6c8:	2f 93       	push	r18
 6ca:	3f 93       	push	r19
 6cc:	4f 93       	push	r20
 6ce:	5f 93       	push	r21
 6d0:	6f 93       	push	r22
 6d2:	7f 93       	push	r23
 6d4:	8f 93       	push	r24
 6d6:	9f 93       	push	r25
 6d8:	af 93       	push	r26
 6da:	bf 93       	push	r27
 6dc:	ef 93       	push	r30
 6de:	ff 93       	push	r31
	print();	
 6e0:	0e 94 a4 01 	call	0x348	; 0x348 <print>
	cnt1++;
 6e4:	80 91 a4 00 	lds	r24, 0x00A4
 6e8:	90 91 a5 00 	lds	r25, 0x00A5
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	90 93 a5 00 	sts	0x00A5, r25
 6f2:	80 93 a4 00 	sts	0x00A4, r24
	cnt_pid++;
 6f6:	80 91 9a 00 	lds	r24, 0x009A
 6fa:	90 91 9b 00 	lds	r25, 0x009B
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	90 93 9b 00 	sts	0x009B, r25
 704:	80 93 9a 00 	sts	0x009A, r24
	
	if(cnt_pid == TIME_INTERVAL_PID) {
 708:	80 91 9a 00 	lds	r24, 0x009A
 70c:	90 91 9b 00 	lds	r25, 0x009B
 710:	84 36       	cpi	r24, 0x64	; 100
 712:	91 05       	cpc	r25, r1
 714:	81 f4       	brne	.+32     	; 0x736 <__vector_19+0x78>
		feedback_velocity = pulse_pid;
 716:	80 91 a2 00 	lds	r24, 0x00A2
 71a:	90 91 a3 00 	lds	r25, 0x00A3
 71e:	90 93 88 00 	sts	0x0088, r25
 722:	80 93 87 00 	sts	0x0087, r24
		pulse_pid=0;
 726:	10 92 a3 00 	sts	0x00A3, r1
 72a:	10 92 a2 00 	sts	0x00A2, r1
		cnt_pid = 0;
 72e:	10 92 9b 00 	sts	0x009B, r1
 732:	10 92 9a 00 	sts	0x009A, r1
	}
}
 736:	ff 91       	pop	r31
 738:	ef 91       	pop	r30
 73a:	bf 91       	pop	r27
 73c:	af 91       	pop	r26
 73e:	9f 91       	pop	r25
 740:	8f 91       	pop	r24
 742:	7f 91       	pop	r23
 744:	6f 91       	pop	r22
 746:	5f 91       	pop	r21
 748:	4f 91       	pop	r20
 74a:	3f 91       	pop	r19
 74c:	2f 91       	pop	r18
 74e:	0f 90       	pop	r0
 750:	0f be       	out	0x3f, r0	; 63
 752:	0f 90       	pop	r0
 754:	1f 90       	pop	r1
 756:	18 95       	reti

00000758 <__vector_1>:

ISR(INT0_vect) {
 758:	1f 92       	push	r1
 75a:	0f 92       	push	r0
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	0f 92       	push	r0
 760:	11 24       	eor	r1, r1
 762:	8f 93       	push	r24
 764:	9f 93       	push	r25
	pulse_v++;
 766:	80 91 85 00 	lds	r24, 0x0085
 76a:	90 91 86 00 	lds	r25, 0x0086
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	90 93 86 00 	sts	0x0086, r25
 774:	80 93 85 00 	sts	0x0085, r24
	pulse_pid++;
 778:	80 91 a2 00 	lds	r24, 0x00A2
 77c:	90 91 a3 00 	lds	r25, 0x00A3
 780:	01 96       	adiw	r24, 0x01	; 1
 782:	90 93 a3 00 	sts	0x00A3, r25
 786:	80 93 a2 00 	sts	0x00A2, r24
}
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	0f 90       	pop	r0
 790:	0f be       	out	0x3f, r0	; 63
 792:	0f 90       	pop	r0
 794:	1f 90       	pop	r1
 796:	18 95       	reti

00000798 <__udivmodsi4>:
 798:	a1 e2       	ldi	r26, 0x21	; 33
 79a:	1a 2e       	mov	r1, r26
 79c:	aa 1b       	sub	r26, r26
 79e:	bb 1b       	sub	r27, r27
 7a0:	fd 01       	movw	r30, r26
 7a2:	0d c0       	rjmp	.+26     	; 0x7be <__udivmodsi4_ep>

000007a4 <__udivmodsi4_loop>:
 7a4:	aa 1f       	adc	r26, r26
 7a6:	bb 1f       	adc	r27, r27
 7a8:	ee 1f       	adc	r30, r30
 7aa:	ff 1f       	adc	r31, r31
 7ac:	a2 17       	cp	r26, r18
 7ae:	b3 07       	cpc	r27, r19
 7b0:	e4 07       	cpc	r30, r20
 7b2:	f5 07       	cpc	r31, r21
 7b4:	20 f0       	brcs	.+8      	; 0x7be <__udivmodsi4_ep>
 7b6:	a2 1b       	sub	r26, r18
 7b8:	b3 0b       	sbc	r27, r19
 7ba:	e4 0b       	sbc	r30, r20
 7bc:	f5 0b       	sbc	r31, r21

000007be <__udivmodsi4_ep>:
 7be:	66 1f       	adc	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	88 1f       	adc	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	1a 94       	dec	r1
 7c8:	69 f7       	brne	.-38     	; 0x7a4 <__udivmodsi4_loop>
 7ca:	60 95       	com	r22
 7cc:	70 95       	com	r23
 7ce:	80 95       	com	r24
 7d0:	90 95       	com	r25
 7d2:	9b 01       	movw	r18, r22
 7d4:	ac 01       	movw	r20, r24
 7d6:	bd 01       	movw	r22, r26
 7d8:	cf 01       	movw	r24, r30
 7da:	08 95       	ret

000007dc <__umulhisi3>:
 7dc:	a2 9f       	mul	r26, r18
 7de:	b0 01       	movw	r22, r0
 7e0:	b3 9f       	mul	r27, r19
 7e2:	c0 01       	movw	r24, r0
 7e4:	a3 9f       	mul	r26, r19
 7e6:	70 0d       	add	r23, r0
 7e8:	81 1d       	adc	r24, r1
 7ea:	11 24       	eor	r1, r1
 7ec:	91 1d       	adc	r25, r1
 7ee:	b2 9f       	mul	r27, r18
 7f0:	70 0d       	add	r23, r0
 7f2:	81 1d       	adc	r24, r1
 7f4:	11 24       	eor	r1, r1
 7f6:	91 1d       	adc	r25, r1
 7f8:	08 95       	ret

000007fa <__mulshisi3>:
 7fa:	b7 ff       	sbrs	r27, 7
 7fc:	0c 94 05 04 	jmp	0x80a	; 0x80a <__muluhisi3>

00000800 <__mulohisi3>:
 800:	0e 94 05 04 	call	0x80a	; 0x80a <__muluhisi3>
 804:	82 1b       	sub	r24, r18
 806:	93 0b       	sbc	r25, r19
 808:	08 95       	ret

0000080a <__muluhisi3>:
 80a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__umulhisi3>
 80e:	a5 9f       	mul	r26, r21
 810:	90 0d       	add	r25, r0
 812:	b4 9f       	mul	r27, r20
 814:	90 0d       	add	r25, r0
 816:	a4 9f       	mul	r26, r20
 818:	80 0d       	add	r24, r0
 81a:	91 1d       	adc	r25, r1
 81c:	11 24       	eor	r1, r1
 81e:	08 95       	ret

00000820 <_exit>:
 820:	f8 94       	cli

00000822 <__stop_program>:
 822:	ff cf       	rjmp	.-2      	; 0x822 <__stop_program>
