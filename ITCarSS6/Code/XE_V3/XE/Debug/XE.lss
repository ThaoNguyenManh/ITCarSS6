
XE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001946  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000004b  00800060  00800060  000019ba  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000019ba  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000e0  00000000  00000000  000019ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001a40  00000000  00000000  00001aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003fa  00000000  00000000  0000350a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000065b  00000000  00000000  00003904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000308  00000000  00000000  00003f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000386  00000000  00000000  00004268  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000008cb  00000000  00000000  000045ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d0  00000000  00000000  00004eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__ctors_end>
       4:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__vector_1>
       8:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      10:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      14:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      1c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      20:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      24:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      28:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      2c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      30:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      34:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      38:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      3c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      40:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      44:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      48:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      4c:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__vector_19>
      50:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      54:	08 06       	cpc	r0, r24
      56:	b2 0a       	sbc	r11, r18
      58:	b2 0a       	sbc	r11, r18
      5a:	b2 0a       	sbc	r11, r18
      5c:	b2 0a       	sbc	r11, r18
      5e:	b2 0a       	sbc	r11, r18
      60:	b2 0a       	sbc	r11, r18
      62:	b2 0a       	sbc	r11, r18
      64:	b2 0a       	sbc	r11, r18
      66:	b2 0a       	sbc	r11, r18
      68:	c8 06       	cpc	r12, r24
      6a:	72 07       	cpc	r23, r18
      6c:	b2 0a       	sbc	r11, r18
      6e:	b2 0a       	sbc	r11, r18
      70:	b2 0a       	sbc	r11, r18
      72:	b2 0a       	sbc	r11, r18
      74:	b2 0a       	sbc	r11, r18
      76:	b2 0a       	sbc	r11, r18
      78:	b2 0a       	sbc	r11, r18
      7a:	b2 0a       	sbc	r11, r18
      7c:	19 08       	sbc	r1, r9
      7e:	b2 0a       	sbc	r11, r18
      80:	61 08       	sbc	r6, r1
      82:	b2 0a       	sbc	r11, r18
      84:	b2 0a       	sbc	r11, r18
      86:	1f 09       	sbc	r17, r15
      88:	35 09       	sbc	r19, r5
      8a:	b2 0a       	sbc	r11, r18
      8c:	b2 0a       	sbc	r11, r18
      8e:	b2 0a       	sbc	r11, r18
      90:	4a 09       	sbc	r20, r10
      92:	5d 09       	sbc	r21, r13
      94:	b2 0a       	sbc	r11, r18
      96:	b2 0a       	sbc	r11, r18
      98:	b2 0a       	sbc	r11, r18
      9a:	b2 0a       	sbc	r11, r18
      9c:	b2 0a       	sbc	r11, r18
      9e:	b2 0a       	sbc	r11, r18
      a0:	b2 0a       	sbc	r11, r18
      a2:	b2 0a       	sbc	r11, r18
      a4:	72 09       	sbc	r23, r2
      a6:	85 09       	sbc	r24, r5
      a8:	b2 0a       	sbc	r11, r18
      aa:	b2 0a       	sbc	r11, r18
      ac:	b2 0a       	sbc	r11, r18
      ae:	b2 0a       	sbc	r11, r18
      b0:	b2 0a       	sbc	r11, r18
      b2:	b2 0a       	sbc	r11, r18
      b4:	b2 0a       	sbc	r11, r18
      b6:	b2 0a       	sbc	r11, r18
      b8:	9a 09       	sbc	r25, r10
      ba:	b2 0a       	sbc	r11, r18
      bc:	cf 09       	sbc	r28, r15
      be:	e4 09       	sbc	r30, r4
      c0:	b2 0a       	sbc	r11, r18
      c2:	b2 0a       	sbc	r11, r18
      c4:	b2 0a       	sbc	r11, r18
      c6:	b2 0a       	sbc	r11, r18
      c8:	b2 0a       	sbc	r11, r18
      ca:	b2 0a       	sbc	r11, r18
      cc:	16 0a       	sbc	r1, r22
      ce:	b2 0a       	sbc	r11, r18
      d0:	4b 0a       	sbc	r4, r27
      d2:	60 0a       	sbc	r6, r16
      d4:	b2 0a       	sbc	r11, r18
      d6:	b2 0a       	sbc	r11, r18
      d8:	b2 0a       	sbc	r11, r18
      da:	b2 0a       	sbc	r11, r18
      dc:	b2 0a       	sbc	r11, r18
      de:	b2 0a       	sbc	r11, r18
      e0:	b2 0a       	sbc	r11, r18
      e2:	b2 0a       	sbc	r11, r18
      e4:	8d 0a       	sbc	r8, r29
      e6:	78 06       	cpc	r7, r24
      e8:	fb 05       	cpc	r31, r11
      ea:	62 06       	cpc	r6, r18
      ec:	fb 05       	cpc	r31, r11
      ee:	6d 06       	cpc	r6, r29
      f0:	fb 05       	cpc	r31, r11
      f2:	4c 06       	cpc	r4, r28
      f4:	fb 05       	cpc	r31, r11
      f6:	fb 05       	cpc	r31, r11
      f8:	fb 05       	cpc	r31, r11
      fa:	57 06       	cpc	r5, r23
      fc:	fb 05       	cpc	r31, r11
      fe:	62 06       	cpc	r6, r18
     100:	fb 05       	cpc	r31, r11
     102:	86 06       	cpc	r8, r22
     104:	fb 05       	cpc	r31, r11
     106:	fb 05       	cpc	r31, r11
     108:	fb 05       	cpc	r31, r11
     10a:	fb 05       	cpc	r31, r11
     10c:	fb 05       	cpc	r31, r11
     10e:	fb 05       	cpc	r31, r11
     110:	fb 05       	cpc	r31, r11
     112:	41 06       	cpc	r4, r17
     114:	fb 05       	cpc	r31, r11
     116:	fb 05       	cpc	r31, r11
     118:	fb 05       	cpc	r31, r11
     11a:	4c 06       	cpc	r4, r28
     11c:	fb 05       	cpc	r31, r11
     11e:	fb 05       	cpc	r31, r11
     120:	fb 05       	cpc	r31, r11
     122:	9c 06       	cpc	r9, r28
     124:	fb 05       	cpc	r31, r11
     126:	fb 05       	cpc	r31, r11
     128:	fb 05       	cpc	r31, r11
     12a:	fb 05       	cpc	r31, r11
     12c:	fb 05       	cpc	r31, r11
     12e:	fb 05       	cpc	r31, r11
     130:	fb 05       	cpc	r31, r11
     132:	fb 05       	cpc	r31, r11
     134:	fb 05       	cpc	r31, r11
     136:	fb 05       	cpc	r31, r11
     138:	fb 05       	cpc	r31, r11
     13a:	fb 05       	cpc	r31, r11
     13c:	fb 05       	cpc	r31, r11
     13e:	fb 05       	cpc	r31, r11
     140:	fb 05       	cpc	r31, r11
     142:	91 06       	cpc	r9, r17
     144:	fb 05       	cpc	r31, r11
     146:	fb 05       	cpc	r31, r11
     148:	fb 05       	cpc	r31, r11
     14a:	fb 05       	cpc	r31, r11
     14c:	fb 05       	cpc	r31, r11
     14e:	fb 05       	cpc	r31, r11
     150:	fb 05       	cpc	r31, r11
     152:	86 06       	cpc	r8, r22
     154:	fb 05       	cpc	r31, r11
     156:	fb 05       	cpc	r31, r11
     158:	fb 05       	cpc	r31, r11
     15a:	fb 05       	cpc	r31, r11
     15c:	fb 05       	cpc	r31, r11
     15e:	fb 05       	cpc	r31, r11
     160:	fb 05       	cpc	r31, r11
     162:	b2 06       	cpc	r11, r18
     164:	fb 05       	cpc	r31, r11
     166:	fb 05       	cpc	r31, r11
     168:	fb 05       	cpc	r31, r11
     16a:	fb 05       	cpc	r31, r11
     16c:	fb 05       	cpc	r31, r11
     16e:	fb 05       	cpc	r31, r11
     170:	fb 05       	cpc	r31, r11
     172:	fb 05       	cpc	r31, r11
     174:	fb 05       	cpc	r31, r11
     176:	fb 05       	cpc	r31, r11
     178:	fb 05       	cpc	r31, r11
     17a:	fb 05       	cpc	r31, r11
     17c:	fb 05       	cpc	r31, r11
     17e:	fb 05       	cpc	r31, r11
     180:	fb 05       	cpc	r31, r11
     182:	fb 05       	cpc	r31, r11
     184:	fb 05       	cpc	r31, r11
     186:	fb 05       	cpc	r31, r11
     188:	fb 05       	cpc	r31, r11
     18a:	fb 05       	cpc	r31, r11
     18c:	fb 05       	cpc	r31, r11
     18e:	fb 05       	cpc	r31, r11
     190:	fb 05       	cpc	r31, r11
     192:	fb 05       	cpc	r31, r11
     194:	fb 05       	cpc	r31, r11
     196:	fb 05       	cpc	r31, r11
     198:	fb 05       	cpc	r31, r11
     19a:	fb 05       	cpc	r31, r11
     19c:	fb 05       	cpc	r31, r11
     19e:	fb 05       	cpc	r31, r11
     1a0:	fb 05       	cpc	r31, r11
     1a2:	a7 06       	cpc	r10, r23
     1a4:	fb 05       	cpc	r31, r11
     1a6:	fb 05       	cpc	r31, r11
     1a8:	fb 05       	cpc	r31, r11
     1aa:	fb 05       	cpc	r31, r11
     1ac:	fb 05       	cpc	r31, r11
     1ae:	fb 05       	cpc	r31, r11
     1b0:	fb 05       	cpc	r31, r11
     1b2:	fb 05       	cpc	r31, r11
     1b4:	fb 05       	cpc	r31, r11
     1b6:	fb 05       	cpc	r31, r11
     1b8:	fb 05       	cpc	r31, r11
     1ba:	fb 05       	cpc	r31, r11
     1bc:	fb 05       	cpc	r31, r11
     1be:	fb 05       	cpc	r31, r11
     1c0:	fb 05       	cpc	r31, r11
     1c2:	9c 06       	cpc	r9, r28
     1c4:	e8 08       	sbc	r14, r8
     1c6:	05 09       	sbc	r16, r5
     1c8:	de 08       	sbc	r13, r14
     1ca:	05 09       	sbc	r16, r5
     1cc:	e3 08       	sbc	r14, r3
     1ce:	05 09       	sbc	r16, r5
     1d0:	d4 08       	sbc	r13, r4
     1d2:	05 09       	sbc	r16, r5
     1d4:	05 09       	sbc	r16, r5
     1d6:	05 09       	sbc	r16, r5
     1d8:	d9 08       	sbc	r13, r9
     1da:	05 09       	sbc	r16, r5
     1dc:	de 08       	sbc	r13, r14
     1de:	05 09       	sbc	r16, r5
     1e0:	ed 08       	sbc	r14, r13
     1e2:	05 09       	sbc	r16, r5
     1e4:	05 09       	sbc	r16, r5
     1e6:	05 09       	sbc	r16, r5
     1e8:	05 09       	sbc	r16, r5
     1ea:	05 09       	sbc	r16, r5
     1ec:	05 09       	sbc	r16, r5
     1ee:	05 09       	sbc	r16, r5
     1f0:	cf 08       	sbc	r12, r15
     1f2:	05 09       	sbc	r16, r5
     1f4:	05 09       	sbc	r16, r5
     1f6:	05 09       	sbc	r16, r5
     1f8:	d4 08       	sbc	r13, r4
     1fa:	05 09       	sbc	r16, r5
     1fc:	05 09       	sbc	r16, r5
     1fe:	05 09       	sbc	r16, r5
     200:	f7 08       	sbc	r15, r7
     202:	05 09       	sbc	r16, r5
     204:	05 09       	sbc	r16, r5
     206:	05 09       	sbc	r16, r5
     208:	05 09       	sbc	r16, r5
     20a:	05 09       	sbc	r16, r5
     20c:	05 09       	sbc	r16, r5
     20e:	05 09       	sbc	r16, r5
     210:	05 09       	sbc	r16, r5
     212:	05 09       	sbc	r16, r5
     214:	05 09       	sbc	r16, r5
     216:	05 09       	sbc	r16, r5
     218:	05 09       	sbc	r16, r5
     21a:	05 09       	sbc	r16, r5
     21c:	05 09       	sbc	r16, r5
     21e:	05 09       	sbc	r16, r5
     220:	f2 08       	sbc	r15, r2
     222:	05 09       	sbc	r16, r5
     224:	05 09       	sbc	r16, r5
     226:	05 09       	sbc	r16, r5
     228:	05 09       	sbc	r16, r5
     22a:	05 09       	sbc	r16, r5
     22c:	05 09       	sbc	r16, r5
     22e:	05 09       	sbc	r16, r5
     230:	ed 08       	sbc	r14, r13
     232:	05 09       	sbc	r16, r5
     234:	05 09       	sbc	r16, r5
     236:	05 09       	sbc	r16, r5
     238:	05 09       	sbc	r16, r5
     23a:	05 09       	sbc	r16, r5
     23c:	05 09       	sbc	r16, r5
     23e:	05 09       	sbc	r16, r5
     240:	01 09       	sbc	r16, r1
     242:	05 09       	sbc	r16, r5
     244:	05 09       	sbc	r16, r5
     246:	05 09       	sbc	r16, r5
     248:	05 09       	sbc	r16, r5
     24a:	05 09       	sbc	r16, r5
     24c:	05 09       	sbc	r16, r5
     24e:	05 09       	sbc	r16, r5
     250:	05 09       	sbc	r16, r5
     252:	05 09       	sbc	r16, r5
     254:	05 09       	sbc	r16, r5
     256:	05 09       	sbc	r16, r5
     258:	05 09       	sbc	r16, r5
     25a:	05 09       	sbc	r16, r5
     25c:	05 09       	sbc	r16, r5
     25e:	05 09       	sbc	r16, r5
     260:	05 09       	sbc	r16, r5
     262:	05 09       	sbc	r16, r5
     264:	05 09       	sbc	r16, r5
     266:	05 09       	sbc	r16, r5
     268:	05 09       	sbc	r16, r5
     26a:	05 09       	sbc	r16, r5
     26c:	05 09       	sbc	r16, r5
     26e:	05 09       	sbc	r16, r5
     270:	05 09       	sbc	r16, r5
     272:	05 09       	sbc	r16, r5
     274:	05 09       	sbc	r16, r5
     276:	05 09       	sbc	r16, r5
     278:	05 09       	sbc	r16, r5
     27a:	05 09       	sbc	r16, r5
     27c:	05 09       	sbc	r16, r5
     27e:	05 09       	sbc	r16, r5
     280:	fc 08       	sbc	r15, r12
     282:	05 09       	sbc	r16, r5
     284:	05 09       	sbc	r16, r5
     286:	05 09       	sbc	r16, r5
     288:	05 09       	sbc	r16, r5
     28a:	05 09       	sbc	r16, r5
     28c:	05 09       	sbc	r16, r5
     28e:	05 09       	sbc	r16, r5
     290:	05 09       	sbc	r16, r5
     292:	05 09       	sbc	r16, r5
     294:	05 09       	sbc	r16, r5
     296:	05 09       	sbc	r16, r5
     298:	05 09       	sbc	r16, r5
     29a:	05 09       	sbc	r16, r5
     29c:	05 09       	sbc	r16, r5
     29e:	05 09       	sbc	r16, r5
     2a0:	f7 08       	sbc	r15, r7
     2a2:	05 09       	sbc	r16, r5
     2a4:	05 09       	sbc	r16, r5
     2a6:	05 09       	sbc	r16, r5
     2a8:	05 09       	sbc	r16, r5
     2aa:	05 09       	sbc	r16, r5
     2ac:	05 09       	sbc	r16, r5
     2ae:	05 09       	sbc	r16, r5
     2b0:	05 09       	sbc	r16, r5
     2b2:	05 09       	sbc	r16, r5
     2b4:	05 09       	sbc	r16, r5
     2b6:	05 09       	sbc	r16, r5
     2b8:	05 09       	sbc	r16, r5
     2ba:	05 09       	sbc	r16, r5
     2bc:	ca 08       	sbc	r12, r10

000002be <__ctors_end>:
     2be:	11 24       	eor	r1, r1
     2c0:	1f be       	out	0x3f, r1	; 63
     2c2:	cf e5       	ldi	r28, 0x5F	; 95
     2c4:	d4 e0       	ldi	r29, 0x04	; 4
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	cd bf       	out	0x3d, r28	; 61

000002ca <__do_clear_bss>:
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	a0 e6       	ldi	r26, 0x60	; 96
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	ab 3a       	cpi	r26, 0xAB	; 171
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 b9 05 	call	0xb72	; 0xb72 <main>
     2de:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <_exit>

000002e2 <__bad_interrupt>:
     2e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e6 <get_button>:
float ratio;					//Tỉ số tốc độ
float ratio_base;				//Tỉ số tốc độ nền	

//===================BUTTON + SWITCH=====================
uint8_t get_button(uint8_t keyid)
{
     2e6:	98 2f       	mov	r25, r24
	if ( (PINB & 0x0e) != 0x0e)
     2e8:	86 b3       	in	r24, 0x16	; 22
     2ea:	8e 70       	andi	r24, 0x0E	; 14
     2ec:	8e 30       	cpi	r24, 0x0E	; 14
     2ee:	81 f0       	breq	.+32     	; 0x310 <get_button+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	37 ee       	ldi	r19, 0xE7	; 231
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	30 40       	sbci	r19, 0x00	; 0
     2fa:	80 40       	sbci	r24, 0x00	; 0
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <get_button+0x10>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <get_button+0x1a>
     300:	00 00       	nop
	{
		_delay_ms(80);
		if ((PINB|keyid) == keyid) return 1;
     302:	26 b3       	in	r18, 0x16	; 22
     304:	29 2b       	or	r18, r25
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	92 17       	cp	r25, r18
     30a:	19 f0       	breq	.+6      	; 0x312 <get_button+0x2c>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	08 95       	ret
	}
	return 0;
     310:	80 e0       	ldi	r24, 0x00	; 0
}
     312:	08 95       	ret

00000314 <get_switch_2>:
	x = ~PINC;
	x = x & 0x0f;
	return x;
}
float get_switch_2() //trả về 0.1 -> 0.4
{
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	c0 e0       	ldi	r28, 0x00	; 0
     31a:	d0 e0       	ldi	r29, 0x00	; 0
	float val=0;
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	cb 01       	movw	r24, r22
	for(uint8_t i=0; i<4; i++)
	{
		if ( (((~PINC)>>i)&0x1) == 0x1 ) val+=0.1;
     322:	23 b3       	in	r18, 0x13	; 19
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	20 95       	com	r18
     328:	30 95       	com	r19
     32a:	0c 2e       	mov	r0, r28
     32c:	02 c0       	rjmp	.+4      	; 0x332 <get_switch_2+0x1e>
     32e:	35 95       	asr	r19
     330:	27 95       	ror	r18
     332:	0a 94       	dec	r0
     334:	e2 f7       	brpl	.-8      	; 0x32e <get_switch_2+0x1a>
     336:	20 ff       	sbrs	r18, 0
     338:	06 c0       	rjmp	.+12     	; 0x346 <get_switch_2+0x32>
     33a:	2d ec       	ldi	r18, 0xCD	; 205
     33c:	3c ec       	ldi	r19, 0xCC	; 204
     33e:	4c ec       	ldi	r20, 0xCC	; 204
     340:	5d e3       	ldi	r21, 0x3D	; 61
     342:	0e 94 b6 0a 	call	0x156c	; 0x156c <__addsf3>
     346:	21 96       	adiw	r28, 0x01	; 1
	return x;
}
float get_switch_2() //trả về 0.1 -> 0.4
{
	float val=0;
	for(uint8_t i=0; i<4; i++)
     348:	c4 30       	cpi	r28, 0x04	; 4
     34a:	d1 05       	cpc	r29, r1
     34c:	51 f7       	brne	.-44     	; 0x322 <get_switch_2+0xe>
	{
		if ( (((~PINC)>>i)&0x1) == 0x1 ) val+=0.1;
	}
	return val;
}
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	08 95       	ret

00000354 <cal_ratio>:
		else if (pulse_ratio > velocity / 2)    ratio = ratio_base - 0.25;
		else ratio = ratio_base;
		pulse_ratio = 0;
		cnt_ratio = 0;
	}*/
	ratio = ratio_base;
     354:	80 91 8d 00 	lds	r24, 0x008D
     358:	90 91 8e 00 	lds	r25, 0x008E
     35c:	a0 91 8f 00 	lds	r26, 0x008F
     360:	b0 91 90 00 	lds	r27, 0x0090
     364:	80 93 93 00 	sts	0x0093, r24
     368:	90 93 94 00 	sts	0x0094, r25
     36c:	a0 93 95 00 	sts	0x0095, r26
     370:	b0 93 96 00 	sts	0x0096, r27
     374:	08 95       	ret

00000376 <handle>:
}
void handle(int goc)
{
     376:	8a 36       	cpi	r24, 0x6A	; 106
     378:	2f ef       	ldi	r18, 0xFF	; 255
     37a:	92 07       	cpc	r25, r18
     37c:	14 f4       	brge	.+4      	; 0x382 <handle+0xc>
     37e:	8a e6       	ldi	r24, 0x6A	; 106
     380:	9f ef       	ldi	r25, 0xFF	; 255
     382:	87 39       	cpi	r24, 0x97	; 151
     384:	91 05       	cpc	r25, r1
     386:	14 f0       	brlt	.+4      	; 0x38c <handle+0x16>
     388:	86 e9       	ldi	r24, 0x96	; 150
     38a:	90 e0       	ldi	r25, 0x00	; 0
	if (goc>150) goc=150;
	else if(goc<-150) goc=-150;
	OCR1A=SERVO_CENTER+goc*STEP;
     38c:	9c 01       	movw	r18, r24
     38e:	22 0f       	add	r18, r18
     390:	33 1f       	adc	r19, r19
     392:	22 0f       	add	r18, r18
     394:	33 1f       	adc	r19, r19
     396:	22 0f       	add	r18, r18
     398:	33 1f       	adc	r19, r19
     39a:	a9 01       	movw	r20, r18
     39c:	48 1b       	sub	r20, r24
     39e:	59 0b       	sbc	r21, r25
     3a0:	ca 01       	movw	r24, r20
     3a2:	8a 57       	subi	r24, 0x7A	; 122
     3a4:	94 4f       	sbci	r25, 0xF4	; 244
     3a6:	9b bd       	out	0x2b, r25	; 43
     3a8:	8a bd       	out	0x2a, r24	; 42
     3aa:	08 95       	ret

000003ac <speed>:
}
void speed(int left, int right)
{
     3ac:	8f 92       	push	r8
     3ae:	9f 92       	push	r9
     3b0:	af 92       	push	r10
     3b2:	bf 92       	push	r11
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	8b 01       	movw	r16, r22
	left  = left  *  ratio;
     3c6:	80 90 93 00 	lds	r8, 0x0093
     3ca:	90 90 94 00 	lds	r9, 0x0094
     3ce:	a0 90 95 00 	lds	r10, 0x0095
     3d2:	b0 90 96 00 	lds	r11, 0x0096
     3d6:	bc 01       	movw	r22, r24
     3d8:	88 27       	eor	r24, r24
     3da:	77 fd       	sbrc	r23, 7
     3dc:	80 95       	com	r24
     3de:	98 2f       	mov	r25, r24
     3e0:	0e 94 4d 0b 	call	0x169a	; 0x169a <__floatsisf>
     3e4:	a5 01       	movw	r20, r10
     3e6:	94 01       	movw	r18, r8
     3e8:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__mulsf3>
     3ec:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixsfsi>
     3f0:	6b 01       	movw	r12, r22
     3f2:	7c 01       	movw	r14, r24
     3f4:	eb 01       	movw	r28, r22
	right = right *  ratio;
     3f6:	b8 01       	movw	r22, r16
     3f8:	88 27       	eor	r24, r24
     3fa:	77 fd       	sbrc	r23, 7
     3fc:	80 95       	com	r24
     3fe:	98 2f       	mov	r25, r24
     400:	0e 94 4d 0b 	call	0x169a	; 0x169a <__floatsisf>
     404:	9b 01       	movw	r18, r22
     406:	ac 01       	movw	r20, r24
     408:	c5 01       	movw	r24, r10
     40a:	b4 01       	movw	r22, r8
     40c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__mulsf3>
     410:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fixsfsi>
     414:	9b 01       	movw	r18, r22

	if(left>=0)
     416:	dd 23       	and	r29, r29
     418:	5c f0       	brlt	.+22     	; 0x430 <speed+0x84>
	{
		sbi(PORTD, DIR00);
     41a:	90 9a       	sbi	0x12, 0	; 18
		cbi(PORTD, DIR01);
     41c:	91 98       	cbi	0x12, 1	; 18
		OCR1B=left*200;
     41e:	e8 ec       	ldi	r30, 0xC8	; 200
     420:	ec 9d       	mul	r30, r12
     422:	a0 01       	movw	r20, r0
     424:	ed 9d       	mul	r30, r13
     426:	50 0d       	add	r21, r0
     428:	11 24       	eor	r1, r1
     42a:	59 bd       	out	0x29, r21	; 41
     42c:	48 bd       	out	0x28, r20	; 40
     42e:	0b c0       	rjmp	.+22     	; 0x446 <speed+0x9a>
	}
	else
	{
		cbi(PORTD, DIR00);
     430:	90 98       	cbi	0x12, 0	; 18
		sbi(PORTD, DIR01);
     432:	91 9a       	sbi	0x12, 1	; 18
		OCR1B=-left*200;
     434:	e8 e3       	ldi	r30, 0x38	; 56
     436:	ec 9d       	mul	r30, r12
     438:	a0 01       	movw	r20, r0
     43a:	ed 9d       	mul	r30, r13
     43c:	50 0d       	add	r21, r0
     43e:	5c 19       	sub	r21, r12
     440:	11 24       	eor	r1, r1
     442:	59 bd       	out	0x29, r21	; 41
     444:	48 bd       	out	0x28, r20	; 40
	}
	
	if(right>=0)
     446:	33 23       	and	r19, r19
     448:	7c f0       	brlt	.+30     	; 0x468 <__stack+0x9>
	{
		sbi(PORTD, DIR10);
     44a:	93 9a       	sbi	0x12, 3	; 18
		cbi(PORTD, DIR11);
     44c:	96 98       	cbi	0x12, 6	; 18
		OCR2=right*255/100;
     44e:	4f ef       	ldi	r20, 0xFF	; 255
     450:	46 9f       	mul	r20, r22
     452:	90 01       	movw	r18, r0
     454:	47 9f       	mul	r20, r23
     456:	30 0d       	add	r19, r0
     458:	11 24       	eor	r1, r1
     45a:	c9 01       	movw	r24, r18
     45c:	64 e6       	ldi	r22, 0x64	; 100
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divmodhi4>
     464:	63 bd       	out	0x23, r22	; 35
     466:	0f c0       	rjmp	.+30     	; 0x486 <__stack+0x27>
	}
	else
	{
		cbi(PORTD, DIR10);
     468:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD, DIR11);
     46a:	96 9a       	sbi	0x12, 6	; 18
		OCR2=-right*255/100;
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	46 9f       	mul	r20, r22
     470:	90 01       	movw	r18, r0
     472:	47 9f       	mul	r20, r23
     474:	30 0d       	add	r19, r0
     476:	36 1b       	sub	r19, r22
     478:	11 24       	eor	r1, r1
     47a:	c9 01       	movw	r24, r18
     47c:	64 e6       	ldi	r22, 0x64	; 100
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__divmodhi4>
     484:	63 bd       	out	0x23, r22	; 35
	}
}
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	ff 90       	pop	r15
     490:	ef 90       	pop	r14
     492:	df 90       	pop	r13
     494:	cf 90       	pop	r12
     496:	bf 90       	pop	r11
     498:	af 90       	pop	r10
     49a:	9f 90       	pop	r9
     49c:	8f 90       	pop	r8
     49e:	08 95       	ret

000004a0 <fast_brake>:

inline void fast_brake_left()
{
	sbi(PORTD, DIR00);
     4a0:	90 9a       	sbi	0x12, 0	; 18
	sbi(PORTD, DIR01);
     4a2:	91 9a       	sbi	0x12, 1	; 18
	OCR1B=20000;
     4a4:	80 e2       	ldi	r24, 0x20	; 32
     4a6:	9e e4       	ldi	r25, 0x4E	; 78
     4a8:	99 bd       	out	0x29, r25	; 41
     4aa:	88 bd       	out	0x28, r24	; 40
}

inline void fast_brake_right()
{
	sbi(PORTD, DIR10);
     4ac:	93 9a       	sbi	0x12, 3	; 18
	sbi(PORTD, DIR11);
     4ae:	96 9a       	sbi	0x12, 6	; 18
	OCR2=255;
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	83 bd       	out	0x23, r24	; 35
     4b4:	08 95       	ret

000004b6 <SPI>:
}

//==========================LED7=========================
void SPI(uint8_t data)			//Truyền dữ  liệu sang led7, sử dụng SPI
{
	SPDR = data;
     4b6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Đợi phần cứng truyền xong data
     4b8:	77 9b       	sbis	0x0e, 7	; 14
     4ba:	fe cf       	rjmp	.-4      	; 0x4b8 <SPI+0x2>
}
     4bc:	08 95       	ret

000004be <led7>:
void led7(unsigned int num)		// Tính toán dữ liệu cho 4 led 7 đoạn
{
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	ac 01       	movw	r20, r24
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
     4c8:	9c 01       	movw	r18, r24
     4ca:	ad ec       	ldi	r26, 0xCD	; 205
     4cc:	bc ec       	ldi	r27, 0xCC	; 204
     4ce:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__umulhisi3>
     4d2:	96 95       	lsr	r25
     4d4:	87 95       	ror	r24
     4d6:	96 95       	lsr	r25
     4d8:	87 95       	ror	r24
     4da:	96 95       	lsr	r25
     4dc:	87 95       	ror	r24
     4de:	9c 01       	movw	r18, r24
     4e0:	22 0f       	add	r18, r18
     4e2:	33 1f       	adc	r19, r19
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	82 0f       	add	r24, r18
     4f2:	93 1f       	adc	r25, r19
     4f4:	9a 01       	movw	r18, r20
     4f6:	28 1b       	sub	r18, r24
     4f8:	39 0b       	sbc	r19, r25
     4fa:	c9 01       	movw	r24, r18
     4fc:	80 68       	ori	r24, 0x80	; 128
     4fe:	80 93 88 00 	sts	0x0088, r24
	led7_data.ten		 = (unsigned int)(num%100 / 10);
     502:	9a 01       	movw	r18, r20
     504:	36 95       	lsr	r19
     506:	27 95       	ror	r18
     508:	36 95       	lsr	r19
     50a:	27 95       	ror	r18
     50c:	ab e7       	ldi	r26, 0x7B	; 123
     50e:	b4 e1       	ldi	r27, 0x14	; 20
     510:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__umulhisi3>
     514:	96 95       	lsr	r25
     516:	87 95       	ror	r24
     518:	64 e6       	ldi	r22, 0x64	; 100
     51a:	68 9f       	mul	r22, r24
     51c:	90 01       	movw	r18, r0
     51e:	69 9f       	mul	r22, r25
     520:	30 0d       	add	r19, r0
     522:	11 24       	eor	r1, r1
     524:	ca 01       	movw	r24, r20
     526:	82 1b       	sub	r24, r18
     528:	93 0b       	sbc	r25, r19
     52a:	9c 01       	movw	r18, r24
     52c:	ad ec       	ldi	r26, 0xCD	; 205
     52e:	bc ec       	ldi	r27, 0xCC	; 204
     530:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__umulhisi3>
     534:	fc 01       	movw	r30, r24
     536:	f6 95       	lsr	r31
     538:	e7 95       	ror	r30
     53a:	f6 95       	lsr	r31
     53c:	e7 95       	ror	r30
     53e:	f6 95       	lsr	r31
     540:	e7 95       	ror	r30
     542:	1e 2f       	mov	r17, r30
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
     544:	ea 01       	movw	r28, r20
     546:	d6 95       	lsr	r29
     548:	c7 95       	ror	r28
     54a:	d6 95       	lsr	r29
     54c:	c7 95       	ror	r28
     54e:	d6 95       	lsr	r29
     550:	c7 95       	ror	r28
     552:	9e 01       	movw	r18, r28
     554:	a5 ec       	ldi	r26, 0xC5	; 197
     556:	b0 e2       	ldi	r27, 0x20	; 32
     558:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__umulhisi3>
     55c:	92 95       	swap	r25
     55e:	82 95       	swap	r24
     560:	8f 70       	andi	r24, 0x0F	; 15
     562:	89 27       	eor	r24, r25
     564:	9f 70       	andi	r25, 0x0F	; 15
     566:	89 27       	eor	r24, r25
     568:	68 ee       	ldi	r22, 0xE8	; 232
     56a:	73 e0       	ldi	r23, 0x03	; 3
     56c:	86 9f       	mul	r24, r22
     56e:	90 01       	movw	r18, r0
     570:	87 9f       	mul	r24, r23
     572:	30 0d       	add	r19, r0
     574:	96 9f       	mul	r25, r22
     576:	30 0d       	add	r19, r0
     578:	11 24       	eor	r1, r1
     57a:	42 1b       	sub	r20, r18
     57c:	53 0b       	sbc	r21, r19
     57e:	9a 01       	movw	r18, r20
     580:	36 95       	lsr	r19
     582:	27 95       	ror	r18
     584:	36 95       	lsr	r19
     586:	27 95       	ror	r18
     588:	ab e7       	ldi	r26, 0x7B	; 123
     58a:	b4 e1       	ldi	r27, 0x14	; 20
     58c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__umulhisi3>
     590:	ac 01       	movw	r20, r24
     592:	56 95       	lsr	r21
     594:	47 95       	ror	r20
     596:	04 2f       	mov	r16, r20
	led7_data.thousand	 = (unsigned int)(num/ 1000);
     598:	9e 01       	movw	r18, r28
     59a:	a5 ec       	ldi	r26, 0xC5	; 197
     59c:	b0 e2       	ldi	r27, 0x20	; 32
     59e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__umulhisi3>
     5a2:	92 95       	swap	r25
     5a4:	82 95       	swap	r24
     5a6:	8f 70       	andi	r24, 0x0F	; 15
     5a8:	89 27       	eor	r24, r25
     5aa:	9f 70       	andi	r25, 0x0F	; 15
     5ac:	89 27       	eor	r24, r25
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
     5ae:	88 23       	and	r24, r24
     5b0:	11 f0       	breq	.+4      	; 0x5b6 <led7+0xf8>
     5b2:	20 e1       	ldi	r18, 0x10	; 16
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <led7+0xfa>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	82 2b       	or	r24, r18
     5ba:	80 93 8b 00 	sts	0x008B, r24
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     5be:	81 11       	cpse	r24, r1
     5c0:	15 c0       	rjmp	.+42     	; 0x5ec <led7+0x12e>
     5c2:	01 11       	cpse	r16, r1
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <led7+0x120>
     5c6:	0c c0       	rjmp	.+24     	; 0x5e0 <led7+0x122>
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     5c8:	11 23       	and	r17, r17
     5ca:	11 f0       	breq	.+4      	; 0x5d0 <led7+0x112>
     5cc:	80 e4       	ldi	r24, 0x40	; 64
     5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <led7+0x118>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <led7+0x118>
     5d4:	80 e4       	ldi	r24, 0x40	; 64
     5d6:	e8 2b       	or	r30, r24
     5d8:	e0 93 89 00 	sts	0x0089, r30
     5dc:	0c c0       	rjmp	.+24     	; 0x5f6 <led7+0x138>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     5de:	80 e2       	ldi	r24, 0x20	; 32
     5e0:	48 2b       	or	r20, r24
     5e2:	40 93 8a 00 	sts	0x008A, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     5e6:	44 23       	and	r20, r20
     5e8:	79 f3       	breq	.-34     	; 0x5c8 <led7+0x10a>
     5ea:	f4 cf       	rjmp	.-24     	; 0x5d4 <led7+0x116>
	led7_data.unit		 = (1<<7) |(unsigned int)(num%10);
	led7_data.ten		 = (unsigned int)(num%100 / 10);
	led7_data.hundred	 = (unsigned int)(num%1000 / 100);
	led7_data.thousand	 = (unsigned int)(num/ 1000);
	led7_data.thousand	|= (led7_data.thousand!=0)? 1<<4 : 0;
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
     5ec:	40 62       	ori	r20, 0x20	; 32
     5ee:	40 93 8a 00 	sts	0x008A, r20
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
     5f2:	80 e4       	ldi	r24, 0x40	; 64
     5f4:	f0 cf       	rjmp	.-32     	; 0x5d6 <led7+0x118>
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	08 95       	ret

00000600 <print>:
void print()					//Luôn thực thi mỗi vài ms để quét LED
{
     600:	cf 93       	push	r28
	uint8_t value=0;
	if(led7_data.i++ == 4) led7_data.i=0;
     602:	e7 e8       	ldi	r30, 0x87	; 135
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	90 81       	ld	r25, Z
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	89 0f       	add	r24, r25
     60c:	80 83       	st	Z, r24
     60e:	94 30       	cpi	r25, 0x04	; 4
     610:	19 f4       	brne	.+6      	; 0x618 <print+0x18>
     612:	10 92 87 00 	sts	0x0087, r1
     616:	08 c0       	rjmp	.+16     	; 0x628 <print+0x28>
	switch(led7_data.i)
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	49 f0       	breq	.+18     	; 0x62e <print+0x2e>
     61c:	28 f0       	brcs	.+10     	; 0x628 <print+0x28>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	49 f0       	breq	.+18     	; 0x634 <print+0x34>
     622:	83 30       	cpi	r24, 0x03	; 3
     624:	51 f0       	breq	.+20     	; 0x63a <print+0x3a>
     626:	0c c0       	rjmp	.+24     	; 0x640 <print+0x40>
	{
		case 0: value=led7_data.thousand;	break;
     628:	c0 91 8b 00 	lds	r28, 0x008B
     62c:	0a c0       	rjmp	.+20     	; 0x642 <print+0x42>
		case 1: value=led7_data.hundred;	break;
     62e:	c0 91 8a 00 	lds	r28, 0x008A
     632:	07 c0       	rjmp	.+14     	; 0x642 <print+0x42>
		case 2: value=led7_data.ten;		break;
     634:	c0 91 89 00 	lds	r28, 0x0089
     638:	04 c0       	rjmp	.+8      	; 0x642 <print+0x42>
		case 3: value=led7_data.unit;		break;
     63a:	c0 91 88 00 	lds	r28, 0x0088
     63e:	01 c0       	rjmp	.+2      	; 0x642 <print+0x42>
	led7_data.hundred	|= (led7_data.thousand!=0 || led7_data.hundred!=0)? 1<<5 : 0;
	led7_data.ten		|= (led7_data.thousand!=0 || led7_data.hundred !=0 || led7_data.ten!=0)? 1<<6 : 0;
}
void print()					//Luôn thực thi mỗi vài ms để quét LED
{
	uint8_t value=0;
     640:	c0 e0       	ldi	r28, 0x00	; 0
		case 1: value=led7_data.hundred;	break;
		case 2: value=led7_data.ten;		break;
		case 3: value=led7_data.unit;		break;
		default: break;
	}
	SPI(~led7_data.sensor_out);
     642:	80 91 8c 00 	lds	r24, 0x008C
     646:	80 95       	com	r24
     648:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SPI>
	SPI(value);
     64c:	8c 2f       	mov	r24, r28
     64e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SPI>
	sbi(PORTB,LATCH);
     652:	c4 9a       	sbi	0x18, 4	; 24
	cbi(PORTB,LATCH);
     654:	c4 98       	cbi	0x18, 4	; 24
}
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <read_adc_eeprom>:

//==========================ADC==========================
void read_adc_eeprom()
{
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	0f 2e       	mov	r0, r31
     668:	f6 e7       	ldi	r31, 0x76	; 118
     66a:	ef 2e       	mov	r14, r31
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	ff 2e       	mov	r15, r31
     670:	f0 2d       	mov	r31, r0
     672:	07 e9       	ldi	r16, 0x97	; 151
     674:	10 e0       	ldi	r17, 0x00	; 0
     676:	c0 e0       	ldi	r28, 0x00	; 0
     678:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     67a:	e1 99       	sbic	0x1c, 1	; 28
     67c:	fe cf       	rjmp	.-4      	; 0x67a <read_adc_eeprom+0x20>
		linetrang[j] = eeprom_read_word((uint16_t*)(j*2));
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__eerd_word_m16a>
     684:	d7 01       	movw	r26, r14
     686:	8d 93       	st	X+, r24
     688:	9d 93       	st	X+, r25
     68a:	7d 01       	movw	r14, r26
		while(!eeprom_is_ready());
     68c:	e1 99       	sbic	0x1c, 1	; 28
     68e:	fe cf       	rjmp	.-4      	; 0x68c <read_adc_eeprom+0x32>
		lineden[j] = eeprom_read_word((uint16_t*)((j+8)*2));
     690:	ce 01       	movw	r24, r28
     692:	40 96       	adiw	r24, 0x10	; 16
     694:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__eerd_word_m16a>
     698:	f8 01       	movw	r30, r16
     69a:	81 93       	st	Z+, r24
     69c:	91 93       	st	Z+, r25
     69e:	8f 01       	movw	r16, r30
     6a0:	22 96       	adiw	r28, 0x02	; 2
}

//==========================ADC==========================
void read_adc_eeprom()
{
	for(uint8_t j=0; j<8; j++)
     6a2:	c0 31       	cpi	r28, 0x10	; 16
     6a4:	d1 05       	cpc	r29, r1
     6a6:	49 f7       	brne	.-46     	; 0x67a <read_adc_eeprom+0x20>
     6a8:	42 e6       	ldi	r20, 0x62	; 98
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	06 e8       	ldi	r16, 0x86	; 134
     6ae:	10 e0       	ldi	r17, 0x00	; 0
     6b0:	c7 e9       	ldi	r28, 0x97	; 151
     6b2:	d0 e0       	ldi	r29, 0x00	; 0
     6b4:	e6 e7       	ldi	r30, 0x76	; 118
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
		lineden[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(linetrang[i]+lineden[i])/2;
		ADC_average[i]=ADC_average[i]*vach_xam;
     6b8:	0f 2e       	mov	r0, r31
     6ba:	f3 e1       	ldi	r31, 0x13	; 19
     6bc:	ff 2e       	mov	r15, r31
     6be:	f0 2d       	mov	r31, r0
		while(!eeprom_is_ready());
		lineden[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(linetrang[i]+lineden[i])/2;
     6c0:	81 91       	ld	r24, Z+
     6c2:	91 91       	ld	r25, Z+
     6c4:	29 91       	ld	r18, Y+
     6c6:	39 91       	ld	r19, Y+
     6c8:	82 0f       	add	r24, r18
     6ca:	93 1f       	adc	r25, r19
     6cc:	96 95       	lsr	r25
     6ce:	87 95       	ror	r24
		ADC_average[i]=ADC_average[i]*vach_xam;
     6d0:	f8 9e       	mul	r15, r24
     6d2:	90 01       	movw	r18, r0
     6d4:	f9 9e       	mul	r15, r25
     6d6:	30 0d       	add	r19, r0
     6d8:	11 24       	eor	r1, r1
     6da:	ad ec       	ldi	r26, 0xCD	; 205
     6dc:	bc ec       	ldi	r27, 0xCC	; 204
     6de:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__umulhisi3>
     6e2:	92 95       	swap	r25
     6e4:	82 95       	swap	r24
     6e6:	8f 70       	andi	r24, 0x0F	; 15
     6e8:	89 27       	eor	r24, r25
     6ea:	9f 70       	andi	r25, 0x0F	; 15
     6ec:	89 27       	eor	r24, r25
     6ee:	da 01       	movw	r26, r20
     6f0:	8d 93       	st	X+, r24
     6f2:	9d 93       	st	X+, r25
     6f4:	ad 01       	movw	r20, r26
		while(!eeprom_is_ready());
		linetrang[j] = eeprom_read_word((uint16_t*)(j*2));
		while(!eeprom_is_ready());
		lineden[j] = eeprom_read_word((uint16_t*)((j+8)*2));
	}
	for(uint8_t i=0; i<8; i++)
     6f6:	e0 17       	cp	r30, r16
     6f8:	f1 07       	cpc	r31, r17
     6fa:	11 f7       	brne	.-60     	; 0x6c0 <read_adc_eeprom+0x66>
	{
		ADC_average[i]=(linetrang[i]+lineden[i])/2;
		ADC_average[i]=ADC_average[i]*vach_xam;
	}
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	08 95       	ret

0000070a <write_adc_eeprom>:
void write_adc_eeprom()
{
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	0f 2e       	mov	r0, r31
     718:	f7 e9       	ldi	r31, 0x97	; 151
     71a:	ef 2e       	mov	r14, r31
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	ff 2e       	mov	r15, r31
     720:	f0 2d       	mov	r31, r0
     722:	06 e7       	ldi	r16, 0x76	; 118
     724:	10 e0       	ldi	r17, 0x00	; 0
     726:	c0 e0       	ldi	r28, 0x00	; 0
     728:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t j=0; j<8; j++)
	{
		while(!eeprom_is_ready());
     72a:	e1 99       	sbic	0x1c, 1	; 28
     72c:	fe cf       	rjmp	.-4      	; 0x72a <write_adc_eeprom+0x20>
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)linetrang[j]);
     72e:	f8 01       	movw	r30, r16
     730:	61 91       	ld	r22, Z+
     732:	71 91       	ld	r23, Z+
     734:	8f 01       	movw	r16, r30
     736:	ce 01       	movw	r24, r28
     738:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eewr_word_m16a>
		while(!eeprom_is_ready());
     73c:	e1 99       	sbic	0x1c, 1	; 28
     73e:	fe cf       	rjmp	.-4      	; 0x73c <write_adc_eeprom+0x32>
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineden[j]);
     740:	f7 01       	movw	r30, r14
     742:	61 91       	ld	r22, Z+
     744:	71 91       	ld	r23, Z+
     746:	7f 01       	movw	r14, r30
     748:	ce 01       	movw	r24, r28
     74a:	40 96       	adiw	r24, 0x10	; 16
     74c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eewr_word_m16a>
     750:	22 96       	adiw	r28, 0x02	; 2
		ADC_average[i]=ADC_average[i]*vach_xam;
	}
}
void write_adc_eeprom()
{
	for(uint8_t j=0; j<8; j++)
     752:	c0 31       	cpi	r28, 0x10	; 16
     754:	d1 05       	cpc	r29, r1
     756:	49 f7       	brne	.-46     	; 0x72a <write_adc_eeprom+0x20>
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)(j*2), (uint16_t)linetrang[j]);
		while(!eeprom_is_ready());
		eeprom_write_word((uint16_t*)((j+8)*2), (uint16_t)lineden[j]);
	}
}
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	ff 90       	pop	r15
     762:	ef 90       	pop	r14
     764:	08 95       	ret

00000766 <adc_read>:
uint16_t adc_read(uint8_t ch)
{
	ADMUX = (1<< REFS0)|ch;									// selecting channel
     766:	80 64       	ori	r24, 0x40	; 64
     768:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);										// start conversion
     76a:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));							// waiting for ADIF, conversion complete
     76c:	34 9b       	sbis	0x06, 4	; 6
     76e:	fe cf       	rjmp	.-4      	; 0x76c <adc_read+0x6>
	return ADCW;											// Giá trị trả về từ [0 -> 1024] tương ứng [0V -> 5V]	
     770:	84 b1       	in	r24, 0x04	; 4
     772:	95 b1       	in	r25, 0x05	; 5
}
     774:	08 95       	ret

00000776 <sensor_cmp>:
uint8_t sensor_cmp(uint8_t mask)							//Sensor compare: đọc về và so sánh với trung bình 
{															//Thêm tính năng che mặt nạ: mask mặc định là: 0xff (0b11111111)
     776:	cf 92       	push	r12
     778:	df 92       	push	r13
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	c8 2e       	mov	r12, r24
     788:	02 e6       	ldi	r16, 0x62	; 98
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	c0 e0       	ldi	r28, 0x00	; 0
     78e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t ADC_value=0;												
     790:	d1 2c       	mov	r13, r1
	for(uint8_t i=0; i<8; i++)
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);	//Nhỏ hơn trung bình -> gần về 0V -> led thu hồng ngoại dẫn -> có nhiều hồng ngoại -> vạch trắng
     792:	ee 24       	eor	r14, r14
     794:	e3 94       	inc	r14
     796:	f1 2c       	mov	r15, r1
     798:	8c 2f       	mov	r24, r28
     79a:	0e 94 b3 03 	call	0x766	; 0x766 <adc_read>
     79e:	f8 01       	movw	r30, r16
     7a0:	21 91       	ld	r18, Z+
     7a2:	31 91       	ld	r19, Z+
     7a4:	8f 01       	movw	r16, r30
     7a6:	82 17       	cp	r24, r18
     7a8:	93 07       	cpc	r25, r19
     7aa:	40 f4       	brcc	.+16     	; 0x7bc <sensor_cmp+0x46>
     7ac:	97 01       	movw	r18, r14
     7ae:	0c 2e       	mov	r0, r28
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <sensor_cmp+0x40>
     7b2:	22 0f       	add	r18, r18
     7b4:	33 1f       	adc	r19, r19
     7b6:	0a 94       	dec	r0
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <sensor_cmp+0x3c>
     7ba:	d2 2a       	or	r13, r18
     7bc:	21 96       	adiw	r28, 0x01	; 1
	return ADCW;											// Giá trị trả về từ [0 -> 1024] tương ứng [0V -> 5V]	
}
uint8_t sensor_cmp(uint8_t mask)							//Sensor compare: đọc về và so sánh với trung bình 
{															//Thêm tính năng che mặt nạ: mask mặc định là: 0xff (0b11111111)
	uint8_t ADC_value=0;												
	for(uint8_t i=0; i<8; i++)
     7be:	c8 30       	cpi	r28, 0x08	; 8
     7c0:	d1 05       	cpc	r29, r1
     7c2:	51 f7       	brne	.-44     	; 0x798 <sensor_cmp+0x22>
	{
		if(adc_read(i)<ADC_average[i]) sbi(ADC_value,i);	//Nhỏ hơn trung bình -> gần về 0V -> led thu hồng ngoại dẫn -> có nhiều hồng ngoại -> vạch trắng
		//else    cbi(ADC_value,i);
	}
	led7_data.sensor_out=ADC_value;							//Cập nhật giá trị xuất ra 8 led đơn
     7c4:	d0 92 8c 00 	sts	0x008C, r13
	return (ADC_value & mask);
}
     7c8:	8d 2d       	mov	r24, r13
     7ca:	8c 21       	and	r24, r12
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	cf 90       	pop	r12
     7dc:	08 95       	ret

000007de <learn_color>:
void learn_color()
{
     7de:	8f 92       	push	r8
     7e0:	9f 92       	push	r9
     7e2:	af 92       	push	r10
     7e4:	bf 92       	push	r11
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	c6 e7       	ldi	r28, 0x76	; 118
     7f8:	d0 e0       	ldi	r29, 0x00	; 0
     7fa:	07 e9       	ldi	r16, 0x97	; 151
     7fc:	10 e0       	ldi	r17, 0x00	; 0
     7fe:	0f 2e       	mov	r0, r31
     800:	f6 e8       	ldi	r31, 0x86	; 134
     802:	ef 2e       	mov	r14, r31
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	ff 2e       	mov	r15, r31
     808:	f0 2d       	mov	r31, r0
     80a:	d8 01       	movw	r26, r16
     80c:	fe 01       	movw	r30, r28
	uint16_t ADC_temp=0;
	for (uint8_t i=0; i<8; i++)
	{
		linetrang[i]=1024;
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	94 e0       	ldi	r25, 0x04	; 4
     812:	81 93       	st	Z+, r24
     814:	91 93       	st	Z+, r25
		lineden[i]=0;
     816:	1d 92       	st	X+, r1
     818:	1d 92       	st	X+, r1
	return (ADC_value & mask);
}
void learn_color()
{
	uint16_t ADC_temp=0;
	for (uint8_t i=0; i<8; i++)
     81a:	ee 15       	cp	r30, r14
     81c:	ff 05       	cpc	r31, r15
     81e:	c9 f7       	brne	.-14     	; 0x812 <learn_color+0x34>
	{
		linetrang[i]=1024;
		lineden[i]=0;
	}
	
	led7(2017);
     820:	81 ee       	ldi	r24, 0xE1	; 225
     822:	97 e0       	ldi	r25, 0x07	; 7
     824:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
	while(1)
	{
		if(get_button(BTN0)) return;
		else if(get_button(BTN2)) break;
     828:	b0 2e       	mov	r11, r16
     82a:	a1 2e       	mov	r10, r17
     82c:	9c 2e       	mov	r9, r28
     82e:	8d 2e       	mov	r8, r29
     830:	c1 2c       	mov	r12, r1
	}
	
	led7(2017);
	while(1)
	{
		if(get_button(BTN0)) return;
     832:	8d ef       	ldi	r24, 0xFD	; 253
     834:	0e 94 73 01 	call	0x2e6	; 0x2e6 <get_button>
     838:	81 11       	cpse	r24, r1
     83a:	4b c0       	rjmp	.+150    	; 0x8d2 <learn_color+0xf4>
		else if(get_button(BTN2)) break;
     83c:	87 ef       	ldi	r24, 0xF7	; 247
     83e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <get_button>
     842:	81 11       	cpse	r24, r1
     844:	1f c0       	rjmp	.+62     	; 0x884 <learn_color+0xa6>
     846:	0b 2d       	mov	r16, r11
     848:	1a 2d       	mov	r17, r10
     84a:	c9 2d       	mov	r28, r9
     84c:	d8 2d       	mov	r29, r8
     84e:	dc 2c       	mov	r13, r12
		for (uint8_t i=0; i<8; i++)
		{
			ADC_temp=adc_read(i);
     850:	8d 2d       	mov	r24, r13
     852:	0e 94 b3 03 	call	0x766	; 0x766 <adc_read>
			if (ADC_temp < linetrang[i]) linetrang[i]=ADC_temp;
     856:	28 81       	ld	r18, Y
     858:	39 81       	ldd	r19, Y+1	; 0x01
     85a:	82 17       	cp	r24, r18
     85c:	93 07       	cpc	r25, r19
     85e:	10 f4       	brcc	.+4      	; 0x864 <learn_color+0x86>
     860:	99 83       	std	Y+1, r25	; 0x01
     862:	88 83       	st	Y, r24
			if(ADC_temp>lineden[i]) lineden[i]=ADC_temp;
     864:	f8 01       	movw	r30, r16
     866:	20 81       	ld	r18, Z
     868:	31 81       	ldd	r19, Z+1	; 0x01
     86a:	28 17       	cp	r18, r24
     86c:	39 07       	cpc	r19, r25
     86e:	10 f4       	brcc	.+4      	; 0x874 <learn_color+0x96>
     870:	91 83       	std	Z+1, r25	; 0x01
     872:	80 83       	st	Z, r24
	led7(2017);
	while(1)
	{
		if(get_button(BTN0)) return;
		else if(get_button(BTN2)) break;
		for (uint8_t i=0; i<8; i++)
     874:	d3 94       	inc	r13
     876:	22 96       	adiw	r28, 0x02	; 2
     878:	0e 5f       	subi	r16, 0xFE	; 254
     87a:	1f 4f       	sbci	r17, 0xFF	; 255
     87c:	f8 e0       	ldi	r31, 0x08	; 8
     87e:	df 12       	cpse	r13, r31
     880:	e7 cf       	rjmp	.-50     	; 0x850 <learn_color+0x72>
     882:	d7 cf       	rjmp	.-82     	; 0x832 <learn_color+0x54>
     884:	42 e6       	ldi	r20, 0x62	; 98
     886:	50 e0       	ldi	r21, 0x00	; 0
	
	led7(2017);
	while(1)
	{
		if(get_button(BTN0)) return;
		else if(get_button(BTN2)) break;
     888:	c7 e9       	ldi	r28, 0x97	; 151
     88a:	d0 e0       	ldi	r29, 0x00	; 0
     88c:	e6 e7       	ldi	r30, 0x76	; 118
     88e:	f0 e0       	ldi	r31, 0x00	; 0
	}
	for (uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(linetrang[i]+lineden[i])/2;
		
		ADC_average[i]=ADC_average[i] * vach_xam;
     890:	13 e1       	ldi	r17, 0x13	; 19
			if(ADC_temp>lineden[i]) lineden[i]=ADC_temp;
		}
	}
	for (uint8_t i=0; i<8; i++)
	{
		ADC_average[i]=(linetrang[i]+lineden[i])/2;
     892:	81 91       	ld	r24, Z+
     894:	91 91       	ld	r25, Z+
     896:	29 91       	ld	r18, Y+
     898:	39 91       	ld	r19, Y+
     89a:	82 0f       	add	r24, r18
     89c:	93 1f       	adc	r25, r19
     89e:	96 95       	lsr	r25
     8a0:	87 95       	ror	r24
		
		ADC_average[i]=ADC_average[i] * vach_xam;
     8a2:	18 9f       	mul	r17, r24
     8a4:	90 01       	movw	r18, r0
     8a6:	19 9f       	mul	r17, r25
     8a8:	30 0d       	add	r19, r0
     8aa:	11 24       	eor	r1, r1
     8ac:	ad ec       	ldi	r26, 0xCD	; 205
     8ae:	bc ec       	ldi	r27, 0xCC	; 204
     8b0:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__umulhisi3>
     8b4:	92 95       	swap	r25
     8b6:	82 95       	swap	r24
     8b8:	8f 70       	andi	r24, 0x0F	; 15
     8ba:	89 27       	eor	r24, r25
     8bc:	9f 70       	andi	r25, 0x0F	; 15
     8be:	89 27       	eor	r24, r25
     8c0:	da 01       	movw	r26, r20
     8c2:	8d 93       	st	X+, r24
     8c4:	9d 93       	st	X+, r25
     8c6:	ad 01       	movw	r20, r26
			ADC_temp=adc_read(i);
			if (ADC_temp < linetrang[i]) linetrang[i]=ADC_temp;
			if(ADC_temp>lineden[i]) lineden[i]=ADC_temp;
		}
	}
	for (uint8_t i=0; i<8; i++)
     8c8:	ee 15       	cp	r30, r14
     8ca:	ff 05       	cpc	r31, r15
     8cc:	11 f7       	brne	.-60     	; 0x892 <learn_color+0xb4>
	{
		ADC_average[i]=(linetrang[i]+lineden[i])/2;
		
		ADC_average[i]=ADC_average[i] * vach_xam;
	}
	write_adc_eeprom();										//Ghi vào eeprom để cho các lần sau			
     8ce:	0e 94 85 03 	call	0x70a	; 0x70a <write_adc_eeprom>
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	08 95       	ret

000008ec <INIT>:

//=======================INITIAL=========================
void INIT()
{
	//ADC
	ADMUX=(1<<REFS0);										// 0b0100000000 Chọn điện áp tham chiếu từ chân AVCC, thêm tụ ở AREF
     8ec:	80 e4       	ldi	r24, 0x40	; 64
     8ee:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN) | (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	// 0b10000111 Enable ADC and set Prescaler = 128
     8f0:	87 e8       	ldi	r24, 0x87	; 135
     8f2:	86 b9       	out	0x06, r24	; 6
	read_adc_eeprom();										// Tự động đọc Eeprom ra khi bật nguồn chip
     8f4:	0e 94 2d 03 	call	0x65a	; 0x65a <read_adc_eeprom>
	
	//PORT
	DDRB  = 0b11110001;
     8f8:	81 ef       	ldi	r24, 0xF1	; 241
     8fa:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111111;
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	88 bb       	out	0x18, r24	; 24
	DDRC  = 0b00000000;
     900:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b11111111;
     902:	85 bb       	out	0x15, r24	; 21
	DDRD  = 0b11111011;
     904:	8b ef       	ldi	r24, 0xFB	; 251
     906:	81 bb       	out	0x11, r24	; 17
	PORTD = (1 << DIR00) | (1 << DIR10);										// DIR00 = 1, DIR01 = 0, DIR10 = 1, DIR11 = 0
     908:	89 e0       	ldi	r24, 0x09	; 9
     90a:	82 bb       	out	0x12, r24	; 18
	
	//SPI
	SPCR	= (1<<SPE)|(1<<MSTR);							//Enable spi, Master
     90c:	80 e5       	ldi	r24, 0x50	; 80
     90e:	8d b9       	out	0x0d, r24	; 13
	SPSR	= (1<<SPI2X);									//SCK Mode 2X: Fosc/2
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	8e b9       	out	0x0e, r24	; 14
	
	//TIMER
	TCCR0=(1<<WGM01) | (1<<CS02);							// Mode 2 CTC,  Prescaler = 256
     914:	8c e0       	ldi	r24, 0x0C	; 12
     916:	83 bf       	out	0x33, r24	; 51
	OCR0=62;												// 1ms
     918:	8e e3       	ldi	r24, 0x3E	; 62
     91a:	8c bf       	out	0x3c, r24	; 60
	TIMSK=(1<<OCIE0);
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	89 bf       	out	0x39, r24	; 57
		
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);			// SET OCR1A & OCR1B at BOTTOM, CLEAR at Compare Match (Non-invert), Mode 14 Fast PWM
     920:	82 ea       	ldi	r24, 0xA2	; 162
     922:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS11);				// Prescaler = 8
     924:	8a e1       	ldi	r24, 0x1A	; 26
     926:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 20000;											// Time Period = 10ms
     928:	80 e2       	ldi	r24, 0x20	; 32
     92a:	9e e4       	ldi	r25, 0x4E	; 78
     92c:	97 bd       	out	0x27, r25	; 39
     92e:	86 bd       	out	0x26, r24	; 38
	
	TCCR2=(1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS22)|(1<<CS21)|(1<<CS20);  //SET OC2 at BOTTOM, CLEAR OC2 on compare match,(non-invert), Mode 3 Fast PWM,  Prescaler = 1024
     930:	8f e6       	ldi	r24, 0x6F	; 111
     932:	85 bd       	out	0x25, r24	; 37
	OCR2=0;
     934:	13 bc       	out	0x23, r1	; 35
	sei();
     936:	78 94       	sei
	
	//ENCODER
	MCUCR |= (1<<ISC11)|(1<<ISC01);
     938:	85 b7       	in	r24, 0x35	; 53
     93a:	8a 60       	ori	r24, 0x0A	; 10
     93c:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     93e:	8b b7       	in	r24, 0x3b	; 59
     940:	80 64       	ori	r24, 0x40	; 64
     942:	8b bf       	out	0x3b, r24	; 59
}

//================RATIO + SERVO + MOTOR ================
void set_encoder(uint8_t veloc)
{
	velocity=veloc;
     944:	83 e1       	ldi	r24, 0x13	; 19
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	90 93 92 00 	sts	0x0092, r25
     94c:	80 93 91 00 	sts	0x0091, r24
     950:	08 95       	ret

00000952 <test_hardware>:
	set_encoder(19);
}

void test_hardware()
{
	uint8_t _index=0;
     952:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		if(get_button(BTN0))		{ speed(100,100); handle(-100);}
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;}
     954:	f1 2c       	mov	r15, r1
		else if (get_button(BTN2))	{ speed(-100,-100); handle(100); }
		else						{ speed(0,0);  handle(0);    }
		
		led7(adc_read(_index));
		led7_data.sensor_out = 0 | (1<<_index);
     956:	cc e8       	ldi	r28, 0x8C	; 140
     958:	d0 e0       	ldi	r29, 0x00	; 0
     95a:	01 e0       	ldi	r16, 0x01	; 1
void test_hardware()
{
	uint8_t _index=0;
	while(1)
	{
		if(get_button(BTN0))		{ speed(100,100); handle(-100);}
     95c:	8d ef       	ldi	r24, 0xFD	; 253
     95e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <get_button>
     962:	88 23       	and	r24, r24
     964:	59 f0       	breq	.+22     	; 0x97c <test_hardware+0x2a>
     966:	64 e6       	ldi	r22, 0x64	; 100
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	84 e6       	ldi	r24, 0x64	; 100
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
     972:	8c e9       	ldi	r24, 0x9C	; 156
     974:	9f ef       	ldi	r25, 0xFF	; 255
     976:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
     97a:	25 c0       	rjmp	.+74     	; 0x9c6 <test_hardware+0x74>
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;}
     97c:	8b ef       	ldi	r24, 0xFB	; 251
     97e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <get_button>
     982:	88 23       	and	r24, r24
     984:	21 f0       	breq	.+8      	; 0x98e <test_hardware+0x3c>
     986:	1f 5f       	subi	r17, 0xFF	; 255
     988:	18 30       	cpi	r17, 0x08	; 8
     98a:	e9 f4       	brne	.+58     	; 0x9c6 <test_hardware+0x74>
     98c:	1b c0       	rjmp	.+54     	; 0x9c4 <test_hardware+0x72>
		else if (get_button(BTN2))	{ speed(-100,-100); handle(100); }
     98e:	87 ef       	ldi	r24, 0xF7	; 247
     990:	0e 94 73 01 	call	0x2e6	; 0x2e6 <get_button>
     994:	88 23       	and	r24, r24
     996:	59 f0       	breq	.+22     	; 0x9ae <test_hardware+0x5c>
     998:	6c e9       	ldi	r22, 0x9C	; 156
     99a:	7f ef       	ldi	r23, 0xFF	; 255
     99c:	8c e9       	ldi	r24, 0x9C	; 156
     99e:	9f ef       	ldi	r25, 0xFF	; 255
     9a0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
     9a4:	84 e6       	ldi	r24, 0x64	; 100
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
     9ac:	0c c0       	rjmp	.+24     	; 0x9c6 <test_hardware+0x74>
		else						{ speed(0,0);  handle(0);    }
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <test_hardware+0x74>
{
	uint8_t _index=0;
	while(1)
	{
		if(get_button(BTN0))		{ speed(100,100); handle(-100);}
		else if (get_button(BTN1))	{ if(++_index == 8) _index=0;}
     9c4:	1f 2d       	mov	r17, r15
		else if (get_button(BTN2))	{ speed(-100,-100); handle(100); }
		else						{ speed(0,0);  handle(0);    }
		
		led7(adc_read(_index));
     9c6:	81 2f       	mov	r24, r17
     9c8:	0e 94 b3 03 	call	0x766	; 0x766 <adc_read>
     9cc:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
		led7_data.sensor_out = 0 | (1<<_index);
     9d0:	80 2f       	mov	r24, r16
     9d2:	01 2e       	mov	r0, r17
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <test_hardware+0x86>
     9d6:	88 0f       	add	r24, r24
     9d8:	0a 94       	dec	r0
     9da:	ea f7       	brpl	.-6      	; 0x9d6 <test_hardware+0x84>
     9dc:	88 83       	st	Y, r24
	}
     9de:	be cf       	rjmp	.-132    	; 0x95c <test_hardware+0xa>

000009e0 <sel_mode>:
}
//========================START==========================
void sel_mode()
{
	handle(0);
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
	speed(0,0);
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
	while(1)
	{
		ratio = ratio_base = ratio_default + get_switch_2();
     9f4:	0e 94 8a 01 	call	0x314	; 0x314 <get_switch_2>
     9f8:	2d ec       	ldi	r18, 0xCD	; 205
     9fa:	3c ec       	ldi	r19, 0xCC	; 204
     9fc:	4c ec       	ldi	r20, 0xCC	; 204
     9fe:	5d e3       	ldi	r21, 0x3D	; 61
     a00:	0e 94 b6 0a 	call	0x156c	; 0x156c <__addsf3>
     a04:	60 93 8d 00 	sts	0x008D, r22
     a08:	70 93 8e 00 	sts	0x008E, r23
     a0c:	80 93 8f 00 	sts	0x008F, r24
     a10:	90 93 90 00 	sts	0x0090, r25
     a14:	60 93 93 00 	sts	0x0093, r22
     a18:	70 93 94 00 	sts	0x0094, r23
     a1c:	80 93 95 00 	sts	0x0095, r24
     a20:	90 93 96 00 	sts	0x0096, r25
		led7(ratio_base*100);
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	48 ec       	ldi	r20, 0xC8	; 200
     a2a:	52 e4       	ldi	r21, 0x42	; 66
     a2c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__mulsf3>
     a30:	0e 94 1f 0b 	call	0x163e	; 0x163e <__fixunssfsi>
     a34:	cb 01       	movw	r24, r22
     a36:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
		sensor_cmp(0xff);
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
     a3c:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
		if(get_button(BTN0))		return;
     a40:	8d ef       	ldi	r24, 0xFD	; 253
     a42:	0e 94 73 01 	call	0x2e6	; 0x2e6 <get_button>
     a46:	81 11       	cpse	r24, r1
     a48:	0e c0       	rjmp	.+28     	; 0xa66 <sel_mode+0x86>
		else if (get_button(BTN1))	test_hardware();
     a4a:	8b ef       	ldi	r24, 0xFB	; 251
     a4c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <get_button>
     a50:	81 11       	cpse	r24, r1
     a52:	0e 94 a9 04 	call	0x952	; 0x952 <test_hardware>
		else if (get_button(BTN2))	learn_color();
     a56:	87 ef       	ldi	r24, 0xF7	; 247
     a58:	0e 94 73 01 	call	0x2e6	; 0x2e6 <get_button>
     a5c:	88 23       	and	r24, r24
     a5e:	51 f2       	breq	.-108    	; 0x9f4 <sel_mode+0x14>
     a60:	0e 94 ef 03 	call	0x7de	; 0x7de <learn_color>
     a64:	c7 cf       	rjmp	.-114    	; 0x9f4 <sel_mode+0x14>
     a66:	08 95       	ret

00000a68 <__vector_19>:
        
    }
}

ISR(TIMER0_COMP_vect)
{
     a68:	1f 92       	push	r1
     a6a:	0f 92       	push	r0
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	0f 92       	push	r0
     a70:	11 24       	eor	r1, r1
     a72:	2f 93       	push	r18
     a74:	3f 93       	push	r19
     a76:	4f 93       	push	r20
     a78:	5f 93       	push	r21
     a7a:	6f 93       	push	r22
     a7c:	7f 93       	push	r23
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
     a82:	af 93       	push	r26
     a84:	bf 93       	push	r27
     a86:	ef 93       	push	r30
     a88:	ff 93       	push	r31
    cnt1++;
     a8a:	80 91 a9 00 	lds	r24, 0x00A9
     a8e:	90 91 aa 00 	lds	r25, 0x00AA
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	90 93 aa 00 	sts	0x00AA, r25
     a98:	80 93 a9 00 	sts	0x00A9, r24
	cnt2++;
     a9c:	80 91 60 00 	lds	r24, 0x0060
     aa0:	90 91 61 00 	lds	r25, 0x0061
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	90 93 61 00 	sts	0x0061, r25
     aaa:	80 93 60 00 	sts	0x0060, r24
    cal_ratio();
     aae:	0e 94 aa 01 	call	0x354	; 0x354 <cal_ratio>
    print();			//Quét LED7 đoạn
     ab2:	0e 94 00 03 	call	0x600	; 0x600 <print>
}
     ab6:	ff 91       	pop	r31
     ab8:	ef 91       	pop	r30
     aba:	bf 91       	pop	r27
     abc:	af 91       	pop	r26
     abe:	9f 91       	pop	r25
     ac0:	8f 91       	pop	r24
     ac2:	7f 91       	pop	r23
     ac4:	6f 91       	pop	r22
     ac6:	5f 91       	pop	r21
     ac8:	4f 91       	pop	r20
     aca:	3f 91       	pop	r19
     acc:	2f 91       	pop	r18
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <__vector_1>:

ISR(INT0_vect)
{
     ad8:	1f 92       	push	r1
     ada:	0f 92       	push	r0
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	0f 92       	push	r0
     ae0:	11 24       	eor	r1, r1
     ae2:	8f 93       	push	r24
     ae4:	9f 93       	push	r25
	pulse_v++;
     ae6:	80 91 72 00 	lds	r24, 0x0072
     aea:	90 91 73 00 	lds	r25, 0x0073
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	90 93 73 00 	sts	0x0073, r25
     af4:	80 93 72 00 	sts	0x0072, r24
}
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <check_crossline>:

int check_crossline( void )
{
    int ret=0;
    if(( sensor_cmp(0b11111111)==0b11111111) || (sensor_cmp(0b01111110)==0b01111110))ret = 1;
     b06:	8f ef       	ldi	r24, 0xFF	; 255
     b08:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
     b0c:	8f 3f       	cpi	r24, 0xFF	; 255
     b0e:	51 f0       	breq	.+20     	; 0xb24 <check_crossline+0x1e>
     b10:	8e e7       	ldi	r24, 0x7E	; 126
     b12:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
     b16:	21 e0       	ldi	r18, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	8e 37       	cpi	r24, 0x7E	; 126
     b1c:	09 f0       	breq	.+2      	; 0xb20 <check_crossline+0x1a>
     b1e:	20 e0       	ldi	r18, 0x00	; 0
	pulse_v++;
}

int check_crossline( void )
{
    int ret=0;
     b20:	82 2f       	mov	r24, r18
     b22:	08 95       	ret
    if(( sensor_cmp(0b11111111)==0b11111111) || (sensor_cmp(0b01111110)==0b01111110))ret = 1;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
    return ret;
}
     b28:	08 95       	ret

00000b2a <check_rightline>:
int check_rightline( void )
{
    int ret=0;
    if( (sensor_cmp(0b00001111) == 0b00001111) || (sensor_cmp(0b00011111)==0b00011111))  ret = 1;
     b2a:	8f e0       	ldi	r24, 0x0F	; 15
     b2c:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
     b30:	8f 30       	cpi	r24, 0x0F	; 15
     b32:	51 f0       	breq	.+20     	; 0xb48 <check_rightline+0x1e>
     b34:	8f e1       	ldi	r24, 0x1F	; 31
     b36:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
     b3a:	21 e0       	ldi	r18, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	8f 31       	cpi	r24, 0x1F	; 31
     b40:	09 f0       	breq	.+2      	; 0xb44 <check_rightline+0x1a>
     b42:	20 e0       	ldi	r18, 0x00	; 0
    if(( sensor_cmp(0b11111111)==0b11111111) || (sensor_cmp(0b01111110)==0b01111110))ret = 1;
    return ret;
}
int check_rightline( void )
{
    int ret=0;
     b44:	82 2f       	mov	r24, r18
     b46:	08 95       	ret
    if( (sensor_cmp(0b00001111) == 0b00001111) || (sensor_cmp(0b00011111)==0b00011111))  ret = 1;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
    return ret;
}
     b4c:	08 95       	ret

00000b4e <check_leftline>:
int check_leftline( void )
{
    int ret=0;
    if( (sensor_cmp(0b11110000) == 0b11110000) || (sensor_cmp(0b11111000)== 0b11111000)) ret = 1;
     b4e:	80 ef       	ldi	r24, 0xF0	; 240
     b50:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
     b54:	80 3f       	cpi	r24, 0xF0	; 240
     b56:	51 f0       	breq	.+20     	; 0xb6c <check_leftline+0x1e>
     b58:	88 ef       	ldi	r24, 0xF8	; 248
     b5a:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
     b5e:	21 e0       	ldi	r18, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	88 3f       	cpi	r24, 0xF8	; 248
     b64:	09 f0       	breq	.+2      	; 0xb68 <check_leftline+0x1a>
     b66:	20 e0       	ldi	r18, 0x00	; 0
    if( (sensor_cmp(0b00001111) == 0b00001111) || (sensor_cmp(0b00011111)==0b00011111))  ret = 1;
    return ret;
}
int check_leftline( void )
{
    int ret=0;
     b68:	82 2f       	mov	r24, r18
     b6a:	08 95       	ret
    if( (sensor_cmp(0b11110000) == 0b11110000) || (sensor_cmp(0b11111000)== 0b11111000)) ret = 1;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
    return ret;
     b70:	08 95       	ret

00000b72 <main>:
{
	
	float val = 0.1;
	uint8_t mode = 0;
	
    INIT();
     b72:	0e 94 76 04 	call	0x8ec	; 0x8ec <INIT>
    sel_mode();
     b76:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <sel_mode>
    //}
    //////////////////////////////////////////////////////////////////////////
    
	while (1)
	{
		led7(pulse_v);
     b7a:	80 91 72 00 	lds	r24, 0x0072
     b7e:	90 91 73 00 	lds	r25, 0x0073
     b82:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
		
		if (get_button(BTN0))
     b86:	8d ef       	ldi	r24, 0xFD	; 253
     b88:	0e 94 73 01 	call	0x2e6	; 0x2e6 <get_button>
     b8c:	88 23       	and	r24, r24
     b8e:	29 f0       	breq	.+10     	; 0xb9a <main+0x28>
		{
			pulse_v = 0;
     b90:	10 92 73 00 	sts	0x0073, r1
     b94:	10 92 72 00 	sts	0x0072, r1
     b98:	f0 cf       	rjmp	.-32     	; 0xb7a <main+0x8>
		} 
		else if (get_button(BTN1))
     b9a:	8b ef       	ldi	r24, 0xFB	; 251
     b9c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <get_button>
     ba0:	88 23       	and	r24, r24
     ba2:	59 f3       	breq	.-42     	; 0xb7a <main+0x8>
		}
	}
	
    while(1)
    {
        pattern = 1;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 86 00 	sts	0x0086, r24
						pattern=1;
					}
					break;

					default:
					pattern = 1;
     baa:	c1 e0       	ldi	r28, 0x01	; 1

					case 63:
					led7(63);
					handle( -35);
					speed( 80 ,85 );
					pattern = 64;
     bac:	68 94       	set
     bae:	ff 24       	eor	r15, r15
     bb0:	f6 f8       	bld	r15, 6
					break;

					case 61:	// Xu ly khi gap vach tin hieu chuyen lan trai dau tien
					if ( (sensor_cmp(0b00000111) == 0b00000111) || (sensor_cmp(0b00001111) == 0b00001111) || (sensor_cmp(0b00011111) == 0b00011111))
					{
						pattern = 21 ;
     bb2:	d5 e1       	ldi	r29, 0x15	; 21
					}
					led7(61);
					speed(80, 80);
					if (pulse_v >= 25 || cnt1 >= 175)
					{
						pattern = 63;
     bb4:	0f 2e       	mov	r0, r31
     bb6:	ff e3       	ldi	r31, 0x3F	; 63
     bb8:	8f 2e       	mov	r8, r31
     bba:	f0 2d       	mov	r31, r0
					
					case 53:
					led7(53);
					handle( 35);
					speed( 85 ,80 );
					pattern = 54;
     bbc:	06 e3       	ldi	r16, 0x36	; 54
					}
					led7(51);
					speed(80, 80);
					if (pulse_v >= 25 || cnt1 >= 175)
					{
						pattern = 53;
     bbe:	0f 2e       	mov	r0, r31
     bc0:	f5 e3       	ldi	r31, 0x35	; 53
     bc2:	9f 2e       	mov	r9, r31
     bc4:	f0 2d       	mov	r31, r0
					break;

					case 41:
					led7(41);
					if( cnt1 > 200 ) {
						pattern = 42;
     bc6:	0f 2e       	mov	r0, r31
     bc8:	fa e2       	ldi	r31, 0x2A	; 42
     bca:	cf 2e       	mov	r12, r31
     bcc:	f0 2d       	mov	r31, r0
					
					case 31:	// �Cho 250ms de xe kip be cua 90
					led7(31);
					if( cnt1 > 200 )
					{
						pattern = 32;
     bce:	68 94       	set
     bd0:	dd 24       	eor	r13, r13
     bd2:	d5 f8       	bld	r13, 5
					
					case 27://phai
					led7(27);
					handle( 130);
					speed( 80 , -60 );
					pattern = 41;
     bd4:	19 e2       	ldi	r17, 0x29	; 41
						default:
						break;
					}
					if (sensor_cmp(0xff) == 0x00)
					{
						pattern = 73;
     bd6:	0f 2e       	mov	r0, r31
     bd8:	f9 e4       	ldi	r31, 0x49	; 73
     bda:	7f 2e       	mov	r7, r31
     bdc:	f0 2d       	mov	r31, r0
					case 23:
					led7(23);
					//cua trai
					if( ((pulse_v>50) || (cnt1 > 80)) && ((sensor_cmp(0b11111111)==0b11111000)  || (sensor_cmp(0b11111111)==0b11110000) || (sensor_cmp(0b11111111)==0b11100000) || (sensor_cmp(0b11111111)==0b11111100)))	// Neu gap tin hieu nay la goc cua 90 trai thi be
					{
						pattern = 26;
     bde:	0f 2e       	mov	r0, r31
     be0:	fa e1       	ldi	r31, 0x1A	; 26
     be2:	ef 2e       	mov	r14, r31
     be4:	f0 2d       	mov	r31, r0
						break;
					}
					//cua phai
					if(  ((pulse_v>50) || (cnt1 > 80)) &&   ((sensor_cmp(0b11111111)==0b00011111 ) ||(sensor_cmp(0b11111111)==0b00000111) || (sensor_cmp(0b11111111)==0b00001111) || (sensor_cmp(0b11111111)==0b00111111))) // Neu gap tin hieu nay la goc cua 90 phai thi be
					{
						pattern = 27;
     be6:	0f 2e       	mov	r0, r31
     be8:	fb e1       	ldi	r31, 0x1B	; 27
     bea:	af 2e       	mov	r10, r31
     bec:	f0 2d       	mov	r31, r0
					}
					if (cnt1 >= 100)
					{
						if (pulse_v <= 20)
						{
							pattern = 23;
     bee:	0f 2e       	mov	r0, r31
     bf0:	f7 e1       	ldi	r31, 0x17	; 23
     bf2:	bf 2e       	mov	r11, r31
     bf4:	f0 2d       	mov	r31, r0
    {
        pattern = 1;
        
        while(1)
        {
            switch(pattern)
     bf6:	80 91 86 00 	lds	r24, 0x0086
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	fc 01       	movw	r30, r24
     bfe:	31 97       	sbiw	r30, 0x01	; 1
     c00:	e9 34       	cpi	r30, 0x49	; 73
     c02:	f1 05       	cpc	r31, r1
     c04:	08 f0       	brcs	.+2      	; 0xc08 <main+0x96>
     c06:	ae c4       	rjmp	.+2396   	; 0x1564 <main+0x9f2>
     c08:	e6 5d       	subi	r30, 0xD6	; 214
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__tablejump2__>
                {
                    case 1:
                    if( check_crossline() ) //Be 90
     c10:	0e 94 83 05 	call	0xb06	; 0xb06 <check_crossline>
     c14:	89 2b       	or	r24, r25
     c16:	19 f0       	breq	.+6      	; 0xc1e <main+0xac>
                    {
                        pattern = 21;
     c18:	d0 93 86 00 	sts	0x0086, r29
                        break;
     c1c:	ec cf       	rjmp	.-40     	; 0xbf6 <main+0x84>
                    }
                    if( check_rightline() ) // Chuyen lan phai
     c1e:	0e 94 95 05 	call	0xb2a	; 0xb2a <check_rightline>
     c22:	89 2b       	or	r24, r25
     c24:	61 f0       	breq	.+24     	; 0xc3e <main+0xcc>
                    {
                        pulse_v = 0;
     c26:	10 92 73 00 	sts	0x0073, r1
     c2a:	10 92 72 00 	sts	0x0072, r1
                        cnt1 = 0;
     c2e:	10 92 aa 00 	sts	0x00AA, r1
     c32:	10 92 a9 00 	sts	0x00A9, r1
                        pattern = 51;
     c36:	83 e3       	ldi	r24, 0x33	; 51
     c38:	80 93 86 00 	sts	0x0086, r24
                        break;
     c3c:	dc cf       	rjmp	.-72     	; 0xbf6 <main+0x84>
                    }
                    if( check_leftline() )  // �Chuyen lan trai
     c3e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <check_leftline>
     c42:	89 2b       	or	r24, r25
     c44:	61 f0       	breq	.+24     	; 0xc5e <main+0xec>
                    {
                        pulse_v = 0;
     c46:	10 92 73 00 	sts	0x0073, r1
     c4a:	10 92 72 00 	sts	0x0072, r1
                        cnt1 = 0;
     c4e:	10 92 aa 00 	sts	0x00AA, r1
     c52:	10 92 a9 00 	sts	0x00A9, r1
                        pattern = 61;
     c56:	8d e3       	ldi	r24, 0x3D	; 61
     c58:	80 93 86 00 	sts	0x0086, r24
                        break;
     c5c:	cc cf       	rjmp	.-104    	; 0xbf6 <main+0x84>
                    }
                    led7(10);
     c5e:	8a e0       	ldi	r24, 0x0A	; 10
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
                    switch(sensor_cmp(0b01111110))
     c66:	8e e7       	ldi	r24, 0x7E	; 126
     c68:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	fc 01       	movw	r30, r24
     c70:	32 97       	sbiw	r30, 0x02	; 2
     c72:	ef 36       	cpi	r30, 0x6F	; 111
     c74:	f1 05       	cpc	r31, r1
     c76:	08 f0       	brcs	.+2      	; 0xc7a <main+0x108>
     c78:	be cf       	rjmp	.-132    	; 0xbf6 <main+0x84>
     c7a:	ed 58       	subi	r30, 0x8D	; 141
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__tablejump2__>
                    {
                        case 0b00011000:	// Chay thang
                        handle( 0 );
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed( 100 ,100 );
     c8a:	64 e6       	ldi	r22, 0x64	; 100
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	84 e6       	ldi	r24, 0x64	; 100
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     c96:	af cf       	rjmp	.-162    	; 0xbf6 <main+0x84>
                        
                        //lech phai
                        case 0b00011100:
                        case 0b00001000:
                        speed(100,90);
     c98:	6a e5       	ldi	r22, 0x5A	; 90
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	84 e6       	ldi	r24, 0x64	; 100
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        handle(14);
     ca4:	8e e0       	ldi	r24, 0x0E	; 14
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        break;
     cac:	a4 cf       	rjmp	.-184    	; 0xbf6 <main+0x84>
                        
                        case 0b00001100:
                        speed(100,80);
     cae:	60 e5       	ldi	r22, 0x50	; 80
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	84 e6       	ldi	r24, 0x64	; 100
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        handle(22);
     cba:	86 e1       	ldi	r24, 0x16	; 22
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        break;
     cc2:	99 cf       	rjmp	.-206    	; 0xbf6 <main+0x84>
                        
                        case 0b00001110:
                        case 0b00000100:
                        speed(100,70);
     cc4:	66 e4       	ldi	r22, 0x46	; 70
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	84 e6       	ldi	r24, 0x64	; 100
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        handle(35);
     cd0:	83 e2       	ldi	r24, 0x23	; 35
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        break;
     cd8:	8e cf       	rjmp	.-228    	; 0xbf6 <main+0x84>
                        
                        case 0b00000110:
                        speed(100,60);
     cda:	6c e3       	ldi	r22, 0x3C	; 60
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	84 e6       	ldi	r24, 0x64	; 100
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        handle(55);
     ce6:	87 e3       	ldi	r24, 0x37	; 55
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        break;
     cee:	83 cf       	rjmp	.-250    	; 0xbf6 <main+0x84>
                        
                        case 0b00000010:
                        speed(100,40);
     cf0:	68 e2       	ldi	r22, 0x28	; 40
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	84 e6       	ldi	r24, 0x64	; 100
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        handle(80);
     cfc:	80 e5       	ldi	r24, 0x50	; 80
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        pattern=11;	//lech phai goc lon
     d04:	8b e0       	ldi	r24, 0x0B	; 11
     d06:	80 93 86 00 	sts	0x0086, r24
                        break;
     d0a:	75 cf       	rjmp	.-278    	; 0xbf6 <main+0x84>
                        //////////////////////////////////////////////////////////////////////////
                        
                        //lech trai
                        case 0b00111000:
                        case 0b00010000:
                        speed(90,100);
     d0c:	64 e6       	ldi	r22, 0x64	; 100
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	8a e5       	ldi	r24, 0x5A	; 90
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        handle(-14);
     d18:	82 ef       	ldi	r24, 0xF2	; 242
     d1a:	9f ef       	ldi	r25, 0xFF	; 255
     d1c:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        break;
     d20:	6a cf       	rjmp	.-300    	; 0xbf6 <main+0x84>
                        
                        case 0b00110000:
                        speed(80,100);
     d22:	64 e6       	ldi	r22, 0x64	; 100
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	80 e5       	ldi	r24, 0x50	; 80
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        handle(-22);
     d2e:	8a ee       	ldi	r24, 0xEA	; 234
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        break;
     d36:	5f cf       	rjmp	.-322    	; 0xbf6 <main+0x84>
                        
                        case 0b01110000:
                        case 0b00100000:
                        speed(70,100);
     d38:	64 e6       	ldi	r22, 0x64	; 100
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	86 e4       	ldi	r24, 0x46	; 70
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        handle(-36);
     d44:	8c ed       	ldi	r24, 0xDC	; 220
     d46:	9f ef       	ldi	r25, 0xFF	; 255
     d48:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        break;
     d4c:	54 cf       	rjmp	.-344    	; 0xbf6 <main+0x84>
                        
                        case 0b01100000:
                        speed(60,100);
     d4e:	64 e6       	ldi	r22, 0x64	; 100
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	8c e3       	ldi	r24, 0x3C	; 60
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        handle(-55);
     d5a:	89 ec       	ldi	r24, 0xC9	; 201
     d5c:	9f ef       	ldi	r25, 0xFF	; 255
     d5e:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        break;
     d62:	49 cf       	rjmp	.-366    	; 0xbf6 <main+0x84>
                        
                        case 0b01000000:
                        speed(40,100);
     d64:	64 e6       	ldi	r22, 0x64	; 100
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	88 e2       	ldi	r24, 0x28	; 40
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        handle(-80);
     d70:	80 eb       	ldi	r24, 0xB0	; 176
     d72:	9f ef       	ldi	r25, 0xFF	; 255
     d74:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        pattern=12; //lech trai goc lon
     d78:	8c e0       	ldi	r24, 0x0C	; 12
     d7a:	80 93 86 00 	sts	0x0086, r24
                        cnt1 = 0;
     d7e:	10 92 aa 00 	sts	0x00AA, r1
     d82:	10 92 a9 00 	sts	0x00A9, r1
                        pulse_v = 0;
     d86:	10 92 73 00 	sts	0x0073, r1
     d8a:	10 92 72 00 	sts	0x0072, r1
                        break;
     d8e:	33 cf       	rjmp	.-410    	; 0xbf6 <main+0x84>
                        break;
                    }
                    break;
                    
                    case 11:
                    led7(11);
     d90:	8b e0       	ldi	r24, 0x0B	; 11
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
                    switch (sensor_cmp(0b11111111))
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
     d9e:	88 31       	cpi	r24, 0x18	; 24
     da0:	09 f4       	brne	.+2      	; 0xda4 <main+0x232>
     da2:	91 c0       	rjmp	.+290    	; 0xec6 <main+0x354>
     da4:	a8 f4       	brcc	.+42     	; 0xdd0 <main+0x25e>
     da6:	86 30       	cpi	r24, 0x06	; 6
     da8:	b1 f1       	breq	.+108    	; 0xe16 <main+0x2a4>
     daa:	48 f4       	brcc	.+18     	; 0xdbe <main+0x24c>
     dac:	83 30       	cpi	r24, 0x03	; 3
     dae:	41 f1       	breq	.+80     	; 0xe00 <main+0x28e>
     db0:	84 30       	cpi	r24, 0x04	; 4
     db2:	09 f4       	brne	.+2      	; 0xdb6 <main+0x244>
     db4:	88 c0       	rjmp	.+272    	; 0xec6 <main+0x354>
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	09 f4       	brne	.+2      	; 0xdbc <main+0x24a>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <main+0x2d0>
     dbc:	1c cf       	rjmp	.-456    	; 0xbf6 <main+0x84>
     dbe:	8c 30       	cpi	r24, 0x0C	; 12
     dc0:	a9 f1       	breq	.+106    	; 0xe2c <main+0x2ba>
     dc2:	80 31       	cpi	r24, 0x10	; 16
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <main+0x256>
     dc6:	7f c0       	rjmp	.+254    	; 0xec6 <main+0x354>
     dc8:	88 30       	cpi	r24, 0x08	; 8
     dca:	09 f0       	breq	.+2      	; 0xdce <main+0x25c>
     dcc:	14 cf       	rjmp	.-472    	; 0xbf6 <main+0x84>
     dce:	7b c0       	rjmp	.+246    	; 0xec6 <main+0x354>
     dd0:	81 38       	cpi	r24, 0x81	; 129
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <main+0x264>
     dd4:	41 c0       	rjmp	.+130    	; 0xe58 <main+0x2e6>
     dd6:	50 f4       	brcc	.+20     	; 0xdec <main+0x27a>
     dd8:	80 36       	cpi	r24, 0x60	; 96
     dda:	09 f4       	brne	.+2      	; 0xdde <main+0x26c>
     ddc:	5e c0       	rjmp	.+188    	; 0xe9a <main+0x328>
     dde:	80 38       	cpi	r24, 0x80	; 128
     de0:	09 f4       	brne	.+2      	; 0xde4 <main+0x272>
     de2:	45 c0       	rjmp	.+138    	; 0xe6e <main+0x2fc>
     de4:	80 33       	cpi	r24, 0x30	; 48
     de6:	09 f0       	breq	.+2      	; 0xdea <main+0x278>
     de8:	06 cf       	rjmp	.-500    	; 0xbf6 <main+0x84>
     dea:	62 c0       	rjmp	.+196    	; 0xeb0 <main+0x33e>
     dec:	80 3e       	cpi	r24, 0xE0	; 224
     dee:	09 f4       	brne	.+2      	; 0xdf2 <main+0x280>
     df0:	54 c0       	rjmp	.+168    	; 0xe9a <main+0x328>
     df2:	80 3f       	cpi	r24, 0xF0	; 240
     df4:	09 f4       	brne	.+2      	; 0xdf8 <main+0x286>
     df6:	5c c0       	rjmp	.+184    	; 0xeb0 <main+0x33e>
     df8:	80 3c       	cpi	r24, 0xC0	; 192
     dfa:	09 f4       	brne	.+2      	; 0xdfe <main+0x28c>
     dfc:	43 c0       	rjmp	.+134    	; 0xe84 <main+0x312>
     dfe:	fb ce       	rjmp	.-522    	; 0xbf6 <main+0x84>
                    {
                        case 0b00000011:
                        handle(60);
     e00:	8c e3       	ldi	r24, 0x3C	; 60
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(90,50);
     e08:	62 e3       	ldi	r22, 0x32	; 50
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	8a e5       	ldi	r24, 0x5A	; 90
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     e14:	f0 ce       	rjmp	.-544    	; 0xbf6 <main+0x84>
                        
                        case 0b00000110:
                        handle(55);
     e16:	87 e3       	ldi	r24, 0x37	; 55
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(90,50);
     e1e:	62 e3       	ldi	r22, 0x32	; 50
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	8a e5       	ldi	r24, 0x5A	; 90
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     e2a:	e5 ce       	rjmp	.-566    	; 0xbf6 <main+0x84>
                        
                        case 0b00001100:
                        handle(40);
     e2c:	88 e2       	ldi	r24, 0x28	; 40
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(90,60);
     e34:	6c e3       	ldi	r22, 0x3C	; 60
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	8a e5       	ldi	r24, 0x5A	; 90
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     e40:	da ce       	rjmp	.-588    	; 0xbf6 <main+0x84>
                        
                        case 0b00000001:
                        handle(90);
     e42:	8a e5       	ldi	r24, 0x5A	; 90
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(90, 30);
     e4a:	6e e1       	ldi	r22, 0x1E	; 30
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	8a e5       	ldi	r24, 0x5A	; 90
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     e56:	cf ce       	rjmp	.-610    	; 0xbf6 <main+0x84>
                        
                        case 0b10000001:
                        handle(90);
     e58:	8a e5       	ldi	r24, 0x5A	; 90
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(90, 20);
     e60:	64 e1       	ldi	r22, 0x14	; 20
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	8a e5       	ldi	r24, 0x5A	; 90
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     e6c:	c4 ce       	rjmp	.-632    	; 0xbf6 <main+0x84>
                        
                        case 0b10000000:
                        handle(100);
     e6e:	84 e6       	ldi	r24, 0x64	; 100
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(90, 10);
     e76:	6a e0       	ldi	r22, 0x0A	; 10
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	8a e5       	ldi	r24, 0x5A	; 90
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     e82:	b9 ce       	rjmp	.-654    	; 0xbf6 <main+0x84>
                        
                        case 0b11000000:
                        handle(105);
     e84:	89 e6       	ldi	r24, 0x69	; 105
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(90, 0);
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	8a e5       	ldi	r24, 0x5A	; 90
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     e98:	ae ce       	rjmp	.-676    	; 0xbf6 <main+0x84>
                        
                        case 0b01100000:
                        case 0b11100000:
                        handle(120);
     e9a:	88 e7       	ldi	r24, 0x78	; 120
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(90, 0);
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	8a e5       	ldi	r24, 0x5A	; 90
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     eae:	a3 ce       	rjmp	.-698    	; 0xbf6 <main+0x84>
                        
                        case 0b00110000:
                        case 0b11110000:
                        handle(130);
     eb0:	82 e8       	ldi	r24, 0x82	; 130
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(90, -10);
     eb8:	66 ef       	ldi	r22, 0xF6	; 246
     eba:	7f ef       	ldi	r23, 0xFF	; 255
     ebc:	8a e5       	ldi	r24, 0x5A	; 90
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     ec4:	98 ce       	rjmp	.-720    	; 0xbf6 <main+0x84>
                        
                        case 0b00010000:
                        case 0b00001000:
                        case 0b00000100:
                        case 0b00011000:
                        pattern = 1;
     ec6:	c0 93 86 00 	sts	0x0086, r28
                        pulse_v = 0;
     eca:	10 92 73 00 	sts	0x0073, r1
     ece:	10 92 72 00 	sts	0x0072, r1
                        cnt1 = 0;
     ed2:	10 92 aa 00 	sts	0x00AA, r1
     ed6:	10 92 a9 00 	sts	0x00A9, r1
                        led7(10);
     eda:	8a e0       	ldi	r24, 0x0A	; 10
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
                        break;
     ee2:	89 ce       	rjmp	.-750    	; 0xbf6 <main+0x84>
                        break;
                    }
                    break;
                    
                    case 12:
                    led7(12);
     ee4:	8c e0       	ldi	r24, 0x0C	; 12
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
                    switch (sensor_cmp(0b11111111))
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
     ef2:	80 31       	cpi	r24, 0x10	; 16
     ef4:	09 f4       	brne	.+2      	; 0xef8 <main+0x386>
     ef6:	8e c0       	rjmp	.+284    	; 0x1014 <main+0x4a2>
     ef8:	b0 f4       	brcc	.+44     	; 0xf26 <main+0x3b4>
     efa:	88 30       	cpi	r24, 0x08	; 8
     efc:	50 f4       	brcc	.+20     	; 0xf12 <main+0x3a0>
     efe:	86 30       	cpi	r24, 0x06	; 6
     f00:	08 f0       	brcs	.+2      	; 0xf04 <main+0x392>
     f02:	72 c0       	rjmp	.+228    	; 0xfe8 <main+0x476>
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	09 f4       	brne	.+2      	; 0xf0a <main+0x398>
     f08:	59 c0       	rjmp	.+178    	; 0xfbc <main+0x44a>
     f0a:	83 30       	cpi	r24, 0x03	; 3
     f0c:	09 f4       	brne	.+2      	; 0xf10 <main+0x39e>
     f0e:	61 c0       	rjmp	.+194    	; 0xfd2 <main+0x460>
     f10:	72 ce       	rjmp	.-796    	; 0xbf6 <main+0x84>
     f12:	8c 30       	cpi	r24, 0x0C	; 12
     f14:	09 f4       	brne	.+2      	; 0xf18 <main+0x3a6>
     f16:	73 c0       	rjmp	.+230    	; 0xffe <main+0x48c>
     f18:	8f 30       	cpi	r24, 0x0F	; 15
     f1a:	09 f4       	brne	.+2      	; 0xf1e <main+0x3ac>
     f1c:	70 c0       	rjmp	.+224    	; 0xffe <main+0x48c>
     f1e:	88 30       	cpi	r24, 0x08	; 8
     f20:	09 f0       	breq	.+2      	; 0xf24 <main+0x3b2>
     f22:	69 ce       	rjmp	.-814    	; 0xbf6 <main+0x84>
     f24:	77 c0       	rjmp	.+238    	; 0x1014 <main+0x4a2>
     f26:	80 36       	cpi	r24, 0x60	; 96
     f28:	e9 f0       	breq	.+58     	; 0xf64 <main+0x3f2>
     f2a:	48 f4       	brcc	.+18     	; 0xf3e <main+0x3cc>
     f2c:	80 32       	cpi	r24, 0x20	; 32
     f2e:	09 f4       	brne	.+2      	; 0xf32 <main+0x3c0>
     f30:	71 c0       	rjmp	.+226    	; 0x1014 <main+0x4a2>
     f32:	80 33       	cpi	r24, 0x30	; 48
     f34:	11 f1       	breq	.+68     	; 0xf7a <main+0x408>
     f36:	88 31       	cpi	r24, 0x18	; 24
     f38:	09 f0       	breq	.+2      	; 0xf3c <main+0x3ca>
     f3a:	5d ce       	rjmp	.-838    	; 0xbf6 <main+0x84>
     f3c:	6b c0       	rjmp	.+214    	; 0x1014 <main+0x4a2>
     f3e:	81 38       	cpi	r24, 0x81	; 129
     f40:	91 f1       	breq	.+100    	; 0xfa6 <main+0x434>
     f42:	80 3c       	cpi	r24, 0xC0	; 192
     f44:	21 f0       	breq	.+8      	; 0xf4e <main+0x3dc>
     f46:	80 38       	cpi	r24, 0x80	; 128
     f48:	09 f0       	breq	.+2      	; 0xf4c <main+0x3da>
     f4a:	55 ce       	rjmp	.-854    	; 0xbf6 <main+0x84>
     f4c:	21 c0       	rjmp	.+66     	; 0xf90 <main+0x41e>
                    {
                        case 0b11000000:
                        handle(-60);
     f4e:	84 ec       	ldi	r24, 0xC4	; 196
     f50:	9f ef       	ldi	r25, 0xFF	; 255
     f52:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(50,90);
     f56:	6a e5       	ldi	r22, 0x5A	; 90
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	82 e3       	ldi	r24, 0x32	; 50
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     f62:	49 ce       	rjmp	.-878    	; 0xbf6 <main+0x84>
                        
                        case 0b01100000:
                        handle(-55);
     f64:	89 ec       	ldi	r24, 0xC9	; 201
     f66:	9f ef       	ldi	r25, 0xFF	; 255
     f68:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(50,90);
     f6c:	6a e5       	ldi	r22, 0x5A	; 90
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	82 e3       	ldi	r24, 0x32	; 50
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     f78:	3e ce       	rjmp	.-900    	; 0xbf6 <main+0x84>
                        
                        case 0b00110000:
                        handle(-40);
     f7a:	88 ed       	ldi	r24, 0xD8	; 216
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(60,90);
     f82:	6a e5       	ldi	r22, 0x5A	; 90
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	8c e3       	ldi	r24, 0x3C	; 60
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     f8e:	33 ce       	rjmp	.-922    	; 0xbf6 <main+0x84>
                        
                        case 0b10000000:
                        handle(-90);
     f90:	86 ea       	ldi	r24, 0xA6	; 166
     f92:	9f ef       	ldi	r25, 0xFF	; 255
     f94:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(30, 90);
     f98:	6a e5       	ldi	r22, 0x5A	; 90
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	8e e1       	ldi	r24, 0x1E	; 30
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     fa4:	28 ce       	rjmp	.-944    	; 0xbf6 <main+0x84>
                        
                        case 0b10000001:
                        handle(-90);
     fa6:	86 ea       	ldi	r24, 0xA6	; 166
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(20, 90);
     fae:	6a e5       	ldi	r22, 0x5A	; 90
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	84 e1       	ldi	r24, 0x14	; 20
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     fba:	1d ce       	rjmp	.-966    	; 0xbf6 <main+0x84>
                        
                        case 0b00000001:
                        handle(-85);
     fbc:	8b ea       	ldi	r24, 0xAB	; 171
     fbe:	9f ef       	ldi	r25, 0xFF	; 255
     fc0:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(10, 90);
     fc4:	6a e5       	ldi	r22, 0x5A	; 90
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	8a e0       	ldi	r24, 0x0A	; 10
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     fd0:	12 ce       	rjmp	.-988    	; 0xbf6 <main+0x84>
                        
                        case 0b00000011:
                        handle(-105);
     fd2:	87 e9       	ldi	r24, 0x97	; 151
     fd4:	9f ef       	ldi	r25, 0xFF	; 255
     fd6:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(0, 90);
     fda:	6a e5       	ldi	r22, 0x5A	; 90
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     fe6:	07 ce       	rjmp	.-1010   	; 0xbf6 <main+0x84>
                        
                        case 0b00000110:
                        case 0b00000111:
                        handle(-120);
     fe8:	88 e8       	ldi	r24, 0x88	; 136
     fea:	9f ef       	ldi	r25, 0xFF	; 255
     fec:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(0, 90);
     ff0:	6a e5       	ldi	r22, 0x5A	; 90
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
     ffc:	fc cd       	rjmp	.-1032   	; 0xbf6 <main+0x84>
                        
                        case 0b00001100:
                        case 0b00001111:
                        handle(-130);
     ffe:	8e e7       	ldi	r24, 0x7E	; 126
    1000:	9f ef       	ldi	r25, 0xFF	; 255
    1002:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
                        speed(-10, 90);
    1006:	6a e5       	ldi	r22, 0x5A	; 90
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	86 ef       	ldi	r24, 0xF6	; 246
    100c:	9f ef       	ldi	r25, 0xFF	; 255
    100e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
                        break;
    1012:	f1 cd       	rjmp	.-1054   	; 0xbf6 <main+0x84>
                        
                        case 0b00001000:
                        case 0b00010000:
                        case 0b00100000:
                        case 0b00011000:
                        pattern = 1;
    1014:	c0 93 86 00 	sts	0x0086, r28
                        pulse_v = 0;
    1018:	10 92 73 00 	sts	0x0073, r1
    101c:	10 92 72 00 	sts	0x0072, r1
                        cnt1 = 0;
    1020:	10 92 aa 00 	sts	0x00AA, r1
    1024:	10 92 a9 00 	sts	0x00A9, r1
                        led7(10);
    1028:	8a e0       	ldi	r24, 0x0A	; 10
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
                        break;
    1030:	e2 cd       	rjmp	.-1084   	; 0xbf6 <main+0x84>
                        break;
                    }
                    break;

                    case 21:
					led7(21);
    1032:	85 e1       	ldi	r24, 0x15	; 21
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					handle( 0 );
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
					if ((cnt2 % 5) == 0)
    1042:	40 91 60 00 	lds	r20, 0x0060
    1046:	50 91 61 00 	lds	r21, 0x0061
    104a:	9a 01       	movw	r18, r20
    104c:	ad ec       	ldi	r26, 0xCD	; 205
    104e:	bc ec       	ldi	r27, 0xCC	; 204
    1050:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__umulhisi3>
    1054:	96 95       	lsr	r25
    1056:	87 95       	ror	r24
    1058:	96 95       	lsr	r25
    105a:	87 95       	ror	r24
    105c:	bc 01       	movw	r22, r24
    105e:	66 0f       	add	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	66 0f       	add	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	9b 01       	movw	r18, r22
    1068:	28 0f       	add	r18, r24
    106a:	39 1f       	adc	r19, r25
    106c:	42 17       	cp	r20, r18
    106e:	53 07       	cpc	r21, r19
    1070:	69 f4       	brne	.+26     	; 0x108c <main+0x51a>
					{
						speed(-7, -7);
    1072:	69 ef       	ldi	r22, 0xF9	; 249
    1074:	7f ef       	ldi	r23, 0xFF	; 255
    1076:	89 ef       	ldi	r24, 0xF9	; 249
    1078:	9f ef       	ldi	r25, 0xFF	; 255
    107a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
    107e:	8f e3       	ldi	r24, 0x3F	; 63
    1080:	9f e1       	ldi	r25, 0x1F	; 31
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <main+0x510>
    1086:	00 c0       	rjmp	.+0      	; 0x1088 <main+0x516>
    1088:	00 00       	nop
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <main+0x51e>
						_delay_ms(2);
					}
					else
					{
						fast_brake();
    108c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <fast_brake>
					}
					if (cnt1 >= 100)
    1090:	80 91 a9 00 	lds	r24, 0x00A9
    1094:	90 91 aa 00 	lds	r25, 0x00AA
    1098:	84 36       	cpi	r24, 0x64	; 100
    109a:	91 05       	cpc	r25, r1
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <main+0x52e>
    109e:	ab cd       	rjmp	.-1194   	; 0xbf6 <main+0x84>
					{
						if (pulse_v <= 20)
    10a0:	80 91 72 00 	lds	r24, 0x0072
    10a4:	90 91 73 00 	lds	r25, 0x0073
    10a8:	45 97       	sbiw	r24, 0x15	; 21
    10aa:	10 f4       	brcc	.+4      	; 0x10b0 <main+0x53e>
						{
							pattern = 23;
    10ac:	b0 92 86 00 	sts	0x0086, r11
							cnt1 = 0;
							pulse_v=0;
						}
						cnt1 = 0;
    10b0:	10 92 aa 00 	sts	0x00AA, r1
    10b4:	10 92 a9 00 	sts	0x00A9, r1
						pulse_v = 0;
    10b8:	10 92 73 00 	sts	0x0073, r1
    10bc:	10 92 72 00 	sts	0x0072, r1
    10c0:	9a cd       	rjmp	.-1228   	; 0xbf6 <main+0x84>
					}
					break;
					
					case 23:
					led7(23);
    10c2:	87 e1       	ldi	r24, 0x17	; 23
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					//cua trai
					if( ((pulse_v>50) || (cnt1 > 80)) && ((sensor_cmp(0b11111111)==0b11111000)  || (sensor_cmp(0b11111111)==0b11110000) || (sensor_cmp(0b11111111)==0b11100000) || (sensor_cmp(0b11111111)==0b11111100)))	// Neu gap tin hieu nay la goc cua 90 trai thi be
    10ca:	80 91 72 00 	lds	r24, 0x0072
    10ce:	90 91 73 00 	lds	r25, 0x0073
    10d2:	c3 97       	sbiw	r24, 0x33	; 51
    10d4:	40 f4       	brcc	.+16     	; 0x10e6 <main+0x574>
    10d6:	80 91 a9 00 	lds	r24, 0x00A9
    10da:	90 91 aa 00 	lds	r25, 0x00AA
    10de:	81 35       	cpi	r24, 0x51	; 81
    10e0:	91 05       	cpc	r25, r1
    10e2:	08 f4       	brcc	.+2      	; 0x10e6 <main+0x574>
    10e4:	43 c0       	rjmp	.+134    	; 0x116c <main+0x5fa>
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    10ec:	88 3f       	cpi	r24, 0xF8	; 248
    10ee:	79 f0       	breq	.+30     	; 0x110e <main+0x59c>
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    10f6:	80 3f       	cpi	r24, 0xF0	; 240
    10f8:	51 f0       	breq	.+20     	; 0x110e <main+0x59c>
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    1100:	80 3e       	cpi	r24, 0xE0	; 224
    1102:	29 f0       	breq	.+10     	; 0x110e <main+0x59c>
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    110a:	8c 3f       	cpi	r24, 0xFC	; 252
    110c:	39 f4       	brne	.+14     	; 0x111c <main+0x5aa>
					{
						pattern = 26;
    110e:	e0 92 86 00 	sts	0x0086, r14
						cnt1=0;
    1112:	10 92 aa 00 	sts	0x00AA, r1
    1116:	10 92 a9 00 	sts	0x00A9, r1
						break;
    111a:	6d cd       	rjmp	.-1318   	; 0xbf6 <main+0x84>
					}
					//cua phai
					if(  ((pulse_v>50) || (cnt1 > 80)) &&   ((sensor_cmp(0b11111111)==0b00011111 ) ||(sensor_cmp(0b11111111)==0b00000111) || (sensor_cmp(0b11111111)==0b00001111) || (sensor_cmp(0b11111111)==0b00111111))) // Neu gap tin hieu nay la goc cua 90 phai thi be
    111c:	80 91 72 00 	lds	r24, 0x0072
    1120:	90 91 73 00 	lds	r25, 0x0073
    1124:	c3 97       	sbiw	r24, 0x33	; 51
    1126:	38 f4       	brcc	.+14     	; 0x1136 <main+0x5c4>
    1128:	80 91 a9 00 	lds	r24, 0x00A9
    112c:	90 91 aa 00 	lds	r25, 0x00AA
    1130:	81 35       	cpi	r24, 0x51	; 81
    1132:	91 05       	cpc	r25, r1
    1134:	d8 f0       	brcs	.+54     	; 0x116c <main+0x5fa>
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    113c:	8f 31       	cpi	r24, 0x1F	; 31
    113e:	79 f0       	breq	.+30     	; 0x115e <main+0x5ec>
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    1146:	87 30       	cpi	r24, 0x07	; 7
    1148:	51 f0       	breq	.+20     	; 0x115e <main+0x5ec>
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    1150:	8f 30       	cpi	r24, 0x0F	; 15
    1152:	29 f0       	breq	.+10     	; 0x115e <main+0x5ec>
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    115a:	8f 33       	cpi	r24, 0x3F	; 63
    115c:	39 f4       	brne	.+14     	; 0x116c <main+0x5fa>
					{
						pattern = 27;
    115e:	a0 92 86 00 	sts	0x0086, r10
						cnt1=0;
    1162:	10 92 aa 00 	sts	0x00AA, r1
    1166:	10 92 a9 00 	sts	0x00A9, r1
						break;
    116a:	45 cd       	rjmp	.-1398   	; 0xbf6 <main+0x84>
					}
					speed(70, 70);
    116c:	66 e4       	ldi	r22, 0x46	; 70
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	86 e4       	ldi	r24, 0x46	; 70
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
					// Nguoc lai thi chinh thang cho xe
					switch(sensor_cmp(0b01111110))
    1178:	8e e7       	ldi	r24, 0x7E	; 126
    117a:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	fc 01       	movw	r30, r24
    1182:	32 97       	sbiw	r30, 0x02	; 2
    1184:	ed 37       	cpi	r30, 0x7D	; 125
    1186:	f1 05       	cpc	r31, r1
    1188:	08 f0       	brcs	.+2      	; 0x118c <main+0x61a>
    118a:	3f c0       	rjmp	.+126    	; 0x120a <main+0x698>
    118c:	ee 51       	subi	r30, 0x1E	; 30
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__tablejump2__>
					{
						case 0b01111110:
						handle(0);
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
    119c:	36 c0       	rjmp	.+108    	; 0x120a <main+0x698>
						
						case 0b00011000:	// Chay thang
						handle( 0 );
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
    11a6:	31 c0       	rjmp	.+98     	; 0x120a <main+0x698>
						
						//lech phai
						case 0b00011100:
						case 0b00001000:
						handle(14);
    11a8:	8e e0       	ldi	r24, 0x0E	; 14
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
    11b0:	2c c0       	rjmp	.+88     	; 0x120a <main+0x698>
						
						case 0b00001100:
						handle(22);
    11b2:	86 e1       	ldi	r24, 0x16	; 22
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
    11ba:	27 c0       	rjmp	.+78     	; 0x120a <main+0x698>
						
						case 0b00001110:
						case 0b00000100:
						handle(35);
    11bc:	83 e2       	ldi	r24, 0x23	; 35
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
    11c4:	22 c0       	rjmp	.+68     	; 0x120a <main+0x698>
						
						case 0b00000110:
						handle(55);
    11c6:	87 e3       	ldi	r24, 0x37	; 55
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
    11ce:	1d c0       	rjmp	.+58     	; 0x120a <main+0x698>
						
						case 0b00000010:
						handle(80);
    11d0:	80 e5       	ldi	r24, 0x50	; 80
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
    11d8:	18 c0       	rjmp	.+48     	; 0x120a <main+0x698>
						//////////////////////////////////////////////////////////////////////////
						//lech trai
						
						case 0b00111000:
						case 0b00010000:
						handle(-14);
    11da:	82 ef       	ldi	r24, 0xF2	; 242
    11dc:	9f ef       	ldi	r25, 0xFF	; 255
    11de:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
    11e2:	13 c0       	rjmp	.+38     	; 0x120a <main+0x698>
						
						case 0b00110000:
						handle(-22);
    11e4:	8a ee       	ldi	r24, 0xEA	; 234
    11e6:	9f ef       	ldi	r25, 0xFF	; 255
    11e8:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
    11ec:	0e c0       	rjmp	.+28     	; 0x120a <main+0x698>
						
						case 0b01110000:
						case 0b00100000:
						handle(-36);
    11ee:	8c ed       	ldi	r24, 0xDC	; 220
    11f0:	9f ef       	ldi	r25, 0xFF	; 255
    11f2:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
    11f6:	09 c0       	rjmp	.+18     	; 0x120a <main+0x698>
						
						case 0b01100000:
						handle(-55);
    11f8:	89 ec       	ldi	r24, 0xC9	; 201
    11fa:	9f ef       	ldi	r25, 0xFF	; 255
    11fc:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
    1200:	04 c0       	rjmp	.+8      	; 0x120a <main+0x698>
						
						case 0b01000000:
						handle(-80);
    1202:	80 eb       	ldi	r24, 0xB0	; 176
    1204:	9f ef       	ldi	r25, 0xFF	; 255
    1206:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						break;
						
						default:
						break;
					}
					if (sensor_cmp(0xff) == 0x00)
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    1210:	81 11       	cpse	r24, r1
    1212:	f1 cc       	rjmp	.-1566   	; 0xbf6 <main+0x84>
					{
						pattern = 73;
    1214:	70 92 86 00 	sts	0x0086, r7
						handle(0);
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						speed(100, 100);
    1220:	64 e6       	ldi	r22, 0x64	; 100
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	84 e6       	ldi	r24, 0x64	; 100
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
						cnt1 = 0;
    122c:	10 92 aa 00 	sts	0x00AA, r1
    1230:	10 92 a9 00 	sts	0x00A9, r1
						pulse_v = 0;
    1234:	10 92 73 00 	sts	0x0073, r1
    1238:	10 92 72 00 	sts	0x0072, r1
    123c:	dc cc       	rjmp	.-1608   	; 0xbf6 <main+0x84>
					}
					break;
					
					case 26: //trai
					led7(26);
    123e:	8a e1       	ldi	r24, 0x1A	; 26
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					handle( -130 );
    1246:	8e e7       	ldi	r24, 0x7E	; 126
    1248:	9f ef       	ldi	r25, 0xFF	; 255
    124a:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
					speed( -60 , 80 );
    124e:	60 e5       	ldi	r22, 0x50	; 80
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	84 ec       	ldi	r24, 0xC4	; 196
    1254:	9f ef       	ldi	r25, 0xFF	; 255
    1256:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
					pattern = 31;
    125a:	8f e1       	ldi	r24, 0x1F	; 31
    125c:	80 93 86 00 	sts	0x0086, r24
					cnt1 = 0;
    1260:	10 92 aa 00 	sts	0x00AA, r1
    1264:	10 92 a9 00 	sts	0x00A9, r1
					break;
    1268:	c6 cc       	rjmp	.-1652   	; 0xbf6 <main+0x84>
					
					case 27://phai
					led7(27);
    126a:	8b e1       	ldi	r24, 0x1B	; 27
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					handle( 130);
    1272:	82 e8       	ldi	r24, 0x82	; 130
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
					speed( 80 , -60 );
    127a:	64 ec       	ldi	r22, 0xC4	; 196
    127c:	7f ef       	ldi	r23, 0xFF	; 255
    127e:	80 e5       	ldi	r24, 0x50	; 80
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
					pattern = 41;
    1286:	10 93 86 00 	sts	0x0086, r17
					cnt1 = 0;
    128a:	10 92 aa 00 	sts	0x00AA, r1
    128e:	10 92 a9 00 	sts	0x00A9, r1
					break;
    1292:	b1 cc       	rjmp	.-1694   	; 0xbf6 <main+0x84>
					
					
					case 31:	// �Cho 250ms de xe kip be cua 90
					led7(31);
    1294:	8f e1       	ldi	r24, 0x1F	; 31
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					if( cnt1 > 200 )
    129c:	80 91 a9 00 	lds	r24, 0x00A9
    12a0:	90 91 aa 00 	lds	r25, 0x00AA
    12a4:	89 3c       	cpi	r24, 0xC9	; 201
    12a6:	91 05       	cpc	r25, r1
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <main+0x73a>
    12aa:	a5 cc       	rjmp	.-1718   	; 0xbf6 <main+0x84>
					{
						pattern = 32;
    12ac:	d0 92 86 00 	sts	0x0086, r13
						cnt1 = 0;
    12b0:	10 92 aa 00 	sts	0x00AA, r1
    12b4:	10 92 a9 00 	sts	0x00A9, r1
    12b8:	9e cc       	rjmp	.-1732   	; 0xbf6 <main+0x84>
					}
					break;
					
					case 32:	// Cho tin hieu de ve truong hop chay thang va be cong
					led7(32);
    12ba:	80 e2       	ldi	r24, 0x20	; 32
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					if( sensor_cmp(0b11100111) == 0b00100000 )
    12c2:	87 ee       	ldi	r24, 0xE7	; 231
    12c4:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    12c8:	80 32       	cpi	r24, 0x20	; 32
    12ca:	09 f0       	breq	.+2      	; 0x12ce <main+0x75c>
    12cc:	94 cc       	rjmp	.-1752   	; 0xbf6 <main+0x84>
					{
						pattern = 1;
    12ce:	c0 93 86 00 	sts	0x0086, r28
						pulse_v = 0;
    12d2:	10 92 73 00 	sts	0x0073, r1
    12d6:	10 92 72 00 	sts	0x0072, r1
						cnt1 = 0;
    12da:	10 92 aa 00 	sts	0x00AA, r1
    12de:	10 92 a9 00 	sts	0x00A9, r1
    12e2:	89 cc       	rjmp	.-1774   	; 0xbf6 <main+0x84>
					}
					break;

					case 41:
					led7(41);
    12e4:	89 e2       	ldi	r24, 0x29	; 41
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					if( cnt1 > 200 ) {
    12ec:	80 91 a9 00 	lds	r24, 0x00A9
    12f0:	90 91 aa 00 	lds	r25, 0x00AA
    12f4:	89 3c       	cpi	r24, 0xC9	; 201
    12f6:	91 05       	cpc	r25, r1
    12f8:	08 f4       	brcc	.+2      	; 0x12fc <main+0x78a>
    12fa:	7d cc       	rjmp	.-1798   	; 0xbf6 <main+0x84>
						pattern = 42;
    12fc:	c0 92 86 00 	sts	0x0086, r12
						cnt1 = 0;
    1300:	10 92 aa 00 	sts	0x00AA, r1
    1304:	10 92 a9 00 	sts	0x00A9, r1
    1308:	76 cc       	rjmp	.-1812   	; 0xbf6 <main+0x84>
					}
					break;
					
					case 42:
					led7(42);
    130a:	8a e2       	ldi	r24, 0x2A	; 42
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					if( sensor_cmp(0b11100111) == 0b00000100 ) {
    1312:	87 ee       	ldi	r24, 0xE7	; 231
    1314:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    1318:	84 30       	cpi	r24, 0x04	; 4
    131a:	09 f0       	breq	.+2      	; 0x131e <main+0x7ac>
    131c:	6c cc       	rjmp	.-1832   	; 0xbf6 <main+0x84>
						pattern = 1;
    131e:	c0 93 86 00 	sts	0x0086, r28
						pulse_v = 0;
    1322:	10 92 73 00 	sts	0x0073, r1
    1326:	10 92 72 00 	sts	0x0072, r1
						cnt1 = 0;
    132a:	10 92 aa 00 	sts	0x00AA, r1
    132e:	10 92 a9 00 	sts	0x00A9, r1
    1332:	61 cc       	rjmp	.-1854   	; 0xbf6 <main+0x84>
					break;


					#pragma region Chuyen_Line_Nhanh
					case 51: //PHAI
					if ((sensor_cmp(0b11100000) == 0b11100000) || (sensor_cmp(0b11110000) == 0b11110000) || (sensor_cmp(0b11111000) == 0b11111000))
    1334:	80 ee       	ldi	r24, 0xE0	; 224
    1336:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    133a:	80 3e       	cpi	r24, 0xE0	; 224
    133c:	51 f0       	breq	.+20     	; 0x1352 <main+0x7e0>
    133e:	80 ef       	ldi	r24, 0xF0	; 240
    1340:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    1344:	80 3f       	cpi	r24, 0xF0	; 240
    1346:	29 f0       	breq	.+10     	; 0x1352 <main+0x7e0>
    1348:	88 ef       	ldi	r24, 0xF8	; 248
    134a:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    134e:	88 3f       	cpi	r24, 0xF8	; 248
    1350:	19 f4       	brne	.+6      	; 0x1358 <main+0x7e6>
					{
						pattern = 21 ;
    1352:	d0 93 86 00 	sts	0x0086, r29
						break;
    1356:	4f cc       	rjmp	.-1890   	; 0xbf6 <main+0x84>
					}
					led7(51);
    1358:	83 e3       	ldi	r24, 0x33	; 51
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					speed(80, 80);
    1360:	60 e5       	ldi	r22, 0x50	; 80
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	80 e5       	ldi	r24, 0x50	; 80
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
					if (pulse_v >= 25 || cnt1 >= 175)
    136c:	80 91 72 00 	lds	r24, 0x0072
    1370:	90 91 73 00 	lds	r25, 0x0073
    1374:	49 97       	sbiw	r24, 0x19	; 25
    1376:	40 f4       	brcc	.+16     	; 0x1388 <main+0x816>
    1378:	80 91 a9 00 	lds	r24, 0x00A9
    137c:	90 91 aa 00 	lds	r25, 0x00AA
    1380:	8f 3a       	cpi	r24, 0xAF	; 175
    1382:	91 05       	cpc	r25, r1
    1384:	08 f4       	brcc	.+2      	; 0x1388 <main+0x816>
    1386:	37 cc       	rjmp	.-1938   	; 0xbf6 <main+0x84>
					{
						pattern = 53;
    1388:	90 92 86 00 	sts	0x0086, r9
						cnt1 = 0;
    138c:	10 92 aa 00 	sts	0x00AA, r1
    1390:	10 92 a9 00 	sts	0x00A9, r1
						pulse_v=0;
    1394:	10 92 73 00 	sts	0x0073, r1
    1398:	10 92 72 00 	sts	0x0072, r1
    139c:	2c cc       	rjmp	.-1960   	; 0xbf6 <main+0x84>
					}
					break;
					
					case 53:
					led7(53);
    139e:	85 e3       	ldi	r24, 0x35	; 53
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					handle( 35);
    13a6:	83 e2       	ldi	r24, 0x23	; 35
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
					speed( 85 ,80 );
    13ae:	60 e5       	ldi	r22, 0x50	; 80
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	85 e5       	ldi	r24, 0x55	; 85
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
					pattern = 54;
    13ba:	00 93 86 00 	sts	0x0086, r16
					cnt1 = 0;
    13be:	10 92 aa 00 	sts	0x00AA, r1
    13c2:	10 92 a9 00 	sts	0x00A9, r1
					break;
    13c6:	17 cc       	rjmp	.-2002   	; 0xbf6 <main+0x84>
					break;

					case 54:
					led7(54);
    13c8:	86 e3       	ldi	r24, 0x36	; 54
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					led7(54);
    13d0:	86 e3       	ldi	r24, 0x36	; 54
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					if(((pulse_v > 100) || (cnt1 > 200)) && (sensor_cmp( 0b00110000 ) == 0b00110000))
    13d8:	80 91 72 00 	lds	r24, 0x0072
    13dc:	90 91 73 00 	lds	r25, 0x0073
    13e0:	85 36       	cpi	r24, 0x65	; 101
    13e2:	91 05       	cpc	r25, r1
    13e4:	40 f4       	brcc	.+16     	; 0x13f6 <main+0x884>
    13e6:	80 91 a9 00 	lds	r24, 0x00A9
    13ea:	90 91 aa 00 	lds	r25, 0x00AA
    13ee:	89 3c       	cpi	r24, 0xC9	; 201
    13f0:	91 05       	cpc	r25, r1
    13f2:	08 f4       	brcc	.+2      	; 0x13f6 <main+0x884>
    13f4:	00 cc       	rjmp	.-2048   	; 0xbf6 <main+0x84>
    13f6:	80 e3       	ldi	r24, 0x30	; 48
    13f8:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    13fc:	80 33       	cpi	r24, 0x30	; 48
    13fe:	09 f0       	breq	.+2      	; 0x1402 <main+0x890>
    1400:	fa cb       	rjmp	.-2060   	; 0xbf6 <main+0x84>
					{
						speed(80, 85);
    1402:	65 e5       	ldi	r22, 0x55	; 85
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	80 e5       	ldi	r24, 0x50	; 80
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
						handle(-20);
    140e:	8c ee       	ldi	r24, 0xEC	; 236
    1410:	9f ef       	ldi	r25, 0xFF	; 255
    1412:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						pattern = 1;
    1416:	c0 93 86 00 	sts	0x0086, r28
						cnt1 = 0;
    141a:	10 92 aa 00 	sts	0x00AA, r1
    141e:	10 92 a9 00 	sts	0x00A9, r1
						led7(10);
    1422:	8a e0       	ldi	r24, 0x0A	; 10
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
    142a:	e5 cb       	rjmp	.-2102   	; 0xbf6 <main+0x84>
					}
					break;

					case 61:	// Xu ly khi gap vach tin hieu chuyen lan trai dau tien
					if ( (sensor_cmp(0b00000111) == 0b00000111) || (sensor_cmp(0b00001111) == 0b00001111) || (sensor_cmp(0b00011111) == 0b00011111))
    142c:	87 e0       	ldi	r24, 0x07	; 7
    142e:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    1432:	87 30       	cpi	r24, 0x07	; 7
    1434:	51 f0       	breq	.+20     	; 0x144a <main+0x8d8>
    1436:	8f e0       	ldi	r24, 0x0F	; 15
    1438:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    143c:	8f 30       	cpi	r24, 0x0F	; 15
    143e:	29 f0       	breq	.+10     	; 0x144a <main+0x8d8>
    1440:	8f e1       	ldi	r24, 0x1F	; 31
    1442:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    1446:	8f 31       	cpi	r24, 0x1F	; 31
    1448:	19 f4       	brne	.+6      	; 0x1450 <main+0x8de>
					{
						pattern = 21 ;
    144a:	d0 93 86 00 	sts	0x0086, r29
						break;
    144e:	d3 cb       	rjmp	.-2138   	; 0xbf6 <main+0x84>
					}
					led7(61);
    1450:	8d e3       	ldi	r24, 0x3D	; 61
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					speed(80, 80);
    1458:	60 e5       	ldi	r22, 0x50	; 80
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	80 e5       	ldi	r24, 0x50	; 80
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
					if (pulse_v >= 25 || cnt1 >= 175)
    1464:	80 91 72 00 	lds	r24, 0x0072
    1468:	90 91 73 00 	lds	r25, 0x0073
    146c:	49 97       	sbiw	r24, 0x19	; 25
    146e:	40 f4       	brcc	.+16     	; 0x1480 <main+0x90e>
    1470:	80 91 a9 00 	lds	r24, 0x00A9
    1474:	90 91 aa 00 	lds	r25, 0x00AA
    1478:	8f 3a       	cpi	r24, 0xAF	; 175
    147a:	91 05       	cpc	r25, r1
    147c:	08 f4       	brcc	.+2      	; 0x1480 <main+0x90e>
    147e:	bb cb       	rjmp	.-2186   	; 0xbf6 <main+0x84>
					{
						pattern = 63;
    1480:	80 92 86 00 	sts	0x0086, r8
						cnt1 = 0;
    1484:	10 92 aa 00 	sts	0x00AA, r1
    1488:	10 92 a9 00 	sts	0x00A9, r1
						pulse_v=0;
    148c:	10 92 73 00 	sts	0x0073, r1
    1490:	10 92 72 00 	sts	0x0072, r1
    1494:	b0 cb       	rjmp	.-2208   	; 0xbf6 <main+0x84>
					}
					break;

					case 63:
					led7(63);
    1496:	8f e3       	ldi	r24, 0x3F	; 63
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					handle( -35);
    149e:	8d ed       	ldi	r24, 0xDD	; 221
    14a0:	9f ef       	ldi	r25, 0xFF	; 255
    14a2:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
					speed( 80 ,85 );
    14a6:	65 e5       	ldi	r22, 0x55	; 85
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	80 e5       	ldi	r24, 0x50	; 80
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
					pattern = 64;
    14b2:	f0 92 86 00 	sts	0x0086, r15
					cnt1 = 0;
    14b6:	10 92 aa 00 	sts	0x00AA, r1
    14ba:	10 92 a9 00 	sts	0x00A9, r1
					break;
    14be:	9b cb       	rjmp	.-2250   	; 0xbf6 <main+0x84>

					case 64:
					led7(64);
    14c0:	80 e4       	ldi	r24, 0x40	; 64
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					if(((pulse_v > 100) || (cnt1 > 200 * 0)) && (sensor_cmp( 0b00110000 ) == 0b00110000))
    14c8:	80 91 72 00 	lds	r24, 0x0072
    14cc:	90 91 73 00 	lds	r25, 0x0073
    14d0:	85 36       	cpi	r24, 0x65	; 101
    14d2:	91 05       	cpc	r25, r1
    14d4:	38 f4       	brcc	.+14     	; 0x14e4 <main+0x972>
    14d6:	80 91 a9 00 	lds	r24, 0x00A9
    14da:	90 91 aa 00 	lds	r25, 0x00AA
    14de:	89 2b       	or	r24, r25
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <main+0x972>
    14e2:	89 cb       	rjmp	.-2286   	; 0xbf6 <main+0x84>
    14e4:	80 e3       	ldi	r24, 0x30	; 48
    14e6:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    14ea:	80 33       	cpi	r24, 0x30	; 48
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <main+0x97e>
    14ee:	83 cb       	rjmp	.-2298   	; 0xbf6 <main+0x84>
					{
						speed(85, 80);
    14f0:	60 e5       	ldi	r22, 0x50	; 80
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	85 e5       	ldi	r24, 0x55	; 85
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
						handle(20);
    14fc:	84 e1       	ldi	r24, 0x14	; 20
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
						pattern = 1;
    1504:	c0 93 86 00 	sts	0x0086, r28
						cnt1 = 0;
    1508:	10 92 aa 00 	sts	0x00AA, r1
    150c:	10 92 a9 00 	sts	0x00A9, r1
						led7(10);
    1510:	8a e0       	ldi	r24, 0x0A	; 10
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
    1518:	6e cb       	rjmp	.-2340   	; 0xbf6 <main+0x84>
					}
					break;
					#pragma endregion Chuyen_Line*/

					case 73:
					led7(73);
    151a:	89 e4       	ldi	r24, 0x49	; 73
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 5f 02 	call	0x4be	; 0x4be <led7>
					speed(100,100);
    1522:	64 e6       	ldi	r22, 0x64	; 100
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	84 e6       	ldi	r24, 0x64	; 100
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <speed>
					if (sensor_cmp(0b10000000)) handle(30);
    152e:	80 e8       	ldi	r24, 0x80	; 128
    1530:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    1534:	88 23       	and	r24, r24
    1536:	21 f0       	breq	.+8      	; 0x1540 <main+0x9ce>
    1538:	8e e1       	ldi	r24, 0x1E	; 30
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
					if (sensor_cmp(0b00000001)) handle(-30);
    1540:	8c 2f       	mov	r24, r28
    1542:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    1546:	88 23       	and	r24, r24
    1548:	21 f0       	breq	.+8      	; 0x1552 <main+0x9e0>
    154a:	82 ee       	ldi	r24, 0xE2	; 226
    154c:	9f ef       	ldi	r25, 0xFF	; 255
    154e:	0e 94 bb 01 	call	0x376	; 0x376 <handle>
					if (sensor_cmp(0b01111110) > 0)
    1552:	8e e7       	ldi	r24, 0x7E	; 126
    1554:	0e 94 bb 03 	call	0x776	; 0x776 <sensor_cmp>
    1558:	88 23       	and	r24, r24
    155a:	09 f4       	brne	.+2      	; 0x155e <main+0x9ec>
    155c:	4c cb       	rjmp	.-2408   	; 0xbf6 <main+0x84>
					{
						pattern=1;
    155e:	c0 93 86 00 	sts	0x0086, r28
    1562:	49 cb       	rjmp	.-2414   	; 0xbf6 <main+0x84>
					}
					break;

					default:
					pattern = 1;
    1564:	c0 93 86 00 	sts	0x0086, r28
					break;
    1568:	46 cb       	rjmp	.-2420   	; 0xbf6 <main+0x84>

0000156a <__subsf3>:
    156a:	50 58       	subi	r21, 0x80	; 128

0000156c <__addsf3>:
    156c:	bb 27       	eor	r27, r27
    156e:	aa 27       	eor	r26, r26
    1570:	0e d0       	rcall	.+28     	; 0x158e <__addsf3x>
    1572:	e5 c0       	rjmp	.+458    	; 0x173e <__fp_round>
    1574:	d6 d0       	rcall	.+428    	; 0x1722 <__fp_pscA>
    1576:	30 f0       	brcs	.+12     	; 0x1584 <__addsf3+0x18>
    1578:	db d0       	rcall	.+438    	; 0x1730 <__fp_pscB>
    157a:	20 f0       	brcs	.+8      	; 0x1584 <__addsf3+0x18>
    157c:	31 f4       	brne	.+12     	; 0x158a <__addsf3+0x1e>
    157e:	9f 3f       	cpi	r25, 0xFF	; 255
    1580:	11 f4       	brne	.+4      	; 0x1586 <__addsf3+0x1a>
    1582:	1e f4       	brtc	.+6      	; 0x158a <__addsf3+0x1e>
    1584:	cb c0       	rjmp	.+406    	; 0x171c <__fp_nan>
    1586:	0e f4       	brtc	.+2      	; 0x158a <__addsf3+0x1e>
    1588:	e0 95       	com	r30
    158a:	e7 fb       	bst	r30, 7
    158c:	c1 c0       	rjmp	.+386    	; 0x1710 <__fp_inf>

0000158e <__addsf3x>:
    158e:	e9 2f       	mov	r30, r25
    1590:	e7 d0       	rcall	.+462    	; 0x1760 <__fp_split3>
    1592:	80 f3       	brcs	.-32     	; 0x1574 <__addsf3+0x8>
    1594:	ba 17       	cp	r27, r26
    1596:	62 07       	cpc	r22, r18
    1598:	73 07       	cpc	r23, r19
    159a:	84 07       	cpc	r24, r20
    159c:	95 07       	cpc	r25, r21
    159e:	18 f0       	brcs	.+6      	; 0x15a6 <__addsf3x+0x18>
    15a0:	71 f4       	brne	.+28     	; 0x15be <__addsf3x+0x30>
    15a2:	9e f5       	brtc	.+102    	; 0x160a <__addsf3x+0x7c>
    15a4:	ff c0       	rjmp	.+510    	; 0x17a4 <__fp_zero>
    15a6:	0e f4       	brtc	.+2      	; 0x15aa <__addsf3x+0x1c>
    15a8:	e0 95       	com	r30
    15aa:	0b 2e       	mov	r0, r27
    15ac:	ba 2f       	mov	r27, r26
    15ae:	a0 2d       	mov	r26, r0
    15b0:	0b 01       	movw	r0, r22
    15b2:	b9 01       	movw	r22, r18
    15b4:	90 01       	movw	r18, r0
    15b6:	0c 01       	movw	r0, r24
    15b8:	ca 01       	movw	r24, r20
    15ba:	a0 01       	movw	r20, r0
    15bc:	11 24       	eor	r1, r1
    15be:	ff 27       	eor	r31, r31
    15c0:	59 1b       	sub	r21, r25
    15c2:	99 f0       	breq	.+38     	; 0x15ea <__addsf3x+0x5c>
    15c4:	59 3f       	cpi	r21, 0xF9	; 249
    15c6:	50 f4       	brcc	.+20     	; 0x15dc <__addsf3x+0x4e>
    15c8:	50 3e       	cpi	r21, 0xE0	; 224
    15ca:	68 f1       	brcs	.+90     	; 0x1626 <__addsf3x+0x98>
    15cc:	1a 16       	cp	r1, r26
    15ce:	f0 40       	sbci	r31, 0x00	; 0
    15d0:	a2 2f       	mov	r26, r18
    15d2:	23 2f       	mov	r18, r19
    15d4:	34 2f       	mov	r19, r20
    15d6:	44 27       	eor	r20, r20
    15d8:	58 5f       	subi	r21, 0xF8	; 248
    15da:	f3 cf       	rjmp	.-26     	; 0x15c2 <__addsf3x+0x34>
    15dc:	46 95       	lsr	r20
    15de:	37 95       	ror	r19
    15e0:	27 95       	ror	r18
    15e2:	a7 95       	ror	r26
    15e4:	f0 40       	sbci	r31, 0x00	; 0
    15e6:	53 95       	inc	r21
    15e8:	c9 f7       	brne	.-14     	; 0x15dc <__addsf3x+0x4e>
    15ea:	7e f4       	brtc	.+30     	; 0x160a <__addsf3x+0x7c>
    15ec:	1f 16       	cp	r1, r31
    15ee:	ba 0b       	sbc	r27, r26
    15f0:	62 0b       	sbc	r22, r18
    15f2:	73 0b       	sbc	r23, r19
    15f4:	84 0b       	sbc	r24, r20
    15f6:	ba f0       	brmi	.+46     	; 0x1626 <__addsf3x+0x98>
    15f8:	91 50       	subi	r25, 0x01	; 1
    15fa:	a1 f0       	breq	.+40     	; 0x1624 <__addsf3x+0x96>
    15fc:	ff 0f       	add	r31, r31
    15fe:	bb 1f       	adc	r27, r27
    1600:	66 1f       	adc	r22, r22
    1602:	77 1f       	adc	r23, r23
    1604:	88 1f       	adc	r24, r24
    1606:	c2 f7       	brpl	.-16     	; 0x15f8 <__addsf3x+0x6a>
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <__addsf3x+0x98>
    160a:	ba 0f       	add	r27, r26
    160c:	62 1f       	adc	r22, r18
    160e:	73 1f       	adc	r23, r19
    1610:	84 1f       	adc	r24, r20
    1612:	48 f4       	brcc	.+18     	; 0x1626 <__addsf3x+0x98>
    1614:	87 95       	ror	r24
    1616:	77 95       	ror	r23
    1618:	67 95       	ror	r22
    161a:	b7 95       	ror	r27
    161c:	f7 95       	ror	r31
    161e:	9e 3f       	cpi	r25, 0xFE	; 254
    1620:	08 f0       	brcs	.+2      	; 0x1624 <__addsf3x+0x96>
    1622:	b3 cf       	rjmp	.-154    	; 0x158a <__addsf3+0x1e>
    1624:	93 95       	inc	r25
    1626:	88 0f       	add	r24, r24
    1628:	08 f0       	brcs	.+2      	; 0x162c <__addsf3x+0x9e>
    162a:	99 27       	eor	r25, r25
    162c:	ee 0f       	add	r30, r30
    162e:	97 95       	ror	r25
    1630:	87 95       	ror	r24
    1632:	08 95       	ret

00001634 <__fixsfsi>:
    1634:	04 d0       	rcall	.+8      	; 0x163e <__fixunssfsi>
    1636:	68 94       	set
    1638:	b1 11       	cpse	r27, r1
    163a:	b5 c0       	rjmp	.+362    	; 0x17a6 <__fp_szero>
    163c:	08 95       	ret

0000163e <__fixunssfsi>:
    163e:	98 d0       	rcall	.+304    	; 0x1770 <__fp_splitA>
    1640:	88 f0       	brcs	.+34     	; 0x1664 <__fixunssfsi+0x26>
    1642:	9f 57       	subi	r25, 0x7F	; 127
    1644:	90 f0       	brcs	.+36     	; 0x166a <__fixunssfsi+0x2c>
    1646:	b9 2f       	mov	r27, r25
    1648:	99 27       	eor	r25, r25
    164a:	b7 51       	subi	r27, 0x17	; 23
    164c:	a0 f0       	brcs	.+40     	; 0x1676 <__fixunssfsi+0x38>
    164e:	d1 f0       	breq	.+52     	; 0x1684 <__fixunssfsi+0x46>
    1650:	66 0f       	add	r22, r22
    1652:	77 1f       	adc	r23, r23
    1654:	88 1f       	adc	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	1a f0       	brmi	.+6      	; 0x1660 <__fixunssfsi+0x22>
    165a:	ba 95       	dec	r27
    165c:	c9 f7       	brne	.-14     	; 0x1650 <__fixunssfsi+0x12>
    165e:	12 c0       	rjmp	.+36     	; 0x1684 <__fixunssfsi+0x46>
    1660:	b1 30       	cpi	r27, 0x01	; 1
    1662:	81 f0       	breq	.+32     	; 0x1684 <__fixunssfsi+0x46>
    1664:	9f d0       	rcall	.+318    	; 0x17a4 <__fp_zero>
    1666:	b1 e0       	ldi	r27, 0x01	; 1
    1668:	08 95       	ret
    166a:	9c c0       	rjmp	.+312    	; 0x17a4 <__fp_zero>
    166c:	67 2f       	mov	r22, r23
    166e:	78 2f       	mov	r23, r24
    1670:	88 27       	eor	r24, r24
    1672:	b8 5f       	subi	r27, 0xF8	; 248
    1674:	39 f0       	breq	.+14     	; 0x1684 <__fixunssfsi+0x46>
    1676:	b9 3f       	cpi	r27, 0xF9	; 249
    1678:	cc f3       	brlt	.-14     	; 0x166c <__fixunssfsi+0x2e>
    167a:	86 95       	lsr	r24
    167c:	77 95       	ror	r23
    167e:	67 95       	ror	r22
    1680:	b3 95       	inc	r27
    1682:	d9 f7       	brne	.-10     	; 0x167a <__fixunssfsi+0x3c>
    1684:	3e f4       	brtc	.+14     	; 0x1694 <__fixunssfsi+0x56>
    1686:	90 95       	com	r25
    1688:	80 95       	com	r24
    168a:	70 95       	com	r23
    168c:	61 95       	neg	r22
    168e:	7f 4f       	sbci	r23, 0xFF	; 255
    1690:	8f 4f       	sbci	r24, 0xFF	; 255
    1692:	9f 4f       	sbci	r25, 0xFF	; 255
    1694:	08 95       	ret

00001696 <__floatunsisf>:
    1696:	e8 94       	clt
    1698:	09 c0       	rjmp	.+18     	; 0x16ac <__floatsisf+0x12>

0000169a <__floatsisf>:
    169a:	97 fb       	bst	r25, 7
    169c:	3e f4       	brtc	.+14     	; 0x16ac <__floatsisf+0x12>
    169e:	90 95       	com	r25
    16a0:	80 95       	com	r24
    16a2:	70 95       	com	r23
    16a4:	61 95       	neg	r22
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	8f 4f       	sbci	r24, 0xFF	; 255
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	99 23       	and	r25, r25
    16ae:	a9 f0       	breq	.+42     	; 0x16da <__floatsisf+0x40>
    16b0:	f9 2f       	mov	r31, r25
    16b2:	96 e9       	ldi	r25, 0x96	; 150
    16b4:	bb 27       	eor	r27, r27
    16b6:	93 95       	inc	r25
    16b8:	f6 95       	lsr	r31
    16ba:	87 95       	ror	r24
    16bc:	77 95       	ror	r23
    16be:	67 95       	ror	r22
    16c0:	b7 95       	ror	r27
    16c2:	f1 11       	cpse	r31, r1
    16c4:	f8 cf       	rjmp	.-16     	; 0x16b6 <__floatsisf+0x1c>
    16c6:	fa f4       	brpl	.+62     	; 0x1706 <__floatsisf+0x6c>
    16c8:	bb 0f       	add	r27, r27
    16ca:	11 f4       	brne	.+4      	; 0x16d0 <__floatsisf+0x36>
    16cc:	60 ff       	sbrs	r22, 0
    16ce:	1b c0       	rjmp	.+54     	; 0x1706 <__floatsisf+0x6c>
    16d0:	6f 5f       	subi	r22, 0xFF	; 255
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255
    16d4:	8f 4f       	sbci	r24, 0xFF	; 255
    16d6:	9f 4f       	sbci	r25, 0xFF	; 255
    16d8:	16 c0       	rjmp	.+44     	; 0x1706 <__floatsisf+0x6c>
    16da:	88 23       	and	r24, r24
    16dc:	11 f0       	breq	.+4      	; 0x16e2 <__floatsisf+0x48>
    16de:	96 e9       	ldi	r25, 0x96	; 150
    16e0:	11 c0       	rjmp	.+34     	; 0x1704 <__floatsisf+0x6a>
    16e2:	77 23       	and	r23, r23
    16e4:	21 f0       	breq	.+8      	; 0x16ee <__floatsisf+0x54>
    16e6:	9e e8       	ldi	r25, 0x8E	; 142
    16e8:	87 2f       	mov	r24, r23
    16ea:	76 2f       	mov	r23, r22
    16ec:	05 c0       	rjmp	.+10     	; 0x16f8 <__floatsisf+0x5e>
    16ee:	66 23       	and	r22, r22
    16f0:	71 f0       	breq	.+28     	; 0x170e <__floatsisf+0x74>
    16f2:	96 e8       	ldi	r25, 0x86	; 134
    16f4:	86 2f       	mov	r24, r22
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	2a f0       	brmi	.+10     	; 0x1706 <__floatsisf+0x6c>
    16fc:	9a 95       	dec	r25
    16fe:	66 0f       	add	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	da f7       	brpl	.-10     	; 0x16fc <__floatsisf+0x62>
    1706:	88 0f       	add	r24, r24
    1708:	96 95       	lsr	r25
    170a:	87 95       	ror	r24
    170c:	97 f9       	bld	r25, 7
    170e:	08 95       	ret

00001710 <__fp_inf>:
    1710:	97 f9       	bld	r25, 7
    1712:	9f 67       	ori	r25, 0x7F	; 127
    1714:	80 e8       	ldi	r24, 0x80	; 128
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	08 95       	ret

0000171c <__fp_nan>:
    171c:	9f ef       	ldi	r25, 0xFF	; 255
    171e:	80 ec       	ldi	r24, 0xC0	; 192
    1720:	08 95       	ret

00001722 <__fp_pscA>:
    1722:	00 24       	eor	r0, r0
    1724:	0a 94       	dec	r0
    1726:	16 16       	cp	r1, r22
    1728:	17 06       	cpc	r1, r23
    172a:	18 06       	cpc	r1, r24
    172c:	09 06       	cpc	r0, r25
    172e:	08 95       	ret

00001730 <__fp_pscB>:
    1730:	00 24       	eor	r0, r0
    1732:	0a 94       	dec	r0
    1734:	12 16       	cp	r1, r18
    1736:	13 06       	cpc	r1, r19
    1738:	14 06       	cpc	r1, r20
    173a:	05 06       	cpc	r0, r21
    173c:	08 95       	ret

0000173e <__fp_round>:
    173e:	09 2e       	mov	r0, r25
    1740:	03 94       	inc	r0
    1742:	00 0c       	add	r0, r0
    1744:	11 f4       	brne	.+4      	; 0x174a <__fp_round+0xc>
    1746:	88 23       	and	r24, r24
    1748:	52 f0       	brmi	.+20     	; 0x175e <__fp_round+0x20>
    174a:	bb 0f       	add	r27, r27
    174c:	40 f4       	brcc	.+16     	; 0x175e <__fp_round+0x20>
    174e:	bf 2b       	or	r27, r31
    1750:	11 f4       	brne	.+4      	; 0x1756 <__fp_round+0x18>
    1752:	60 ff       	sbrs	r22, 0
    1754:	04 c0       	rjmp	.+8      	; 0x175e <__fp_round+0x20>
    1756:	6f 5f       	subi	r22, 0xFF	; 255
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	8f 4f       	sbci	r24, 0xFF	; 255
    175c:	9f 4f       	sbci	r25, 0xFF	; 255
    175e:	08 95       	ret

00001760 <__fp_split3>:
    1760:	57 fd       	sbrc	r21, 7
    1762:	90 58       	subi	r25, 0x80	; 128
    1764:	44 0f       	add	r20, r20
    1766:	55 1f       	adc	r21, r21
    1768:	59 f0       	breq	.+22     	; 0x1780 <__fp_splitA+0x10>
    176a:	5f 3f       	cpi	r21, 0xFF	; 255
    176c:	71 f0       	breq	.+28     	; 0x178a <__fp_splitA+0x1a>
    176e:	47 95       	ror	r20

00001770 <__fp_splitA>:
    1770:	88 0f       	add	r24, r24
    1772:	97 fb       	bst	r25, 7
    1774:	99 1f       	adc	r25, r25
    1776:	61 f0       	breq	.+24     	; 0x1790 <__fp_splitA+0x20>
    1778:	9f 3f       	cpi	r25, 0xFF	; 255
    177a:	79 f0       	breq	.+30     	; 0x179a <__fp_splitA+0x2a>
    177c:	87 95       	ror	r24
    177e:	08 95       	ret
    1780:	12 16       	cp	r1, r18
    1782:	13 06       	cpc	r1, r19
    1784:	14 06       	cpc	r1, r20
    1786:	55 1f       	adc	r21, r21
    1788:	f2 cf       	rjmp	.-28     	; 0x176e <__fp_split3+0xe>
    178a:	46 95       	lsr	r20
    178c:	f1 df       	rcall	.-30     	; 0x1770 <__fp_splitA>
    178e:	08 c0       	rjmp	.+16     	; 0x17a0 <__fp_splitA+0x30>
    1790:	16 16       	cp	r1, r22
    1792:	17 06       	cpc	r1, r23
    1794:	18 06       	cpc	r1, r24
    1796:	99 1f       	adc	r25, r25
    1798:	f1 cf       	rjmp	.-30     	; 0x177c <__fp_splitA+0xc>
    179a:	86 95       	lsr	r24
    179c:	71 05       	cpc	r23, r1
    179e:	61 05       	cpc	r22, r1
    17a0:	08 94       	sec
    17a2:	08 95       	ret

000017a4 <__fp_zero>:
    17a4:	e8 94       	clt

000017a6 <__fp_szero>:
    17a6:	bb 27       	eor	r27, r27
    17a8:	66 27       	eor	r22, r22
    17aa:	77 27       	eor	r23, r23
    17ac:	cb 01       	movw	r24, r22
    17ae:	97 f9       	bld	r25, 7
    17b0:	08 95       	ret

000017b2 <__mulsf3>:
    17b2:	0b d0       	rcall	.+22     	; 0x17ca <__mulsf3x>
    17b4:	c4 cf       	rjmp	.-120    	; 0x173e <__fp_round>
    17b6:	b5 df       	rcall	.-150    	; 0x1722 <__fp_pscA>
    17b8:	28 f0       	brcs	.+10     	; 0x17c4 <__mulsf3+0x12>
    17ba:	ba df       	rcall	.-140    	; 0x1730 <__fp_pscB>
    17bc:	18 f0       	brcs	.+6      	; 0x17c4 <__mulsf3+0x12>
    17be:	95 23       	and	r25, r21
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <__mulsf3+0x12>
    17c2:	a6 cf       	rjmp	.-180    	; 0x1710 <__fp_inf>
    17c4:	ab cf       	rjmp	.-170    	; 0x171c <__fp_nan>
    17c6:	11 24       	eor	r1, r1
    17c8:	ee cf       	rjmp	.-36     	; 0x17a6 <__fp_szero>

000017ca <__mulsf3x>:
    17ca:	ca df       	rcall	.-108    	; 0x1760 <__fp_split3>
    17cc:	a0 f3       	brcs	.-24     	; 0x17b6 <__mulsf3+0x4>

000017ce <__mulsf3_pse>:
    17ce:	95 9f       	mul	r25, r21
    17d0:	d1 f3       	breq	.-12     	; 0x17c6 <__mulsf3+0x14>
    17d2:	95 0f       	add	r25, r21
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	55 1f       	adc	r21, r21
    17d8:	62 9f       	mul	r22, r18
    17da:	f0 01       	movw	r30, r0
    17dc:	72 9f       	mul	r23, r18
    17de:	bb 27       	eor	r27, r27
    17e0:	f0 0d       	add	r31, r0
    17e2:	b1 1d       	adc	r27, r1
    17e4:	63 9f       	mul	r22, r19
    17e6:	aa 27       	eor	r26, r26
    17e8:	f0 0d       	add	r31, r0
    17ea:	b1 1d       	adc	r27, r1
    17ec:	aa 1f       	adc	r26, r26
    17ee:	64 9f       	mul	r22, r20
    17f0:	66 27       	eor	r22, r22
    17f2:	b0 0d       	add	r27, r0
    17f4:	a1 1d       	adc	r26, r1
    17f6:	66 1f       	adc	r22, r22
    17f8:	82 9f       	mul	r24, r18
    17fa:	22 27       	eor	r18, r18
    17fc:	b0 0d       	add	r27, r0
    17fe:	a1 1d       	adc	r26, r1
    1800:	62 1f       	adc	r22, r18
    1802:	73 9f       	mul	r23, r19
    1804:	b0 0d       	add	r27, r0
    1806:	a1 1d       	adc	r26, r1
    1808:	62 1f       	adc	r22, r18
    180a:	83 9f       	mul	r24, r19
    180c:	a0 0d       	add	r26, r0
    180e:	61 1d       	adc	r22, r1
    1810:	22 1f       	adc	r18, r18
    1812:	74 9f       	mul	r23, r20
    1814:	33 27       	eor	r19, r19
    1816:	a0 0d       	add	r26, r0
    1818:	61 1d       	adc	r22, r1
    181a:	23 1f       	adc	r18, r19
    181c:	84 9f       	mul	r24, r20
    181e:	60 0d       	add	r22, r0
    1820:	21 1d       	adc	r18, r1
    1822:	82 2f       	mov	r24, r18
    1824:	76 2f       	mov	r23, r22
    1826:	6a 2f       	mov	r22, r26
    1828:	11 24       	eor	r1, r1
    182a:	9f 57       	subi	r25, 0x7F	; 127
    182c:	50 40       	sbci	r21, 0x00	; 0
    182e:	8a f0       	brmi	.+34     	; 0x1852 <__mulsf3_pse+0x84>
    1830:	e1 f0       	breq	.+56     	; 0x186a <__mulsf3_pse+0x9c>
    1832:	88 23       	and	r24, r24
    1834:	4a f0       	brmi	.+18     	; 0x1848 <__mulsf3_pse+0x7a>
    1836:	ee 0f       	add	r30, r30
    1838:	ff 1f       	adc	r31, r31
    183a:	bb 1f       	adc	r27, r27
    183c:	66 1f       	adc	r22, r22
    183e:	77 1f       	adc	r23, r23
    1840:	88 1f       	adc	r24, r24
    1842:	91 50       	subi	r25, 0x01	; 1
    1844:	50 40       	sbci	r21, 0x00	; 0
    1846:	a9 f7       	brne	.-22     	; 0x1832 <__mulsf3_pse+0x64>
    1848:	9e 3f       	cpi	r25, 0xFE	; 254
    184a:	51 05       	cpc	r21, r1
    184c:	70 f0       	brcs	.+28     	; 0x186a <__mulsf3_pse+0x9c>
    184e:	60 cf       	rjmp	.-320    	; 0x1710 <__fp_inf>
    1850:	aa cf       	rjmp	.-172    	; 0x17a6 <__fp_szero>
    1852:	5f 3f       	cpi	r21, 0xFF	; 255
    1854:	ec f3       	brlt	.-6      	; 0x1850 <__mulsf3_pse+0x82>
    1856:	98 3e       	cpi	r25, 0xE8	; 232
    1858:	dc f3       	brlt	.-10     	; 0x1850 <__mulsf3_pse+0x82>
    185a:	86 95       	lsr	r24
    185c:	77 95       	ror	r23
    185e:	67 95       	ror	r22
    1860:	b7 95       	ror	r27
    1862:	f7 95       	ror	r31
    1864:	e7 95       	ror	r30
    1866:	9f 5f       	subi	r25, 0xFF	; 255
    1868:	c1 f7       	brne	.-16     	; 0x185a <__mulsf3_pse+0x8c>
    186a:	fe 2b       	or	r31, r30
    186c:	88 0f       	add	r24, r24
    186e:	91 1d       	adc	r25, r1
    1870:	96 95       	lsr	r25
    1872:	87 95       	ror	r24
    1874:	97 f9       	bld	r25, 7
    1876:	08 95       	ret

00001878 <__divmodhi4>:
    1878:	97 fb       	bst	r25, 7
    187a:	07 2e       	mov	r0, r23
    187c:	16 f4       	brtc	.+4      	; 0x1882 <__divmodhi4+0xa>
    187e:	00 94       	com	r0
    1880:	07 d0       	rcall	.+14     	; 0x1890 <__divmodhi4_neg1>
    1882:	77 fd       	sbrc	r23, 7
    1884:	09 d0       	rcall	.+18     	; 0x1898 <__divmodhi4_neg2>
    1886:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__udivmodhi4>
    188a:	07 fc       	sbrc	r0, 7
    188c:	05 d0       	rcall	.+10     	; 0x1898 <__divmodhi4_neg2>
    188e:	3e f4       	brtc	.+14     	; 0x189e <__divmodhi4_exit>

00001890 <__divmodhi4_neg1>:
    1890:	90 95       	com	r25
    1892:	81 95       	neg	r24
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	08 95       	ret

00001898 <__divmodhi4_neg2>:
    1898:	70 95       	com	r23
    189a:	61 95       	neg	r22
    189c:	7f 4f       	sbci	r23, 0xFF	; 255

0000189e <__divmodhi4_exit>:
    189e:	08 95       	ret

000018a0 <__tablejump2__>:
    18a0:	ee 0f       	add	r30, r30
    18a2:	ff 1f       	adc	r31, r31

000018a4 <__tablejump__>:
    18a4:	05 90       	lpm	r0, Z+
    18a6:	f4 91       	lpm	r31, Z
    18a8:	e0 2d       	mov	r30, r0
    18aa:	09 94       	ijmp

000018ac <__umulhisi3>:
    18ac:	a2 9f       	mul	r26, r18
    18ae:	b0 01       	movw	r22, r0
    18b0:	b3 9f       	mul	r27, r19
    18b2:	c0 01       	movw	r24, r0
    18b4:	a3 9f       	mul	r26, r19
    18b6:	70 0d       	add	r23, r0
    18b8:	81 1d       	adc	r24, r1
    18ba:	11 24       	eor	r1, r1
    18bc:	91 1d       	adc	r25, r1
    18be:	b2 9f       	mul	r27, r18
    18c0:	70 0d       	add	r23, r0
    18c2:	81 1d       	adc	r24, r1
    18c4:	11 24       	eor	r1, r1
    18c6:	91 1d       	adc	r25, r1
    18c8:	08 95       	ret

000018ca <__udivmodhi4>:
    18ca:	aa 1b       	sub	r26, r26
    18cc:	bb 1b       	sub	r27, r27
    18ce:	51 e1       	ldi	r21, 0x11	; 17
    18d0:	07 c0       	rjmp	.+14     	; 0x18e0 <__udivmodhi4_ep>

000018d2 <__udivmodhi4_loop>:
    18d2:	aa 1f       	adc	r26, r26
    18d4:	bb 1f       	adc	r27, r27
    18d6:	a6 17       	cp	r26, r22
    18d8:	b7 07       	cpc	r27, r23
    18da:	10 f0       	brcs	.+4      	; 0x18e0 <__udivmodhi4_ep>
    18dc:	a6 1b       	sub	r26, r22
    18de:	b7 0b       	sbc	r27, r23

000018e0 <__udivmodhi4_ep>:
    18e0:	88 1f       	adc	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	5a 95       	dec	r21
    18e6:	a9 f7       	brne	.-22     	; 0x18d2 <__udivmodhi4_loop>
    18e8:	80 95       	com	r24
    18ea:	90 95       	com	r25
    18ec:	bc 01       	movw	r22, r24
    18ee:	cd 01       	movw	r24, r26
    18f0:	08 95       	ret

000018f2 <__eerd_word_m16a>:
    18f2:	a8 e1       	ldi	r26, 0x18	; 24
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	42 e0       	ldi	r20, 0x02	; 2
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__eerd_blraw_m16a>

000018fe <__eewr_word_m16a>:
    18fe:	0e 94 94 0c 	call	0x1928	; 0x1928 <__eewr_byte_m16a>
    1902:	27 2f       	mov	r18, r23
    1904:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__eewr_r18_m16a>

00001908 <__eerd_block_m16a>:
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22

0000190c <__eerd_blraw_m16a>:
    190c:	fc 01       	movw	r30, r24
    190e:	e1 99       	sbic	0x1c, 1	; 28
    1910:	fe cf       	rjmp	.-4      	; 0x190e <__eerd_blraw_m16a+0x2>
    1912:	06 c0       	rjmp	.+12     	; 0x1920 <__eerd_blraw_m16a+0x14>
    1914:	ff bb       	out	0x1f, r31	; 31
    1916:	ee bb       	out	0x1e, r30	; 30
    1918:	e0 9a       	sbi	0x1c, 0	; 28
    191a:	31 96       	adiw	r30, 0x01	; 1
    191c:	0d b2       	in	r0, 0x1d	; 29
    191e:	0d 92       	st	X+, r0
    1920:	41 50       	subi	r20, 0x01	; 1
    1922:	50 40       	sbci	r21, 0x00	; 0
    1924:	b8 f7       	brcc	.-18     	; 0x1914 <__eerd_blraw_m16a+0x8>
    1926:	08 95       	ret

00001928 <__eewr_byte_m16a>:
    1928:	26 2f       	mov	r18, r22

0000192a <__eewr_r18_m16a>:
    192a:	e1 99       	sbic	0x1c, 1	; 28
    192c:	fe cf       	rjmp	.-4      	; 0x192a <__eewr_r18_m16a>
    192e:	9f bb       	out	0x1f, r25	; 31
    1930:	8e bb       	out	0x1e, r24	; 30
    1932:	2d bb       	out	0x1d, r18	; 29
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	e2 9a       	sbi	0x1c, 2	; 28
    193a:	e1 9a       	sbi	0x1c, 1	; 28
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	08 95       	ret

00001942 <_exit>:
    1942:	f8 94       	cli

00001944 <__stop_program>:
    1944:	ff cf       	rjmp	.-2      	; 0x1944 <__stop_program>
