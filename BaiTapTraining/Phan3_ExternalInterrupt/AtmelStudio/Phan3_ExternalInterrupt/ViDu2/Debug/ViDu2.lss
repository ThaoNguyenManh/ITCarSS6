
ViDu2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001a4  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000c7  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007f  00000000  00000000  000002cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000e5  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000007c  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000195  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ac  00000000  00000000  00000641  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000006ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_1>
   8:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
volatile int8_t led = 0;

int main(void)
{
	// Khoi tao chan ra LED
	DDRA = 0xff;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000001;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	8b bb       	out	0x1b, r24	; 27
	
	// Khoi tao Interrupt
	DDRD &= 0b11110011;
  84:	81 b3       	in	r24, 0x11	; 17
  86:	83 7f       	andi	r24, 0xF3	; 243
  88:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00001100;
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	82 bb       	out	0x12, r24	; 18
	MCUCR |= (1 << CS00) | (1 << CS01) | (1 << CS10) | (1 << CS11);
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	83 60       	ori	r24, 0x03	; 3
  92:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0) | (1 << INT1);
  94:	8b b7       	in	r24, 0x3b	; 59
  96:	80 6c       	ori	r24, 0xC0	; 192
  98:	8b bf       	out	0x3b, r24	; 59
	sei();
  9a:	78 94       	sei
  9c:	ff cf       	rjmp	.-2      	; 0x9c <main+0x20>

0000009e <__vector_1>:
        //TODO:: Please write your application code 
    }
}

ISR(INT0_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
	if (++led > 7) led = 0;
  ae:	80 91 60 00 	lds	r24, 0x0060
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 60 00 	sts	0x0060, r24
  b8:	88 30       	cpi	r24, 0x08	; 8
  ba:	14 f0       	brlt	.+4      	; 0xc0 <__vector_1+0x22>
  bc:	10 92 60 00 	sts	0x0060, r1
	PORTA = 1 << led;
  c0:	20 91 60 00 	lds	r18, 0x0060
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <__vector_1+0x30>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	2a 95       	dec	r18
  d0:	e2 f7       	brpl	.-8      	; 0xca <__vector_1+0x2c>
  d2:	8b bb       	out	0x1b, r24	; 27
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_2>:

ISR(INT1_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	if (--led < 0) led = 7;
  f4:	80 91 60 00 	lds	r24, 0x0060
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	80 93 60 00 	sts	0x0060, r24
  fe:	88 23       	and	r24, r24
 100:	1c f4       	brge	.+6      	; 0x108 <__vector_2+0x24>
 102:	87 e0       	ldi	r24, 0x07	; 7
 104:	80 93 60 00 	sts	0x0060, r24
	PORTA = 1 << led;
 108:	20 91 60 00 	lds	r18, 0x0060
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <__vector_2+0x32>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	2a 95       	dec	r18
 118:	e2 f7       	brpl	.-8      	; 0x112 <__vector_2+0x2e>
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
