
ViDu1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000090  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000005a  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000055  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000048  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016b  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000049  00000000  00000000  0000044f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_9>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>

int main(void)
{
	// Khoi tao chan ra
	sbi(DDRD, 1);
  6c:	89 9a       	sbi	0x11, 1	; 17
	cbi(PORTD, 1);
  6e:	91 98       	cbi	0x12, 1	; 18
	 * --------- x (255 - TCNT) = 0.001s
	 *  8000000
	 * 
	 * => TCNT = 130
	 */
	TCCR0 = (1 << CS01) | (1 << CS00); // Prescale = 64
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 130;
  74:	82 e8       	ldi	r24, 0x82	; 130
  76:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1 << TOIE0);
  78:	89 b7       	in	r24, 0x39	; 57
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	89 bf       	out	0x39, r24	; 57
	sei();
  7e:	78 94       	sei
  80:	ff cf       	rjmp	.-2      	; 0x80 <main+0x14>

00000082 <__vector_9>:
        //TODO:: Please write your application code 
    }
}

ISR(TIMER0_OVF_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
	TCNT0 = 130;
  90:	82 e8       	ldi	r24, 0x82	; 130
  92:	82 bf       	out	0x32, r24	; 50
	PORTD ^= 0b00000010;
  94:	92 b3       	in	r25, 0x12	; 18
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	89 27       	eor	r24, r25
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
